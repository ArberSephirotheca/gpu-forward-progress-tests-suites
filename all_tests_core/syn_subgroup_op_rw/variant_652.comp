#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -41689)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, sin(0.0)))) > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? _GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])) : _GLF_FUZZED(2776.9169))), injectionSwitch[1])).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)), (((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))) ^ 0u) - 0u) | (_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID))) << uvec3(0u, 0u, 0u)).x) >> 0u), (gl_WorkGroupID.x) | (gl_WorkGroupID.x))))), gl_WorkGroupID.x))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3((injectionSwitch) * mat2(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + 0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 0.0))), 0.0, 1.0)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), max(_GLF_IDENTITY((0), ((0)) << 0), (0))))), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_size)) * workgroup_id, 0u | (workgroup_size * workgroup_id))) * ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), min((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_size)) * workgroup_id, 0u | (workgroup_size * workgroup_id))) * ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_size)) * workgroup_id, 0u | (workgroup_size * workgroup_id))) * ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_size)) * workgroup_id, 0u | (workgroup_size * workgroup_id))) * ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_size)) * workgroup_id, 0u | (workgroup_size * workgroup_id))) * ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) || (false)), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) || (false)), false, true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) || (false)), false, true))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) || (false)), false, true))), false)), false)))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uint(workgroup_base)), (uint(uint(workgroup_base))) | 0u)) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, uint(uint(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ (workgroup_base)), 1u * (_GLF_IDENTITY((~ (workgroup_base)), ~ (~ ((~ (workgroup_base))))))))))) + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), min(uint(subgroup_size), uint(subgroup_size)))) / 1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, (_GLF_IDENTITY((uint(subgroup_size)) | 0u, min((uint(subgroup_size)) | 0u, (uint(subgroup_size)) | 0u))) | ((uint(subgroup_size)) | 0u))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u))), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), uint(subgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | (_GLF_IDENTITY(uint(subgroup_size), clamp(uint(subgroup_size), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (false ? _GLF_FUZZED(subgroup_local_id) : uint(subgroup_size)))))))) | 0u), (true ? _GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | (_GLF_IDENTITY(uint(subgroup_size), clamp(uint(subgroup_size), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (false ? _GLF_FUZZED(subgroup_local_id) : uint(subgroup_size)))))))) | 0u) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)), clamp(clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | (0u))), (uint(_GLF_IDENTITY(0u, (0u) | (0u)))) << 0u))))), ~ (~ (_GLF_IDENTITY((uint(subgroup_size)) | 0u, clamp(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, (false ? _GLF_FUZZED(workgroup_size) : (uint(subgroup_size)) | 0u)), (uint(subgroup_size)) | 0u)))))), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> (0u << _GLF_IDENTITY(uint(1u), uint(1u))))) | 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) << 0u), uint(subgroup_size), uint(subgroup_size))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(~ (~ (uint(subgroup_size))), (~ (~ (uint(subgroup_size)))) * 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_IDENTITY(uint(subgroup_size), ~ _GLF_IDENTITY((~ (uint(subgroup_size))), ((~ (uint(subgroup_size)))) | ((~ (uint(subgroup_size))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), ~ (~ (uint(subgroup_size)))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(subgroup_size), ~ _GLF_IDENTITY((~ (uint(subgroup_size))), ((~ (uint(subgroup_size)))) | ((~ (uint(subgroup_size))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), ~ (~ (uint(subgroup_size)))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(subgroup_size), ~ _GLF_IDENTITY((~ (uint(subgroup_size))), ((~ (uint(subgroup_size)))) | ((~ (uint(subgroup_size))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(subgroup_size), ~ _GLF_IDENTITY((~ (uint(subgroup_size))), ((~ (uint(subgroup_size)))) | ((~ (uint(subgroup_size)))))))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), uint(_GLF_IDENTITY(uvec2((uint(subgroup_size)), 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2((uint(subgroup_size)), 0u), (uvec2((uint(subgroup_size)), 0u)) + uvec2(0u, 0u))), uvec2(0u, 0u) | (~ (_GLF_IDENTITY(uvec2((uint(subgroup_size)), 0u), (uvec2((uint(subgroup_size)), 0u)) + uvec2(0u, 0u))))))))) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (0u ^ 0u) ^ (~ (subgroup_size)))))), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), _GLF_IDENTITY((uint(subgroup_size)) | 0u, (true ? (uint(subgroup_size)) | 0u : _GLF_FUZZED(subgroup_local_id)))), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ~ (~ ((uint(subgroup_size)) | 0u))), min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ~ (~ ((uint(subgroup_size)) | 0u))), _GLF_IDENTITY((uint(subgroup_size)) | 0u, ~ (~ ((uint(subgroup_size)) | 0u)))))), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) << 0u)) | (_GLF_IDENTITY(uint(subgroup_size), uint(uvec2(uint(subgroup_size), 0u))))), _GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), min(uint(4u), uint(4u))), uint(4u))))), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_size))), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))))))), _GLF_IDENTITY(clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)), (clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))) << 0u)), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) + 0u))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), uint(subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)))) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(subgroup_size), (false ? _GLF_FUZZED(subgroup_local_id) : uint(subgroup_size))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (false ? _GLF_FUZZED(virtual_gid) : uint(subgroup_size)))) << 0u), uint(subgroup_size))), _GLF_IDENTITY((uint(subgroup_size)), 0u | ((uint(subgroup_size)))) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, ~ (~ ((uint(subgroup_size)) | 0u)))), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), 1u * (uint(subgroup_size)))) | 0u), _GLF_IDENTITY(clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)), min(clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, uint(uint((uint(subgroup_size)) | 0u)))))), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base)), 0u ^ ((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, uint(uint((uint(subgroup_size)) | 0u)))))), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base))))), max(~ (_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, uint(uint((uint(subgroup_size)) | 0u)))))), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base)), 0u ^ ((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, uint(uint((uint(subgroup_size)) | 0u)))))), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base))))), ~ (_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, uint(uint((uint(subgroup_size)) | 0u)))))), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base)), 0u ^ ((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) | 0u, min(_GLF_IDENTITY((uint(subgroup_size)) | 0u, ((uint(subgroup_size)) | 0u) - 0u), _GLF_IDENTITY((uint(subgroup_size)) | 0u, uint(uint((uint(subgroup_size)) | 0u)))))), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base))))))), (~ ((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true))))) ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ _GLF_IDENTITY(0u, (0u) ^ 0u))), (uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | 0u))) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (uint(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ _GLF_IDENTITY(0u, (0u) ^ 0u))), (uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | 0u))) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (uint(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ _GLF_IDENTITY(0u, (0u) ^ 0u))))))) | 0u) | 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_IDENTITY(uvec4((uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec4((uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) + uvec4(0u, 0u, 0u, 0u))))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_IDENTITY(_GLF_FUZZED((9660.8989 * 7.5)), (false ? _GLF_FUZZED(-290.794) : _GLF_FUZZED((9660.8989 * 7.5))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x))), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), clamp(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, _GLF_IDENTITY(1u, (1u) / (1u & 1u))), uvec3(uint(subgroup_size), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, uint(uvec3(1u, 1u, 0u))) : _GLF_FUZZED(packSnorm2x16(vec2(-26.98, 9.9)))))), uvec3(uint(subgroup_size), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u))))))))))) : _GLF_FUZZED(workgroup_base))), (((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_FUZZED((9660.8989 * 7.5))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x))), uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), clamp(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u))))))))), (_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(subgroup_size), ~ (~ (uint(subgroup_size)))), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))), clamp(uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), (false ? _GLF_FUZZED(uvec3(41309u, 730u, 99227u)) : uvec3(uint(subgroup_size), 1u, 1u))), uvec3(uint(subgroup_size), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) ^ 0u)), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(subgroup_size), 1u, 1u), max(uvec3(uint(subgroup_size), 1u, 1u), uvec3(uint(subgroup_size), 1u, 1u)))))))))) - 0u))) : _GLF_FUZZED(workgroup_base)))) << 0u), (~ ((true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base)))) - 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, max(0u, 0u))))), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ (0u ^ 0u))) | 0u, ((uint(subgroup_size)) | 0u) + 0u)), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> 0u), (uint(subgroup_size)) | 0u), uint(subgroup_size), uint(subgroup_size))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), uint(subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), 0u | (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u))) - 0u)), uint(subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY((subgroup_size) - 0u, clamp(_GLF_IDENTITY((subgroup_size) - 0u, (true ? (subgroup_size) - 0u : _GLF_FUZZED(subgroup_id))), (subgroup_size) - 0u, (subgroup_size) - 0u)))), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), uint(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) - 0u, (_GLF_IDENTITY((subgroup_size) - 0u, max((subgroup_size) - 0u, (subgroup_size) - 0u))) | ((subgroup_size) - 0u)))), uint(subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), uint(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))))))) ^ 0u))))))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), clamp(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (min(subgroup_local_id, subgroup_local_id)))) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1), max((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1), (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1)))) | 0u)) - 0u) | 0u)) % subgroup_size)));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec4(64, 0, _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, clamp(1, 1, 1))), 0), ivec4(0, 0, 0, 0) | (ivec4(64, 0, _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, clamp(1, 1, 1))), 0))))), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))), 4, _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), (~ (64)) | 0))), 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, (0u ^ 1u)), uvec4(1u, 1u, _GLF_IDENTITY(1u, (1u) + 0u), 1u) * (uvec4(subgroup_local_id + 1, 0u, 1u, (0u ^ 1u)))))) < _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), float(mat4x2(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), float(_GLF_IDENTITY(vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0), clamp(vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0), vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0), clamp(vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0), vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0), vec4(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-23.73)), bool(false)))), 1.0, 1.0, 1.0))))))), length(sin(0.0)), 0.0, sqrt(0.0), 1.0, 0.0, tan(0.0), 0.0))), (float(injectionSwitch.x)) / 1.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(43.76)), min(float(_GLF_IDENTITY(_GLF_FUZZED(43.76), max(_GLF_FUZZED(43.76), _GLF_FUZZED(43.76)))), float(_GLF_FUZZED(43.76)))), bool(false))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true, true)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(exp(0.0), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(exp(0.0), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x))), max(dot(vec3(0.0, 0.0, 1.0), vec3(exp(0.0), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec3(0.0, 0.0, 1.0), vec3(exp(0.0), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat2x3(10.79, 584.226, 8.8, 951.471, -86.39, -3306.4484)) : mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat2x3(10.79, 584.226, 8.8, 951.471, -86.39, -3306.4484)) : mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat2x3(10.79, 584.226, 8.8, 951.471, -86.39, -3306.4484)) : mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false)))))))) || false)))))), true, true)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true)), ! (! (bool(bvec4(false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true)), true, true))))))))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.0)), bool(false)))) - 0.0) > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 1.0, 0.0)))))), (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(58.94)), bool(false))) : _GLF_FUZZED(-225.348))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))), true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false)), bool(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, ! (! (false))))) || false)));
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), bool(bvec3(_GLF_IDENTITY(! (_injected_loop_counter < 1), (! (_injected_loop_counter < 1)) && true), true, false)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0))))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), true, false, true))))), _GLF_IDENTITY(bool(bvec2(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))))), true, false, true)), true)), bool(bvec3(bool(bvec2(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))))), true, false, true)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(injectionSwitch, exp(0.0)))))).x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (true)))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (true)))), false)))) && (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(false, (false) && true)) && true), true, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), _GLF_IDENTITY(bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))), ! (_GLF_IDENTITY(! (! (bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true)))), false || (! (! (bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))))))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))), true, false)), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), bool(bvec4(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false), false, true))))))), false, true, true))))), true, false)), false))))), true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 1.0), (mat2(injectionSwitch.x, 1.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 1.0), (mat2(injectionSwitch.x, 1.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)) && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * vec2(1.0, 1.0)))), 0.0, cos(0.0), 0.0, determinant(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(9.7)), bool(false))))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((true ? -2.3 : -6.8))), float(1.0), bool(true)))), float(_GLF_FUZZED(22.14)), bool(false))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), max(float(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? dot(vec2(0.0, 1.0), vec2(0.0, 1.0)) : _GLF_FUZZED(94.46))), dot(vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0), vec2(0.0, 1.0))), 0.0, cos(0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), float(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), mat2(1.0) * (vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))).x, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, cos(0.0), 0.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(pow(-9.3, -1.9)) : 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), mat4(1.0) * (mat4(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ZERO(_GLF_IDENTITY(0.0, log(1.0) + (0.0)), injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), transpose(transpose(transpose(_GLF_IDENTITY(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -2.3)), _GLF_FUZZED(-3.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), mat4(1.0) * (mat4(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), (true ? max(0.0, 0.0) : _GLF_FUZZED(6138.8490)))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))))))))))) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) ^ _GLF_IDENTITY(0, (0) + (0 >> _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false)), false || (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), virtual_gid))], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) | (4)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6546.2124)), float(injectionSwitch.y), bool(true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) * (injectionSwitch)))).y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
       return;
      }
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), (true && (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), 0.0, 0.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), (false ? _GLF_FUZZED(-165.457) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : 0.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, 1.0, sin(_GLF_IDENTITY(0.0, (0.0) / 1.0)))))))) < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), (true && (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), 0.0, 0.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), (false ? _GLF_FUZZED(-165.457) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : 0.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, 1.0, sin(_GLF_IDENTITY(0.0, (0.0) / 1.0)))))))) < injectionSwitch.y)))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), (true && (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), 0.0, 0.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), (false ? _GLF_FUZZED(-165.457) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : 0.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, 1.0, sin(_GLF_IDENTITY(0.0, (0.0) / 1.0)))))))) < injectionSwitch.y)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), (true && (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), 0.0, 0.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), (false ? _GLF_FUZZED(-165.457) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : 0.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, 1.0, sin(_GLF_IDENTITY(0.0, (0.0) / 1.0)))))))) < injectionSwitch.y)))), true), false, false))), false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                return;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(73.39) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-58648) : 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(993.743, 9.9)))).x > injectionSwitch.y))), true)))))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * 1), (false ? _GLF_FUZZED(18443) : _GLF_IDENTITY(int(4), (int(4)) * 1))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) | 0, max((0 << _GLF_IDENTITY(int(5), int(5))) | 0, (0 << _GLF_IDENTITY(int(5), int(5))) | 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, false), bvec3(bvec4(bvec3(_injected_loop_counter < 1, true, false), false)))), true && (bool(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, false), bvec3(bvec4(bvec3(_injected_loop_counter < 1, true, false), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, false), bvec3(bvec4(bvec3(_injected_loop_counter < 1, true, false), false))))))))), true))), false)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false, false))), (false) && _GLF_IDENTITY(true, (true) && true))))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 0.0), _GLF_IDENTITY((vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(_GLF_FUZZED(vec4(-16.02, -1.5, -43.44, -8.2).q), ((vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(((vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_FUZZED(8388.1885)), bvec2(true, false)))))) > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(57.28) : 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0)), (false ? _GLF_FUZZED(-8.4) : float(mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(57.28) : 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0)))))), float(_GLF_FUZZED(-6427.2689)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y)), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y)), false)))))), ((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(57.28) : 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0)), (false ? _GLF_FUZZED(-8.4) : float(mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(57.28) : 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0)))))), float(_GLF_FUZZED(-6427.2689)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y)), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y)), false))))))) && true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, sqrt(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0)), (float(mat4x2(injectionSwitch.x, 0.0, sqrt(0.0), round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 0.0))) / 1.0)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
