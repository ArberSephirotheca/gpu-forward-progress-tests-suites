#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(934.821))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(934.821))) > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 1 * (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
    {
     atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64))))), 4);
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupAll(false);
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     switch(_GLF_SWITCH((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(64158) : _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 0)), ~ (~ (int(ivec4(1, 1, 1, 0)))))))))) + _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), min(ivec2(0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), ivec2(0, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))))))))), (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0)) : _GLF_FUZZED(-65033))))))
      {
       case 24:
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.4, _GLF_IDENTITY(549.214, mix(float(549.214), float(_GLF_FUZZED(-4.5)), bool(false))))) : injectionSwitch)).x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))), _GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))), bool(bool(false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true)))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), length(0.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, log(1.0), 1.0)), tan(0.0), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 1.0 * (float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), length(0.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, log(1.0), 1.0)), tan(0.0), abs(0.0), 0.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       uvec2 _GLF_SWITCH_0_0v[47], _GLF_SWITCH_0_1v;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       case 21:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (false)))), (! _GLF_IDENTITY((_GLF_IDENTITY(false || (false), true && (false || (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false || (false), true && (false || (false)))), bool(bvec2((_GLF_IDENTITY(false || _GLF_IDENTITY((false), false || ((false))), true && (false || (false)))), true))), false, false, false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false || (false), _GLF_IDENTITY(true, (true) || false) && (false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), bool(bvec2((_GLF_IDENTITY(false || (false), _GLF_IDENTITY(true && (false || (false)), _GLF_IDENTITY(bool(bvec4(true && (false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(true && (false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, true)))))), true))), false, false, false))) || false))) && true)))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false))), false, true, false)))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(false)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 uint _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[51], _GLF_SWITCH_0_4v;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 (mat4x2(-6059.6860, 972.302, 369.383, 2.9, -93.98, 4104.7410, 0.6, -25.51) * vec4(34.40, -8.2, 6.9, 5180.3632));
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                continue;
                               if(_GLF_DEAD(false))
                                break;
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          return;
                         mat3x2(29.68, -1586.1370, -13.72, -7778.7978, 3.8, -81.39);
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       do
                        {
                         mat2(2.7, -3.4, -8761.0707, -5585.3098);
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                     mat4x3 _GLF_SWITCH_0_5v;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         else
                          {
                           ;
                          }
                        }
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               break;
                              }
                             do
                              {
                               (26.28 + vec3(_GLF_IDENTITY(3164.5253, clamp(3164.5253, 3164.5253, 3164.5253)), -5.8, 566.727));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                     (bvec4(false, false, true, false) == bvec4(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false, true));
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             break;
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 while(true)
                                  {
                                   ;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0)))), clamp(_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0)))), ~ (~ (((1 | _GLF_IDENTITY(1, clamp(1, 1, 1))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(_GLF_IDENTITY(0, (0) << 0)), int(0))))))), _GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0)))), (((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0))))) | (((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), 1, 0, 0)), min(int(ivec4(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), 1, 0, 0)), int(ivec4(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), 1, 0, 0))))), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))), _GLF_IDENTITY(max(int(0), int(0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (max(int(0), int(0)))))))), _GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0)))), min(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0)))), ((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), max(int(0), int(0))))))))), (true ? (((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) : _GLF_FUZZED((+ _injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(false)
                        {
                         bvec4 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                         bvec2 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                           ;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         vec3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             break;
                            }
                           do
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, _GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, false))) && true, false || ((bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, false))) && true))))))))
                                return;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          break;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                         vec4 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v[19];
                         ;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             continue;
                            }
                           clamp(uvec4(20591u, 96144u, 22922u, 56211u), uvec4(150905u, _GLF_SWITCH_0_4v, next_virtual_gid, 18219u), (uvec4(135515u, _GLF_IDENTITY(148677u, (_GLF_IDENTITY(_GLF_IDENTITY(148677u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(148677u, 0u, 1u), max(uvec3(148677u, 0u, 1u), uvec3(148677u, 0u, 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(148677u, 0u, 1u), max(uvec3(148677u, 0u, 1u), uvec3(148677u, 0u, 1u)))), (uint(_GLF_IDENTITY(uvec3(148677u, 0u, 1u), max(uvec3(148677u, 0u, 1u), uvec3(148677u, 0u, 1u))))) << 0u)) | 0u)), (_GLF_IDENTITY(148677u, uint(uvec3(148677u, 0u, 0u)))) / 1u)) - 0u), 26354u, 167308u) & _GLF_IDENTITY(uvec4(152739u, 77446u, 91145u, 45898u), (_GLF_IDENTITY(uvec4(152739u, 77446u, 91145u, 45898u), (uvec4(152739u, 77446u, 91145u, 45898u)) - uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u))));
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        return;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                       break;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       ;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         else
                          {
                           return;
                          }
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                          break;
                         do
                          {
                           do
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(false))
                                break;
                               do
                                {
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bool(false))))))))
                        break;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.4)), vec2(_GLF_FUZZED(7.6), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))))).y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 94157;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   uvec2(30271u, 36204u);
                  }
                 if(false)
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) * 1)))) != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     do
                      {
                       vec3 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[27];
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                         (mat4x3(0.4, 0.7, -4.0, 2707.8796, -4.8, _GLF_IDENTITY(-1.0, clamp(-1.0, -1.0, _GLF_IDENTITY(-1.0, clamp(-1.0, _GLF_IDENTITY(-1.0, (false ? _GLF_FUZZED(2.9) : -1.0)), -1.0)))), 8.1, -0.9, -21.29, 4.3, -7270.1555, -897.396) * mat2x4(_GLF_IDENTITY(-5.2, 1.0 * (_GLF_IDENTITY(-5.2, (-5.2) - 0.0))), 8651.2889, -9673.4790, -4766.9100, 283.819, -2.9, -1.2, 3.5));
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          continue;
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   bvec2(true, false);
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(7.2), _GLF_FUZZED(-580.120)), bvec2(false, false))))).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-821.858), _GLF_FUZZED(1414.2469)), bvec2(false, false)))) * mat2(1.0)).y)))))));
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                            break;
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                       ivec3 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while((false || false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     ;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       uvec3(165947u, 95240u, 149837u);
                      }
                     vec2 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v;
                     mat2 _GLF_SWITCH_0_24v[6], _GLF_SWITCH_0_25v[99];
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) ^ 0)); _injected_loop_counter ++)
                          {
                           ivec2(-37684, -37019);
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   vec2 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.8)))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       mat2x4(6634.5142);
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   mat3x2 _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v[97], _GLF_SWITCH_0_30v[96];
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(true)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           while((_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(72042u, clamp(72042u, 72042u, 72042u)), 59709u), _GLF_IDENTITY(uvec2(uvec2(uvec2(_GLF_IDENTITY(72042u, clamp(72042u, 72042u, 72042u)), 59709u))), (uvec2(uvec2(uvec2(_GLF_IDENTITY(72042u, clamp(72042u, 72042u, 72042u)), 59709u)))) * uvec2(1u, 1u))), (uvec2(72042u, 59709u)) | (uvec2(72042u, 59709u))) != _GLF_SWITCH_0_1v))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                            }
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if((subgroup_local_id != (false ? (156208u) : next_virtual_gid)))
                      {
                       uvec3(76079u, 21831u, 83993u);
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         ;
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true)))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true)))) || false), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true)))) || false))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                              {
                               return;
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
                          continue;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                 break;
                                }
                               continue;
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_DEAD(false))
                                return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                     return;
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                             ivec2(-92788, -31567);
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         while(true)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if(_GLF_DEAD(false))
                              continue;
                             min(-80.53, 73.95);
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                     do
                      {
                       true;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     ;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     uvec3 _GLF_SWITCH_0_31v[52], _GLF_SWITCH_0_32v[10], _GLF_SWITCH_0_33v;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 ivec2 _GLF_SWITCH_0_34v;
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0) & (~ -54903)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                            break;
                           break;
                          }
                         mat4 _GLF_SWITCH_0_35v;
                         uvec2(57286u, 69850u);
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, true && (false)), false, false)))))
                              continue;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
                                return;
                               break;
                              }
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if(_GLF_DEAD(false))
                              break;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            break;
                           do
                            {
                             ivec3(61215, -25621, -28182);
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                break;
                               continue;
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                         mat3(-181.545, -5741.0940, 7.3, 260.500, -2.3, 1.5, -481.932, -5399.7142, 8809.5253);
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               do
                                {
                                 mat2(_GLF_IDENTITY(9.5, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) ? _GLF_IDENTITY(9.5, float(mat2x4(_GLF_IDENTITY(9.5, (9.5) * 1.0), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, abs(0.0), 1.0))) : _GLF_FUZZED(float(workgroup_size)))), 32.06, 135.010, -3.2);
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(false))
                                break;
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                          continue;
                         bvec3 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v;
                        }
                       while(true);
                       if(_GLF_DEAD(false))
                        continue;
                       ivec3(-83610, 91341, 3609);
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(false)
                            {
                             _GLF_IDENTITY(uvec2(_GLF_IDENTITY(136921u, (true ? 136921u : _GLF_FUZZED(subgroup_local_id))), 23743u), (uvec2(136921u, 23743u)) | uvec2(0u, 0u)).yyx;
                             not(bvec2(true, false));
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                               continue;
                              }
                             (uvec4(9889u, _GLF_IDENTITY(84898u, (84898u) ^ 0u), 99824u, 102833u) + next_virtual_gid);
                             bvec3 _GLF_SWITCH_0_38v;
                            }
                           else
                            {
                             int _GLF_SWITCH_0_39v;
                             mat2 _GLF_SWITCH_0_40v, _GLF_SWITCH_0_41v, _GLF_SWITCH_0_42v;
                             do
                              {
                               if(_GLF_DEAD(false))
                                return;
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                     -74.76;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 continue;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 (vec3(-51.91, -4.6, -56.36) * mat3(6.8, -255.345, 692.110, 2.0, 785.561, 8733.5634, -0.1, 487.533, -6429.9067));
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                          }
                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, true && (false)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, true && (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       vec2 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v;
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))))))));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       uvec3 _GLF_SWITCH_0_45v[55], _GLF_SWITCH_0_46v, _GLF_SWITCH_0_47v;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, false || (false)))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(ldexp(injectionSwitch, _GLF_SWITCH_0_34v), injectionSwitch, vec2(-3.3, 3.9))))).y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 _GLF_IDENTITY(uvec4(158377u, 124727u, 76397u, 80002u), (uvec4(158377u, 124727u, 76397u, 80002u)) << uvec4(0u, 0u, 0u, 0u));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       case 0:
       if(_GLF_DEAD(false))
        return;
       case 46:
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[virtual_gid], read, 4, 64, 4);
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       case 84:
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             subgroupAll(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) || false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 88:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       mat3x2 _GLF_SWITCH_0_48v, _GLF_SWITCH_0_49v[13], _GLF_SWITCH_0_50v;
       case 45:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           return;
          }
        }
       bool _GLF_SWITCH_0_51v, _GLF_SWITCH_0_52v, _GLF_SWITCH_0_53v[55];
       default:
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (40590 & 0) ^ (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(1)))) | 0))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         1;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
}
