#version 460
struct _GLF_struct_1 {
 mat2x3 _f0;
 mat4x3 _f1;
 uint workgroup_base;
 ivec3 _f2;
 uint _f3;
 bvec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_2 {
 bool _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_3 {
 bool _f0;
 uvec2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(true, uvec2(1u), _GLF_struct_0(uvec4(1u), ivec3(1)), _GLF_struct_2(true, _GLF_struct_1(mat2x3(1.0), mat4x3(1.0), workgroup_size * workgroup_id, ivec3(1), 1u, bvec3(true), mat4(1.0))));
 uint virtual_gid = _GLF_struct_replacement_3._f3._f1.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_3._f3._f1.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
