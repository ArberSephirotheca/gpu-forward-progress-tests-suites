#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) > injectionSwitch.y))))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), (0 ^ 0) + (int(3)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-5621) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)).x));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-12597) : int(1))))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-12597) : int(1)))))) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id)) + 1)) | 0u)), min(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ (subgroup_local_id + 1), uint(uvec2(~ (subgroup_local_id + 1), 0u))), ~ (subgroup_local_id + 1))))))) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ (subgroup_local_id + 1), uint(uvec2(~ (subgroup_local_id + 1), 0u))), ~ (subgroup_local_id + 1))))))) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0u + ((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ (subgroup_local_id + 1), uint(uvec2(~ (subgroup_local_id + 1), 0u))), ~ (subgroup_local_id + 1))))))) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u) ^ (uvec3((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)), (0u ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))) / 1u) ^ 0u)), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))))) >> 0u), (true ? _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) | (subgroup_local_id + 1)))))) >> 0u) : _GLF_FUZZED(subgroup_local_id)))) | (subgroup_local_id + 1))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u))), (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u)))) | (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u)))))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(uint(uvec4(((subgroup_local_id + 1)), 1u, 1u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))), (uint(uvec4(((subgroup_local_id + 1)), 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u)) | 0u))), 0u, 1u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), (0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)))) + 0u), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), (true ? _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))))) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(155687u) : 0u)) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), 0u, 1u)), (uint(uvec3(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))), 0u, 1u))) << 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), uint(uvec4(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 0u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))) | (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), ((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), uint(uint((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))))), 0u)))))), 0u, 1u))) << _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint(uvec3(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(uint(uvec4(((subgroup_local_id + 1)), 1u, 1u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))), (uint(uvec4(((subgroup_local_id + 1)), 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u)) | 0u))), 0u, 1u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), (0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)))) + 0u), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), (true ? _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))))) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(155687u) : 0u)) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), 0u, 1u)), (uint(uvec3(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))), 0u, 1u))) << 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), uint(uvec4(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 0u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))) | (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), ((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), uint(uint((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))))), 0u)))))), 0u, 1u))) << _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(workgroup_base))))) | (_GLF_IDENTITY(uint(uvec3(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(uint(uvec4(((subgroup_local_id + 1)), 1u, 1u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))), (uint(uvec4(((subgroup_local_id + 1)), 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u)) | 0u))), 0u, 1u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), (0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)))) + 0u), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), (true ? _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))))) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(155687u) : 0u)) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), 0u, 1u)), (uint(uvec3(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))), 0u, 1u))) << 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), uint(uvec4(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), clamp(0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))), 0u | (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 0u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))) | (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), ((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u)), uint(uint((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) << 0u) | 0u))))), 0u)))))), 0u, 1u))) << _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(workgroup_base)))))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (0u & 70224u) + (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)))) + (subgroup_local_id))))), subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), (_GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) >> 0u)) ^ 0u)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id)), subgroup_local_id)) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), min(subgroup_local_id + 1, subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) * 1u))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), min(subgroup_local_id + 1, subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) * 1u))))), (0u ^ 0u))))) | 0u)))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(64, 64)), 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(subgroup_local_id + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))) < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, (true) && true), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, (true) && true), false), true))))))))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(1, min(1, 1)) * (4))))) | (4)));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450))), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), float(mat2x4(float(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450))), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450)))) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450)), float(mat3x2((true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450)), tan(0.0), abs(0.0), 0.0, 1.0, 1.0)))), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), float(mat2x4(float(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450))), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(-281.832, 86.29, 1.7, -92.60, 772.955, 479.374, -3.0, -0.3, -92.82, 4156.1835, -687.592, -50.38, 3438.0733, 0.0, 320.370, 4.0)) : mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (true ? injectionSwitch.y : _GLF_FUZZED(-8388.1450)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x))))) != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(9338, int(ivec2(9338, 1))) & 0)); _injected_loop_counter --)
        {
         subgroupAll(_GLF_IDENTITY(false, false || (false)));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-84692 & 0)); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true), true))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), _GLF_IDENTITY(bool(bool((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), bool(bvec2(bool(bool((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), true)))) && _GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter)))))))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter))))))))))) && true))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, clamp(4, 4, 4)))), 4, 4)), 64, 4);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), true && (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
          {
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(true);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, bool(bool(false))))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, bool(bool(false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
}
