#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_43 {
 vec3 _f0;
} ;

struct _GLF_struct_42 {
 int _f0;
 vec2 _f1;
 vec4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_44 {
 bvec2 _f0;
 float _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 _GLF_struct_42 _f4;
 _GLF_struct_43 _f5;
} ;

struct _GLF_struct_40 {
 float _f0;
 uvec3 _f1;
 vec4 _f2;
 uint subgroup_base;
} ;

struct _GLF_struct_41 {
 _GLF_struct_40 _f0;
} ;

struct _GLF_struct_45 {
 _GLF_struct_41 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 _GLF_struct_44 _f3;
 mat2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_37 {
 bvec3 _f0;
 mat2 _f1;
 mat3 _f2;
 uint _f3;
 int _f4;
} ;

struct _GLF_struct_36 {
 mat2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_35 {
 mat3 _f0;
 vec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_38 {
 _GLF_struct_35 _f0;
 bool _f1;
 _GLF_struct_36 _f2;
 _GLF_struct_37 _f3;
} ;

struct _GLF_struct_33 {
 mat2x3 _f0;
 float _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_34 {
 mat3 _f0;
 mat2x3 _f1;
 _GLF_struct_33 _f2;
} ;

struct _GLF_struct_39 {
 mat3x2 _f0;
 mat2x3 _f1;
 uint workgroup_size;
 mat4x2 _f2;
 _GLF_struct_34 _f3;
 _GLF_struct_38 _f4;
} ;

struct _GLF_struct_30 {
 vec2 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 ivec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_31 {
 _GLF_struct_30 _f0;
} ;

struct _GLF_struct_32 {
 uint read;
 mat2x3 _f0;
 _GLF_struct_31 _f1;
} ;

struct _GLF_struct_27 {
 ivec2 _f0;
 mat2x3 _f1;
 mat4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_26 {
 mat3x2 _f0;
 ivec4 _f1;
 mat3 _f2;
 mat2x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_25 {
 uvec3 _f0;
 bvec2 _f1;
 ivec2 _f2;
 ivec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_28 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_27 _f2;
} ;

struct _GLF_struct_24 {
 ivec4 _f0;
} ;

struct _GLF_struct_29 {
 _GLF_struct_24 _f0;
 uint next_virtual_gid;
 _GLF_struct_28 _f1;
} ;

struct _GLF_struct_21 {
 vec4 _f0;
 bvec4 _f1;
 mat3 _f2;
 uint _f3;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 vec2 _f1;
 bvec2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_18 {
 vec4 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 uvec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_20 {
 ivec3 _f0;
 _GLF_struct_18 _f1;
 ivec4 _f2;
 mat3 _f3;
 _GLF_struct_19 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 uint num_workgroup;
 uvec2 _f1;
} ;

struct _GLF_struct_23 {
 mat3x4 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_22 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 uvec4 _f1;
 mat3 _f2;
 bool _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
 float _f1;
 _GLF_struct_14 _f2;
 uvec4 _f3;
 mat3x4 _f4;
 uint _f5;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
} ;

struct _GLF_struct_11 {
 float _f0;
 bool _f1;
} ;

struct _GLF_struct_10 {
 float _f0;
 mat2x4 _f1;
 int _f2;
} ;

struct _GLF_struct_9 {
 uint _f0;
 bool _f1;
 vec4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_8 {
 bool _f0;
 uvec2 _f1;
 float _f2;
 mat3 _f3;
 bvec4 _f4;
 bool _f5;
 bool _f6;
} ;

struct _GLF_struct_13 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_6 {
 ivec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_5 {
 int _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 _GLF_struct_6 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 mat4x3 _f1;
 _GLF_struct_3 _f2;
 uint subgroup_id;
} ;

struct _GLF_struct_1 {
 int _f0;
 uvec4 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 vec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_0 {
 float _f0;
 uvec4 _f1;
 mat4x3 _f2;
 mat3x2 _f3;
 int _f4;
 bvec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat2x4 _f1;
 _GLF_struct_0 _f2;
 mat4x2 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 uvec4 _f2;
 _GLF_struct_7 _f3;
 mat3 _f4;
 _GLF_struct_13 _f5;
 _GLF_struct_15 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_2(uvec2(1u), mat2x4(1.0), _GLF_struct_0(1.0, uvec4(1u), mat4x3(1.0), mat3x2(1.0), 1, bvec4(true), 1u), mat4x2(1.0), _GLF_struct_1(1, uvec4(1u), bvec4(true), mat4x3(1.0), vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), uvec3(1u))), _GLF_struct_4(uvec3(1u), mat4x3(1.0), _GLF_struct_3(mat3(1.0)), gl_SubgroupID), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), min(_GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))))), (_GLF_IDENTITY(uvec4(1u), min(_GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), min(_GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))))), ~ (~ (_GLF_IDENTITY(uvec4(1u), min(_GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u))))))))))), (_GLF_IDENTITY(uvec4(1u), min(uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u))), max(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u))), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u)))))))) << uvec4(0u, 0u, 0u, 0u)), _GLF_struct_7(_GLF_struct_5(1), mat3x4(1.0), uvec2(1u), _GLF_struct_6(ivec3(1), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.7) : injectionSwitch.y)))))))), mat2x3(1.0)), mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_13(_GLF_struct_8(true, uvec2(1u), 1.0, mat3(1.0), bvec4(true), true, true), _GLF_struct_9(1u, true, vec4(1.0), ivec2(1)), _GLF_struct_10(1.0, mat2x4(1.0), 1), _GLF_struct_11(1.0, true), _GLF_struct_12(bvec2(true))), _GLF_struct_15(vec4(1.0), 1.0, _GLF_struct_14(bvec4(true), uvec4(1u), mat3(1.0), true, mat2x3(1.0)), uvec4(1u), mat3x4(1.0), 1u));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bool(bool(bvec2(_GLF_DEAD(false), false)))))), bool(bool(_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(abs(vec2(1.0, 1.0)) * (injectionSwitch), mix(vec2((abs(vec2(1.0, 1.0)) * (injectionSwitch))[0], _GLF_FUZZED(-959.774)), vec2(_GLF_FUZZED(-4768.1986), (abs(vec2(1.0, 1.0)) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 ^ (1))])).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), 1)), (_GLF_IDENTITY(int(ivec4(0, 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), 1)), min(int(ivec4(0, 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), 1)), int(ivec4(0, 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), 1))))) | (int(ivec4(0, 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), 1)))))], injectionSwitch[1])).x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, true))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(250.007)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(mat3x4(1.0), _GLF_struct_17(mat2(1.0), gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) >> 0u)) >> (89745u & 0u)))), (_GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(1u)), (uvec2(0u, 0u) ^ _GLF_IDENTITY((uvec2(1u)), ((uvec2(1u))) << uvec2(0u, 0u))) | uvec2(0u, 0u))) - uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(28.42)), float(injectionSwitch.x), bool(true)))))))), _GLF_struct_20(ivec3(1), _GLF_struct_18(_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(-940.578), (_GLF_IDENTITY(vec4(1.0), min(vec4(1.0), vec4(1.0))))[1], (_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), vec4(1.0))))))[2], _GLF_FUZZED(_GLF_IDENTITY(-114.895, mix(float(-114.895), _GLF_IDENTITY(float(_GLF_FUZZED(3.2)), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(3.2)), 1.0 * (float(_GLF_FUZZED(3.2)))) : _GLF_FUZZED(-7.5))), bool(false))))), vec4((vec4(1.0))[0], _GLF_IDENTITY(_GLF_FUZZED(vec4(1.5, -2396.3603, -8.1, -67.26).a), min(_GLF_FUZZED(vec4(1.5, -2396.3603, -8.1, -67.26).a), _GLF_FUZZED(vec4(1.5, -2396.3603, -8.1, -67.26).a))), _GLF_FUZZED(796.864), _GLF_IDENTITY((vec4(1.0))[_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, max(3, 3)), 3))], (false ? _GLF_FUZZED(reflect(75.26, 98.88)) : (vec4(1.0))[3]))), bvec4(true, false, false, true))), mat3x4(1.0), mat2x4(1.0), mat2x4(1.0), uvec3(1u), bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), true)), bool(bvec2(bool(bvec3(true, true, true)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ((! (true))) && true)))))) && true))))))), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) / 1)))) ^ 0)), mat3(1.0), _GLF_struct_19(vec4(1.0), vec2(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), (injectionSwitch.x < injectionSwitch.y))))))))))))), bvec4(true)), mat2(1.0)), _GLF_struct_22(_GLF_struct_21(vec4(1.0), bvec4(true), mat3(1.0), 1u)), ivec3(1));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 _GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(mat3x2(1.0), mat2x3(1.0), gl_WorkGroupSize.x, mat4x2(1.0), _GLF_struct_34(mat3(1.0), mat2x3(1.0), _GLF_struct_33(mat2x3(1.0), 1.0, ivec4(1))), _GLF_struct_38(_GLF_struct_35(mat3(1.0), _GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_FUZZED(58.17), _GLF_FUZZED(float(int(2.2))), _GLF_FUZZED(0.7)), vec3((vec3(1.0))[0], (vec3(1.0))[1], _GLF_IDENTITY(_GLF_IDENTITY((vec3(1.0)), clamp((vec3(1.0)), (vec3(1.0)), (vec3(1.0))))[2], (false ? _GLF_FUZZED(-9.3) : (vec3(1.0))[2]))), bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))))))) * (injectionSwitch)).x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), uvec3(1u)), true, _GLF_struct_36(mat2(1.0), mat3x2(1.0)), _GLF_struct_37(bvec3(true), mat2(1.0), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1u, 1)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_39.workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_45 _GLF_struct_replacement_45 = _GLF_struct_45(_GLF_struct_41(_GLF_struct_40(1.0, uvec3(1u), vec4(1.0), _GLF_struct_replacement_16._f1.subgroup_id * subgroup_size)), mat4x2(1.0), bvec4(true), _GLF_struct_44(bvec2(_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-9366.9518)), bool(false))), mat3x2(1.0), mat4x3(1.0), _GLF_struct_42(1, vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-9.3, (_GLF_IDENTITY(-9.3, min(_GLF_IDENTITY(-9.3, (true ? -9.3 : _GLF_FUZZED(-4.7))), _GLF_IDENTITY(-9.3, float(mat2x3(-9.3, 1.0, 1.0, 1.0, 1.0, 0.0)))))) / 1.0)) : _GLF_IDENTITY(1.0, float(mat4x3(1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 1.0)))))), vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), mix(float(_GLF_FUZZED(95.21)), float(min(1.0, 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, tan(0.0) + (0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, 1.0)), dot(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 0.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0))), mat3(1.0)), _GLF_struct_43(vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(length(_GLF_IDENTITY(vec2(2173.0994, 0.6), max(_GLF_IDENTITY(vec2(2173.0994, 0.6), _GLF_IDENTITY(_GLF_IDENTITY((vec2(2173.0994, 0.6)), mix(vec2(((vec2(2173.0994, 0.6)))[0], ((vec2(2173.0994, 0.6)))[1]), vec2(_GLF_FUZZED(-99.74), _GLF_FUZZED(-215.659)), bvec2(false, false))) * mat2(1.0), mix(vec2(_GLF_FUZZED(6.8), ((vec2(2173.0994, 0.6)) * mat2(1.0))[1]), vec2(((vec2(2173.0994, 0.6)) * mat2(1.0))[0], _GLF_FUZZED(-820.221)), bvec2(true, false)))), vec2(2173.0994, 0.6)))))))))), mat2(1.0), vec4(1.0));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_45._f0._f0.subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_24(ivec4(1)), workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_45._f0._f0.subgroup_base, (true ? _GLF_struct_replacement_45._f0._f0.subgroup_base : _GLF_FUZZED(139742u))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec4((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(0u, (0u) | 0u), uint(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, float(float((1.0) / 1.0)))), injectionSwitch.y)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) >> _GLF_IDENTITY(uint(6u), uint(6u))))), max(uint(uvec4((subgroup_local_id + 1) % subgroup_size, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) ^ 0u)), uint(6u))), 1u * ((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) ^ 0u)), uint(6u)), (true ? _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) ^ 0u)), uint(6u)), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) ^ 0u)), uint(6u))) ^ (0u ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u))))) : _GLF_FUZZED(virtual_gid)))))))))))), _GLF_struct_28(_GLF_struct_25(uvec3(1u), bvec2(true), ivec2(1), ivec3(1), mat2x4(1.0)), _GLF_struct_26(mat3x2(1.0), ivec4(1), mat3(1.0), mat2x4(1.0), ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0))), _GLF_struct_27(ivec2(1), mat2x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mat4(1.0), uvec3(1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, length(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6.0)), bool(false))), 0.0)))), max(float(vec2(injectionSwitch.x, length(vec2(0.0, 0.0)))), float(vec2(injectionSwitch.x, length(vec2(0.0, 0.0))))))) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0), (mat4x2(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0)) * mat4(1.0)))) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))))
  return;
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(atomicLoad(buf[virtual_gid], 4, 64, 2), mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(step(smoothstep(3697.6671, 907.325, 843.685), 6708.1340))))), _GLF_struct_31(_GLF_struct_30(vec2(1.0), bvec4(true), mat3x4(1.0), ivec2(1), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1)), ~ (~ ((ivec3(1))))) / ivec3(1, 1, 1), ivec3(ivec4(_GLF_IDENTITY((ivec3(1)) / ivec3(1, 1, 1), _GLF_IDENTITY(((ivec3(1)) / ivec3(1, 1, 1)), ivec3(ivec3(_GLF_IDENTITY(((ivec3(1)) / ivec3(1, 1, 1)), ivec3(0, 0, 0) | (((ivec3(1)) / ivec3(1, 1, 1))))))) / ivec3(1, 1, 1)), (-59745 & 0))))), bvec3(true))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(40505)))))) == 0)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), bool(bool((false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-45716)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), true))))))))), false))))))), true, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_29.next_virtual_gid, max(_GLF_struct_replacement_29.next_virtual_gid, _GLF_struct_replacement_29.next_virtual_gid))], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, (false) && true)))))
    return;
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (_GLF_IDENTITY(! ((! (false))), (! ((_GLF_IDENTITY(! (false), false || (! (false)))))) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (_GLF_IDENTITY(! ((! (false))), (! ((_GLF_IDENTITY(! (false), false || (! (false)))))) || false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (_GLF_IDENTITY(! ((! (false))), (! ((_GLF_IDENTITY(! (false), false || (! (false)))))) || false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(bvec4(! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ((false)) && true), false, false))), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true, false))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)))) && true), _GLF_IDENTITY(bool(bool((false))), bool(bvec3(bool(bool((false))), true, true)))))), _GLF_IDENTITY((! _GLF_IDENTITY(((_GLF_IDENTITY(! (false), false || (! (false))))), false || (((_GLF_IDENTITY(! (false), false || (! (false)))))))), _GLF_IDENTITY(! (! ((! ((_GLF_IDENTITY(! (false), false || (! (false)))))))), true && (_GLF_IDENTITY(! (! ((! ((_GLF_IDENTITY(! (false), false || (! (false)))))))), false || (_GLF_IDENTITY(! (! ((! ((_GLF_IDENTITY(! (false), false || (! (false)))))))), ! (! (! (! ((! ((_GLF_IDENTITY(! (false), false || (! (false)))))))))))))))) || false))))))))), false, true))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[_GLF_struct_replacement_29.next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))), false || (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false, false, false))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false, false, false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.3)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) / 1.0)))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9512.3657), _GLF_FUZZED(-6255.5117)), bvec2(false, false))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(true, ! (! (true))))), ! (! (_GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(true, ! (! (true))))), (bool(bvec4(false, true, true, _GLF_IDENTITY(true, ! (! (true)))))) || false)))))))
      return;
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-283.460), max(_GLF_IDENTITY(_GLF_FUZZED(-283.460), mix(float(_GLF_FUZZED(-283.460)), float(_GLF_FUZZED(-31.33)), bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))), _GLF_FUZZED(-283.460)))), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(14.21)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(false), false, true), bvec3(bvec3(bvec3(bool(false), false, true))))), true && (bool(_GLF_IDENTITY(bvec3(bool(false), false, true), bvec3(bvec3(bvec3(bool(false), false, true))))))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-3.6), min(_GLF_IDENTITY(_GLF_FUZZED(-3.6), min(_GLF_FUZZED(-3.6), _GLF_FUZZED(-3.6))), _GLF_FUZZED(-3.6)))), float(mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0))), float(_GLF_FUZZED(14.21)), bool(false))), bool(true))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 atomicStore(buf[virtual_gid], _GLF_struct_replacement_32.read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)) && true))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).y) && true), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7865.1318)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))) : _GLF_IDENTITY(_GLF_FUZZED(3.1), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(3.1), 0.0, _GLF_IDENTITY(dot(vec3(log(1.0), 1.0, log(1.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(log(1.0), 1.0, log(1.0)), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))))), float(vec2(float(vec4(_GLF_FUZZED(3.1), _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), _GLF_IDENTITY(dot(vec3(log(1.0), 1.0, log(1.0)), vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(81.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), dot(vec3(log(1.0), 1.0, log(1.0)), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(801.831)), bool(false))))), 0.0), vec3(1.0, 1.0, 1.0))))), abs(1.0))))))), true))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) ? _GLF_FUZZED(-4.4) : injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
