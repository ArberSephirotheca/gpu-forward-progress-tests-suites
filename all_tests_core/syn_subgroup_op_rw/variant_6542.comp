#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat3 _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 mat2x3 _f1;
 mat3x4 _f2;
 mat4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
 mat3x2 _f1;
 vec3 _f2;
 mat4x2 _f3;
 float _f4;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 bvec2 _f1;
 bool _f2;
 bvec3 _f3;
 bvec3 _f4;
 vec3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 mat4 _f1;
 _GLF_struct_7 _f2;
 uvec4 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 uint workgroup_id;
 int _f1;
 float _f2;
 uvec2 _f3;
 mat3 _f4;
 bool _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_6 {
 float _f0;
 bvec3 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_13 {
 _GLF_struct_6 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_12 _f2;
 mat2x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_1 {
 bool _f0;
 ivec4 _f1;
 mat2x4 _f2;
 vec3 _f3;
 vec3 _f4;
 mat4x2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 uvec4 _f1;
 mat2x4 _f2;
 ivec3 _f3;
 mat3x4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 vec3 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 _GLF_struct_3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), true && ((! (_GLF_IDENTITY(false, (false) || false)))))), (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), true && ((! (_GLF_IDENTITY(false, (false) || false))))))) || false))), true, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (false)) && true)) && true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, abs(0.0), 0.0, 0.0, 0.0, log(1.0), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), log(1.0)))).y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0)), max(float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0)), float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true)))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true)), true && (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))), bool(bool(true && (false))))), true)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false, false, false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(gl_SubgroupSize, _GLF_struct_3(ivec2(1), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(80.09))))), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0)))), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(80.09))))), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0)))), vec3(mat3x4(vec3(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(80.09))))), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0))))), _GLF_struct_0(mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), uvec4(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u, 0u) | (uvec4(1u))), max(_GLF_IDENTITY(uvec4(1u), uvec4(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec3(0u, (0u & 110851u), (0u & 159068u)))) | (0u)), 0u, 0u, 0u) | (uvec4(1u))), _GLF_IDENTITY(uvec4(1u), uvec4(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u, 0u) | (uvec4(1u))))), mat2x4(1.0), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(ivec4(_GLF_IDENTITY(ivec3(1), (ivec3(1)) << ivec3(0, 0, 0)), 1)), max(ivec3(ivec4(_GLF_IDENTITY(ivec3(1), (ivec3(1)) << ivec3(0, 0, 0)), 1)), ivec3(ivec4(_GLF_IDENTITY(ivec3(1), (ivec3(1)) << ivec3(0, 0, 0)), 1))))), mat3x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, float(mat3x2(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(_GLF_IDENTITY(mat4(mat2(0.0, 0.0, 0.0, 0.0)), (mat4(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (false ? _GLF_FUZZED(roundEven(vec3(3.4, 645.132, _GLF_IDENTITY(7600.0922, min(7600.0922, 7600.0922))))) : vec3(0.0, 1.0, 0.0)))))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0))), 1.0))), bvec2(true)), _GLF_struct_1(true, ivec4(1), mat2x4(1.0), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(vec3(1.0), mix(_GLF_IDENTITY(vec3(_GLF_IDENTITY((vec3(1.0)), mix(vec3(((vec3(1.0)))[0], ((vec3(1.0)))[1], ((vec3(1.0)))[2]), vec3(_GLF_FUZZED(vec4(-4.2, 2.7, 4547.1332, -5.9).b), _GLF_FUZZED(-48.55), _GLF_FUZZED(-8.9)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))[0], (vec3(1.0))[1], _GLF_FUZZED(-5.5)), max(_GLF_IDENTITY(vec3(_GLF_IDENTITY((vec3(1.0)), mix(vec3(((vec3(1.0)))[0], ((vec3(1.0)))[1], ((vec3(1.0)))[2]), vec3(_GLF_FUZZED(vec4(-4.2, 2.7, 4547.1332, -5.9).b), _GLF_FUZZED(-48.55), _GLF_FUZZED(-8.9)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))[0], (vec3(1.0))[1], _GLF_FUZZED(-5.5)), mix(vec3(_GLF_FUZZED(-182.166), (vec3(_GLF_IDENTITY((vec3(1.0)), mix(vec3(((vec3(1.0)))[0], ((vec3(1.0)))[1], ((vec3(1.0)))[2]), vec3(_GLF_FUZZED(vec4(-4.2, 2.7, 4547.1332, -5.9).b), _GLF_FUZZED(-48.55), _GLF_FUZZED(-8.9)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))[0], (vec3(1.0))[1], _GLF_FUZZED(-5.5)))[1], (vec3(_GLF_IDENTITY((vec3(1.0)), mix(vec3(((vec3(1.0)))[0], ((vec3(1.0)))[1], ((vec3(1.0)))[2]), vec3(_GLF_FUZZED(vec4(-4.2, 2.7, 4547.1332, -5.9).b), _GLF_FUZZED(-48.55), _GLF_FUZZED(-8.9)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))[0], (vec3(1.0))[1], _GLF_FUZZED(-5.5)))[2]), vec3((vec3(_GLF_IDENTITY((vec3(1.0)), mix(vec3(((vec3(1.0)))[0], ((vec3(1.0)))[1], ((vec3(1.0)))[2]), vec3(_GLF_FUZZED(vec4(-4.2, 2.7, 4547.1332, -5.9).b), _GLF_FUZZED(-48.55), _GLF_FUZZED(-8.9)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))[0], (vec3(1.0))[1], _GLF_FUZZED(-5.5)))[0], _GLF_FUZZED(-589.058), _GLF_FUZZED(-501.721)), bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), vec3(_GLF_IDENTITY((vec3(1.0)), mix(vec3(((vec3(1.0)))[0], ((vec3(1.0)))[1], ((vec3(1.0)))[2]), vec3(_GLF_FUZZED(vec4(-4.2, 2.7, 4547.1332, -5.9).b), _GLF_FUZZED(-48.55), _GLF_FUZZED(-8.9)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))[0], (vec3(1.0))[1], _GLF_FUZZED(-5.5)))), _GLF_IDENTITY(vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]), mix(vec3(_GLF_FUZZED(819.652), _GLF_IDENTITY((vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]))[1], clamp((vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]))[1], (vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]))[1], (vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]))[1])), _GLF_FUZZED(31.78)), vec3((vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]))[0], _GLF_FUZZED(60.16), (vec3(_GLF_FUZZED(58.92), _GLF_FUZZED(vec2(6.1, 870.712).t), (vec3(1.0))[2]))[2]), bvec3(true, false, true))), bvec3(false, false, true))))), vec3(1.0), mat4x2(1.0), ivec4(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), _GLF_struct_2(1.0, mat2x3(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], length(vec3(0.0, 0.0, 0.0)) + (injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6174.2941)), vec2(_GLF_FUZZED(-91.77), (injectionSwitch)[1]), bvec2(false, true))).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.6)), bvec2(true, false))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0))))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false, true))))))), (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))) || false)))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(true, true, true))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), true && (! (false))))), bool(bvec2(false, true)))) && true, false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec2(false, true))))))))) && true)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false, true))))))), (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))))) || false)))) && true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), true && (! (false))))), bool(bvec2(false, true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), true && (! (false))))), bool(bvec2(false, true))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true, false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) && (bool(bvec2(false, true))))))))) && true)), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)), ! (! (bool(bvec4(false, true, true, true))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(134179u, 111540u, 27079u)) : _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(subgroup_local_id, uvec2(154858u, 187211u))) : gl_WorkGroupSize)))), (0u ^ _GLF_IDENTITY(0u, max(0u, 0u)))))))), _GLF_IDENTITY(max(gl_WorkGroupSize, gl_WorkGroupSize), (max(gl_WorkGroupSize, gl_WorkGroupSize)) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))) || (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(false, false || (false)) || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))) || (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), bool(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_6(1.0, bvec3(_GLF_IDENTITY(true, (true) && true)), _GLF_struct_5(uvec2(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), max(~ (1u), ~ (1u))))), min(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), 1u)), 1u)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), 1u))).x, 1, 1.0, uvec2(1u), mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), mix(float(_GLF_IDENTITY(0.0 + (1.0), max(0.0 + (1.0), _GLF_IDENTITY(0.0, (0.0) - abs(0.0)) + _GLF_IDENTITY((1.0), clamp((1.0), (1.0), _GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(-4.2) : (1.0))), (1.0)))))))), float(_GLF_FUZZED(9.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))) || (true)), mat2x4(1.0))), _GLF_struct_10(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0) / 1.0, mix(float(_GLF_FUZZED(3151.2990)), float((1.0) / 1.0), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))), min(_GLF_IDENTITY((1.0) / 1.0, min((1.0) / 1.0, _GLF_IDENTITY((1.0) / 1.0, min((1.0) / 1.0, (1.0) / 1.0)))), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true))))))), (false ? _GLF_FUZZED(3835.8206) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true))))))), (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))) / 1.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), _GLF_IDENTITY(float(1.0), clamp(_GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0))), float(1.0), float(1.0))), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))), clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))), false || (! (bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), bool(bvec2(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))), false || (! (bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), false))))))), true && (bool(true))), false, true)))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), _GLF_IDENTITY(true, (true) || false) && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), true && (bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), true && (bool(true))), (_GLF_IDENTITY(bool(true), true && (_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) && true)) || false))))))) || false)) || false), false, true)))))))), mix(float(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), _GLF_IDENTITY(true, (true) || false) && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), true && (bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), true && (bool(true))), (_GLF_IDENTITY(bool(true), true && (_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) && true)) || false))))))) || false)) || false), false, true))))))))), float(_GLF_FUZZED(-42.77)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5.2) : 1.0))) + 0.0), mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))))), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-35.27))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))))), float(_GLF_FUZZED(-26.28)), bool(false)))) / 1.0)))), mat4(1.0), _GLF_struct_7(mat3x4(1.0), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, false || (true))), false, true))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (_GLF_IDENTITY(false || (true), (false || (true)) && true))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, false || (true))), false, true))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (_GLF_IDENTITY(false || (true), (false || (true)) && true))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, false || (true))), false, true))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (_GLF_IDENTITY(false || (true), (false || (true)) && true))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), false, false)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec3(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true)))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))), true, true)))))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), false)), false, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), bool(bvec3((true), true, true))))))) || false))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))))))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), bool(bvec3((true), true, true))))))) || false))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))))))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))))), false)), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), true)))))), false, false))), true))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), true)))))), false, false))), true))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false || (true))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))), true)), false, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) || false)))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true)))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(-4.5, 4.8)))), 1.0, 0.0, log(1.0), 1.0, sqrt(1.0)))) < injectionSwitch.y)))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) || false)))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true)))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(-4.5, 4.8)))), 1.0, 0.0, log(1.0), 1.0, sqrt(1.0)))) < injectionSwitch.y)))), false)), true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))))), true, bvec3(true), bvec3(true), vec3(1.0), uvec2(1u)), uvec4(1u), _GLF_struct_8(mat3x4(1.0), mat3x2(1.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec2(1.7, -572.664).y)), float(1.0), bool(true))), (false ? _GLF_FUZZED(-6.9) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(vec2(1.7, -572.664).y), (_GLF_IDENTITY(_GLF_FUZZED(vec2(1.7, -572.664).y), min(_GLF_FUZZED(vec2(1.7, -572.664).y), _GLF_FUZZED(vec2(1.7, -572.664).y)))) - 0.0)), float(1.0), bool(true)))))) * 1.0)), mat4x2(1.0), 1.0), _GLF_struct_9(ivec3(1), mat2x3(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((+ injectionSwitch)) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2x3((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-17.90)))), 1.0, 0.0, 0.0, 1.0)))).y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), false, false)))))), true))) && true)), true, false)), _GLF_IDENTITY(! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true))) && true)), true, false)))), _GLF_IDENTITY(bool(bool(! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true))) && true)), true, false)))))), (bool(bool(! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true))) && true)), true, false))))))) && true))), bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((+ injectionSwitch)) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2x3((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-17.90)))), 1.0, 0.0, 0.0, 1.0)))).y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), false, false)))))), true))) && true)), true, false)), _GLF_IDENTITY(! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true))) && true)), true, false)))), _GLF_IDENTITY(bool(bool(! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true))) && true)), true, false)))))), (bool(bool(! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true))) && true)), true, false))))))) && true))), true))), false || (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))) && true))), false)), bool(bvec4(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), false)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)) || false)))) && true)))) ? _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)) : _GLF_FUZZED(inversesqrt(acosh(-33.94)))))), mat3x4(1.0), mat4(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(false))), bool(false)))), (mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(false))), bool(false))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_struct_12(_GLF_struct_11(mat3(1.0)), bvec2(true)), mat2x4(1.0), _GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(-6340.9400), (vec4(1.0))[1], (vec4(1.0))[2], _GLF_FUZZED(86.22)), vec4((vec4(1.0))[0], _GLF_FUZZED(27.10), _GLF_FUZZED((+ -76.78)), (vec4(1.0))[3]), bvec4(true, false, false, true))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_13._f0._f2.workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_4.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((subgroup_local_id + 1) % _GLF_struct_replacement_4.subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bool((subgroup_local_id % 2) == 0))))
  {
   subgroupAll(_GLF_IDENTITY(false, (false) || false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0)), max(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0)), min(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0)))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0))))).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0)))))) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), false, true, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), _GLF_FUZZED(workgroup_size)))))], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), 0 | (1)), clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1))))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 1)))) << 0)])))), injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y)) && true)))), false || _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))))))), ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))))))))))) && true)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0)), mat2(1.0) * (vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0))))))).y)), true && (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0)), mat2(1.0) * (vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0))))))).y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.9))), 1.0, 1.0)), 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0)), mat2(1.0) * (vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), max(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), 0.0, 1.0, 1.0))))))).y))))))))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), (((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))) || false), ! (! (((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(false, false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), true && (bool(bvec4(false, true, false, true))))), bool(bvec2(false, true)))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))) && true), false || (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))) && true), (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))))))) && true)) && true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, false || (false))))), true, false)))))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))))) || false, true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), true && ((_GLF_IDENTITY(false, false || (false))))) || false)))))) || false)))) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), clamp((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * ((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), clamp(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), (true ? true ? injectionSwitch : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-6.4, 1.4)))), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)), true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 1.0, log(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(true, false || (true)))) || false))) ? 1.0 : _GLF_FUZZED(6739.5619)))), 0.0)), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2762.4395)), vec2(_GLF_FUZZED(-48.22), (injectionSwitch)[1]), bvec2(false, true)))) + sqrt(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, log(1.0), 0.0))) * mat2(1.0))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec2(bool(bvec4(false, false, true, true)), true))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 subgroupBarrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))))))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), max(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (false) && true)) && true), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec2((false), false))))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
}
