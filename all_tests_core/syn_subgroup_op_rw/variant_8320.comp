#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 mat2x4 _f0;
 float _f1;
 bvec4 _f2;
 ivec3 _f3;
 mat4x3 _f4;
 bool _f5;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_14 {
 mat3x4 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 mat4x2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 uvec2 _f1;
 int _f2;
 mat4x2 _f3;
 uint _f4;
 mat4 _f5;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 vec2 _f1;
 _GLF_struct_10 _f2;
 float _f3;
 uint _f4;
 mat3x2 _f5;
 uint next_virtual_gid;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 ivec4 _f1;
 mat4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 uint _f1;
 vec3 _f2;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 mat3x4 _f1;
 vec3 _f2;
 mat3 _f3;
 mat2x4 _f4;
 uint _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
 ivec4 _f1;
 _GLF_struct_8 _f2;
 float _f3;
 _GLF_struct_11 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 ivec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uint read;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 _GLF_struct_0 _f1;
 ivec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 uvec2 _f1;
 _GLF_struct_3 _f2;
 ivec3 _f3;
 uvec4 _f4;
 ivec3 _f5;
 uvec3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), min(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false))), mix(float(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), float(_GLF_FUZZED(897.165)), bool(false)))) + 0.0)), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))).y))))) || false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))), mat2(1.0) * (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), _GLF_IDENTITY(float(_GLF_FUZZED(-2.7)), float(mat2x4(float(_GLF_FUZZED(-2.7)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat3x2((injectionSwitch)[1], _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0), mat3x2(mat3(mat3x2((injectionSwitch)[1], _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0))))))), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], clamp(((injectionSwitch))[0], ((injectionSwitch))[0], ((injectionSwitch))[0])), _GLF_FUZZED(678.976)), vec2(_GLF_FUZZED(-5.1), ((injectionSwitch))[1]), bvec2(false, true)))[1]), float(_GLF_FUZZED(-2.7)), bool(false)))), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(2.8)), bvec2(false, false))).y))))) || false)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-536.841)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))).y, false || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false || (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 1.0)))).x, injectionSwitch.x)) > injectionSwitch.y)))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(131178u, 17807u, 25882u)), uvec3(uvec3(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(131178u, 17807u, 25882u)))))))))))), (_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(131178u, 17807u, 25882u)))))))))) ^ uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), uint(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), uint(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)), 0u)))) - 0u))), 0u, 0u)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(555.043), _GLF_FUZZED(-243.745)), bvec2(false, false))).y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)))) && true)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true)))), bool(_GLF_IDENTITY(bool(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true))))), ! (! (bool(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true)))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (((false)))) || false))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), false || (_GLF_IDENTITY(! (false), (! (false)) || false))))), true && _GLF_IDENTITY((false), ((false)) || false)))) && true)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true && (false))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))))), ((_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))))), ! (! (bool(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true)))))))), true && (_GLF_IDENTITY(bool(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))))), ! (! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true))))))), bool(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true))))))), true && (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true))))))), (bool(! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))), bool(bool(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))) && true)))))))) || false))))))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))) || (! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((false ? -8440.3931 : -6047.2111))), float(injectionSwitch.y), bool(true)))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (false || (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-845.576), _GLF_FUZZED(7956.1201)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-1.7))), (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y))))) && true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, tan(0.0), 0.0))))).y, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, tan(0.0), 0.0))))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, tan(0.0), 0.0))))).y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, tan(0.0), 0.0))))).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, tan(0.0), 0.0))))).y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, tan(0.0), 0.0))))).y))), false, true)))))) || false))))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))), true && (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))), true && (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min((1.0), (1.0))) + 0.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), true && (bool(_GLF_IDENTITY(true, (true) || false))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), true && (bool(_GLF_IDENTITY(true, (true) || false)))))) && true)) && (_GLF_DEAD(false))))))) && _GLF_IDENTITY(true, (true) || false)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, 1 * (1 ^ 1))) / 1)) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0) * (_injected_loop_counter ++), (_GLF_IDENTITY(1, (1) >> 0) * (_injected_loop_counter ++)) * 1)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) - 0) - 0, (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) - 0) - 0, (_GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) - 0) - 0) * 1)) - 0))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4.8))), 0.0, 1.0, 1.0))))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])).x > injectionSwitch.y)), false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(mat4x3(1.0), _GLF_IDENTITY(ivec4(1), (ivec4(1)) - ivec4(0, 0, 0, 0)), _GLF_struct_8(_GLF_struct_5(uvec4(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), max((1u), (1u))), max((1u), _GLF_IDENTITY((1u), 0u + ((1u))))), min(_GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY((1u), 0u + ((1u))))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u))))))), _GLF_IDENTITY((uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (1u))), _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | ((1u))))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(1u, (1u) << 0u)))), _GLF_IDENTITY(0u + ((1u)), (0u + ((1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u)))))))) * 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (1u))), _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | ((1u))))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(1u, (1u) << 0u)))), _GLF_IDENTITY(0u + ((1u)), (0u + ((1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u)))))))) * 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (1u))), _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | ((1u))))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u)))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (1u))), _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | ((1u))))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u))))))) | 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(1u, (1u) << 0u)))), _GLF_IDENTITY(0u + ((1u)), (0u + ((1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u)))))))) * 1u))) : _GLF_FUZZED(workgroup_size)))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u) ^ (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (1u))), _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | ((1u))))))), (~ (1u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(1u, (1u) << 0u)))), _GLF_IDENTITY(0u + ((1u)), (0u + ((1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(~ (1u), (~ (1u)) >> 0u)) | (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(54529u)))))))) * 1u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), mat3x4(1.0), vec3(1.0), mat3(1.0), mat2x4(1.0), 1u), _GLF_struct_6(vec3(1.0), 1u, vec3(1.0)), _GLF_struct_7(ivec3(1), ivec4(1), mat4(1.0), _GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(vec3(-90.10, 1.7, -0.5)) : vec3(1.0))))), 1.0, _GLF_struct_11(_GLF_struct_9(ivec3(1), uvec2(1u), 1, mat4x2(1.0), 1u, mat4(1.0)), vec2(1.0), _GLF_struct_10(_GLF_IDENTITY(vec2(1.0), max(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(245.266)), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) / vec2(1.0, 1.0)))), mat4x2(1.0), vec2(1.0)), 1.0, 1u, mat3x2(1.0), workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 0u)))), ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 0u)), uint(uint(uint(uvec2(subgroup_id, 0u)))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), _GLF_IDENTITY(((subgroup_id) | (subgroup_id)), max(((subgroup_id) | (subgroup_id)), ((subgroup_id) | (subgroup_id)))) / 1u))))))), uint(uvec2(subgroup_id, 0u)))))) << 0u) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), clamp(_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))), (subgroup_size), (subgroup_size)))) + 0u), min((subgroup_size), (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))) >> (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, _GLF_IDENTITY((8u) ^ 0u, max((8u) ^ 0u, (8u) ^ 0u))))))))))), _GLF_struct_14(mat3x4(1.0), _GLF_struct_12(bvec3(_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(mat2(_GLF_IDENTITY(transpose(mat2(1.0)), (true ? transpose(mat2(1.0)) : _GLF_FUZZED(mat2(-2.5, -192.378, 343.841, 6.8))))))), mat2(mat2x3(transpose(mat2(1.0)))))))), _GLF_struct_13(mat2x4(1.0), 1.0, bvec4(true), ivec3(1), mat4x3(1.0), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))), _GLF_IDENTITY(ivec4(1), min(ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) << 0)))), ivec4(1)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_1(bvec4(true), _GLF_struct_0(uvec4(1u), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), ~ (_GLF_IDENTITY(~ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u + (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) | (_GLF_FUZZED(workgroup_size)))))))))) >> 0u), 0u)), (~ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u + (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) | (_GLF_FUZZED(workgroup_size)))))))))) >> 0u), 0u))) << (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u)))))))), min(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) | (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))), virtual_gid)), (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), ~ (~ (uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), ~ (~ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u), (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), clamp(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), uvec2(uvec4(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), 1u, 1u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), (uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u)) - uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u)))))))), 0u | (_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), ~ (~ (uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u)))))))), _GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u), ~ (~ (uvec2(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_size))), 0u))))))))))], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) / 1), 64, 0)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), 1)))), (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(7), ivec3(7))) | ((ivec3(1)))) | (ivec3(1))), (_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)), (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(7), ivec3(7))) | ((ivec3(1)))) | (ivec3(1)))) | (_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)), (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(7), ivec3(7))) | ((ivec3(1)))) | (ivec3(1))))), mat3x4(1.0)), uvec2(1u), _GLF_struct_3(_GLF_struct_2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x4(1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 0.0, abs(1.0), round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), (1.0) + 0.0), 1.0)), float(mat3x4(1.0, 0.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))) - 0.0)), float(_GLF_FUZZED(-581.602)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), transpose(transpose(mat4(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.2)), float(0.0), bool(true))), abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))))), ivec4(1), vec2(1.0))), ivec3(1), _GLF_IDENTITY(uvec4(1u), clamp(uvec4(_GLF_IDENTITY(1u, (1u) + _GLF_IDENTITY(0u, (0u) | 0u))), _GLF_IDENTITY(uvec4(1u), (false ? _GLF_FUZZED(uvec4(76136u, 55552u, 138727u, 138262u)) : uvec4(_GLF_IDENTITY(1u, (1u) | (0u | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) >> 0u), uint(5u)))))))), _GLF_IDENTITY(uvec4(1u), min(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u)))))), ivec3(1), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), max((_GLF_IDENTITY(1u, (1u) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) | 0u)), ((_GLF_IDENTITY(1u, (1u) ^ 0u))) | ((_GLF_IDENTITY(1u, (1u) ^ 0u)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u)) : _GLF_IDENTITY(0u, min(0u, 0u))))) | (_GLF_IDENTITY(0u, (0u) - 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), max((_GLF_IDENTITY(1u, (1u) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), ((_GLF_IDENTITY(1u, (1u) ^ 0u))) | ((_GLF_IDENTITY(1u, (1u) ^ 0u)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 1u * (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(workgroup_size)), max(~ (_GLF_FUZZED(workgroup_size)), ~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size)))))))))) : _GLF_IDENTITY(0u, min(0u, 0u))))) | (_GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u))))), (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), max((_GLF_IDENTITY(1u, (1u) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), ((_GLF_IDENTITY(1u, (1u) ^ 0u))) | ((_GLF_IDENTITY(1u, (1u) ^ 0u)))))) + _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) : _GLF_IDENTITY(0u, min(0u, 0u))))), clamp((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))), (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))) ? (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))) : _GLF_FUZZED(subgroup_size))))) | (_GLF_IDENTITY(0u, (0u) - 0u))))) >> 0u), _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, clamp((_GLF_IDENTITY(1u, (1u) - 0u)) ^ 0u, (1u) ^ 0u, (1u) ^ 0u)))), max((_GLF_IDENTITY(1u, (1u) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), ((_GLF_IDENTITY(1u, (1u) ^ 0u))) + 0u)) | ((_GLF_IDENTITY(1u, (1u) ^ 0u)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, (_GLF_IDENTITY((0u) - 0u, max((0u) - 0u, (0u) - 0u))) | 0u)))))) >> 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), max((_GLF_IDENTITY(1u, (1u) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) ^ 0u)))) / 1u))) + 0u)) | ((_GLF_IDENTITY(1u, (1u) ^ 0u)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, ((0u) - 0u) | ((0u) - 0u))))))) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ (_GLF_IDENTITY(0u, (0u) - 0u))))) >> 0u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ (_GLF_IDENTITY(0u, (0u) - 0u))))) >> 0u)))))) ^ (_GLF_IDENTITY(0u ^ 0u, ~ (~ (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u))))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_struct_replacement_15._f4.next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (min(injectionSwitch, injectionSwitch)) * mat2(1.0))).x < injectionSwitch.y)), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) || false), (_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED(-207.874)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), bool(true))) < injectionSwitch.y)), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) || false)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(-958.057)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(false, true, true, true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec4(false, true, true, true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec4(false, true, true, true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(4.3)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat3x4((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7980.6048)), float(1.0), bool(true))), 0.0, 0.0, 1.0, 0.0)))), bvec2(true, true))).y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     atomicStore(checker[virtual_gid], _GLF_struct_replacement_4._f0._f1.read, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   atomicStore(buf[virtual_gid], _GLF_struct_replacement_4._f0._f1.read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
