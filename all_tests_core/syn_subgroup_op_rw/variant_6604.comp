#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat3 _f0;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 float _f1;
 uvec4 _f2;
 mat2x3 _f3;
 mat3x4 _f4;
 mat4x2 _f5;
 bool _f6;
 uint workgroup_id;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_12 {
 uvec3 _f0;
 mat2x3 _f1;
 vec3 _f2;
 mat3x2 _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 mat4x3 _f1;
 mat3 _f2;
 mat2x3 _f3;
 uint next_virtual_gid;
 uint _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_4 {
 uint _f0;
 uvec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 ivec2 _f1;
 bvec3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat4 _f1;
 bvec3 _f2;
 ivec4 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 mat2x4 _f1;
 mat3 _f2;
 ivec3 _f3;
 float _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
 bool _f6;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 int _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_7 _f3;
 uvec4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) - 0, min((_injected_loop_counter) - 0, (_injected_loop_counter) - 0))) < ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(int(2)))), int(2))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (true) && true))))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x = subgroup_size;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, false))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false))), false))))))), false, false, false))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, 159525u)) : gl_NumWorkGroups)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (uint(uint(0u))) ^ 0u)), 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))), (false ? _GLF_FUZZED(uvec3(50978u, 20110u, 172828u)) : (uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (uint(uint(0u))) ^ 0u)), 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u)))))).x, (gl_NumWorkGroups.x) | 0u)) >> 0u);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z = workgroup_size;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))) > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | 0)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), min(vec2(mat3(injectionSwitch, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), vec2(mat3(injectionSwitch, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)))))) + vec2(0.0, 0.0)).y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((- 1.8))), float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-90.83)), bool(false))), injectionSwitch.y, injectionSwitch.y))), bool(true)))))))), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(uvec3(1u), mat2x3(1.0), vec3(1.0), mat3x2(1.0), _GLF_struct_11(_GLF_struct_9(bvec4(true), 1.0, uvec4(1u), mat2x3(1.0), mat3x4(1.0), mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), true, gl_WorkGroupID.x), _GLF_struct_10(mat3(1.0)), mat4x2(1.0)));
 uint workgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z * _GLF_struct_replacement_12._f4._f0.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y = virtual_gid;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat2(1.0), 1, _GLF_struct_5(mat4x3(1.0), _GLF_struct_0(_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4370.7213)), _GLF_IDENTITY(bool(false), (bool(false)) || false))))), clamp(vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(determinant(mat4(191.472, 9.0, -795.082, -2.8, 7.2, -3265.7154, -593.114, -18.69, 5381.2608, -8.0, -4.6, -7.4, -4.4, -7.7, -615.775, 17.77))))), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, abs(1.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(mat3x2(-1217.2899, -4878.4572, -4161.7277, -93.71, 41.69, 3975.6169)) : mat3x2(1.0, abs(1.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))))), vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)), vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)))), mix(vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(-5212.8115)), vec2((_GLF_IDENTITY(vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4370.7213)), bool(false))))), clamp(vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)), vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)), vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)))))[0], (_GLF_IDENTITY(vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4370.7213)), bool(false))))), clamp(vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)), vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)), vec2(mat2x3(vec2(1.0), 1.0, 1.0, 1.0, 1.0)))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), 1u), _GLF_struct_1(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false)))))))), mat2x4(1.0), mat3(1.0), ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) + 0.0), tan(sqrt(0.0)), tan(0.0))))), _GLF_struct_2(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u))), uvec2(1u), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), uvec2(0u, 0u) ^ ((uvec2(1u)) >> uvec2(0u, 0u)))), uvec2(1u))))))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(4u), (uvec2(4u)) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))))), mat4(1.0), bvec3(true), ivec4(1), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)), mix(float(false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9))), float(_GLF_FUZZED(_GLF_IDENTITY(702.141, max(702.141, _GLF_IDENTITY(702.141, mix(float(702.141), float(_GLF_FUZZED(5570.9708)), bool(false))))))), bool(false))))), float(_GLF_FUZZED(2.9))))) / 1.0), float(1.0), bool(true)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(90.13) : float(_GLF_FUZZED(2.9)))), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(2.9, (2.9) / exp(0.0)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-7.6), float(float(_GLF_FUZZED(-7.6)))) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), _GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), 0.0 + (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), 0.0 + (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), 0.0 + (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))))))))) / 1.0), float(1.0), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9581.5935)), (float(_GLF_FUZZED(9581.5935))) * 1.0), float(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (float(_GLF_FUZZED(2.9))) / determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(2.9, clamp(2.9, 2.9, 2.9)))), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), _GLF_IDENTITY(float(_GLF_FUZZED(2.9)), _GLF_IDENTITY(min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))), (true ? min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))) : _GLF_FUZZED(-76.32)))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), _GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(float(_GLF_FUZZED(2.9)), float(_GLF_FUZZED(2.9)))))), 0.0 + (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))))))) / 1.0), float(1.0), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, ((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0) * 1.0), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, max((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, max((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0)))), (_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, ((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0) * 1.0), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, max((_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))), _GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))))) / 1.0, (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, max((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0, (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0))))) - 0.0)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(vec4(56.17, -700.789, vec2(7.3, 23.84)).r)), float(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) / 1.0))))) / 1.0), float(1.0), bool(true))), _GLF_IDENTITY(bool(true), bool(bvec2(bool(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 0.0, 1.0), (mat2(injectionSwitch.x, 1.0, 0.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) < injectionSwitch.y)))))))) - length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(8249.4976)), bool(false))))), 0.0))) + sqrt(0.0)), 0.0))))), _GLF_IDENTITY(mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_FUZZED(_GLF_IDENTITY(2.9, mix(float(_GLF_FUZZED(-0.6)), float(2.9), bool(true)))), _GLF_IDENTITY(_GLF_FUZZED(2.9), (true ? _GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) - 0.0) : _GLF_FUZZED(-156.635)))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (float(_GLF_FUZZED(2.9))) / sqrt(1.0)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_FUZZED(2.9), _GLF_FUZZED(2.9))))))) / 1.0), (true ? _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_FUZZED(2.9), _GLF_IDENTITY(_GLF_FUZZED(2.9), (true ? _GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) - 0.0) : _GLF_IDENTITY(_GLF_FUZZED(-156.635), max(_GLF_IDENTITY(_GLF_FUZZED(-156.635), max(_GLF_IDENTITY(_GLF_FUZZED(-156.635), (_GLF_FUZZED(-156.635)) - 0.0), _GLF_FUZZED(-156.635))), _GLF_FUZZED(-156.635)))))))), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_FUZZED(2.9), _GLF_FUZZED(2.9))))))) / 1.0) : _GLF_FUZZED(-0.9))), float(1.0), bool(true)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0), float(1.0), bool(true)), float(mat2x3(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-7.6), min(_GLF_IDENTITY(_GLF_FUZZED(-7.6), (_GLF_FUZZED(-7.6)) / 1.0), _GLF_FUZZED(-7.6))) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0), float(1.0), bool(true)), cos(sin(0.0)), _GLF_ONE(1.0, injectionSwitch.y), abs(1.0), 1.0, 0.0))), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0)) / 1.0), float(1.0), bool(true)), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), max((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(2.9), _GLF_IDENTITY(float(mat2(_GLF_FUZZED(2.9), 0.0, 1.0, 1.0)), max(float(mat2(_GLF_FUZZED(2.9), 0.0, 1.0, 1.0)), float(mat2(_GLF_FUZZED(2.9), 0.0, 1.0, 1.0)))))), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), _GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (true ? float(_GLF_FUZZED(2.9)) : _GLF_FUZZED(1.1)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), max((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))))) : _GLF_FUZZED(7.9))))) / 1.0), float(1.0), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_IDENTITY(_GLF_FUZZED(2.9), 1.0 * (_GLF_FUZZED(2.9))))))) / 1.0), float(1.0), bool(true)))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mat4(1.0) * (vec4(0.0, 1.0, 1.0, 0.0))), vec4(0.0, 1.0, 1.0, 0.0)))), dot(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0)) * mat4(1.0), vec4(mat3x4((vec4(1.0, 0.0, 0.0, 1.0)) * mat4(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), vec4(0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2.5)), float(1.0), bool(true))), 0.0))), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8623.2790) : 1.0)), 1.0)), tan(0.0), 1.0, 0.0, 1.0, sin(0.0), abs(0.0), sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), exp(0.0)), (mat3x4(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(_GLF_IDENTITY(2.9, _GLF_IDENTITY(float(mat3x4(2.9, abs(1.0), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat3x4(2.9, abs(1.0), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x4(2.9, abs(1.0), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))))))) / 1.0), float(1.0), bool(true)), min(_GLF_IDENTITY(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), mix(float(_GLF_FUZZED(791.481)), float((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), bool(true))) / 1.0), float(1.0), bool(true)), (mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), mix(float(_GLF_FUZZED(791.481)), float((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), bool(true))) / 1.0), float(1.0), bool(true))) * determinant(mat4(sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0))), (mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), mix(float(_GLF_FUZZED(791.481)), float((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), bool(true))) / 1.0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), mix(float(_GLF_FUZZED(791.481)), float((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), bool(true))) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), mix(float(_GLF_FUZZED(791.481)), float((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), bool(true))) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))), mix(float(_GLF_FUZZED(791.481)), float((_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9)))))), bool(true))) / 1.0))), float(1.0), bool(true))) - 0.0), mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) - 0.0)))), max(float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) - 0.0)))), float(_GLF_IDENTITY(_GLF_FUZZED(2.9), max(_GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) - 0.0)))))), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0), float(1.0), bool(true)))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-9.3)), float(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), bool(true)))), 0.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(88.73)))), float(float(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(88.73))))))), float(_GLF_FUZZED(21.75)), bool(false))), tan(0.0), 1.0, 0.0, 1.0, sin(0.0), abs(0.0), sqrt(1.0), exp(0.0))) * mat3(1.0)))), 1.0 * (mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(2.9), mix(float(_GLF_FUZZED(2.9)), float(_GLF_FUZZED(-279.076)), _GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), (false ? _GLF_FUZZED(-7.6) : float(_GLF_IDENTITY(_GLF_FUZZED(2.9), min(_GLF_FUZZED(2.9), _GLF_IDENTITY(_GLF_FUZZED(2.9), clamp(_GLF_FUZZED(2.9), _GLF_FUZZED(2.9), _GLF_FUZZED(2.9)))))))), _GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(float(_GLF_FUZZED(2.9)), float(_GLF_FUZZED(2.9))))))) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.5) : 1.0))), (false ? _GLF_FUZZED(101.606) : float(1.0))), bool(true)))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(2.9)), (false ? _GLF_FUZZED(-7.6) : float(_GLF_FUZZED(2.9)))), float(_GLF_FUZZED(2.9))))) / 1.0), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec2(bool(true), true))))))))), _GLF_struct_3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec4(bvec3(bvec3(bvec3(true))), false)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0))) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), _GLF_IDENTITY((1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(((1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(((1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (((1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0), (_GLF_IDENTITY((1), 0 | ((1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))))))), ivec2(ivec3(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), min(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), ~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757))))))) * 1)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_IDENTITY(_GLF_FUZZED(-75757), max(_GLF_FUZZED(-75757), _GLF_IDENTITY(_GLF_FUZZED(-75757), (false ? _GLF_FUZZED(-90198) : _GLF_FUZZED(-75757)))))))), min(~ (_GLF_IDENTITY(~ (1), (true ? _GLF_IDENTITY(~ (1), 1 * (~ (1))) : _GLF_FUZZED(-75757)))), ~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757))))))) * 1))) / 1))), ((_GLF_IDENTITY(~ (1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), (true ? ~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))) : _GLF_FUZZED(-46435))), ~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757))))))) * 1))))) | ((_GLF_IDENTITY(~ (1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), min(~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757)))), ~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(-75757))))))) * 1)))))))), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(6), ivec2(6)))) | (ivec2(1))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (1 ^ 1) ^ (0)), 0))), ((0 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (1 ^ 1) ^ (0)), 0)))) >> 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(max(79515, 83584)) : _GLF_IDENTITY(int(7), int(7)))))))), bvec3(true), uvec2(1u)), _GLF_struct_4(1u, uvec4(1u), vec3(_GLF_IDENTITY(1.0, 0.0 + (1.0)))), true), _GLF_struct_7(_GLF_struct_6(bvec3(_GLF_IDENTITY(true, (true) && true)), mat4x3(1.0), mat3(1.0), mat2x3(1.0), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(0u, 0u, 0u) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x, (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) | (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)) + subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)) + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x), 1u)), uvec4(1u));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | 0))))); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read = atomicLoad(buf[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y], 4, 64, 0);
 atomicStore(buf[_GLF_struct_replacement_8._f3._f0.next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.x), bool(true)))))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), min(ivec4(0, 1, 1, 1), ivec4(0, 1, 1, 1))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec2(uint(4u), 0u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(uvec2(uint(4u), 0u)), (uint(uvec2(uint(4u), 0u))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) / 1u)), 0u))) + _GLF_IDENTITY(1, min(1, 1)) < GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           do
                            {
                             do
                              {
                               atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, (true ? GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, (true ? GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y : _GLF_FUZZED(workgroup_base)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, (true ? GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, (true ? GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y : _GLF_FUZZED(workgroup_base)))) | 0u)))) | 0u)], read, _GLF_IDENTITY(4, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) * 1, max(_GLF_IDENTITY((4) * 1, (_GLF_IDENTITY((4) * 1, 0 ^ ((4) * 1))) | _GLF_IDENTITY(((4) * 1), (((4) * 1)) ^ 0)), (4) * 1))), (_GLF_IDENTITY(4, (4) * 1)) / 1), 4), (min(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)), ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0))) * 1), 0, 0, 0)))), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0))), ((~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)))) | 0), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)) * 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)) | 0))))), clamp(~ (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), (true ? (_GLF_IDENTITY(4, max(4, 4))) : _GLF_FUZZED(68866))) - 0))), ~ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)), max(~ _GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)) : 4)), max(4, 4))) - 0)), (false ? _GLF_FUZZED(75591) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0), min(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0))), 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)), ~ (~ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0))))), int(ivec4(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)), 1, 1, 0)))))), clamp(~ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) - 0), max(4, 4))) - 0))), ~ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0))), ~ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)))))))) + _GLF_IDENTITY(0, 0 ^ (0))) : _GLF_FUZZED(-45674))))) * 1), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (4) >> 0))), min(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) >> 0))), int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) >> 0)))))))))) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)), (int(_GLF_IDENTITY(5, (_GLF_IDENTITY(_GLF_IDENTITY(5, (5) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(5, (5) / 1), (_GLF_IDENTITY(5, (5) / 1)) | 0)) | 0)) - 0))) / 1))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))), min((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec3(_GLF_IDENTITY(int(5), int(5)), 1, 1))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 << _GLF_IDENTITY(int(5), int(5)))))))), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(int(int((0 << _GLF_IDENTITY(int(5), int(5))))), (int(int((0 << _GLF_IDENTITY(int(5), int(5)))))) | (int(int((0 << _GLF_IDENTITY(int(5), int(5)))))))), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) + 0), (true ? 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) + 0) : _GLF_FUZZED(14602))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)))))), (0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) | 0), 5))))), (0 << _GLF_IDENTITY(int(5), int(5))))))), 64, 4);
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))) & 1)); _injected_loop_counter ++)
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch - 447.479)) : injectionSwitch)).y)), false))))) && true))
                                  {
                                   do
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (false ? _GLF_FUZZED(-878.601) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), mix(float(_GLF_FUZZED(-8.8)), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(true))))) : _GLF_FUZZED(8.7)))) || false)))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ (1 ^ (0 ^ 1)))) / 1) << _GLF_IDENTITY(int(5), int(5))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))) || false))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), abs(exp(0.0)))), (float(vec2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), abs(exp(0.0))))) - 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1)))), (float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1))))) * 1.0), bool(false))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), abs(exp(0.0)))), (float(vec2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), abs(exp(0.0))))) - 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1)))), (float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1))))) * 1.0), bool(false))), exp(0.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), abs(exp(0.0)))), (float(vec2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), abs(exp(0.0))))) - 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1)))), (float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1), _GLF_FUZZED(-9.1))))) * 1.0), bool(false))), exp(0.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), float(_GLF_FUZZED(-9.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))))), float(_GLF_FUZZED(-9.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))), mix(float(_GLF_FUZZED(-1.3)), float(mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-38.66)), float(1.0), bool(true))) * (injectionSwitch.y))), float(_GLF_FUZZED(-9.1)), bool(_GLF_IDENTITY(false, bool(bool(false)))))), bool(true)))) / 1.0)))))))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)) > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(16.80))) < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))) && true)))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), min((0), (0)))) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                               else
                                {
                                }
                              }
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                }
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true))))) || (_GLF_IDENTITY(false, bool(bool(false)))))))), true && (false))))
                                barrier();
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (int(_GLF_ONE(1.0, injectionSwitch.y))), (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))) + 0)))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                              }
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)))));
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 1.0)), min(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 1.0)), vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 1.0))))), injectionSwitch)).y)))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), true, true, true)))) && true))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))), ! (! (_GLF_DEAD(false)))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (0) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 barrier();
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                            barrier();
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) >> 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1)); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false) || _GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), false))))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), false))))), bool(bool((bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(true, (true) && true)), false))))))))) && true), bool(bvec2((bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), false))))), true))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))))))))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
                      barrier();
                     subgroupAll(false);
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bool(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3)))) + 0.0) > injectionSwitch.y)) || (false))))), bool(bvec4(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((true), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY((true), bool(bvec4((true), true, true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), (bool((! (_GLF_IDENTITY(true, ! (! (true))))))) || false))))))))), (! _GLF_IDENTITY((true), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY((true), bool(bvec4((true), true, true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), (bool((! (_GLF_IDENTITY(true, ! (! (true))))))) || false), ! (! (_GLF_IDENTITY(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), (bool((! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, ! (! (true))))), true && (! ((_GLF_IDENTITY(true, ! (! (true)))))))))))) || false))))))))))))) && true)), false || _GLF_IDENTITY(((! (true))), true && (((! (true))))))) && true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (true), _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec4((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))), false))) && true, ! (! ((false) && true)))) || (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec4((true), true, true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(bvec4((true), true, true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), ! (! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))))))))))))))) || false))))), false || ((! (true))))) && true) || false))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), ((! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), (_GLF_IDENTITY(! (false), (! (false)) || false)) && true)))))))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), (float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))) - 0.0))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), 0.0))) > injectionSwitch.y)) && true))))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ ((0 >> _GLF_IDENTITY(int(8), int(8))) | 0)), (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = (1 | _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))) << 0)))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) ^ 0))))
                      {
                       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (false ? _GLF_FUZZED((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size | _GLF_IDENTITY(uvec3(47730u, _GLF_IDENTITY(162812u, (162812u) | (162812u)), 159562u), max(uvec3(47730u, 162812u, 159562u), _GLF_IDENTITY(uvec3(47730u, 162812u, 159562u), min(uvec3(47730u, 162812u, 159562u), _GLF_IDENTITY(uvec3(47730u, 162812u, 159562u), clamp(uvec3(47730u, 162812u, 159562u), uvec3(47730u, 162812u, 159562u), uvec3(47730u, 162812u, 159562u))))))))) : GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))) ? GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size : _GLF_FUZZED(uaddCarry(uvec3(53349u, 23510u, 46732u), uvec3(25055u, 189169u, 142972u), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)))).y], read, 4, 64, 4);
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) ^ 0)) << 0), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) ^ 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0 : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) ^ 0)) << 0), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) ^ 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0 : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) ^ 0)) << 0), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) ^ 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0 : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) ^ 0)) << 0), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) ^ 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0 : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter)))))) - 0)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) || false))) || false))) || false)))))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y))), 0.0, _GLF_IDENTITY(log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), mix(float(_GLF_FUZZED(-5.4)), float(_GLF_IDENTITY(log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), min(log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), log(determinant(mat2(1.0, 0.0, 0.0, 1.0)))))), bool(true))), 1.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))))), (mat4(_GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y))), 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 1.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0)), (float(mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0))) - 0.0)) : _GLF_FUZZED(round(2.1)))), 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, 1.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), (false ? _GLF_FUZZED(0.5) : _GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) + 0.0))), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)), _GLF_IDENTITY(float(mat3(clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0))), (float(mat3(clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (true ? _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))) : _GLF_FUZZED(vec3(1.1, 85.92, -318.109))))), 1.0, 0.0, sqrt(0.0)))) - 0.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false)))) || false), true)))) && true))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     subgroupAll(true);
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
