#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 uint _f0;
 uvec4 _f1;
 uint _f2;
 vec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 mat3x2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 _GLF_struct_9 _f1;
 bvec4 _f2;
 uint workgroup_base;
 bvec3 _f3;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 mat3 _f1;
 mat2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 int _f1;
 float _f2;
 float _f3;
 float _f4;
 bvec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 uvec3 _f1;
 bvec3 _f2;
 uvec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 mat4x2 _f2;
 vec2 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 uint subgroup_id;
 ivec2 _f1;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uvec4 _f1;
 mat4x2 _f2;
 uint _f3;
 bool _f4;
 vec2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 bool _f1;
 _GLF_struct_2 _f2;
 mat2x3 _f3;
 bvec2 _f4;
 _GLF_struct_6 _f5;
 bool _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(bvec2(true), _GLF_struct_0(bvec3(true), uvec4(1u), mat4x2(1.0), 1u, true, vec2(1.0), mat3x2(1.0))), true, _GLF_struct_2(mat4(1.0), gl_SubgroupID, ivec2(1)), mat2x3(1.0), bvec2(true), _GLF_struct_6(_GLF_struct_3(bvec4(true), uvec3(1u), bvec3(true), uvec3(1u), true), _GLF_struct_4(ivec4(1), 1, 1.0, 1.0, 1.0, bvec2(true), mat3x4(1.0)), mat4x2(1.0), vec2(1.0), _GLF_struct_5(vec3(1.0), mat3(1.0), mat2(1.0), vec3(1.0))), true);
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat3x2(1.0), _GLF_struct_9(_GLF_struct_8(1u, uvec4(1u), 1u, vec4(1.0), 1u), mat3x2(1.0), mat3x4(1.0)), bvec4(true), workgroup_size * workgroup_id, bvec3(true));
 uint virtual_gid = _GLF_struct_replacement_10.workgroup_base + _GLF_struct_replacement_7._f2.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_10.workgroup_base + _GLF_struct_replacement_7._f2.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
          }
        }
      }
    }
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     subgroupAll(true);
    }
  }
}
