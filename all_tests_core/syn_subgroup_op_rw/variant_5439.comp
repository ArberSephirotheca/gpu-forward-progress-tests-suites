#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true)))))
      barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_NumWorkGroups.x), max(uint(gl_NumWorkGroups.x), uint(gl_NumWorkGroups.x)))), (uint(_GLF_IDENTITY(uint(gl_NumWorkGroups.x), max(uint(gl_NumWorkGroups.x), uint(gl_NumWorkGroups.x))))) / 1u));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) | 0, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) ^ 0))) | 0) + 0))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, clamp(2, 2, 2)))) ^ 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (int(2)) ^ 0)), (~ (_GLF_IDENTITY(int(2), (int(2)) ^ 0))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (int(2)) ^ 0)), (~ (_GLF_IDENTITY(int(2), (int(2)) ^ 0))) >> 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.5)), float(injectionSwitch.y), bool(true)))))))), false, false, false))), _GLF_IDENTITY(true, true && (true)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), false, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, cos(log(1.0)), 0.0, length(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true, false))) && true)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[0], _GLF_IDENTITY((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1], ((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]) + 0.0)), vec2(_GLF_FUZZED(360.634), _GLF_FUZZED(-39.45)), bvec2(false, false)))).x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))) : _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))))), min(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((~ (gl_WorkGroupSize.x)), (false ? _GLF_FUZZED(60348u) : (~ (gl_WorkGroupSize.x))))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize))))).x)))))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, true)))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(8.9, -7045.3636, -636.119, 2508.5740).a), _GLF_FUZZED(-1669.0693)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(8.9, -7045.3636, -636.119, 2508.5740).a), _GLF_FUZZED(-1669.0693)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(8.9, -7045.3636, -636.119, 2508.5740).a), _GLF_FUZZED(-1669.0693)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(8.9, -7045.3636, -636.119, 2508.5740).a), _GLF_FUZZED(-1669.0693)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(8.9, -7045.3636, -636.119, 2508.5740).a), _GLF_FUZZED(-1669.0693)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))) || false)))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), false, false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, false))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true, false))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, ! (! (true))))))), bool(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))) && true))))))))), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, false))))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), true && (bool(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, ! (! (true))))))), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || (! (false)))), false || ((_GLF_IDENTITY(! (false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || (! (false))))))), false, true, true)))), false || ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || (! (false)))), false || ((_GLF_IDENTITY(! (false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || (! (false))))))), false, true, true))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u), _GLF_IDENTITY((uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, max(0u, 0u)))), 0u))), ~ (~ ((uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), _GLF_IDENTITY((uvec3(1u, 1u, 1u)) | uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), min(uint(uvec2(0u, 1u)), _GLF_IDENTITY(uint(uvec2(0u, 1u)), (uint(uvec2(0u, 1u))) << 0u)))), 0u), ~ (~ ((uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))))))) ^ uvec3(0u, 0u, 0u))) | _GLF_IDENTITY((uvec3(1u, 1u, 1u)), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((uvec3(1u, 1u, 1u))))))), gl_WorkGroupID, gl_WorkGroupID)).x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(_GLF_IDENTITY(1u, (1u) + 0u), 1u, 1u)) ^ uvec3(0u, 0u, 0u))) | (uvec3(1u, 1u, 1u))))), gl_WorkGroupID, gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), (gl_WorkGroupID) - (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (uvec3(1u, 1u, 1u)))), (uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u))) | (uvec3(1u, 1u, 1u))))), gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u))) | (uvec3(1u, 1u, 1u))))), gl_WorkGroupID, gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), (gl_WorkGroupID) - (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (uvec3(1u, 1u, 1u)))), (uvec3(1u, 1u, 1u)) ^ uvec3(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u))) | (uvec3(1u, 1u, 1u))))), gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)).x, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(94929u) : 1u))) / 1u), (_GLF_IDENTITY(1u, (1u) / _GLF_IDENTITY(1u, 0u + (1u)))) - 0u) : _GLF_FUZZED(_GLF_IDENTITY(usubBorrow(workgroup_size, num_workgroup, subgroup_size), ~ (~ (_GLF_IDENTITY(usubBorrow(workgroup_size, num_workgroup, subgroup_size), 0u | (usubBorrow(workgroup_size, num_workgroup, subgroup_size))))))))), 1u, 1u) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), _GLF_IDENTITY((uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY((uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((uvec3(1u, 1u, 1u)), ((uvec3(1u, 1u, 1u))) | ((uvec3(1u, 1u, 1u))))) << uvec3(0u, 0u, 0u)), (uvec3(1u, 1u, _GLF_IDENTITY(1u, 0u + (1u)))))) + uvec3(0u, 0u, 0u)))))), gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)))).x, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))), float(_GLF_FUZZED(-1.4)), bool(false))) : _GLF_FUZZED(39.91))), injectionSwitch.y))))) << 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), ~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u);
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x) + 0.0))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))).x > injectionSwitch.y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5.4), max(_GLF_FUZZED(-5.4), _GLF_FUZZED(-5.4))) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x) + 0.0))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))).x > injectionSwitch.y)))) || false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5310.6840), _GLF_FUZZED((247.192))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), injectionSwitch)).x > injectionSwitch.y)))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(182.265)), bool(false))), 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, log(1.0)), vec4(1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true)))))))))))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) << 0) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3(false || (_GLF_WRAPPED_IF_FALSE(false)), true, false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, 1u * _GLF_IDENTITY((virtual_gid), uint(_GLF_IDENTITY(uint((virtual_gid)), ~ (_GLF_IDENTITY(~ (uint((virtual_gid))), (~ (uint((virtual_gid)))) | (~ (uint((virtual_gid))))))))))) << 0u, min((_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(1u * (virtual_gid), min(1u * (virtual_gid), 1u * (virtual_gid))))) << 0u, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(1u, (1u) << 0u) * (virtual_gid))) << 0u)))], _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(20438, min(_GLF_IDENTITY(20438, (20438) | (20438)), _GLF_IDENTITY(20438, (20438) | (20438))))) : 4))) << _GLF_IDENTITY(0, clamp(0, 0, 0))), 4)), 64, _GLF_IDENTITY(2, (2) - 0));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))))), false || (bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) | 1), int(int((1 | 1))))); _injected_loop_counter ++)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), true && (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-32.80)), float(injectionSwitch.x), bool(true)))) * 1.0), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-56.69)), bool(false))), mix(float(_GLF_FUZZED(5.9)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-258.607) : injectionSwitch.x)))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), bool(true))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)))))) && true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) >> 0))), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0))), ~ (0)))))))); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 + (1))), 1u * (uint(_GLF_IDENTITY(1, 0 + (1))))), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1), ivec3(1, 1, 1) * (ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1)))), (int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1))) * 1))), (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1)), (int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1))) * 1))), (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, _GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, min(1, 1))))), (int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1))) * 1))), (true ? (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, _GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, min(1, 1))))), (int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1))) * 1))) : _GLF_FUZZED(_injected_loop_counter)))) << 0)) | 0), (_GLF_IDENTITY(true, false || (true)) ? ~ (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, _GLF_IDENTITY((4) | 0, ((4) | 0) * 1)), 0, 1)), (int(ivec3(_GLF_IDENTITY(4, (4) | 0), 0, 1))) * _GLF_IDENTITY(1, ~ (~ (1)))))) : _GLF_FUZZED((~ _injected_loop_counter)))))), 64, 4);
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bool(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))), (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0)))))) / abs(vec2(1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0)))), (false ? _GLF_FUZZED((mat4x3(3.2, 2.7, -30.75, -1.7, -85.46, 945.479, -7.6, -7.3, -1167.1740, -56.27, 588.129, -6575.5074) * mat3x4(1892.6843, 336.291, 0.1, -4.3, 0.3, 352.570, 5.1, 8.8, -4734.0137, 1427.5135, -9.2, 33.80))) : _GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))))), vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 0.0, 1.0, 1.0))))), max(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec4(vec2(1.0, 1.0), 0.0, 0.0))), vec2(1.0, 1.0)))))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))), vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0)))))))))).y, (false ? _GLF_FUZZED(atanh(3.0)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))), (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0)))))) / abs(vec2(1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0)))), (false ? _GLF_FUZZED((mat4x3(3.2, 2.7, -30.75, -1.7, -85.46, 945.479, -7.6, -7.3, -1167.1740, -56.27, 588.129, -6575.5074) * mat3x4(1892.6843, 336.291, 0.1, -4.3, 0.3, 352.570, 5.1, 8.8, -4734.0137, 1427.5135, -9.2, 33.80))) : _GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))))), vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 0.0, 1.0, 1.0))))), max(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec4(vec2(1.0, 1.0), 0.0, 0.0))), vec2(1.0, 1.0)))))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0))))), vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0)))))))))).y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))), bool(bvec3(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true, true)))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(false, false || (false)) || (bool(bvec4(false, false, true, true)))))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(false || (bool(bvec4(false, false, true, true))), false || (false || (bool(bvec4(false, false, true, true)))))))) || false), true, _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))), bool(bvec2(bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (false)), true), true, true))))), false, true, true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))))))), bool(bvec2(bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (false)), true), true, true))))), false, true, true)))))))) || false), true, true), true))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(82.37, 4.8)) : injectionSwitch)).y), true && ((injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-6401.3774)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-6401.3774)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(690.882)), bool(false))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y))))))))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false))));
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))));
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       atomicStore(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), clamp((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (false ? _GLF_FUZZED(read) : (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))), (false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))) | ((false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))) / 1u), virtual_gid, virtual_gid))), clamp(max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), clamp((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (false ? _GLF_FUZZED(read) : (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))), (false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))) | ((false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))) / 1u), virtual_gid, virtual_gid))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), clamp((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (false ? _GLF_FUZZED(read) : (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))), (false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))) | ((false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))) / 1u), virtual_gid, virtual_gid))), (max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), clamp((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (false ? _GLF_FUZZED(read) : (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))), (false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))) | ((false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))) / 1u), virtual_gid, virtual_gid)))) * 1u), max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), clamp((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : virtual_gid), (false ? _GLF_FUZZED(read) : (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))), (false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))) | ((false ? _GLF_FUZZED(subgroup_id) : virtual_gid)))), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))) / 1u), virtual_gid, virtual_gid))))))], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))) | _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) - 0)) >> 0)))), ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) - 0)) >> 0))))) | 0)), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), min(_GLF_IDENTITY(4, 0 ^ (4)), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) << 0))), _GLF_IDENTITY(4, 0 ^ (4)), _GLF_IDENTITY(4, 0 ^ (4)))), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> _GLF_IDENTITY(0, (false ? _GLF_FUZZED((++ _injected_loop_counter)) : 0))))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), ~ (~ (int(ivec2(0, 0))))))))))))))))) / 1), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 0))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, ~ (~ (4)))))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (int(int(0))) / 1)) ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), min(_GLF_IDENTITY(4, 0 ^ (4)), _GLF_IDENTITY(4, 0 ^ (4))))) >> 0))), ~ _GLF_IDENTITY((~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))))), ((~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))) ^ 0))))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, _GLF_IDENTITY(0, ~ (~ (0))) ^ (4))) >> 0))), (0 ^ 1) * (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), clamp(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY((4), clamp((4), (4), (4)))), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1, min(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1, max((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1, (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1, (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) | 0)), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))), ~ (~ ((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))))))))) / 1))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) / 1)))) >> 0))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY((4), min(_GLF_IDENTITY((4), ((4)) * 1), _GLF_IDENTITY((4), ((4)) | ((4))))))) >> _GLF_IDENTITY(0, ~ (~ (0)))))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))))))))))))), 0 | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))) - (0 & 32835))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), _GLF_IDENTITY(0 ^ (4), clamp(0 ^ (4), _GLF_IDENTITY(0 ^ (4), clamp(0 ^ (4), 0 ^ (4), 0 ^ (4))), 0 ^ (4)))), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0)) << (0 << _GLF_IDENTITY(int(4), int(4)))))))))))))) / 1), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY((4), 0 ^ ((4))))) >> 0))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), 1 * (_GLF_IDENTITY(0, min(0, 0)))), 1, 0), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY(0, min(0, 0))))) | 0), 1, 0), (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0)) >> ivec3(0, 0, 0)), ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0)))), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0), (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0)) >> ivec3(0, 0, 0)), ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0)))))), (int(int(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0), (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0)) >> ivec3(0, 0, 0)), ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, 0))))))) << 0))) ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0))), min(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), (0 ^ (4)) ^ 0))) >> 0))), 0 | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), (0 ^ (4)) ^ 0))) >> 0))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), 0 ^ (4))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> _GLF_IDENTITY(0, (0) >> 0)), 0, 1, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0)))), clamp(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), 0 ^ (4))) >> 0), 0, 1, 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), min(0 ^ (4), 0 ^ (4)))), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), (0 ^ (4)) | (_GLF_IDENTITY(0 ^ (4), (true ? 0 ^ (4) : _GLF_FUZZED(_injected_loop_counter))))))) >> 0), 0, 1, 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), ~ (~ (_GLF_IDENTITY(4, 0 ^ (4)))))) >> 0), 0, 1, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> 0), 0, 1, 0)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))))) | (_GLF_IDENTITY(4, 0 ^ (4))))) >> 0), 0, 1, 0)))))))) >> 0))), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY((4), min((4), _GLF_IDENTITY((4), ((4)) + 0))))) >> 0))))))))) / 1)))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sin(0.0) + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-90.59)), bool(false)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sin(0.0) + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-90.59)), bool(false))))))) && true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), _GLF_IDENTITY((! (false)) && true, true && ((! (false)) && true)))))))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-770.307)), float(injectionSwitch.y), bool(true)))) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-770.307)), float(injectionSwitch.y), bool(true)))) / 1.0)), float(_GLF_FUZZED(float(33145u))), bool(false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), false, false)))) || false)))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
