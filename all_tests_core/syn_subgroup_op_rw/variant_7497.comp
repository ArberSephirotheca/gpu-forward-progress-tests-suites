#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, round(length(normalize(1.0))), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0), mat3(mat4x3(mat3(injectionSwitch, round(length(normalize(1.0))), 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0)))))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - 0)), 0 ^ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id))) ^ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u, 0u ^ (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)))), _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, _GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, _GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id)), (_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), min((_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(86984u) : workgroup_id)), _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), workgroup_id))), ((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) * 1u, ((_GLF_IDENTITY(workgroup_size, (true ? _GLF_IDENTITY(workgroup_size, uint(uvec3(workgroup_size, 0u, 0u))) : _GLF_FUZZED(workgroup_id)))) * 1u) ^ 0u)) * workgroup_id)) - 0u)) >> 0u))) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u))), 0u | (clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))))), (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? uint(uvec3(0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(atomicMax(num_workgroup, subgroup_local_id))))), 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) / 1u)) | (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), max((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) + 0u))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))))), ((0u) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u))), 0u | (clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))))), (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? uint(uvec3(0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(atomicMax(num_workgroup, subgroup_local_id))))), 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) / 1u)) | (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), max((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) + 0u))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (0u)))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + 0u))))))))) ^ 0u))))))));
 for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(4)))) | ((0 >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, round(length(normalize(1.0))), 0.0, 0.0))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), false || (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), false || (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), false || (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))))))), true, false))) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(22.70) : 0.0)), 0.0), max(vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(22.70) : 0.0)), 0.0), vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(22.70) : 0.0)), 0.0))) + (injectionSwitch)))), _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), 1.0)), clamp(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(0.0, 0.0))) + (injectionSwitch)))), 1.0)), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-9.6)) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(884.771))))))) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), (_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), _GLF_IDENTITY(vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)), clamp(vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)), vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, abs(1.0) * (0.0)), 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)), vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)))))) - vec2(0.0, 0.0))), injectionSwitch)))))), 1.0), (false ? _GLF_FUZZED(cosh(vec3(-2.8, 620.433, _GLF_IDENTITY(-9.1, max(-9.1, _GLF_IDENTITY(-9.1, (-9.1) / 1.0)))))) : vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), cos(0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.2)), float(0.0), bool(true))), 0.0)), 0.0, 1.0, 0.0, 1.0, cos(0.0))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.2)), float(0.0), bool(true))), 0.0)), 0.0, 1.0, 0.0, 1.0, cos(0.0)))) / abs(vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)), clamp(vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, (1.0) / 1.0))), cos(0.0))), 0.0, 1.0, 0.0, 1.0)), vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)), vec2(mat2x3(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0))), 0.0, 1.0, 0.0, 1.0)))))) - vec2(0.0, 0.0))), injectionSwitch)))))), 1.0)))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), 1.0))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, 1.0 * (0.0))), (true ? _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y) - 0.0) : _GLF_FUZZED(-4589.7907)))) - _GLF_IDENTITY(determinant(mat2(0.0, abs(1.0), 0.0, 0.0)), mix(float(_GLF_FUZZED(-2.8)), float(determinant(mat2(0.0, abs(1.0), 0.0, 0.0))), bool(true))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id)), subgroup_local_id)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))), _GLF_IDENTITY((true ? (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), clamp(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)))), min(_GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) + 0u), 0u ^ (subgroup_local_id))), 0u ^ (subgroup_local_id), _GLF_IDENTITY(0u ^ (subgroup_local_id), clamp(0u ^ (subgroup_local_id), _GLF_IDENTITY(0u ^ (subgroup_local_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_local_id), 0u ^ (0u ^ (subgroup_local_id))), 0u ^ (subgroup_local_id), _GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) << 0u))), 0u ^ (subgroup_local_id)))))))) : _GLF_FUZZED(workgroup_size)), uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))) ? (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_local_id), min(_GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) + 0u), _GLF_IDENTITY(0u, 0u ^ (0u)) ^ (subgroup_local_id))), 0u ^ (subgroup_local_id), _GLF_IDENTITY(0u ^ (subgroup_local_id), _GLF_IDENTITY(clamp(0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id), _GLF_IDENTITY(0u, (0u) | (0u)) ^ (subgroup_local_id)), _GLF_IDENTITY((clamp(0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id))) | (clamp(0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id))), 0u | ((clamp(0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id))) | (clamp(0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id)))))))))))) : _GLF_FUZZED(workgroup_size)), ~ (~ ((true ? (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_local_id), min(_GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) + 0u), 0u ^ (subgroup_local_id))), 0u ^ (subgroup_local_id), _GLF_IDENTITY(0u ^ (subgroup_local_id), clamp(0u ^ (subgroup_local_id), 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 0u ^ (subgroup_local_id)))))))) : _GLF_FUZZED(workgroup_size))))), 1u, 1u, 1u)))))) / 1u), max(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))), workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, 0u + (subgroup_base)))), subgroup_base)) + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) * 1u), min(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) | (subgroup_base), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) * (_GLF_IDENTITY((subgroup_base) | (subgroup_base), ((subgroup_base) | (subgroup_base)) - 0u)))))), (uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(uint(uint(subgroup_local_id)), max(uint(uint(subgroup_local_id)), uint(_GLF_IDENTITY(uint(subgroup_local_id), _GLF_IDENTITY((uint(subgroup_local_id)), (_GLF_IDENTITY((uint(subgroup_local_id)), uint(uvec3((uint(subgroup_local_id)), 0u, 1u)))) | (_GLF_IDENTITY((uint(subgroup_local_id)), ((uint(subgroup_local_id))) - 0u))) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_base + subgroup_local_id, _GLF_IDENTITY(~ (~ (workgroup_base + subgroup_base + subgroup_local_id)), clamp(~ (~ (workgroup_base + subgroup_base + subgroup_local_id)), ~ (~ (workgroup_base + subgroup_base + subgroup_local_id)), ~ (~ (workgroup_base + subgroup_base + subgroup_local_id))))))), _GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))) + _GLF_IDENTITY(1, 0 + (1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u))));
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-23998) : 4)), clamp(4, 4, _GLF_IDENTITY(4, (4) | (4))))), (~ (_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))))) * 1))), _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, int(ivec2((64) / _GLF_IDENTITY(1, (1) - 0), 0)))), 64))), ((_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, int(ivec2((64) / 1, 0)))), 64)))) - 0) | (64), (_GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) - 0), max(_GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) - 0), ((64) / _GLF_IDENTITY(1, (1) - 0)) << 0), _GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) - 0), ((64) / _GLF_IDENTITY(1, (1) - 0)) ^ 0))), 0), (false ? _GLF_FUZZED(ivec2(67576, 27048)) : ivec2(_GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) - 0), max(_GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) - 0), ((64) / _GLF_IDENTITY(1, (1) - 0)) << 0), _GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) - 0), ((64) / _GLF_IDENTITY(1, (1) - 0)) ^ 0))), 0)))))), 64))), ((_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, clamp(64, 64, 64)))), clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, int(ivec2((64) / 1, 0)))), 64)))) - 0) | (64)) * 1)), 2);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if((subgroup_local_id % _GLF_IDENTITY(2, int(ivec4(2, 1, 0, 0)))) == 0)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       subgroupAll(_GLF_IDENTITY(false, true && (false)));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (64))), 0 ^ (_GLF_IDENTITY(64, ~ (~ (64))))))), 4);
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         subgroupAll(false);
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ (1 | 1))); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-14786) : 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq), clamp(_GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq), _GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq), _GLF_IDENTITY(_GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq), max(_GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq), _GLF_IDENTITY(_GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq), (_GLF_FUZZED(vec4(-99.72, 863.438, 2.4, 8.0).tq)) / exp(vec2(0.0, 0.0))))))))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          break;
                         do
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true)))))), (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))), true && ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false, true))))))) && true)))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)), ~ (_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)))) | (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))))))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-89944) : int(3))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)), ~ (_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 1 * (0)) : _GLF_FUZZED(_injected_loop_counter))))))) | (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))))))))) << 0)) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))))))), clamp((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)), ~ (_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, max(3, 3)))) + 0))), (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)))) | (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), min((int(3)), (int(3)))) + 0))))))))) << 0))), (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)), ~ (_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), (int(3)) + _GLF_IDENTITY(0, min(0, 0))))), (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)))) | (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 | (3))) >> (0 & 65889))), (int(3)) + 0))))))))) << 0))), (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)), ~ (_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), _GLF_IDENTITY((_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), (true ? ~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) / 1))) + 0))) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), (true ? ~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) / 1))) + 0))) : _GLF_FUZZED(_injected_loop_counter)))), max((_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), (true ? ~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) / 1))) + 0))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))), (true ? ~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) / 1))) + 0))) : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(_injected_loop_counter))) | (~ (clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))))))))) << 0)))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec4(bvec2(false, true), false, false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))), false))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (0 | (1 | 1)) * (6))), int(6))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))) * 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))), 0)) : _GLF_FUZZED((_injected_loop_counter & -36681))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(40.70) : 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(1.7))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))) / 1.0)))))), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))) || false)) && true), true))), false || _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), true)))))))))))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(60370))), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false))))))))))
  barrier();
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((0 | 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(86799) : int(5))), int(5))) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 1 * (int(_GLF_IDENTITY(1, min(1, 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(1)))) | (int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, ~ (~ (1)))))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_IDENTITY(false, bool(bvec2(false, true))))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(false, true, false, false)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-72705) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))), (_GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter)))) / 1))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((false ? _GLF_FUZZED(-72705) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(-72705) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))), min((false ? _GLF_FUZZED(-72705) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))), (false ? _GLF_FUZZED(-72705) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))))), (false ? _GLF_FUZZED(-72705) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))))))), ((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_GLF_IDENTITY(-72705, _GLF_IDENTITY((-72705), (true ? (-72705) : _GLF_FUZZED(_injected_loop_counter))) | (-72705))) : _GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter)))))))) * 1), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), max((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))), transpose(transpose(mat3x4(injectionSwitch.x, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)))))))) < _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))), transpose(transpose(mat3x4(injectionSwitch.x, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)))))))) < _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))), transpose(transpose(mat3x4(injectionSwitch.x, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(61.18) : 0.0)), 0.0, 0.0)), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)))))))) < _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0)))))))))))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6133.0120), _GLF_FUZZED(-406.739)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), abs(vec2(1.0, 1.0)) * (vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (_GLF_IDENTITY(! (true), true && (! (true))))) && true))) && true), (injectionSwitch.x < injectionSwitch.y))))).y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     break;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        barrier();
                       break;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y))))))))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                              continue;
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     continue;
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                     barrier();
                                    }
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                              barrier();
                             barrier();
                            }
                           return;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / vec2(1.0, 1.0)))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
                      }
                    }
                   do
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(693.109), _GLF_FUZZED(5.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     break;
                    }
                   barrier();
                  }
                }
               else
                {
                }
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) && true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))))))), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           subgroupBarrier();
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)), false, true, false))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
}
