#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 float _f0;
 mat4x3 _f1;
 uvec3 _f2;
 mat3x2 _f3;
 mat3 _f4;
 uvec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_13 {
 mat4x2 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 mat2 _f1;
 uvec4 _f2;
 bvec4 _f3;
 mat3x4 _f4;
 mat2x3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 mat2x3 _f1;
 _GLF_struct_13 _f2;
 bool _f3;
 mat2x3 _f4;
 _GLF_struct_14 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 bvec4 _f1;
 _GLF_struct_15 _f2;
 bvec4 _f3;
 bool _f4;
 uint next_virtual_gid;
} ;

struct _GLF_struct_9 {
 int _f0;
 mat4 _f1;
 uint subgroup_base;
 mat4x3 _f2;
 bvec2 _f3;
 vec4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 _GLF_struct_9 _f1;
 bvec3 _f2;
 uint _f3;
 mat2 _f4;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 uvec4 _f1;
 bvec4 _f2;
 float _f3;
} ;

struct _GLF_struct_6 {
 float _f0;
 int _f1;
 mat4x3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 mat3 _f3;
 int _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 uint _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 ivec4 _f1;
 mat2 _f2;
 int _f3;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat3x2 _f1;
 vec2 _f2;
 vec3 _f3;
 vec2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_4 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_10 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_0 {
 uint workgroup_id;
 ivec4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x = subgroup_size;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.x = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.x;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z = workgroup_size;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_WorkGroupID.x, ivec4(1));
 uint workgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z * _GLF_struct_replacement_0.workgroup_id;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_4(_GLF_struct_1(1, mat3x2(1.0), vec2(1.0), vec3(1.0), vec2(1.0), ivec2(1)), _GLF_struct_2(mat4x2(1.0), ivec4(1), mat2(1.0), 1), _GLF_struct_3(ivec2(1), 1u, mat2x4(1.0))), _GLF_struct_8(_GLF_struct_5(uvec3(1u), vec2(1.0)), _GLF_struct_6(1.0, 1, mat4x3(1.0), mat4x2(1.0)), _GLF_struct_7(uvec2(1u), uvec4(1u), bvec4(true), 1.0), mat3(1.0), 1, uvec4(1u)), _GLF_struct_10(ivec4(1), _GLF_struct_9(1, mat4(1.0), subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, mat4x3(1.0), bvec2(true), vec4(1.0), uvec3(1u)), bvec3(true), 1u, mat2(1.0)), mat3x4(1.0));
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = _GLF_struct_replacement_11._f2._f1.subgroup_base;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.z;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y = virtual_gid;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(mat3x2(1.0), bvec4(true), _GLF_struct_15(_GLF_struct_12(ivec4(1), mat2(1.0), uvec4(1u), bvec4(true), mat3x4(1.0), mat2x3(1.0), bvec3(true)), mat2x3(1.0), _GLF_struct_13(mat4x2(1.0), uvec4(1u), mat2x3(1.0), mat2x3(1.0)), true, mat2x3(1.0), _GLF_struct_14(1.0, mat4x3(1.0), uvec3(1u), mat3x2(1.0), mat3(1.0), uvec3(1u), bvec4(true)), mat3x4(1.0)), bvec4(true), true, workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + ((GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.z + 1) % GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x));
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x = _GLF_struct_replacement_16.next_virtual_gid;
 uint read = atomicLoad(buf[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y], 4, 64, 2);
 GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.y = read;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.y;
  }
 do
  {
   if((GLF_merged3_0_1_13_1_1_4_2_1_17num_workgroupreadsubgroup_local_id.z % 2) == 0)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     subgroupAll(false);
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             do
              {
               atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], uint(1), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             subgroupAll(false);
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], uint(1), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     subgroupBarrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z, 4, 64, 4);
  }
}
