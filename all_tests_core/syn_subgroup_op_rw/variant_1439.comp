#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 mat3 _f0;
 mat4x2 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 mat3 _f4;
 uint _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_19 {
 float _f0;
 mat4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_18 {
 ivec2 _f0;
 mat3x4 _f1;
 bvec3 _f2;
 vec2 _f3;
 bvec2 _f4;
 vec2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_17 {
 uint _f0;
} ;

struct _GLF_struct_16 {
 bool _f0;
 uvec2 _f1;
 mat3x2 _f2;
 bvec4 _f3;
 mat2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_21 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 ivec2 _f2;
 _GLF_struct_18 _f3;
 _GLF_struct_19 _f4;
 _GLF_struct_20 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_14 {
 int _f0;
 bvec4 _f1;
 mat3x2 _f2;
 float _f3;
 bvec4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_13 {
 bvec4 _f0;
 mat2 _f1;
 uint _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_15 {
 ivec3 _f0;
 _GLF_struct_13 _f1;
 vec2 _f2;
 _GLF_struct_14 _f3;
 mat3x4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_11 {
 uvec3 _f0;
 uvec2 _f1;
 vec4 _f2;
 float _f3;
 bvec2 _f4;
 uint _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_10 {
 bvec3 _f0;
 ivec4 _f1;
 ivec2 _f2;
 mat2x4 _f3;
 mat4x2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_12 {
 uvec3 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 mat2 _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_7 {
 int _f0;
 mat4x2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 mat2x3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 ivec4 _f1;
 mat2 _f2;
 float _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 uvec4 _f1;
 uvec3 _f2;
 vec2 _f3;
 int _f4;
 mat2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat2x3 _f1;
 int _injected_loop_counter;
 uvec2 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_22 {
 _GLF_struct_3 _f0;
 mat2x3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_15 _f5;
 _GLF_struct_21 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(log2(exp(vec2(-7.9, 107.438)))) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y)), false)))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(54333))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) + 0), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), int(_GLF_IDENTITY(2, (2) | (2))), int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))));
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3))), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (3)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec4(_GLF_IDENTITY(int(3), int(3)), 0, 1, 1))))), _GLF_IDENTITY(int(3), int(3))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3))), int(ivec3((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3)), max((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3))))), 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3))), int(ivec3(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - (0 & -94918)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(3), max(int(3), int(3))))), int(ivec3(~ (~ (_GLF_IDENTITY(int(3), max(int(3), int(3))))), 1, 0)))))), 0, 1))), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0))), (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) | 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-8201) : 3))), int(3))), int(ivec3(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) - 0)))) >> _GLF_IDENTITY(int(3), int(3))), 0, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec2(1, 1))), 1, 1)))))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (false ? _GLF_FUZZED(int(true)) : _GLF_IDENTITY(int(3), int(3))))), int(ivec3(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)))))) << 0), ((_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, (1) | (1)))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) >> _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY((3) - 0, ((3) - 0) | ((3) - 0))))), (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))) | (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0)))))) >> _GLF_IDENTITY(int(3), int(3))))) | (_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 & ivec2(10133, 68164).x), ~ (~ (_GLF_IDENTITY((0 & ivec2(10133, 68164).x), ((0 & ivec2(10133, 68164).x)) | (-59035 & 0))))) | (0 | 0)))) | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -14370, (0 & -14370) / 1))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 1.0))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))) * mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))))))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))) && true)))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(853.054), _GLF_FUZZED(552.903)), vec2((injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (0)))], (injectionSwitch)[1]), bvec2(true, true))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, false || ((_GLF_IDENTITY(false, (false) || false)) && true))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, false)), false || (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false))) || false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y)))), true && ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y)))))))))), ((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), false || _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, (false) || false)))), true && ((bool(bool(_GLF_IDENTITY(false, (false) || false)))))))) || (_GLF_IDENTITY(false, ! (! (false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) || false) || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))))))))))))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   return;
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-21.08) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))))
            return;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 + (1))])).y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || false))))))
              continue;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), false)), (bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), false))) && true))))))))), false, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)), true))), false, true, true))) || false)))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (true ? _GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])) : _GLF_FUZZED(workgroup_id))), max(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], uint(uvec4(buf[virtual_gid], 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))), (_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))), ((_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))))) | 0u)) - _GLF_IDENTITY(0u, (0u) | (0u))) << 0u)) / 1u), 4, 64, 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) | (_GLF_IDENTITY(2, (2) ^ 0)))), ~ _GLF_IDENTITY((~ (int(2))), ~ (~ ((~ (int(2))))))), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(distance(vec4(2951.3192, 2782.1073, 27.75, -2303.7503), vec4(-6055.3333, -78.54, -9483.0128, 9472.2585))) : injectionSwitch.x))) + 0.0) < injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)) < injectionSwitch.y))))
    barrier();
  }
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, abs(1.0), 1.0))) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(75017) : 1, int(int(false ? _GLF_FUZZED(75017) : 1)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false)))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), bool(bvec3((bool(bvec3(false, true, true))), true, false))))))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-490.691), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(5.0), clamp(_GLF_IDENTITY(_GLF_FUZZED(5.0), max(_GLF_FUZZED(5.0), _GLF_IDENTITY(_GLF_FUZZED(5.0), clamp(_GLF_FUZZED(5.0), _GLF_FUZZED(5.0), _GLF_FUZZED(5.0))))), _GLF_FUZZED(5.0), _GLF_FUZZED(5.0)))), bvec2(true, false))).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y))) && true))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)), next_virtual_gid))], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(44781) : 1))), (_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(174886u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(174886u, (_GLF_IDENTITY(174886u, 0u ^ (174886u))) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6333.0310) : 0.0)), injectionSwitch.x)))), (uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u), uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) : (uint(1)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(174886u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(174886u, (_GLF_IDENTITY(174886u, 0u ^ (174886u))) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6333.0310) : 0.0)), injectionSwitch.x)))), (uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u), uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(_GLF_IDENTITY(174886u, (174886u) / 1u), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) : (uint(1))) << (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))) >> 0u)) - 0u), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
          barrier();
         return;
        }
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && true))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) : injectionSwitch)).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))), bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(4), int(4))) | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(8.5))), injectionSwitch[0])), injectionSwitch[1])).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.8), _GLF_FUZZED(907.343)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
              break;
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
 for(_GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_3(mat4(1.0), mat2x3(1.0), 1, uvec2(1u), _GLF_struct_0(mat3(1.0)), _GLF_struct_1(mat4(1.0), uvec4(1u), uvec3(1u), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(1.0) * (vec2(1.0))))), 1, mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), ivec2(1)), _GLF_struct_2(bvec4(true), ivec4(1), mat2(1.0), 1.0, mat4x2(1.0), ivec3(1))), mat2x3(1.0), _GLF_struct_4(uvec4(1u)), _GLF_struct_8(_GLF_struct_5(bvec4(true), mat2x3(1.0), bvec3(true)), _GLF_struct_6(uvec2(1u)), _GLF_struct_7(1, mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, (_GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(((1.0) / 1.0), (((1.0) / 1.0)) + 0.0) - 0.0)) + _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4786.9249)), bool(false)))))), vec2(1.0)), mat2x3(1.0)), _GLF_struct_12(uvec3(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), uint(uvec2(~ (1u), 0u))))), ~ (~ (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)))))))) | (0u & 49178u)), uint(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec2(1u, 1u))))), 1u))), _GLF_struct_9(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.1)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.1)), bool(false)))) * 1.0, min((_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.1)), bool(false)))) * 1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.1)), bool(false)))) * 1.0)))), ivec3(1)), _GLF_struct_10(bvec3(true), ivec4(1), ivec2(1), mat2x4(1.0), mat4x2(1.0), mat4x3(1.0)), mat2(1.0), _GLF_struct_11(uvec3(1u), uvec2(1u), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-361.769)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.8)), bool(false))))), 1.0))), bool(true))), 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 1.0, bvec2(true), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_id))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (uvec2(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_id))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) >> uvec2(0u, 0u)))), mat3x4(1.0))), _GLF_struct_15(ivec3(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, (1) - 0)), (_GLF_IDENTITY((1) | (_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, 0 + (0)))), ((1) | (_GLF_IDENTITY(1, (1) - 0))) | (_GLF_IDENTITY((1) | (_GLF_IDENTITY(1, (1) - 0)), ((1) | (_GLF_IDENTITY(1, (1) - 0))) / 1)))) * 1)), 1), _GLF_IDENTITY((ivec2(1, 1)), (_GLF_IDENTITY((ivec2(1, 1)), ~ (~ ((ivec2(1, 1)))))) | ((ivec2(1, 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-2111) : 1)), 1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, _GLF_IDENTITY(1, max(1, 1)))) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))) | (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), clamp((ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, 0 | (1))), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) / ivec2(1, 1), min((ivec2(1, 1)) / ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))))) ^ ivec2(0, 0)))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1)))))), (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) / ivec2(1, 1))))))) >> ivec2(0, 0)))))) >> ivec2(0, 0))))))))), _GLF_struct_13(bvec4(true), mat2(1.0), 1u, mat4x3(1.0)), vec2(1.0), _GLF_struct_14(1, bvec4(true), mat3x2(1.0), 1.0, bvec4(true), mat4x3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4145.4089)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))), max(1.0, 1.0)) : _GLF_FUZZED(floor(-9605.6531)))))), mat3x4(1.0), ivec2(1)), _GLF_struct_21(_GLF_struct_16(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), true, _GLF_IDENTITY(true, true && (true)), true)))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), ! (_GLF_IDENTITY(! (bool(bvec2(true, false))), _GLF_IDENTITY(bool(bvec3(! (bool(bvec2(true, false))), true, true)), (bool(bvec3(! (bool(bvec2(true, false))), true, true))) || false)))), bool(bvec4(bool(bvec2(true, false)), true, _GLF_IDENTITY(true, true && (true)), true))))))), uvec2(1u), mat3x2(1.0), bvec4(true), mat2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0)))))), mat4x2(1.0)), _GLF_struct_17(1u), ivec2(1), _GLF_struct_18(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), int(ivec4(int(int(1)), 1, 0, 0))))), mat3x4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), vec2(1.0), bvec2(true), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) - sin(sqrt(vec2(0.0, 0.0)))), vec3(1.0)), _GLF_struct_19(1.0, mat4(1.0), vec2(1.0)), _GLF_struct_20(mat3(1.0), mat4x2(1.0), mat4x3(1.0), mat4x2(1.0), mat3(1.0), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(1u, 0u | (1u))) | (_GLF_IDENTITY(1u, 0u | (1u)))), _GLF_IDENTITY(1u, 0u | _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u | ((1u))), min(_GLF_IDENTITY(_GLF_IDENTITY((1u), 0u | ((1u))), uint(uvec3(_GLF_IDENTITY((1u), 0u | ((1u))), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), _GLF_IDENTITY((1u), 0u | ((1u))))))))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), max(_GLF_IDENTITY(1u, 0u | (1u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(0u, uint(uvec2(0u, (0u ^ 1u)))) | _GLF_IDENTITY((1u), _GLF_IDENTITY(0u, uint(uint(0u))) | ((1u))))))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> 0u, uint(uvec4((_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), max(_GLF_IDENTITY(1u, 0u | (1u)), _GLF_IDENTITY(1u, 0u | _GLF_IDENTITY((1u), 0u | ((1u))))))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> 0u, 0u, 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) - 0u)), uvec3(1u)), ivec3(1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_22._f0._injected_loop_counter != 0); _GLF_struct_replacement_22._f0._injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     subgroupBarrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-970.510 - 8424.1496))), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) | (int(0)))))); _injected_loop_counter --)
      {
       atomicStore(buf[virtual_gid], read, 4, 64, 4);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(int(int(5))), (_GLF_IDENTITY(int(int(int(5))), 0 | (int(int(int(5)))))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, int(int(_GLF_IDENTITY(5, clamp(5, 5, 5))))), 5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY((int(5)), min(_GLF_IDENTITY((int(5)), ((int(5))) | 0), (int(5)))) | (int(5)), (_GLF_IDENTITY((int(5)) | (int(5)), 0 ^ ((int(5)) | (int(5))))) * 1))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), clamp(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), _GLF_IDENTITY(int(int(~ (int(5)))), ~ (~ (int(int(~ (int(5))))))))))) | (int(5))), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) - 0), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (5)), (_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (5)), clamp(_GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(5, (5) | (5))))) | 0))) | (int(5))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false)))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
