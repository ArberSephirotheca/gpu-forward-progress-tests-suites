#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), int(ivec3(_GLF_IDENTITY((3), int(ivec3(_GLF_IDENTITY((3), max((3), (3))), 0, 1))), 0, 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((3) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x)))))), int(3)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), int(ivec3(_GLF_IDENTITY((3), int(ivec3((3), 0, 1))), 0, 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((3) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(3)), 0 | (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((3), clamp((3), (3), (3))), int(ivec3((3), 0, 1))), 0, 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((3) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(3)))), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61493) : 3)), _GLF_IDENTITY(_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), int(ivec3(_GLF_IDENTITY((3), int(ivec3((3), 0, 1))), 0, 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | _GLF_IDENTITY(((3) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ((3) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(35726)))))), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) - 0)), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), bool(_GLF_IDENTITY(bvec3(! (! (! (false))), true, true), bvec3(bvec3(bvec3(! (! (! (false))), true, true)))))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (false), ! (! (! (false))))), true, true)), ! (! (bool(bvec3((_GLF_IDENTITY(! (false), ! (! (! (false))))), true, true))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))).x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))).x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(92269) : _injected_loop_counter ++))) - 0))
  {
   GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x = subgroup_id;
   if(_GLF_DEAD(false))
    break;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))) && true))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))) && true))))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))) && true))))), false)))) && true))))
      {
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 0) ^ 1)); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(min(vec2(3576.0755, 1127.4760), 665.051)) : injectionSwitch)).x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.x = num_workgroup;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ((! (_GLF_IDENTITY(false, (false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), 1, 1))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))) || false) && true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)))))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) * (0 ^ 1)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) * (0 ^ 1)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) * (0 ^ 1)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) * (0 ^ 1)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(asinh(_GLF_IDENTITY(max(injectionSwitch, -21.36), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(6383.7531, -2467.3771)) : max(injectionSwitch, -21.36))))) : injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(false ? _GLF_FUZZED(asinh(_GLF_IDENTITY(max(injectionSwitch, -21.36), mix(vec2((max(injectionSwitch, -21.36))[0], (max(injectionSwitch, -21.36))[1]), vec2(_GLF_FUZZED(2.7), _GLF_FUZZED(-2147.1361)), bvec2(false, false))))) : injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), transpose(transpose(mat4x2(false ? _GLF_FUZZED(asinh(max(injectionSwitch, -21.36))) : injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))))))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.y;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && _GLF_IDENTITY(true, (true) || false))), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)), false || (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)))))))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.1) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (_GLF_IDENTITY(~ (int(4)), (false ? _GLF_FUZZED(38912) : ~ (int(4)))))))), (int(4)) >> 0), int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), _GLF_IDENTITY(int(4), (int(4)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_IDENTITY(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), int(4))), (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) / _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))))), int(4)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z;
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.w = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, _GLF_IDENTITY((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid)), ((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))) / uvec4(1u, 1u, 1u, 1u))).z)))) + 1) % subgroup_size, 1u))) << 0u))), ((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, _GLF_IDENTITY((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid)), ((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))) / uvec4(1u, 1u, 1u, 1u))).z)))) + 1) % subgroup_size, 1u))) << 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, _GLF_IDENTITY((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid)), ((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))) / uvec4(1u, 1u, 1u, 1u))).z)))) + 1) % subgroup_size, 1u))) << 0u))), ((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, (true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))).z)))) + 1) % subgroup_size, 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, max(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid, _GLF_IDENTITY((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid)), ((true ? GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid))) / uvec4(1u, 1u, 1u, 1u))).z)))) + 1) % subgroup_size, 1u))) << 0u)))) ^ 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (bool(bvec4(false, true, true, true)))))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-50421)))), 0 | (int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) | (int(4)), _GLF_IDENTITY(clamp((int(4)) | (int(4)), (int(4)) | (int(4)), _GLF_IDENTITY((int(4)) | (int(4)), max((int(4)) | (int(4)), (int(4)) | (int(4))))), 0 ^ (clamp((int(4)) | (int(4)), (int(4)) | (int(4)), _GLF_IDENTITY((int(4)) | (int(4)), max((int(4)) | (int(4)), (int(4)) | (int(4))))))))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-944))), min(0, 0)), 0)), 0, _GLF_IDENTITY(0, (0) << 0))) | (int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, 0 ^ (3))))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.x = next_virtual_gid, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) * (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.x = next_virtual_gid, (GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.x = _GLF_IDENTITY(next_virtual_gid, 1u * (next_virtual_gid))) / 1u)));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.w], (buf[GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.w]) / 1u), 4, 64, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(74867))), clamp(0, 0, 0)), 0)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, false, true, true)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0) > injectionSwitch.y, false, true, true)))))), true, false)))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), (true ? max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) : _GLF_FUZZED(685.102)))) > injectionSwitch.y)), true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y)), true, true, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))
    {
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(828.074), _GLF_FUZZED(354.580)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(828.074, (_GLF_IDENTITY(828.074, min(828.074, _GLF_IDENTITY(828.074, min(828.074, 828.074))))) * 1.0)), _GLF_FUZZED(354.580)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
      return;
    }
   else
    {
    }
  }
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.y = read;
 atomicStore(buf[GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.x], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) << 0))))), (1) >> 0)) ^ 0)), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.z + 1 < subgroup_size)
    {
     atomicStore(checker[GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.w], GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.y, 4, 64, 4);
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     subgroupAll(false);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(1829.6174, -4.2))))), _GLF_IDENTITY(vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), clamp(vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-5.5, clamp(-5.5, -5.5, _GLF_IDENTITY(-5.5, (-5.5) * 1.0)))))), 0.0)), (false ? _GLF_FUZZED(vec2(-9321.4943, -64.25)) : vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-5.5, clamp(-5.5, -5.5, _GLF_IDENTITY(-5.5, (-5.5) * 1.0)))))), 0.0))))))), min(injectionSwitch, injectionSwitch))[1]), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]) + tan(0.0))), vec2(1.0, 1.0) * (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch))[_GLF_IDENTITY(1, 0 | (1))])) / vec2(1.0, 1.0))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) * ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 1))]), vec2(_GLF_FUZZED(8302.9480), _GLF_FUZZED(vec2(_GLF_IDENTITY(-77.97, max(_GLF_IDENTITY(-77.97, max(-77.97, -77.97)), -77.97)), -66.68).r)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(458.305, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), clamp(float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, mix(float(458.305), float(_GLF_FUZZED(-22.65)), bool(false))), 458.305)), float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))), bool(false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(1829.6174, -4.2))))), _GLF_IDENTITY(vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), clamp(vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-5.5, clamp(-5.5, -5.5, _GLF_IDENTITY(-5.5, (-5.5) * 1.0)))))), 0.0)), (false ? _GLF_FUZZED(vec2(-9321.4943, -64.25)) : vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-5.5, clamp(-5.5, -5.5, _GLF_IDENTITY(-5.5, (-5.5) * 1.0)))))), 0.0))))))), min(injectionSwitch, injectionSwitch))[1]), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]) + tan(0.0))), vec2(1.0, 1.0) * (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch))[_GLF_IDENTITY(1, 0 | (1))])) / vec2(1.0, 1.0))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) * ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 1))]), vec2(_GLF_FUZZED(8302.9480), _GLF_FUZZED(vec2(_GLF_IDENTITY(-77.97, max(_GLF_IDENTITY(-77.97, max(-77.97, -77.97)), -77.97)), -66.68).r)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(458.305, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), clamp(float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(vec3(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(_GLF_IDENTITY(458.305, clamp(458.305, _GLF_IDENTITY(458.305, mix(float(458.305), float(_GLF_FUZZED(-22.65)), bool(false))), 458.305)), float(vec4(458.305, 1.0, 1.0, 0.0))), 458.305)), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))), bool(false))))) && true))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.w], GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_11num_workgroupreadsubgroup_local_idvirtual_gid.y, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(64, 1, 1), clamp(ivec3(64, 1, 1), ivec3(64, 1, 1), _GLF_IDENTITY(ivec3(64, 1, 1), clamp(ivec3(64, 1, 1), ivec3(64, 1, _GLF_IDENTITY(1, (1) << 0)), ivec3(64, 1, 1)))))), _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(64, 1, 1), clamp(ivec3(_GLF_IDENTITY(64, (64) | 0), 1, 1), ivec3(_GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))), (true ? (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))) : _GLF_FUZZED(-3169)))) ^ 0) << (0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1), ivec3(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(21457) : 64)), 1, 1))))), max((int(_GLF_IDENTITY(ivec3(64, 1, 1), clamp(ivec3(_GLF_IDENTITY(64, (64) | 0), 1, 1), ivec3(_GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))), (true ? (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))) : _GLF_FUZZED(-3169)))) ^ 0) << (0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1), ivec3(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(21457) : 64)), 1, 1))))), (int(_GLF_IDENTITY(ivec3(64, 1, 1), clamp(ivec3(_GLF_IDENTITY(64, (64) | 0), 1, 1), ivec3(_GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))), (true ? (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(60553)))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836))), 0 ^ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(53836)))))))) : _GLF_FUZZED(-3169)))) ^ 0) << (0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1), ivec3(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(21457) : 64)), 1, 1))))))) / 1)), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, ~ (~ (4)))))) - 0));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) - 0) : _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1), 0 | (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0), _GLF_IDENTITY((_injected_loop_counter ++) / 1, (false ? _GLF_FUZZED(-68522) : _GLF_IDENTITY((_injected_loop_counter ++), ~ (~ ((_injected_loop_counter ++)))) / 1))))))))
        {
         subgroupAll(true);
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 else
  {
  }
}
