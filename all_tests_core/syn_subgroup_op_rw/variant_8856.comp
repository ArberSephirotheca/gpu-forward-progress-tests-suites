#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))));
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y = subgroup_local_id;
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(28965u, 1340u, 90716u)))).x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u), (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u), (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) | (_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) | ((gl_NumWorkGroups.x))))), (~ (gl_NumWorkGroups.x)) - 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))), (~ (gl_NumWorkGroups.x)) - 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u), (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ _GLF_IDENTITY((gl_NumWorkGroups.x), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY((gl_NumWorkGroups.x), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) | ((gl_NumWorkGroups.x))), 1u), (uvec2(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) | ((gl_NumWorkGroups.x))), 1u)) - uvec2(0u, 0u)))) : _GLF_FUZZED(subgroup_local_id)))) - 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), (0u | 0u) | ((gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))), (~ (gl_NumWorkGroups.x)) - 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))), min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) || false), (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x, _GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), (_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 0u)))))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))))) ^ uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x), ~ (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), (_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 0u)))))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))))) ^ uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x), max(min(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), (_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 0u)))))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))))) ^ uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x), min(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), (_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 0u)))))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))))) ^ uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x)))))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) | (subgroup_id)) * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), false || (bool(bool(! (_GLF_DEAD(false))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.x = subgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.x + _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y, clamp(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y, clamp(GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y, GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y, GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y)), GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y, (GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y) >> 0u)));
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.x + ((GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u), 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if((GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id.y % 2) == 0)
    {
     subgroupAll(false);
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (_GLF_IDENTITY(int(2), ~ (~ (int(2)))))))) ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(-20963 / int(7547.5403), min(-20963 / int(7547.5403), -20963 / int(7547.5403)))) & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(4, 4)));
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
      }
     else
      {
       switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
        {
         case 0:
         case 37:
         switch(_GLF_SWITCH(0))
          {
           case 54:
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(bool(bvec3(true && (true), true, false)), ! (! (bool(bvec3(true && (true), true, false))))))), true && (true))))) && (! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), ! (! (_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_IDENTITY(true, (true) || false), true))))))) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))), (_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), ! (! (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), false, _GLF_IDENTITY(true, (true) || false), true))))))) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))))) || false)))))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))), true, false, true)))); _injected_loop_counter --)
            {
             if(true)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false))))))
                {
                }
               else
                {
                 if(bvec2(false, false).x)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   bool _GLF_SWITCH_0_0v;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), max(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(29.86))), 0.0, 1.0, 0.0), min(vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(29.86))), 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(29.86))), 0.0, 1.0, 0.0), vec4(mat3(vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(29.86))), 0.0, 1.0, 0.0), 1.0, cos(0.0), 0.0, 1.0, 1.0)))))), min(float(vec4(injectionSwitch.x, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2911.4884)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 1.0, 0.0)), float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0))))))) > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-17734) : 1))) >> 0))))); _injected_loop_counter ++)
                    {
                     mat3x2(-854.482, -822.260, 5.1, -1447.7402, 2.7, 786.054);
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))))) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)))))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   uvec3(134087u, 4267u, 87766u);
                   int _GLF_SWITCH_0_1v[61], _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[95];
                   mat4x3 _GLF_SWITCH_0_4v;
                   float _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
                   (mod(_GLF_SWITCH_0_5v, _GLF_SWITCH_0_5v) / _GLF_SWITCH_0_4v);
                   mat2x3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v[59];
                  }
                }
               do
                {
                 switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(7), int(7)))))
                  {
                   case 0:
                   case 69:
                   case 42:
                   case 85:
                   case 24:
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                    {
                     if(true)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1], 3.8, _GLF_IDENTITY(-2.4, clamp(-2.4, -2.4, _GLF_IDENTITY(-2.4, (-2.4) - determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), -44.23, _GLF_IDENTITY(9.4, clamp(_GLF_IDENTITY(9.4, _GLF_IDENTITY(_GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), clamp(_GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), clamp(max(9.4, _GLF_IDENTITY(_GLF_IDENTITY(9.4, (9.4) + 0.0), (true ? 9.4 : _GLF_FUZZED(133.821)))), _GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), 0.0 + (max(9.4, _GLF_IDENTITY(9.4, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true) ? 9.4 : _GLF_FUZZED(133.821)))))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), clamp(_GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), clamp(max(9.4, _GLF_IDENTITY(_GLF_IDENTITY(9.4, (9.4) + 0.0), (true ? 9.4 : _GLF_FUZZED(133.821)))), _GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), 0.0 + (max(9.4, _GLF_IDENTITY(9.4, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true) ? 9.4 : _GLF_FUZZED(133.821)))))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))))), (_GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), clamp(_GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), clamp(max(9.4, _GLF_IDENTITY(_GLF_IDENTITY(9.4, (9.4) + 0.0), (true ? 9.4 : _GLF_FUZZED(133.821)))), _GLF_IDENTITY(max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), 0.0 + (max(9.4, _GLF_IDENTITY(9.4, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true) ? 9.4 : _GLF_FUZZED(133.821)))))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821)))), max(9.4, _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(133.821))))))) - 0.0)), float(_GLF_FUZZED(-298.328)), bool(false)))), 9.4, _GLF_IDENTITY(_GLF_IDENTITY(9.4, float(mat2x3(9.4, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0))))), mix(float(_GLF_FUZZED(0.1)), float(_GLF_IDENTITY(9.4, float(mat2x3(9.4, 1.0, 1.0, 1.0, 0.0, 0.0)))), bool(true))))), -4.4, -5877.2881, -2.5, 133.381, -82.38, roundEven(_GLF_IDENTITY(6952.5264, min(6952.5264, 6952.5264))), -3.0);
                       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((_GLF_IDENTITY(392.835 / -4050.4133, (392.835 / -4050.4133) / sqrt(1.0))))), bool(false)))), mix(float(_GLF_FUZZED(-321.965)), float((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / -4050.4133))), bool(false))))), bool(true))) / 1.0), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED((392.835 / -4050.4133))), 1.0 * (float(_GLF_FUZZED((392.835 / -4050.4133))))), bool(false)))), mix(float(_GLF_FUZZED(-321.965)), float((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / _GLF_IDENTITY(-4050.4133, max(-4050.4133, -4050.4133))))), bool(false))))), bool(true))) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)), float(_GLF_IDENTITY(mat4x3(float(mat2x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(392.835, max(392.835, 392.835)) / _GLF_IDENTITY(-4050.4133, (true ? -4050.4133 : _GLF_FUZZED(8662.2355)))), mix(float((_GLF_IDENTITY(392.835, max(392.835, 392.835)) / _GLF_IDENTITY(-4050.4133, (true ? -4050.4133 : _GLF_FUZZED(8662.2355))))), float(_GLF_FUZZED(0.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(false)))), mix(float(_GLF_FUZZED(-321.965)), float((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / -4050.4133))), bool(false))))), bool(true))) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0), mat4x3(mat4(mat4x3(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / -4050.4133))), bool(false)))), mix(float(_GLF_FUZZED(-321.965)), float((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / -4050.4133))), bool(false))))), bool(true))) / 1.0), mix(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / -4050.4133))), bool(false)))), mix(float(_GLF_FUZZED(-321.965)), float((_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((392.835 / -4050.4133))), bool(false))))), bool(true))) / 1.0)), float(_GLF_FUZZED(-741.756)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-81.88)))) + 0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), vec2(mat4x2(vec2(0.0, 1.0), 0.0, 1.0, 1.0, 1.0, abs(0.0), 0.0))), vec2(0.0, 1.0))), 0.0, 0.0))))))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         ;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       ivec3 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v[78], _GLF_SWITCH_0_13v;
                       uvec3 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v[96];
                       mat2x3 _GLF_SWITCH_0_16v[83], _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v[98];
                       (-0.8 / mat3x4(8828.0699, 5.9, -9.9, -7.3, -4350.1328, -9.7, -1149.5763, -223.985, 3.0, -4595.3074, -354.375, 62.83));
                       if(_GLF_DEAD(false))
                        barrier();
                       mat4x3 _GLF_SWITCH_0_19v;
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))) && true), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       ivec4 _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v[29];
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false) && true)))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))) && true)))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       float _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v;
                       mat4x2 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                   break;
                   case 73:
                   if(_GLF_DEAD(false))
                    barrier();
                   ivec2 _GLF_SWITCH_3_0v[60], _GLF_SWITCH_3_1v[99], _GLF_SWITCH_3_2v;
                   case 3:
                   uvec3 _GLF_SWITCH_3_3v[39], _GLF_SWITCH_3_4v, _GLF_SWITCH_3_5v;
                   default:
                   1;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true)), false))))))), false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), false, true))), false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bvec2(bool(bool(false)), true), bvec2(bvec4(bvec2(bool(bool(false)), true), false, false)))))) || false)), false, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))), false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))), false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true)))))) || false)))), true, true, true)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(false)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 bool _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-12.61)), bool(false)))))))))));
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-362.809), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((363.590))), bvec2(true, false))).x > injectionSwitch.y)))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   ivec4(-85704, -36724, -70447, 96512);
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id;
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   (ivec4(-84905, 47001, _GLF_IDENTITY(27145, (27145) / 1), 37325) == ivec4(19840, -78476, -89912, -35384));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 bvec4 _GLF_SWITCH_0_30v, _GLF_SWITCH_0_31v, _GLF_SWITCH_0_32v[60];
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                  barrier();
                 mat4x3 _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(2), int(2)))))
                    {
                     case 0:
                     if(_GLF_DEAD(false))
                      barrier();
                     case 81:
                     if(_GLF_DEAD(false))
                      barrier();
                     case 32:
                     case 65:
                     case 30:
                     case 35:
                     case 90:
                     switch(_GLF_SWITCH(0))
                      {
                       case 0:
                       case 28:
                       case 52:
                       case 15:
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       case 29:
                       uvec3(107968u, 166216u, 96595u);
                       if(_GLF_DEAD(false))
                        barrier();
                       break;
                       default:
                       1;
                      }
                     break;
                     case 63:
                     bvec4 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
                     default:
                     1;
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   uvec4(97470u, 153362u, 68505u, 189614u);
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             else
              {
               vec4 _GLF_SWITCH_0_35v[71];
               _GLF_IDENTITY(atan(vec4(6273.7540, -73.07, -0.6, _GLF_IDENTITY(8.9, clamp(8.9, 8.9, 8.9))), vec4(6333.5679, 4.5, -36.32, -4.1)), mat4(1.0) * (atan(vec4(_GLF_IDENTITY(6273.7540, (6273.7540) / 1.0), -73.07, -0.6, _GLF_IDENTITY(8.9, clamp(8.9, 8.9, 8.9))), vec4(6333.5679, 4.5, -36.32, -4.1))));
               if(_GLF_DEAD(false))
                barrier();
               uint _GLF_SWITCH_0_36v[95], _GLF_SWITCH_0_37v[99];
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 ivec2 _GLF_SWITCH_0_38v, _GLF_SWITCH_0_39v[18], _GLF_SWITCH_0_40v;
                 mat2(-3.9, 4.9, 2307.5135, 6.6);
                 ivec3(98715, 30172, -31165);
                }
               uint _GLF_SWITCH_0_41v;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           case 28:
           {
            if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            mat2x4(-8505.1872, 4.7, -3.5, 4680.3897, 91.16, 145.389, _GLF_IDENTITY(-8.9, float(mat3(-8.9, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(-2.4, 1.0 * (-2.4)));
            for(            false;
 true; greaterThanEqual(ivec4(21592, -326, _GLF_IDENTITY(-76780, ~ (~ (-76780))), -93821), ivec4(-83479, 27486, -6201, 71651)))
             {
              mat3x4 _GLF_SWITCH_0_42v;
              ((bvec3(true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))), true) != bvec3(true, false, _GLF_IDENTITY(false, (false) || false))) ? mat3x4(-4.0, -2.1, 9170.7990, 8.9, _GLF_IDENTITY(108.604, (108.604) / 1.0), -75.04, 43.21, _GLF_IDENTITY(7.3, clamp(7.3, 7.3, _GLF_IDENTITY(7.3, max(7.3, _GLF_IDENTITY(7.3, float(mat3x4(7.3, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))))), -3.0, -5.7, -8091.6582, _GLF_IDENTITY(7.8, (_GLF_IDENTITY(true ? 7.8 : _GLF_FUZZED(-81.03), (false ? _GLF_FUZZED(-3.8) : true ? 7.8 : _GLF_FUZZED(-81.03)))))) : (mat3x4(_GLF_IDENTITY(-6997.3290, max(_GLF_IDENTITY(_GLF_IDENTITY(-6997.3290, (-6997.3290) * 1.0), cos(0.0) * (_GLF_IDENTITY(-6997.3290, (-6997.3290) * 1.0))), -6997.3290)), _GLF_IDENTITY(_GLF_IDENTITY(-7.9, clamp(-7.9, -7.9, -7.9)), 0.0 + (_GLF_IDENTITY(-7.9, clamp(-7.9, -7.9, -7.9)))), 7.7, 8.3, -4748.3928, _GLF_IDENTITY(4608.5959, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, sqrt(1.0))), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, sqrt(1.0)))) * (4608.5959)), -6557.5265, 101.467, _GLF_IDENTITY(-244.838, mix(float(_GLF_IDENTITY(-244.838, clamp(-244.838, -244.838, -244.838))), float(_GLF_FUZZED(1.1)), bool(false))), 9.5, 3.6, -20.54) - _GLF_SWITCH_0_42v));
             }
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                {
                 case 59:
                 packUnorm2x16(vec2(_GLF_IDENTITY(-4362.9024, max(-4362.9024, -4362.9024)), -29.05));
                 case 6:
                 vec3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
                 case 0:
                 if(_GLF_DEAD(false))
                  barrier();
                 case 32:
                 case 63:
                 case 24:
                 barrier();
                 break;
                 case 7:
                 do
                  {
                   (1.4 + mat3x4(57.49, 4667.0173, -68.72, -4161.9937, _GLF_IDENTITY(-42.45, (-42.45) * 1.0), _GLF_IDENTITY(0.2, (true ? _GLF_IDENTITY(0.2, 0.0 + (0.2)) : _GLF_FUZZED(-58.98))), _GLF_IDENTITY(-10.73, (-10.73) + 0.0), -2062.4946, _GLF_IDENTITY(1028.0035, min(1028.0035, 1028.0035)), -9.4, -3240.3492, 8256.1129));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 case 5:
                 bvec4 _GLF_SWITCH_2_2v[77];
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 default:
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atan(vec2(245.086, -5.7))) : injectionSwitch)).y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atan(vec2(245.086, -5.7))) : injectionSwitch)).y)), bool(bvec4(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atan(vec2(245.086, -5.7))) : injectionSwitch)).y)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atan(vec2(245.086, -5.7))) : injectionSwitch)).y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(atan(_GLF_IDENTITY(vec2(245.086, -5.7), vec2(1.0, 1.0) * (vec2(245.086, -5.7))))) : injectionSwitch), ((false ? _GLF_FUZZED(atan(_GLF_IDENTITY(vec2(245.086, -5.7), vec2(1.0, 1.0) * (vec2(245.086, -5.7))))) : injectionSwitch)) / vec2(1.0, 1.0))).y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((3.9 * -7.7))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atan(vec2(245.086, -5.7))) : injectionSwitch)).y)))))) || false)))))))
                  barrier();
                 1;
                }
              }
             mat3x2 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v, _GLF_SWITCH_0_45v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.5)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- _GLF_IDENTITY(1.7, float(mat3(1.7, 1.0, sqrt(0.0), determinant(mat2(sqrt(0.0), 1.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0), 1.0, sqrt(1.0))))))), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             findMSB(subgroup_base);
            }
            if(_GLF_DEAD(false))
             barrier();
            ;
            mat2(_GLF_IDENTITY(8.8, mix(float(_GLF_FUZZED(8296.4585)), float(8.8), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), -9848.7844, 1.6, -8.1);
            atomicMax(num_workgroup, workgroup_size);
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))))), int(ivec2(int(int(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))))), 0)))))); _injected_loop_counter --)
             {
              while(true)
               {
                bvec2 _GLF_SWITCH_0_46v, _GLF_SWITCH_0_47v, _GLF_SWITCH_0_48v[51];
                if(_GLF_DEAD(false))
                 barrier();
                mat2 _GLF_SWITCH_0_49v, _GLF_SWITCH_0_50v[32], _GLF_SWITCH_0_51v[50];
                (vec2(5.0, -725.569) * mat4x2(42.42, -7.7, 4.5, 5096.4493, -1887.8353, _GLF_IDENTITY(-9726.2958, mix(float(_GLF_IDENTITY(-9726.2958, max(-9726.2958, -9726.2958))), float(_GLF_FUZZED(-31.27)), bool(false))), 31.59, 23.89));
                bvec4 _GLF_SWITCH_0_52v, _GLF_SWITCH_0_53v, _GLF_SWITCH_0_54v;
                mat4 _GLF_SWITCH_0_55v, _GLF_SWITCH_0_56v[41];
                (mat2x3(3.7, 7346.1324, 2311.4224, 6.0, 243.881, -603.821) , mat2(roundEven(-5147.1150), 88.73, roundEven(822.649), -21.98));
                if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! _GLF_IDENTITY((! _GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! _GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true && (false)))))
                 barrier();
                mat2x4 _GLF_SWITCH_0_57v, _GLF_SWITCH_0_58v, _GLF_SWITCH_0_59v[4];
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
               }
             }
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              if(_GLF_DEAD(false))
               barrier();
             }
           }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           case 0:
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           case 19:
           if(_GLF_DEAD(false))
            barrier();
           case 98:
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)) || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1019.3158)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true)))), (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true))))) && true)), bool(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true)))), (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true))))) && true)))))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)) || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1019.3158)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true)))), (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true))))) && true)), bool(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true)))), (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))), ! (! (! (bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))), true, false))))))))), false, false, true))), true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))) && true)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) && true))))) && true)))))))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))
                barrier();
              }
             else
              {
              }
            }
           case 45:
           case 73:
           case 65:
           case 7:
           case 1:
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-15367))) : _GLF_FUZZED(-23717))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             subgroupAll(false);
             if(_GLF_DEAD(false))
              barrier();
            }
           break;
           case 96:
           for(ivec3 _GLF_SWITCH_0_60v, _GLF_SWITCH_0_61v, _GLF_SWITCH_0_62v; (uvec2((subgroup_local_id | uvec3(183036u, _GLF_IDENTITY(60643u, (60643u) + 0u), 63809u))) == _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id, uvec2(GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id[0], GLF_merged2_0_1_13_1_1_17subgroup_basesubgroup_local_id[1]))); uvec4(83788u, 146068u, 10557u, 67322u))
            {
             ivec2(-35923, -20176);
             for(             mat2x3(-7.1, -473.047, -908.066, _GLF_IDENTITY(4426.8250, clamp(_GLF_IDENTITY(_GLF_IDENTITY(4426.8250, clamp(4426.8250, 4426.8250, _GLF_IDENTITY(_GLF_IDENTITY(4426.8250, min(4426.8250, 4426.8250)), min(4426.8250, 4426.8250)))), clamp(_GLF_IDENTITY(4426.8250, clamp(4426.8250, 4426.8250, _GLF_IDENTITY(_GLF_IDENTITY(4426.8250, min(4426.8250, 4426.8250)), min(4426.8250, 4426.8250)))), _GLF_IDENTITY(4426.8250, clamp(4426.8250, 4426.8250, _GLF_IDENTITY(_GLF_IDENTITY(4426.8250, min(4426.8250, 4426.8250)), min(4426.8250, 4426.8250)))), _GLF_IDENTITY(4426.8250, clamp(4426.8250, 4426.8250, _GLF_IDENTITY(_GLF_IDENTITY(4426.8250, min(4426.8250, 4426.8250)), min(4426.8250, 4426.8250)))))), 4426.8250, _GLF_IDENTITY(_GLF_IDENTITY(4426.8250, max(4426.8250, 4426.8250)), 1.0 * (4426.8250)))), -641.664, -7753.8649);
 _GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))[_GLF_IDENTITY(1, (1) - 0)], bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))[_GLF_IDENTITY(1, (1) - 0)], bool(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))[_GLF_IDENTITY(1, (1) - 0)], true, false)))))); mat2x4(7.6, -4.7, 13.62, -6063.8039, 6.4, -0.3, -7.6, 1865.2111))
              {
               uvec2 _GLF_SWITCH_0_63v[52];
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 mat2x4(890.360, 78.88, _GLF_IDENTITY(8.9, min(_GLF_IDENTITY(8.9, clamp(_GLF_IDENTITY(8.9, (false ? _GLF_FUZZED(8.0) : 8.9)), 8.9, 8.9)), _GLF_IDENTITY(8.9, clamp(8.9, 8.9, 8.9)))), 8470.5556, 6.7, -892.713, -6.4, _GLF_IDENTITY(61.86, min(61.86, _GLF_IDENTITY(61.86, float(vec3(_GLF_IDENTITY(61.86, min(61.86, 61.86)), 0.0, abs(1.0)))))));
                }
               else
                {
                }
               float _GLF_SWITCH_0_64v, _GLF_SWITCH_0_65v[5], _GLF_SWITCH_0_66v;
               mat3(-1.7, _GLF_IDENTITY(-5470.0476, (true ? -5470.0476 : _GLF_FUZZED(_GLF_SWITCH_0_66v))), 7.9, 84.71, -51.21, _GLF_IDENTITY(-34.90, (-34.90) / round(length(normalize(1.0)))), 2.0, -8.3, 6.6);
              }
             if(_GLF_IDENTITY(bvec4(false, true, true, false).b, (bvec4(false, true, true, false).b) && true))
              {
               -625.017;
               if(_GLF_DEAD(false))
                barrier();
               (mat4x2(0.4, -4.6, 3.8, -9.6, -7.4, _GLF_IDENTITY(85.30, (false ? _GLF_FUZZED(acosh(-640.575)) : 85.30)), 466.199, -3622.0593) - -41.37);
               if(_GLF_DEAD(false))
                barrier();
               float _GLF_SWITCH_0_67v[97], _GLF_SWITCH_0_68v[58], _GLF_SWITCH_0_69v[92];
               vec2(_GLF_IDENTITY(24.58, (24.58) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(1.0, sqrt(0.0), 0.0)), dot(vec3(0.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(1.0, sqrt(0.0), 0.0)))), -85.27);
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while((bvec2(false, false) == bvec2(false, true)))
              {
               mat2x4 _GLF_SWITCH_0_70v[98], _GLF_SWITCH_0_71v;
               outerProduct(injectionSwitch, fract(injectionSwitch));
               ivec2 _GLF_SWITCH_0_72v, _GLF_SWITCH_0_73v[27];
               do
                {
                 _GLF_IDENTITY(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), min(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), (abs(ivec4(_GLF_IDENTITY((_GLF_SWITCH_0_60v | 58058), ((_GLF_SWITCH_0_60v | 58058)) + ivec3(0, 0, 0)), -16510))) + ivec4(0, 0, 0, 0)), abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)))), clamp(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), min(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), (abs(ivec4(_GLF_IDENTITY((_GLF_SWITCH_0_60v | 58058), ((_GLF_SWITCH_0_60v | 58058)) + ivec3(0, 0, 0)), -16510))) + ivec4(0, 0, 0, 0)), abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)))), _GLF_IDENTITY(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), min(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), (abs(ivec4(_GLF_IDENTITY((_GLF_SWITCH_0_60v | 58058), ((_GLF_SWITCH_0_60v | 58058)) + ivec3(0, 0, 0)), -16510))) + ivec4(0, 0, 0, 0)), abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)))), ivec4(1, 1, 1, 1) * (_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), min(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), (abs(ivec4(_GLF_IDENTITY((_GLF_SWITCH_0_60v | 58058), ((_GLF_SWITCH_0_60v | 58058)) + ivec3(0, 0, 0)), -16510))) + ivec4(0, 0, 0, 0)), abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)))))), _GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), min(_GLF_IDENTITY(abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510)), (abs(ivec4(_GLF_IDENTITY((_GLF_SWITCH_0_60v | 58058), ((_GLF_SWITCH_0_60v | 58058)) + ivec3(0, 0, 0)), -16510))) + ivec4(0, 0, 0, 0)), abs(ivec4((_GLF_SWITCH_0_60v | 58058), -16510))))));
                }
               while(_GLF_WRAPPED_LOOP(false));
               uvec3(123645u, 197561u, 48785u);
               mat4x3 _GLF_SWITCH_0_74v, _GLF_SWITCH_0_75v, _GLF_SWITCH_0_76v;
               if(_GLF_DEAD(false))
                barrier();
               _GLF_IDENTITY(true, (true) || false);
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7426.2181), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-653.865)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), mat2(1.0) * (injectionSwitch)))).x)) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, 0 ^ (4)))))))
                  {
                   case 16:
                   ivec4 _GLF_SWITCH_1_0v;
                   if(_GLF_DEAD(false))
                    barrier();
                   case 0:
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))), false, true, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))), injectionSwitch)).y)), false)))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), max(int(5), int(5))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) - vec2(0.0, 0.0)).y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                   break;
                   case 60:
                   vec3 _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v[85];
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   default:
                   1;
                  }
                }
               else
                {
                }
              }
            }
           default:
           1;
          }
         case 97:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         break;
         case 47:
         {
          outerProduct((vec3(1.8, -14.53, _GLF_IDENTITY(-7.5, mix(float(_GLF_IDENTITY(-7.5, mix(float(-7.5), float(_GLF_FUZZED(3.8)), bool(false)))), float(_GLF_FUZZED(-50.60)), bool(false)))) + 0.5), vec2(382.665, 39.58));
          mat4 _GLF_SWITCH_3_0v[34], _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
          (mat2x3(110.263, 686.301, -262.472, 9721.5918, -2601.0965, -2453.1048) * mat4x2(mat4(483.975, 8.8, -2619.6490, 746.931, 77.20, -5572.3311, 239.390, _GLF_IDENTITY(0.5, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.5 : _GLF_FUZZED(-6997.9911))), -9550.5209, 5.5, -476.135, 1.2, 893.658, 6.7, 53.22, 36.73)));
          bvec4(false, false, false, true).ptts;
          mat4 _GLF_SWITCH_3_3v[11], _GLF_SWITCH_3_4v[52], _GLF_SWITCH_3_5v[73];
          bvec2(false, true);
          if(_GLF_DEAD(false))
           barrier();
          (ivec3(-45637, -29880, -58597) % (ivec3(-58000, -13504, -61480) % ivec3(-38373, -39585, 41957))[2]);
         }
         default:
         1;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), (! (! (_GLF_WRAPPED_LOOP(false)))) && true)));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true))))), bool(bvec2((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true))))), false)))), true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), _GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bool(bool(bvec4(false, _GLF_IDENTITY(false, true && (false)), true, false))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), true)))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     subgroupBarrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, (read) ^ 0u), _GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (4) - 0), 0))), 64, 4);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
}
