#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw = GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))).y), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))) && true))) || ((injectionSwitch.x > injectionSwitch.y))))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec4 GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy = GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, max((0) / 1, (0) / 1))) ^ 0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) / 1))) < (0 | 1)); _injected_loop_counter ++)
        {
         _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw = GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy, (GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw = GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy) >> (uvec2(172393u, _GLF_IDENTITY(135897u, ~ (~ (_GLF_IDENTITY(135897u, uint(uvec4(135897u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u))))))) & uvec2(0u, 0u)));
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec4 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat2x4(injectionSwitch, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0))))).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.xy;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), true, true))), false, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), true, true))), false, true))), bvec2(bvec4(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false, true))), true, true))), false, true))), true, false)))))), true))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec4(int(3), 0, 1, 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << (0 << _GLF_IDENTITY(int(3), int(3))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))))) >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.w = num_workgroup;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), injectionSwitch)).x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 1))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(injectionSwitch, vec2(-5.4, -8.0))) : 1.0))), max((_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(injectionSwitch, vec2(-5.4, -8.0))) : 1.0))), (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(injectionSwitch, vec2(-5.4, -8.0))) : 1.0))))) - 0.0), injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.y = workgroup_id;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y) && true))))) && true))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), true && (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))))))) && true)));
          }
        }
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u) * GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.y;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(int(0), int(0))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))))), ~ (~ (_GLF_IDENTITY(int(0), int(0))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) | 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, (0) << (0 | 0)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(_GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY((0) >> 0, 1 * ((0) >> 0)))), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))) : _GLF_FUZZED(35861))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, max(0, 0)))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(0, (0 >> _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))))))), ~ (~ (_GLF_IDENTITY(int(0), int(0)))))))) && _GLF_IDENTITY(true, bool(bool(true))))) && true); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y = workgroup_base;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x = subgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw.y = virtual_gid;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true)) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0) | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-545.942)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(_GLF_IDENTITY(-545.942, mix(float(_GLF_FUZZED(7046.9926)), float(-545.942), bool(true))))), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-545.942)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.7) : injectionSwitch.x)) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, false)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, false)))) && true)), ! (! (! (_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, false)))) && true))))))))));
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false, true), bvec3(bvec4(bvec3(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false, true), true))))))));
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x = GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw.y;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy) << uvec2(0u, 0u)).y + _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x), ~ (~ ((GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x)))) | (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, 0u)), (true ? uint(uvec2(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, 0u)) : _GLF_FUZZED(subgroup_id)))))), (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy) << uvec2(0u, 0u)).y + _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x), ~ (~ ((GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x)))) | (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, 0u)), (true ? uint(uvec2(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, 0u)) : _GLF_FUZZED(subgroup_id))))))) | (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy) << uvec2(0u, 0u)).y + _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x), ~ (~ ((GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x)))) | (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, 0u)), (true ? uint(uvec2(GLF_merged2_0_2_50_2_2_50GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.zw.x, 0u)) : _GLF_FUZZED(subgroup_id)))))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size)))) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) | ivec2(0, 0))), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(subgroup_size)) : _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))), _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(1, 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) | (ivec2(1, 0)))), ~ (~ (~ (ivec2(1, 0))))))))), ~ (_GLF_IDENTITY(~ ((int(_GLF_IDENTITY(ivec2(1, 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) | (ivec2(1, 0)))), ~ (~ (~ (ivec2(1, 0)))))))))), 0 ^ (~ ((int(_GLF_IDENTITY(ivec2(1, 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) | (ivec2(1, 0)))), ~ (~ (~ (ivec2(1, 0))))))))))))))))) - (106905u & 0u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) - (106905u & 0u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) - (106905u & 0u)))) | 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0))))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(0, (0) / 1))), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) - (106905u & 0u))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), 0, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))), _GLF_IDENTITY(1, clamp(1, 1, 1))), (ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), 0, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))), _GLF_IDENTITY(1, clamp(1, 1, 1)))) | ivec4(0, 0, 0, 0)))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), _GLF_IDENTITY((int(ivec2(1, 0))) | (int(ivec2(1, 0))), (_GLF_IDENTITY((int(ivec2(1, 0))) | (int(ivec2(1, 0))), 0 + ((int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) >> 0))))))) - (106905u & 0u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size)))) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), ~ (_GLF_IDENTITY(~ (ivec2(1, 0)), ~ (~ (~ (ivec2(1, 0)))))))))))) - (106905u & 0u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))), _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) - (106905u & 0u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), min(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))))), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) - (106905u & 0u)))) | 0u)) | (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), max(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0))))))))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) / 1))), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0)))))))))) - (106905u & 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), max(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0))))))))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) / 1))), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0)))))))))) - (106905u & 0u)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), max(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))))), _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, _GLF_IDENTITY(0, min(0, 0))))))))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) / 1))), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0)))))))))) - (106905u & 0u))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0))))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), ~ (~ (int(ivec2(1, 0))))), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))))) - (106905u & 0u))))))))))) | 0u)) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw.x = next_virtual_gid;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(3.1))) : _GLF_FUZZED(9642.0511)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z = GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw.x;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint read = _GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, ~ (~ _GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), (_GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), clamp(_GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), ((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy)) + uvec2(0u, 0u)), (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy)))) - uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))).x, _GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x), clamp((_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup) | (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, uvec4(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[0], GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[1], GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[2], GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[3])))).xy.x), (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, max(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy) - uvec2(0u, 0u)), GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy)).x), (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x))) | (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x))], 4, 64, 2), uint(uint(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, ~ (~ _GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), (_GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), clamp(_GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), ((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy)) + uvec2(0u, 0u)), (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy), (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy)))) - uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))).x, _GLF_IDENTITY((GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x), clamp((_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup) | (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, uvec4(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[0], GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[1], GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[2], GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[3])))).xy.x), (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, max(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy) - uvec2(0u, 0u)), GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy)).x), (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x))) | (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x))], 4, 64, 2))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || (false))) && true))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), _GLF_IDENTITY(false, true && (false)), true)), (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), _GLF_IDENTITY(false, true && (false)), true))) || false), false || (bool(bvec3(false, false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) || false)))) || false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, true && ((_GLF_IDENTITY(false, ! (! (false)))) && true)))))), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), _GLF_IDENTITY(false, true && (false)), true)), (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(false, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))))), _GLF_IDENTITY(false, true && (false)), true))) || false), false || (bool(bvec3(false, false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) || false)))) || false)))))))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(float(185810u))), bool(false))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) | (0))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bool(_GLF_IDENTITY(false || (true), bool(bool(false || (true)))))))) && (false))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))))))))), _GLF_IDENTITY(false, bool(bvec3(false, true, false))) || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) | 0, (_GLF_IDENTITY(0, (0) << 0) | 0) ^ 0))); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (_GLF_IDENTITY(int(6), (int(6)) * 1)))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) * 1)), (true ? int(_GLF_IDENTITY(0, (0) * 1)) : _GLF_FUZZED(91070))), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))), int(0)))) | (_GLF_IDENTITY(int(0), (int(0)) + 0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-75.77)))))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) && true)) && true)))))))) && true))
          barrier();
         subgroupAll(false);
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) / _GLF_IDENTITY(1, (1) >> 0))), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) * 1)), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true)))))); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), true && (! (_GLF_IDENTITY(true, (true) || false))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x))), mix(float(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(vec4(6391.9024, -50.78, -0.3, 89.11).z)), bool(false))))))));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             subgroupAll(false);
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ! (! ((! (true))))))))) && (_GLF_IDENTITY(false, ! (! (false)))))))
          barrier();
         atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(-28419), (true ? 1 : _GLF_FUZZED(-28419)) - 0)))), (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(-28419), (true ? 1 : _GLF_FUZZED(-28419)) - 0))))) | (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(-28419), (true ? 1 : _GLF_FUZZED(-28419)) - 0)))))), 4, 64, 4);
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), true)), false || (bool(bvec2((false), true))))) && true)));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 0.0), vec3(1.0, 0.0, 0.0)), (dot(vec3(1.0, tan(0.0), 0.0), vec3(1.0, 0.0, 0.0))) - 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (mat2x4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 0.0), vec3(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 0.0), vec3(1.0, 0.0, 0.0)), (dot(vec3(1.0, tan(0.0), 0.0), vec3(1.0, 0.0, 0.0))) - 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)))) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false))))))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0)))))));
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED((_injected_loop_counter)) : 4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0)))))) || false)))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.1)), vec2(_GLF_FUZZED(vec3(8.6, -56.64, -4.5).t), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))[0], injectionSwitch[1])).y)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))) || false), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mix(-52.14, distance(injectionSwitch, vec2(318.270, 6990.9978)), true)) : injectionSwitch.x)) > injectionSwitch.y)), false, true)))), true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true)))))))))))), false, false), true))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false))))))) || false))))), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(36.90) : injectionSwitch.x)) > injectionSwitch.y)), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(36.90) : injectionSwitch.x)) > injectionSwitch.y)), false, true))), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(vec2(0.0, 0.0))).y)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))))))))), true))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(false, (false) && true), true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y)), false, true), false))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > injectionSwitch.y)), false, true)))), _GLF_IDENTITY(true, (true) || false))))))) && true, true, true, false))))) && _GLF_IDENTITY(true, ! (! (true)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true))))) || false))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, true))))), (injectionSwitch.x > injectionSwitch.y)), false, true))))), false)))))))), true))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), false)))))), true))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), false)))))), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), false)))))), true))), true)), true))))))) && true)) && _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(42.36), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(56.17)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-92.44))))))) > injectionSwitch.y)), false, true)))), true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false, true)))), true)), true))))))) && true)) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, determinant(mat4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0), (mat2x4(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, determinant(mat4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-8.8)))) / 1.0))), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), false)))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * determinant(mat2(1.0, 1.0, 0.0, 1.0))), injectionSwitch[1])).x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false, true)))), true)))))) && true)) && true))), false, false)), (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)), true)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec3((! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3((! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3((! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-68.32)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, true)))), true)))))) && true)) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true), true)), true))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.9)), bvec2(true, false))))).y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true), true)), true))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.9)), bvec2(true, false))))).y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))) && true))) && true) && true, true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))), (injectionSwitch.x > injectionSwitch.y)), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false), (injectionSwitch.x > injectionSwitch.y)), false, true))), false)))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), false, true)))), true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))) && true)) && true))))), false, _GLF_IDENTITY(false, (false) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(33.82)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0])), _GLF_FUZZED(33.82)) : _GLF_FUZZED(vec2(9.5, -27.56)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(33.82)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0])), _GLF_FUZZED(33.82)) : _GLF_FUZZED(vec2(9.5, -27.56)))), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(33.82)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0])), _GLF_FUZZED(33.82)) : _GLF_FUZZED(vec2(9.5, -27.56)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(33.82)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0])), _GLF_FUZZED(33.82)) : _GLF_FUZZED(vec2(9.5, -27.56)))))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.4, float(vec2(_GLF_IDENTITY(-5.4, clamp(-5.4, -5.4, -5.4)), 0.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))))[1]), bvec2(false, true))).y))))
    {
    }
   else
    {
     subgroupBarrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), true), false, true))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), (! (bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), true && ((false))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true)))))))))))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), true && ((false))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true)))))))))))), false)), ! (! (bool(bvec4(_GLF_IDENTITY((false), true && ((false))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true)))))))))))), false))))), true, true, true)))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ((0 << _GLF_IDENTITY(int(8), int(8)))) - 0)); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x], read, 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(-66.59)), mix(float(_GLF_FUZZED(-77.93)), float(_GLF_IDENTITY(float(_GLF_FUZZED(-66.59)), (float(_GLF_FUZZED(-66.59))) - 0.0)), bool(true))), float(injectionSwitch[1]), bool(true)), min(mix(float(_GLF_FUZZED(-66.59)), float(injectionSwitch[1]), bool(true)), mix(float(_GLF_FUZZED(-66.59)), float(injectionSwitch[1]), bool(true))))))).x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
}
