#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4x3 _f0;
 mat3x4 _f1;
 vec2 _f2;
 bool _f3;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 mat4 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_7 {
 float _f0;
 float _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 mat3x2 _f1;
 mat4x3 _f2;
 mat3x4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 ivec2 _f1;
 uint _f2;
 bvec4 _f3;
 vec3 _f4;
 vec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 uvec4 _f2;
 _GLF_struct_6 _f3;
 vec4 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 mat3 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 mat2x4 _f4;
 float _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 bool _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_0 _f0;
 uint subgroup_size;
 _GLF_struct_3 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_11 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_0(bvec2(true)), gl_SubgroupSize, _GLF_struct_3(_GLF_struct_1(uvec3(1u), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3x4(1.0), ivec2(1), mat2x4(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-82.41)), float(1.0), bool(true)))), mat4x3(1.0), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))) | uvec2(0u, 0u)), true, _GLF_struct_2(bvec2(true), 1u)), _GLF_struct_8(_GLF_struct_4(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec4(_GLF_IDENTITY(true, (true) || false), false, true, false)))) && true)), ivec2(1), 1u, bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false)))), vec3(1.0), vec4(1.0), ivec2(1)), _GLF_struct_5(mat3x4(1.0), mat3x2(1.0), mat4x3(1.0), mat3x4(1.0), uvec2(1u)), uvec4(1u), _GLF_struct_6(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY((vec3(1.0)) / vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(_GLF_IDENTITY((vec3(1.0)) / _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), clamp(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0))), _GLF_IDENTITY(clamp((vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp(clamp((vec3(1.0)) / _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))[0], _GLF_FUZZED(5.8), _GLF_FUZZED(57.40)), vec3(_GLF_FUZZED(float(-78785)), _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[1], (false ? _GLF_FUZZED(-4613.6427) : _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[1], float(mat4x3((vec3(1.0, 1.0, 1.0))[1], 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), (vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(33.11)), bool(false)))))[2]), bvec3(false, true, true))), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp((_GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(1.0)))) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0))))), (vec3(1.0)) / vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.6)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), (false ? _GLF_FUZZED(9045.0597) : 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)))))) - sin(0.0)))), max(min(_GLF_IDENTITY((vec3(1.0)) / _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), clamp(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0))), _GLF_IDENTITY(clamp((vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp(clamp((vec3(1.0)) / _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))[0], _GLF_FUZZED(5.8), _GLF_FUZZED(57.40)), vec3(_GLF_FUZZED(float(-78785)), _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[1], (false ? _GLF_FUZZED(-4613.6427) : _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[1], float(mat4x3((vec3(1.0, 1.0, 1.0))[1], 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), (vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(33.11)), bool(false)))))[2]), bvec3(false, true, true))), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp((_GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(1.0)))) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0))))), (vec3(1.0)) / vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.6)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), (false ? _GLF_FUZZED(9045.0597) : 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)))))) - sin(0.0)))), min(_GLF_IDENTITY((vec3(1.0)) / _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), clamp(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0), vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1908.7077)), bool(false))), 1.0))), _GLF_IDENTITY(clamp((vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp(clamp((vec3(1.0)) / _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))[0], _GLF_FUZZED(5.8), _GLF_FUZZED(57.40)), vec3(_GLF_FUZZED(float(-78785)), _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[1], (false ? _GLF_FUZZED(-4613.6427) : _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[1], float(mat4x3((vec3(1.0, 1.0, 1.0))[1], 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), (vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(33.11)), bool(false)))))[2]), bvec3(false, true, true))), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp((_GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(1.0)))) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), clamp((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0))))), (vec3(1.0)) / vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.6)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), (false ? _GLF_FUZZED(9045.0597) : 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)))))) - sin(0.0))))))))), vec4(1.0), _GLF_struct_7(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(8.8)), bool(false))), 1.0)), 1.0, bvec3(true))), _GLF_struct_11(mat3x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (mat4(1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.6))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8.9) : 1.0))), float(_GLF_FUZZED(-992.065)), bool(false))), 1.0)), 1.0, 1.0, 1.0, 1.0)), _GLF_struct_9(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0), (false ? _GLF_FUZZED(round(vec2(-9.2, 3.8))) : vec2(1.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) * mat2(1.0)), (_GLF_IDENTITY(vec2(1.0), (vec2(1.0)) / vec2(1.0, 1.0))) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_struct_10(mat4x3(1.0), mat3x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-24.95))), float(1.0), bool(true))), 1.0))), _GLF_IDENTITY(vec2(1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0), mix(_GLF_IDENTITY(vec2((vec2(1.0))[0], _GLF_IDENTITY((vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)], clamp((vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)]))), _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)])), max(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)])), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)]), clamp(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)]), _GLF_IDENTITY(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)]), (true ? vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)]) : _GLF_FUZZED(trunc(injectionSwitch)))), vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)])))))), (true ? mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2((vec2(1.0))[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0))))], (vec2(1.0))[_GLF_IDENTITY(1, (1) << 0)])) : _GLF_FUZZED(vec2(20.86, 8199.4445))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-1.2), min(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_FUZZED(-38.12)), (true ? vec2(_GLF_IDENTITY(_GLF_FUZZED(-1.2), min(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_FUZZED(-38.12)) : _GLF_FUZZED((injectionSwitch / 7.5)))), bvec2(false, false))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(mix(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (1) << 0)))]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(-38.12)), bvec2(false, false)), mix(vec2(_GLF_FUZZED(-5.3), _GLF_FUZZED(200.060)), vec2((mix(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (1) << 0)))]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(-38.12)), bvec2(false, false)))[0], _GLF_IDENTITY((mix(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (1) << 0)))]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(-38.12)), bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))), false)))[1], (true ? (mix(vec2((vec2(1.0))[0], (vec2(1.0))[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (1) << 0)))]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(-38.12)), bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))), false)))[1] : _GLF_FUZZED(242.078)))), bvec2(true, true)))))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) * mat2(1.0)))), true)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(84.90) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) | (subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) | (subgroup_local_id))) | 0u)) / 1u);
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0)))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-0.2, 1222.0779).s)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7262.3696)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), float(mat2x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), bool(true)))), bool(true)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
      return;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, 0 | (0)) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.x = num_workgroup;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     continue;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (gl_WorkGroupID)))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0))))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec3(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), 0u | (0u)) : _GLF_FUZZED(92774u))), 0u), max(_GLF_IDENTITY(uvec3(workgroup_size, 0u, 0u), (uvec3(workgroup_size, 0u, 0u)) * uvec3(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((_GLF_IDENTITY(1u, 1u * (1u))), 0u | ((1u))), (1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) * 1u)))) >> 0u), 1u)), uvec3(workgroup_size, 0u, _GLF_IDENTITY(0u, min(0u, 0u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(workgroup_size, workgroup_size)))), workgroup_size)) * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))) && true)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = workgroup_base;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || _GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))) || false)))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, _GLF_IDENTITY((-5.7) / 1.0, clamp((-5.7) / 1.0, (_GLF_IDENTITY(-5.7, (-5.7) / 1.0)) / 1.0, _GLF_IDENTITY((-5.7) / 1.0, mix(float((-5.7) / 1.0), float(_GLF_FUZZED(58.16)), bool(false))))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-591.238, _GLF_IDENTITY(float(mat2(-591.238, 1.0, 1.0, 1.0)), min(float(mat2(-591.238, 1.0, 1.0, 1.0)), float(mat2(-591.238, 1.0, 1.0, 1.0))))))), bvec2(true, false))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-591.238)), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-591.238), (_GLF_FUZZED(-591.238)) - 0.0)), bvec2(true, false)))) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-591.238)), bvec2(true, false)), max(_GLF_IDENTITY(mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(5638.9195), _GLF_FUZZED(float(66655))), vec2((vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]))[0], _GLF_IDENTITY((vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]))[1], (false ? _GLF_FUZZED(-8343.9732) : (vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]))[1]))), bvec2(true, true))), vec2((injectionSwitch)[0], _GLF_FUZZED(-591.238)), bvec2(true, false)), clamp(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, _GLF_IDENTITY((-5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (-5.7) : _GLF_FUZZED(61.52))) / 1.0)), (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1))))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-591.238)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-591.238, max(-591.238, -591.238)))), bvec2(true, false)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-591.238)), bvec2(true, false)))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), max(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.7, (-5.7) / 1.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-591.238)), bvec2(true, false))))).x)) > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_12.subgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_base + GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y;
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, uvec3(0u, 0u, 0u) + (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base)).y + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1) << 0u) : _GLF_FUZZED(subgroup_base)), uint(uvec2((true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base)), 0u)))))), max(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1)))))), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (1))))) / 1), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))))), max(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (1)))), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) - 0), 0 | (1)))), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))), clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(49099) : 0 | (1)))))), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (1)))), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (1)))), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))))))), ~ (~ (uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, 0 | (1))), int(ivec3(0 | (_GLF_IDENTITY(1, 0 | (1))), 1, 0)))) << 0)), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 0, 0))))) : _GLF_FUZZED(subgroup_base)))))))))))), max(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-10385) : 1)), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_base) : subgroup_base))) | _GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base : _GLF_FUZZED(uvec3(164077u, 66295u, 195975u)))).y, (true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, min(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y)) : _GLF_FUZZED(subgroup_base))) + 1, (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(subgroup_base))))))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, (_GLF_IDENTITY(true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base), max(true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base), true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))))))), max(uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, (_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, _GLF_IDENTITY(uint(uvec2(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, 0u)), clamp(uint(uvec2(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, 0u)), uint(uvec2(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, 0u)), uint(uvec2(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, 0u)))))))) + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y) - 0u) + 1, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, uint(uvec4(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, 0u, 1u, 0u)))) + 0u))), 0u | (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1))), ~ (~ ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1, 0u | (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1)))))) | (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1))) ^ 0u), (true ? GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 : _GLF_FUZZED(subgroup_base)))))))) ^ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) - 0u) | 0u)))) % _GLF_IDENTITY(_GLF_struct_replacement_12.subgroup_size, ~ (~ (_GLF_struct_replacement_12.subgroup_size))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(max(subgroup_base, workgroup_id)) : virtual_gid))], _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) / 1))), 64, 2);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)) && true))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y) / 1u) % 2) == _GLF_IDENTITY(0, (0) / 1))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)))), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) << 0)))) - 0)))) - 0) ^ 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))) || false))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false)))))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               continue;
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                continue;
               break;
              }
             subgroupAll(false);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, min(1, 1))), 4, 64, 4);
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x) * 1.0) > injectionSwitch.y, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), false, true), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), false, true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(1.0), 1.0, sin(0.0), 0.0, 1.0, tan(abs(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, abs(1.0), 1.0, sin(0.0), 0.0, 1.0, tan(abs(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0))))).y)), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(1.0), 1.0, sin(0.0), 0.0, 1.0, tan(abs(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, abs(1.0), 1.0, sin(0.0), 0.0, 1.0, tan(abs(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0))))).y)), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(1.0), 1.0, sin(0.0), 0.0, 1.0, tan(abs(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, abs(1.0), 1.0, sin(0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), tan(abs(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) / cos(0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), clamp(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), max(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), max(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))), 1.0))))).y)))))))), true && (! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-53.00), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4363.7444)), bvec2(true, false))).y)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (int(false) & 0), ! (! (_injected_loop_counter != (int(false) & 0))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), bool(bool(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), bool(bool(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true))))))))), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), bool(bool(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true))))))))), false, true, true))))))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, sin(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, sin(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 0.0, 1.0), vec4(sqrt(1.0), 0.0, cos(0.0), 0.0)), dot(vec4(tan(0.0), 1.0, 0.0, 1.0), vec4(sqrt(1.0), 0.0, cos(0.0), 0.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0)))).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         break;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), int(_GLF_ONE(1.0, injectionSwitch.y)) * ((64)))), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), ((64)) >> 0)), 64), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), max(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64))))), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), _GLF_IDENTITY(64, min(64, 64))))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, (64) ^ 0)))), (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(16499) : 64))))), ((64)) >> 0)), 64), clamp(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, max(64, 64))), (~ (_GLF_IDENTITY(64, max(64, 64)))) | (~ (_GLF_IDENTITY(64, max(64, 64)))))))) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, _GLF_IDENTITY(0 | (_GLF_IDENTITY(64, (64) | (64))), 0 | (0 | (_GLF_IDENTITY(64, (64) | (64)))))), 64), max(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64))))), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64))), (false ? _GLF_FUZZED(-5899) : _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 | (64)), (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY(_GLF_IDENTITY((64), clamp((64), _GLF_IDENTITY((64), (_GLF_IDENTITY((64), (true ? (64) : _GLF_FUZZED(1790)))) >> 0), (64))), ((64)) >> 0)), 64), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, 0 | (64)))))) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), max(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64))))), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64)))))) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) << 0), (_GLF_IDENTITY(64, (64) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), min(~ (_GLF_IDENTITY(0, (0) >> 0)), ~ (_GLF_IDENTITY(0, (0) >> 0)))))))) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(ivec3(64, 0, 1)))) << 0)))) / (1 ^ 0)), _GLF_IDENTITY(64, 0 | (64)), _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, clamp(64, 64, 64))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), ((_GLF_IDENTITY(64, (64) | (64)))) >> 0)), 64), (clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), ((64)) >> 0)), 64)) | (clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), ((64)) >> 0)), 64))), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), max(clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64), clamp(_GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(64, 0 | (64)), 64))))), clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64) << 0, (_GLF_IDENTITY((64) << 0, ~ (~ ((64) << 0)))) - (0 & -99941))), _GLF_IDENTITY(64, 0 | (64)), 64)))))), 4);
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! _GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (! (false)))), false || (! ((! (! (false)))))))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))), false, false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(! (! (! (! (! (false))))), false || (! (! (! (! (! (false))))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (false))), false || (! (! (! (false))))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool((false) || false)))), false || (bool(_GLF_IDENTITY(bool((false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool((false) || false)))))))), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool((false) || false)))), false || (bool(_GLF_IDENTITY(bool((false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool((false) || false)))))))), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))), bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((11345 & -5598) & (0 ^ 0))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec4(bool(bvec4(false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0)), min(float(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0)), (true ? float(mat3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-47.24)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED(-1751.0576))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0)), abs(1.0))), (true ? _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0)), abs(1.0))), max(float(mat2(injectionSwitch.x, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0)), abs(1.0))), float(mat2(injectionSwitch.x, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0)), abs(1.0))))) : _GLF_FUZZED(-9.8)))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7)))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(true && (! (! (! (false)))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))) && (! (! (! (false))))) || false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
            return;
           return;
          }
         return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 subgroupBarrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(456.880)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(false, false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(false, false, false))), true, _GLF_IDENTITY(true, bool(bvec3(true, false, false))), false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(false, false, false))), true, _GLF_IDENTITY(true, bool(bvec3(true, false, false))), _GLF_IDENTITY(false, (false) && true)))))))))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
}
