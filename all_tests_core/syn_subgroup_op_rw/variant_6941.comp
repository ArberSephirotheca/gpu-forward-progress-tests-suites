#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 vec3 _f0;
 uint workgroup_size;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 uint _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_6 {
 uint subgroup_id;
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_3 {
 uint subgroup_local_id;
 vec2 _f0;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint workgroup_id;
 vec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_4num_workgroupread;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_SubgroupID, _GLF_struct_5(mat4(1.0), _GLF_struct_4(ivec3(1), 1u, mat4x2(1.0))));
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_SubgroupInvocationID, vec2(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(vec3(1.0), gl_WorkGroupSize.x);
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(mat3(1.0), bvec3(true))), gl_WorkGroupID.x, vec3(1.0));
 uint workgroup_base = _GLF_struct_replacement_7.workgroup_size * _GLF_struct_replacement_2.workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_6.subgroup_id * subgroup_size + _GLF_struct_replacement_3.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_6.subgroup_id * subgroup_size + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged2_0_1_13_1_1_4num_workgroupread.y = read;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_struct_replacement_3.subgroup_local_id + 1 < subgroup_size)
  {
   do
    {
     atomicStore(checker[virtual_gid], GLF_merged2_0_1_13_1_1_4num_workgroupread.y, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], GLF_merged2_0_1_13_1_1_4num_workgroupread.y, 4, 64, 4);
   subgroupAll(true);
  }
}
