#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 vec4 _f0;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 uvec4 _f1;
 float _f2;
 mat4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_2 {
 float _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 uint workgroup_id;
 _GLF_struct_2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.x = subgroup_id;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size.y = GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.x;
 GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.y = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size.y;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.z = workgroup_size;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size.z = GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.z;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4(1.0), gl_WorkGroupID.x, _GLF_struct_2(1.0, _GLF_struct_0(mat2(1.0), uvec4(1u), 1.0, mat4(1.0), mat3(1.0)), _GLF_struct_1(vec4(1.0)), ivec3(1)));
 uint workgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size.z * _GLF_struct_replacement_3.workgroup_id;
 GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.y = workgroup_base;
 uint subgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.y * subgroup_size;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size.x = subgroup_base;
 GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.x = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basesubgroup_idworkgroup_size.x;
 uint virtual_gid = GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.y + GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.x + subgroup_local_id;
 GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.z = virtual_gid;
 uint next_virtual_gid = GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size.y + GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.x + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.z], 4, 64, 2);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if((subgroup_local_id % 2) == 0)
        {
         do
          {
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(false));
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
       else
        {
         subgroupAll(false);
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   subgroupBarrier();
  }
 else
  {
  }
 atomicStore(buf[GLF_merged3_0_1_13_1_1_11_2_1_11subgroup_basesubgroup_idvirtual_gid.z], read, 4, 64, 4);
}
