#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), bool(bvec2(false, true)))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, cos(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 0.0, 1.0)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((245.725 + -456.308)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize))[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u))[2], (_GLF_IDENTITY(gl_WorkGroupSize[2], (gl_WorkGroupSize[2]) - 0u)) / 1u) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size)))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), vec4(_GLF_IDENTITY(mat3x2(vec4(injectionSwitch, 0.0, 0.0), 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))), (true ? mat3x2(vec4(injectionSwitch, 0.0, 0.0), 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))) : _GLF_FUZZED(mat3x2(-28.58, 6.7, -631.497, -58.15, -1.0, 234.111)))))), (vec4(injectionSwitch, 0.0, 0.0)) / _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8.9))), 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))))), _GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6329.8433), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(7.6)), bvec2(true, false))) : _GLF_FUZZED(vec2(-98.99, 6.0)))) + (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))).y))))
  {
   do
    {
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.5)), bvec2(true, false))).y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.5)), bvec2(true, false))).y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.5)), bvec2(true, false))).y)))) && true), false, false, true))));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | _GLF_IDENTITY((_injected_loop_counter ++), (false ? _GLF_FUZZED(-31058) : (_injected_loop_counter ++)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY((0 & -39905), ((0 & -39905)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))), (subgroup_local_id + 1) | 0u) : _GLF_FUZZED(156485u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))) + 0u) + 1)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -879.356))), float(1.0), bool(true))), injectionSwitch.y)), 0u))) + 1, (subgroup_local_id + 1) | 0u) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (min(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -879.356))), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(floor(-8225.7693)) : _GLF_IDENTITY(1.0, float(mat2x4(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), bool(true))), injectionSwitch.y)), 0u))) + 1, (subgroup_local_id + 1) | 0u) : _GLF_FUZZED(156485u)))), (_GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -879.356))), float(1.0), bool(true))), injectionSwitch.y)), 0u))) + 1, _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) | 0u) : _GLF_FUZZED(156485u)))), max(clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -879.356))), float(1.0), bool(true))), injectionSwitch.y)), 0u))) + 1, (subgroup_local_id + 1) | 0u) : _GLF_FUZZED(156485u)))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -879.356))), float(1.0), bool(true))), injectionSwitch.y)), 0u))) + 1, (subgroup_local_id + 1) | 0u) : _GLF_FUZZED(156485u))))))) - 0u)), subgroup_local_id + 1))))))) - 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1), ~ (~ (subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) * 1), ~ (~ (subgroup_local_id + 1)))) - 0u))) / 1u) % subgroup_size), min(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u))) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size), (true ? (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), subgroup_local_id + 1)), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) * 1), max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))), subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u) : _GLF_FUZZED(virtual_gid)))) | _GLF_IDENTITY(0u, max(0u, 0u))) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u), clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? 1 : _GLF_FUZZED(36887))), _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) | 0u, (_GLF_IDENTITY((subgroup_local_id + 1) | 0u, (true ? (subgroup_local_id + 1) | 0u : _GLF_FUZZED(workgroup_base)))) | 0u), (_GLF_IDENTITY((subgroup_local_id + 1) | 0u, 1u * ((subgroup_local_id + 1) | 0u))) >> 0u)) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), _GLF_IDENTITY(((subgroup_local_id + 1)), clamp(((subgroup_local_id + 1)), ((subgroup_local_id + 1)), ((subgroup_local_id + 1)))) / 1u) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), clamp(_GLF_IDENTITY(uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), 1u, 0u)), ~ (~ (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), uint(uvec3(subgroup_local_id + 1, 1u, 0u)), uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u), _GLF_IDENTITY(0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))), uint(uvec2(_GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))), (139000u & 0u))))) | 0u) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size), min((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), clamp(_GLF_IDENTITY(uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), 1u, 0u)), ~ (~ (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), uint(uvec3(subgroup_local_id + 1, 1u, 0u)), uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u), _GLF_IDENTITY(0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))), uint(uvec2(_GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))), (139000u & 0u))))) | 0u) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), clamp(_GLF_IDENTITY(uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), 1u, 0u)), ~ (~ (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), uint(uvec3(subgroup_local_id + 1, 1u, 0u)), uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u), _GLF_IDENTITY(0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))), uint(uvec2(_GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))), (139000u & 0u))))) | 0u) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size)))) >> 0u, uint(uvec2(((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), clamp(_GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), ~ (~ (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), uint(uvec3(subgroup_local_id + 1, 1u, 0u)), uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))))) | 0u) : _GLF_FUZZED(156485u))))), subgroup_local_id + 1))) - 0u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size)) >> 0u, 1u))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))) && true)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(8477)))) >> (0 ^ (0 | 0))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))), (4) - 0))), 64, 4);
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))), false, true, true)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) - sin(0.0)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false)) || false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(85.23)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true)))))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), true && (_injected_loop_counter > (0 | 0))), (_GLF_IDENTITY(_injected_loop_counter > (0 | 0), true && (_injected_loop_counter > (0 | 0)))) || false)); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(subgroup_local_id + 1 < subgroup_size)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6)))) >> 0)) + 0)); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y))))) && true)); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6))), 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6)))) ^ 0))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                              {
                               atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(read, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (read)), clamp(read, read, read)))), 4, 64, 4);
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) ? _GLF_FUZZED(92669) : 0)), (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) * 1)) | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(ivec2(_GLF_IDENTITY(6, min(6, 6)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0))))), ~ (_GLF_IDENTITY(~ ((0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(ivec2(_GLF_IDENTITY(6, min(6, 6)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))))), min(~ ((0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(ivec2(_GLF_IDENTITY(6, min(6, 6)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))))), ~ ((0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(ivec2(_GLF_IDENTITY(6, min(6, 6)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))))))))))))); _injected_loop_counter ++)
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               do
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) || false)))))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                                            barrier();
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 barrier();
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                     barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                            {
                                             barrier();
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), (0 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = (93605 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (! ((_GLF_IDENTITY(false, (false) || false)) || false))))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), (int(2)) | 0)))))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))); _injected_loop_counter ++)
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                            {
                                             barrier();
                                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))))))
                                              barrier();
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                    }
                                  }
                                 do
                                  {
                                   subgroupAll(false);
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.8) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.1)), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(1.8) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(91.30), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-740.316)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[_GLF_IDENTITY(2, (false ? _GLF_FUZZED((_injected_loop_counter % (-- _injected_loop_counter))) : 2))]), bvec3(false, false, true)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(538.069))), 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_IDENTITY(_GLF_FUZZED(-7.4), clamp(_GLF_IDENTITY(_GLF_FUZZED(-7.4), (_GLF_FUZZED(-7.4)) / 1.0), _GLF_FUZZED(-7.4), _GLF_FUZZED(-7.4)))), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_IDENTITY(_GLF_FUZZED(-7.4), clamp(_GLF_IDENTITY(_GLF_FUZZED(-7.4), (_GLF_FUZZED(-7.4)) / 1.0), _GLF_FUZZED(-7.4), _GLF_FUZZED(-7.4)))), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3(_GLF_IDENTITY((vec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)), 0.0, 1.0)), vec3(mat4x3((vec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)), 0.0, 1.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), 1.0, sin(0.0), 0.0, 0.0, 1.0, cos(0.0))))[_GLF_IDENTITY(0, (0) | (0))], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_IDENTITY(_GLF_FUZZED(-7.4), clamp(_GLF_IDENTITY(_GLF_FUZZED(-7.4), (_GLF_FUZZED(-7.4)) / 1.0), _GLF_FUZZED(-7.4), _GLF_FUZZED(-7.4)))), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true))))))))))), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), _GLF_IDENTITY(vec3(mat2x4(vec3(injectionSwitch.x, 0.0, 1.0), 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec3(mat2x4(vec3(injectionSwitch.x, 0.0, 1.0), 1.0, 0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec3(2.6, 6.5, 94.38))))), _GLF_IDENTITY(mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))), min(mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))))))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6632.0338)), bool(false))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)))), _GLF_IDENTITY(1.0, (1.0) - 0.0)))[0], (vec3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(_GLF_IDENTITY(-7.4, max(-7.4, -7.4)))), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true))))))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(_GLF_IDENTITY(-7.4, (true ? -7.4 : _GLF_FUZZED(-5.4))))), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))))), mix(float(_GLF_FUZZED(-7786.2300)), float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 1.0, 0.0, 1.0, 0.0))).x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[_GLF_IDENTITY(1, (1) ^ 0)], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), mix(float(_GLF_FUZZED(-2.3)), float(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[_GLF_IDENTITY(1, (1) ^ 0)], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3(_GLF_IDENTITY((vec3(injectionSwitch.x, 0.0, 1.0)), (false ? _GLF_FUZZED(vec3(-6539.7097, -91.82, -4449.8717)) : _GLF_IDENTITY((vec3(injectionSwitch.x, 0.0, 1.0)), max((vec3(injectionSwitch.x, 0.0, 1.0)), (vec3(injectionSwitch.x, 0.0, 1.0))))))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(_GLF_IDENTITY(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), mix(vec3(_GLF_FUZZED(4469.5993), _GLF_FUZZED(-50.52), (vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)))[2]), vec3((vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)))[0], (vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)))[1], _GLF_FUZZED(vec4(-94.95, -1.2, -84.94, -8383.0820).r)), bvec3(true, true, false))), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mix(vec3((vec3(injectionSwitch.x, 0.0, 1.0))[0], (vec3(injectionSwitch.x, 0.0, 1.0))[1], _GLF_FUZZED(-7.4)), vec3(_GLF_FUZZED(-6.3), _GLF_FUZZED(5.5), (vec3(injectionSwitch.x, 0.0, 1.0))[2]), bvec3(false, false, true))))))))), bool(true)))))))))), injectionSwitch.x)))) < injectionSwitch.y)))))))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), true && (! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) && true)), ! (! (! (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), true && (! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) && true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), true && (! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) && true)), ! (! (! (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), true && (! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) && true)))))), false || (_GLF_IDENTITY(! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), true && (! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) && true)), ! (! (! (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), true && (! (! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) && true)))))))), true, true, true))))), false || (bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) * 1)))), ! (! (bool(! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))))); _injected_loop_counter ++)
                                          {
                                           for(int _injected_loop_counter = (0 ^ (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), ~ (~ (int(int(int(1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(1, (1) ^ 0), 1))); _injected_loop_counter ++)
                                            {
                                             barrier();
                                            }
                                          }
                                        }
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 for(int _injected_loop_counter = (-41741 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                    {
                                                     barrier();
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
                                  }
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))));
                            }
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, true && ((! (false)) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))))))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))); _injected_loop_counter ++)
                              {
                               do
                                {
                                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(findLSB(workgroup_size)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), int(int(int(4))))) | (int(4)))))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           do
                            {
                             do
                              {
                               atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0)))), 4)), (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (_GLF_IDENTITY(0, 0 ^ (0)) & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, max(4, 4)) : _GLF_FUZZED(_injected_loop_counter))))))) << (0 & -41114)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 54845, _injected_loop_counter)))) & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))), (int(4)) << (0 & -41114))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)), (_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((_GLF_IDENTITY(0 & -41114, (0 & -41114) - 0))))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)))))) + 0)), 4)) : _GLF_FUZZED(28902))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0)))), 4)), (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(4, min(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (_GLF_IDENTITY(0, 0 ^ (0)) & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, max(4, 4)) : _GLF_FUZZED(_injected_loop_counter))))))) << (0 & -41114)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 54845, _injected_loop_counter)))) & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))), (int(4)) << (0 & -41114))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)), (_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((_GLF_IDENTITY(0 & -41114, (0 & -41114) - 0))))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)))))) + 0)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (_GLF_IDENTITY(0, 0 ^ (0)) & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, max(4, 4)) : _GLF_FUZZED(_injected_loop_counter))))))) << (0 & -41114)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 54845, _injected_loop_counter)))) & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))), (int(4)) << (0 & -41114))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)), (_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((_GLF_IDENTITY(0 & -41114, (0 & -41114) - 0))))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)))))) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (_GLF_IDENTITY(0, 0 ^ (0)) & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, max(4, 4)) : _GLF_FUZZED(_injected_loop_counter))))))) << (0 & -41114)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 54845, _injected_loop_counter)))) & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))), (int(4)) << (0 & -41114))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)), (_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((_GLF_IDENTITY(0 & -41114, (0 & -41114) - 0))))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)))))) + 0)), ~ (~ (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (_GLF_IDENTITY(0, 0 ^ (0)) & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, max(4, 4)) : _GLF_FUZZED(_injected_loop_counter))))))) << (0 & -41114)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 54845, _injected_loop_counter)))) & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))), (int(4)) << (0 & -41114))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)), (_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((_GLF_IDENTITY(0 & -41114, (0 & -41114) - 0))))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)))))) + 0)))))) | (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (_GLF_IDENTITY(0, 0 ^ (0)) & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, max(4, 4)) : _GLF_FUZZED(_injected_loop_counter))))))) << (0 & -41114)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 54845, _injected_loop_counter)))) & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))), (int(4)) << (0 & -41114))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)), (_GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((0 & -41114)))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(4), (int(4)) << _GLF_IDENTITY((0 & -41114), clamp((0 & -41114), (0 & -41114), _GLF_IDENTITY((0 & -41114), 0 ^ ((_GLF_IDENTITY(0 & -41114, (0 & -41114) - 0))))))))) | 0, ((int(_GLF_IDENTITY(int(4), (int(4)) << (0 & -41114)))) | 0) | ((int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (0 & -41114)))) | 0)))))) + 0)))))), 4)) : _GLF_FUZZED(28902)))))), 64, 4);
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, sqrt(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), cos(cross(vec3(-515.252, 0.0, -9877.2086), vec3(-515.252, 0.0, -9877.2086))) * (vec3(1.0, 0.0, 0.0))))), 0.0, 1.0, abs(0.0), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), 1.0 * (float(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))))), 0.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(-1.8), (_GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, sqrt(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(determinant(mat3(0.0, 0.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(mat3(0.0, 0.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0))) + 0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), vec2(mat4(vec2(mat4(injectionSwitch, 0.0, sqrt(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(determinant(mat3(0.0, 0.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(mat3(0.0, 0.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0))) + 0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))[1]), vec2((vec2(mat4(injectionSwitch, 0.0, sqrt(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))[0], _GLF_FUZZED(-830.023)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))).y), ((injectionSwitch.x > injectionSwitch.y)) && true))))));
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, false || (false))), _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), (injectionSwitch.x < injectionSwitch.y)) && (true))), bool(bvec4((true), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), _GLF_IDENTITY(bool(bvec4((true), true, false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4((true), true, false, true)), true && (bool(bvec4((true), true, false, true)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), bool(bvec2(true && _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), bool(bvec4((true), true, false, true))), true)))) || false)));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3000.0771, -7.3)) : injectionSwitch)).x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
