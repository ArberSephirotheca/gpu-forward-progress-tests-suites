#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id;
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z = subgroup_id;
 _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.y = GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z, (GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.y = GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.w = workgroup_size;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.w * workgroup_id;
 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.z = _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size)));
 uint virtual_gid = GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.z + GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.y * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.z + GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.y * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y = _GLF_IDENTITY(read, (_GLF_IDENTITY(read, uint(uvec2(_GLF_IDENTITY(read, clamp(read, read, read)), 1u)))) | 0u);
 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.x = GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y;
 atomicStore(buf[GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.x], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.x, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_14readsubgroup_idworkgroup_baseworkgroup_size.x, 4, 64, 4);
   subgroupAll(true);
  }
}
