#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 vec2 _f0;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_2 {
 uint _f0;
 _GLF_struct_0 _f1;
 bvec2 _f2;
 int _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_3 {
 uint subgroup_size;
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y = subgroup_id;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_SubgroupSize, _GLF_struct_2(1u, _GLF_struct_0(ivec2(1), mat3x2(1.0)), bvec2(true), 1, _GLF_struct_1(vec2(1.0))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y * _GLF_struct_replacement_3.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y * _GLF_struct_replacement_3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_3.subgroup_size);
 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_3.subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
