#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) + 0))
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), (false ? _GLF_FUZZED(bitfieldInsert(-15041, _injected_loop_counter, -34797, -50244)) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2))), (0 << _GLF_IDENTITY(int(7), int(7))) | ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))) && true))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(inversesqrt(36.22)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true))
      barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0)), mat2(1.0) * (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false)))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-39.28)), bool(false))), injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = (29963 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), clamp(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) | (subgroup_size))), (clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) | (subgroup_size)))) - 0u))), max((subgroup_size), (subgroup_size))), (subgroup_size))), min(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size, subgroup_size))), max((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_size))), (subgroup_size))), (subgroup_size))), _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size, subgroup_size))), _GLF_IDENTITY(max((subgroup_size), (subgroup_size)), (max((subgroup_size), (subgroup_size))) << 0u)), _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size)))) << 0u))))) ^ 0u, max(_GLF_IDENTITY((subgroup_size), clamp((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), _GLF_IDENTITY((subgroup_size), max((subgroup_size), (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), 0u, 1u, 0u)))))), _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) + 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size)), _GLF_IDENTITY(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (subgroup_size))))))), (subgroup_size))) ^ 0u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))) ^ 0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), clamp(_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u), 0u + (_GLF_IDENTITY((subgroup_size), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) - 0u))), max((subgroup_size), (subgroup_size))), (subgroup_size))) ^ 0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), clamp(_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u), 0u + (_GLF_IDENTITY((subgroup_size), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) - 0u))), max((subgroup_size), (subgroup_size))), (subgroup_size))) ^ 0u, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), clamp(_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u), 0u + (_GLF_IDENTITY((subgroup_size), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) - 0u))), max((subgroup_size), (subgroup_size))), (subgroup_size))) ^ 0u, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), clamp(_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u), 0u + (_GLF_IDENTITY((subgroup_size), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) - 0u))), max((subgroup_size), (subgroup_size))), (subgroup_size))) ^ 0u))) | (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))) ^ 0u))))) + _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id));
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), ((1)) | ((1))), (true ? 0 ^ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(-87200)))), (1) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) | (_GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(((_GLF_IDENTITY(1, min(1, 1)))) / 1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) - 0))), min((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) - 0))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) - 0))), 0 ^ ((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) - 0)))))))) / 1 : _GLF_FUZZED(ivec3(-9987, 4894, -95786).z))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), (false ? _GLF_FUZZED(98234) : _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / 1)) | (1)), 1))), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(1, min(1, 1))), 1, 1, 1)), (int(ivec4((_GLF_IDENTITY(1, min(1, 1))), 1, 1, 1))) << 0))))))))), (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) | ((_GLF_IDENTITY(1, (1) ^ 0))))), _GLF_IDENTITY((1) / 1, (_GLF_IDENTITY(_GLF_IDENTITY((1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * ((1))) / 1, _GLF_IDENTITY((_GLF_IDENTITY((1) / 1, _GLF_IDENTITY(0 | (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)) >> 0, 0 ^ (_GLF_IDENTITY(((1)) >> 0, clamp(_GLF_IDENTITY(((1)) >> 0, (((1)) >> 0) | 0), _GLF_IDENTITY(((1)) >> 0, (false ? _GLF_FUZZED(-69793) : ((1)) >> 0)), ((1)) >> 0))))) / 1), ~ (~ (_GLF_IDENTITY(0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1), 0 | (0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY((1) / 1, _GLF_IDENTITY(0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1), ~ (~ (_GLF_IDENTITY(0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1), 0 | (0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1)))))))), int(ivec4((_GLF_IDENTITY((1) / 1, _GLF_IDENTITY(0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1), ~ (~ (_GLF_IDENTITY(0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1), 0 | (0 | (_GLF_IDENTITY((1), ((1)) >> 0) / 1)))))))), 0, 0, 1)))) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))) / 1)) | ((1) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))))).x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) + 0u, uint(uvec3((subgroup_id * subgroup_size) + 0u, 1u, 0u)))), subgroup_id * subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) >> 0u)), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) >> 0u))) / 1u) * 1u) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) * 1u) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) * 1u) % subgroup_size))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) >> 0u)), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) >> 0u))) / 1u) * 1u) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) * 1u) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) * 1u) % subgroup_size))) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) << 0u), ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 0u), (uvec2(1u, 0u)) | (uvec2(1u, 0u))))), 1u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(((subgroup_local_id + 1) % subgroup_size), 1u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(((subgroup_local_id + 1) % subgroup_size), 1u, 1u))), uvec3(0u, 0u, 0u) | (uvec3(((subgroup_local_id + 1) % subgroup_size), 1u, 1u)))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))), ((subgroup_local_id + 1)) - 0u) % subgroup_size), ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), 0u | _GLF_IDENTITY((~ (subgroup_local_id)), ~ (~ (_GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id)))))))))) + 1) % subgroup_size), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0u), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) >> 0) + 0)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)))) << 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0u), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) >> 0) + 0)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)))) << 0u)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0u), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) >> 0) + 0)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)))) << 0u)))))))) - _GLF_IDENTITY(0u, ~ (~ (0u)))) % subgroup_size)))), max(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (true ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id)))))) : _GLF_FUZZED((+ bitfieldExtract(subgroup_id, -36019, 40662))))), ~ (~ (_GLF_FUZZED(subgroup_local_id)))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_FUZZED(subgroup_local_id))))))) : _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) % subgroup_size))))) - 0u), false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) + 0))), (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-4.8))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, sqrt(1.0), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))), max(float(mat2x3(injectionSwitch.y, sqrt(1.0), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))), float(mat2x3(injectionSwitch.y, sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), round(_GLF_IDENTITY(length(normalize(abs(vec3(1.0, 1.0, 1.0)))), clamp(length(normalize(abs(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(normalize(abs(vec3(1.0, 1.0, 1.0)))), 1.0 * (length(normalize(abs(vec3(1.0, 1.0, 1.0)))))), length(normalize(abs(vec3(1.0, 1.0, 1.0))))))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) % subgroup_size)), max((((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, (0) | (0)))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), injectionSwitch.y)))) % subgroup_size)), _GLF_IDENTITY((((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 1 * (0)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, (1) + 0)) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))).y) : _GLF_FUZZED(-5.2))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) % subgroup_size)), ~ (~ ((((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, int(int((1) + 0))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, int(int((1) + 0))))), int(ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, int(int((1) + 0))))), 1, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), (0 ^ 0)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) + 0)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0))), injectionSwitch.y)))) / int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)))) / 1.0), _GLF_ONE(1.0, injectionSwitch.y)))))) % subgroup_size))))))))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u)) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), (1), _GLF_IDENTITY((1), min((1), (1))))) ^ 0), clamp(1, 1, 1))))) % subgroup_size) / 1u)) / 1u)) / 1u), 0u ^ ((subgroup_local_id + 1) % subgroup_size))), ~ (~ (((subgroup_local_id + 1) % subgroup_size))))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(virtual_gid) : (subgroup_local_id + 1))) % subgroup_size))), ((~ ((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(virtual_gid) : (subgroup_local_id + 1))) % subgroup_size)))) ^ 0u)), (_GLF_IDENTITY(true ? false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % subgroup_size))), ~ (~ (((subgroup_local_id + 1) % subgroup_size)))), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % subgroup_size))), ~ (~ (((subgroup_local_id + 1) % subgroup_size))))) / (1u & 1u)) : _GLF_FUZZED(num_workgroup), ~ (~ (_GLF_IDENTITY(true ? false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), uint(uvec4(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(61763u, 180551u).x, max(_GLF_IDENTITY(uvec2(61763u, 180551u).x, (uvec2(61763u, 180551u).x) ^ 0u), uvec2(61763u, 180551u).x))) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), ~ (~ (subgroup_size))))), 1u, 1u, (_GLF_IDENTITY(0u, 0u + (0u)) << _GLF_IDENTITY(uint(4u), uint(4u))))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), uint(uvec4(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(61763u, 180551u).x, max(_GLF_IDENTITY(uvec2(61763u, 180551u).x, (uvec2(61763u, 180551u).x) ^ 0u), uvec2(61763u, 180551u).x))) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), ~ (~ (subgroup_size))))), 1u, 1u, (_GLF_IDENTITY(0u, 0u + (0u)) << _GLF_IDENTITY(uint(4u), uint(4u)))))))))) ^ 0u), ~ (~ _GLF_IDENTITY((((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) % subgroup_size))), (true ? _GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), (uint((((subgroup_local_id + 1) % subgroup_size)))) << 0u) : _GLF_FUZZED(_GLF_IDENTITY(176888u, (true ? 176888u : _GLF_FUZZED(workgroup_base))))))))) - (22148u & 0u)))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))))))), uint(uvec4(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : _GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), (0u ^ 0u) ^ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), (true ? uint((((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(176888u)))))) - (22148u & 0u)), 0u ^ (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), (true ? uint((((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(176888u)))))) - (22148u & 0u)))))), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), uint(uvec4(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))), ~ (~ _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), (true ? uint((((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(176888u)))))) - (22148u & 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | _GLF_IDENTITY(0u, min(0u, 0u))) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), uint(uvec4(false ? _GLF_FUZZED(uvec2(61763u, 180551u).x) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))), ~ (~ _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), (true ? uint((((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(176888u)))))) - (22148u & 0u)))))), 1u, (1u & 1u)))) : _GLF_FUZZED(num_workgroup), (true ? true ? false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(61763u, 180551u).x, clamp(uvec2(61763u, 180551u).x, uvec2(61763u, _GLF_IDENTITY(180551u, uint(uvec4(180551u, 0u, 0u, 1u)))).x, _GLF_IDENTITY(uvec2(61763u, 180551u).x, _GLF_IDENTITY(0u | (uvec2(61763u, 180551u).x), min(0u | (uvec2(61763u, 180551u).x), 0u | (uvec2(61763u, 180551u).x))))))) : (subgroup_local_id + 1) % subgroup_size, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(61763u, 180551u).x, clamp(uvec2(61763u, 180551u).x, uvec2(61763u, _GLF_IDENTITY(180551u, uint(uvec4(180551u, 0u, 0u, 1u)))).x, _GLF_IDENTITY(uvec2(61763u, 180551u).x, _GLF_IDENTITY(0u | (uvec2(61763u, 180551u).x), min(0u | (uvec2(61763u, 180551u).x), 0u | (uvec2(61763u, 180551u).x))))))) : (subgroup_local_id + 1) % subgroup_size, 0u, 0u)))))), ~ (~ (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1) % subgroup_size)))) : _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(workgroup_id))))))))))) >> 0u)));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false))), true))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(53060))), ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --))), ~ (~ (~ (_injected_loop_counter --))))) ^ 0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-88673)))), 0 | ((_injected_loop_counter --))), ~ (~ (~ (_injected_loop_counter --))))) ^ 0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --))), ~ (~ (~ (_injected_loop_counter --))))) ^ 0, ((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --))), ~ (~ (~ (_injected_loop_counter --)))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --))), ~ (~ (~ (_injected_loop_counter --))))) >> (12524 & 0))) ^ 0) - 0) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(99920)))))))
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4688.0255), _GLF_FUZZED(490.157)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), min(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(2053.3718), _GLF_FUZZED(2601.3519)), vec2((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))[0], (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))[1]), bvec2(true, true))))))))).y, float(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)) : _GLF_IDENTITY(_GLF_FUZZED((vec2(-525.558, 8.7) - -0.2)), (_GLF_IDENTITY(_GLF_FUZZED((vec2(-525.558, 8.7) - -0.2)), (_GLF_FUZZED((vec2(-525.558, 8.7) - -0.2))) * vec2(1.0, 1.0))) / vec2(1.0, 1.0))))))).y, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), cos(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(183.888)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.7)), float(1.0), bool(true)))), bool(true))), 0.0, 1.0, 1.0))), 1.0)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, min(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << (0 | 0)), _GLF_IDENTITY((4), ((4)) / 1) / 1), 4)), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(clamp(vec2(972.081, 1.0), -32.97, -7.5)) : injectionSwitch), vec2(mat4x2(_GLF_IDENTITY((false ? _GLF_FUZZED(clamp(vec2(972.081, 1.0), -32.97, -7.5)) : injectionSwitch), vec2(mat3x4((false ? _GLF_FUZZED(clamp(vec2(972.081, 1.0), -32.97, -7.5)) : injectionSwitch), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, sin(0.0), 1.0)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, sin(0.0), 1.0)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), injectionSwitch))) * mat2(1.0)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(ivec3(0, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(7), int(7))) + (5))) | (5))), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(abs(20268)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(82.41, 1.4)) : injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))) < subgroup_size, _GLF_IDENTITY(bool(bool(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))) < subgroup_size)), bool(bvec3(bool(bool(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))) < subgroup_size)), true, false)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 1.0), (vec3(injectionSwitch.x, 1.0, 1.0)) * mat3(1.0)))) > injectionSwitch.y))));
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, max(4, 4)))));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))));
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) / 1) & 45566); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(false)) && true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), float(_GLF_FUZZED(7.9)), bool(false)), float(float(mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), float(_GLF_FUZZED(7.9)), bool(false)))))), true && _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), max(_GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), clamp(float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.3)), float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0)))), float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0))))))))) : _GLF_FUZZED(vec2(-3.4, -9.0)))).y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(_GLF_IDENTITY(7.9, 1.0 * (7.9)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), (false ? _GLF_FUZZED(-8.6) : _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), clamp(float(_GLF_FUZZED(7.9)), _GLF_IDENTITY(float(_GLF_FUZZED(7.9)), _GLF_IDENTITY(float(mat4(float(_GLF_FUZZED(7.9)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0)), float(vec4(float(mat4(float(_GLF_FUZZED(7.9)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0)), 0.0, 0.0, 1.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) - 0.0)))), _GLF_IDENTITY(max((float(_GLF_FUZZED(7.9))), _GLF_IDENTITY((float(_GLF_FUZZED(7.9))), ((float(_GLF_FUZZED(7.9)))) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), (true ? max((float(_GLF_FUZZED(7.9))), _GLF_IDENTITY((float(_GLF_FUZZED(7.9))), ((float(_GLF_FUZZED(7.9)))) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 0.0, 0.0))))) : _GLF_FUZZED(4106.7824)))) + 0.0), float(_GLF_FUZZED(_GLF_IDENTITY(7.9, (false ? _GLF_FUZZED(-8873.9189) : 7.9)))))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(387.059, (387.059) * 1.0))), float(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(float(_GLF_FUZZED(7.9)), float(_GLF_FUZZED(7.9)))), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))), bool(true))), 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0, max((_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0, (_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0, ((_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0) - 0.0), (_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0))))), bool(false)))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), clamp(float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)), float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)))), float(mat4x2(1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0, 0.0, 1.0, 0.0)), (float(mat3x2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0, 0.0, 1.0, 0.0))) * 1.0))))))))))) : _GLF_FUZZED(vec2(-3.4, -9.0)))).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-295.900)), bvec2(false, false))).y)), injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), _GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), (false ? _GLF_FUZZED(-8.6) : _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(7.9, clamp(_GLF_IDENTITY(7.9, mix(float(_GLF_IDENTITY(7.9, (7.9) - 0.0)), float(_GLF_FUZZED(3.8)), bool(false))), 7.9, 7.9)))), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), float(vec2(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(7.9, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 7.9 : _GLF_FUZZED(3799.5386))))), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9)))), 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(3.2)))), float(_GLF_FUZZED(7.9)))), (_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(7.9)), (float(_GLF_FUZZED(7.9))) + 0.0), float(_GLF_FUZZED(7.9))))) * 1.0))), bool(false)))))))))));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != 0), bool(bvec2(! (_injected_loop_counter != 0), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(! (_injected_loop_counter != 0), bool(bvec2(! (_injected_loop_counter != 0), false)))))), ! (! (! (_GLF_IDENTITY(! (_injected_loop_counter != 0), bool(bvec2(! (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 | 0)))) != 0), false))))))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY(bool(bvec2(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY(false, (false) || false))), (bool(bvec2(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY(false, (false) || false)))) || false))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7420.9154)), bool(false))))), false, false, false)))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(int(6), 1, 1, 1))), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   do
    {
     subgroupAll(true);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
