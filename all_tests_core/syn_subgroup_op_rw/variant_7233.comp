#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.y = subgroup_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.y = GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.y;
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), true)))))
    {
     GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z = subgroup_size;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z = GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.y = subgroup_local_id;
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.x = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.x = GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.x;
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.w = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.w;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
  }
 GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.z = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.w = GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.z;
 uint subgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y = subgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.w + GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y + GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.y;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.w + GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y + ((GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.y + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z);
 do
  {
   GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x = next_virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x;
 uint read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 2);
 if((GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.y % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupAll(false);
    }
   else
    {
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     subgroupAll(false);
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_14_3_1_12next_virtual_gidsubgroup_local_idworkgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
    }
  }
 subgroupBarrier();
 atomicStore(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], read, 4, 64, 4);
}
