#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true)))))));
      }
     barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))))
        barrier();
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-7.9, max(_GLF_IDENTITY(-7.9, (_GLF_IDENTITY(-7.9, mix(float(-7.9), float(_GLF_FUZZED(-9.2)), bool(false)))) + 0.0), _GLF_IDENTITY(-7.9, mix(float(_GLF_FUZZED(4.6)), float(_GLF_IDENTITY(-7.9, (false ? _GLF_FUZZED(-6.4) : -7.9))), bool(true))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0)) << _GLF_IDENTITY(int(5), int(5))) + (0))) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (1) - _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, (0) | (0)), clamp(0 ^ _GLF_IDENTITY(0, (0) | (0)), 0 ^ _GLF_IDENTITY(0, (0) | (0)), 0 ^ _GLF_IDENTITY(0, (0) | (0)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))) || false)))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), int(ivec3(1 << _GLF_IDENTITY(int(6), int(6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))) >> _GLF_IDENTITY(int(6), int(6))) & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))), min(~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))), ~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6)))))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
     else
      {
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), false))))))))), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), false))))))))), true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), false))))))))), true, true)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), false))))))))), true, true))) || false))))))) && true)))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), int(ivec2(0 >> _GLF_IDENTITY(int(7), int(7)), 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, (7) * 1)))), int(7)), int(ivec2(0 >> _GLF_IDENTITY(int(7), int(7)), 1))))), ((~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, (7) * 1)))), int(7)), int(ivec2(0 >> _GLF_IDENTITY(int(7), int(7)), 1)))))) | ((~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, (7) * 1)))), int(7)), int(ivec2(0 >> _GLF_IDENTITY(int(7), int(7)), 1))))))) << 0)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bool((! (_GLF_DEAD(false))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))))), false, true), false)))), _GLF_IDENTITY(true, false || (true)) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), false, true), false))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && (false))))
                  barrier();
                }
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   barrier();
                  }
                 barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))))))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-30.13) : injectionSwitch.y)), injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, false, true))))), true, false)))) || false), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))) || false) || false)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)))) || false))
            barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, max(3, 3)) : _GLF_FUZZED(floatBitsToInt(-3.0))))), _GLF_IDENTITY(int(3), (int(3)) - 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false, true, true)))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) && true)) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false, true, true)))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) && true)) || false))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false, true, true)))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) && true)) || false)))))), true, false))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.5), _GLF_FUZZED(9.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false, true, true)))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) && true)) || false)))))) && true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((0 >> _GLF_IDENTITY(int(7), int(7)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ ((0 >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
          }
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))), int(ivec4(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))), 0, 1, 1)))) / 1)))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), 1u * (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))) | _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u), 0u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id)), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))) | 0u), 0u))))))))) + 1))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), 1u * (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))) | _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u), 0u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id)), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))) | 0u), 0u))))))))) + 1))), _GLF_IDENTITY(1u, max(1u, 1u)), 0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), (uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), 1u * (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))) | _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))))) | 0u), 0u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id)), _GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), (_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), (max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))) ^ 0u)) | (_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), clamp(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))))))) | 0u), 0u))))))))) + 1))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), 1u * (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))) | _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))))) | 0u), 0u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id)), _GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), (_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), (max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))) ^ 0u)) | (_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), clamp(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))))))) | 0u), 0u))))))))) + 1))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), 1u * (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))) | _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))))) | 0u), 0u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id)), _GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), (_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), (max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))) ^ 0u)) | (_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), clamp(max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id))), max(_GLF_IDENTITY(((subgroup_local_id)), min(((subgroup_local_id)), ((subgroup_local_id)))), ((subgroup_local_id)))))))) | 0u), 0u))))))))) + 1)))) - 0u), 0u, 1u))), 1u, 0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))), uint(0u)))))) + 0u)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | 0u)) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), clamp(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((_GLF_IDENTITY(0u, 0u | (0u)))) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) << 0u)) - 0u), (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u)))), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) ^ 0u) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), clamp((0u), _GLF_IDENTITY((0u), 0u | ((0u))), _GLF_IDENTITY((0u), 0u + ((0u))))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup))) ^ (1u & 1u))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | 0u)) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), clamp(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((_GLF_IDENTITY(0u, 0u | (0u)))) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) << 0u)) - 0u), (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u)))), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) ^ 0u) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), clamp((0u), _GLF_IDENTITY((0u), 0u | ((0u))), _GLF_IDENTITY((0u), 0u + ((0u))))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup))) ^ (1u & 1u))))))))), min((_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | 0u)) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), clamp(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((_GLF_IDENTITY(0u, 0u | (0u)))) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) << 0u)) - 0u), (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u)))), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) ^ 0u) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), clamp((0u), _GLF_IDENTITY((0u), 0u | ((0u))), _GLF_IDENTITY((0u), 0u + ((0u))))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup))) ^ (1u & 1u))))))))), (_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | 0u)) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), clamp(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((_GLF_IDENTITY(0u, 0u | (0u)))) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) << 0u)) - 0u), (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u)))), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) ^ 0u) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (1u ^ (1u & 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((0u), clamp((0u), _GLF_IDENTITY((0u), 0u | ((0u))), _GLF_IDENTITY((0u), 0u + ((0u))))), ((0u)) - 0u), (~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | 0u)) << 0u)) ^ 0u)))), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup))) ^ (1u & 1u)))))))))))) - 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (false ? _GLF_FUZZED(uint(3796.0234)) : workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, ~ (~ (8u)))))) | (workgroup_base + subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) << 0u))) | (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))) + 1), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), 1u), (true ? uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1))), 1u) : _GLF_FUZZED(uvec2(177012u, 96185u)))), min(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), 1u), (true ? uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1))), 1u) : _GLF_FUZZED(uvec2(177012u, 96185u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), 1u), (true ? uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1))), 1u) : _GLF_FUZZED(uvec2(177012u, 96185u)))), min(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), 1u), (true ? uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1))), 1u) : _GLF_FUZZED(uvec2(177012u, 96185u)))), _GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), 1u), (true ? uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1))), 1u) : _GLF_FUZZED(uvec2(177012u, 96185u)))))))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))) >> 0u);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (-88697 & (0 << _GLF_IDENTITY(int(2), int(2)))), ! (! (_injected_loop_counter != (-88697 & (0 << _GLF_IDENTITY(int(2), int(2)))))))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(37208) : 1))), max(clamp(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(37208) : 1))), clamp(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(37208) : 1)))))), 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-79897) : 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), clamp(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(ivec3(0 >> _GLF_IDENTITY(int(8), int(8)), 1, 1)), (int(ivec3(0 >> _GLF_IDENTITY(int(8), int(8)), 1, 1))) ^ 0)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), min(0 >> _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (true ? 0 >> _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(_injected_loop_counter))))), 0 >> _GLF_IDENTITY(int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true)))))))))
                {
                 barrier();
                }
               else
                {
                }
              }
             subgroupAll(false);
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
                  {
                   for(int _injected_loop_counter = (22735 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), ((! (false))) && true), ((! (false))) || false))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))), true)))))))) || false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(15.90, -1.8)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(15.90, -1.8)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(15.90, -1.8)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(15.90, -1.8)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), true), false, false)))))) || false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)))
                  barrier();
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(radians(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, true && (false)), false)))))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, true))), false))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, true))), false))))), false))))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                    barrier();
                  }
                }
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bool(! (_GLF_WRAPPED_LOOP(false)))))))))));
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) || false)))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) || false)))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))) || false))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))) || false))))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(833.093)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, cos(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), length(normalize(1.0)), length(normalize(1.0))))))))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))), false, false, true))))))), true)))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-8.9, -824.613)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))));
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0)))))), false, false)))) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))) && true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false))))))) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))) && true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) + tan(0.0))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))) && true)))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))), false))), true, true, false))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(distance(70.05, -140.410)) : _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, exp(0.0), 0.0, log(1.0), 0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(distance(70.05, -140.410)) : injectionSwitch.y)))))))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)))))));
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))), true)), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-8301.4350, (true ? -8301.4350 : _GLF_FUZZED(-9.1)))))), injectionSwitch.x)) > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)))) + 0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) ^ ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
            }
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
               barrier();
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), max(_GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-51.08, 51.16), (vec2(-51.08, 51.16)) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), max((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), max((0.0), _GLF_IDENTITY((0.0), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY((0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(7716.6279), (true ? _GLF_FUZZED(7716.6279) : _GLF_FUZZED(-73.86))) : (0.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0), mat4(1.0) * (mat2x4(_GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(7716.6279) : (0.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))))) / 1.0), 0.0), (injectionSwitch) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))))), (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), max(_GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), (false ? _GLF_FUZZED(vec2(-51.08, 51.16)) : _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) / 1.0, max((0.0) / 1.0, _GLF_IDENTITY((0.0) / 1.0, (false ? _GLF_FUZZED(-1592.2965) : (0.0) / 1.0))))), 0.0), max((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1030.5753)), bool(_GLF_IDENTITY(false, true && (false)))))) / 1.0), 0.0))))), _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), mix(vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))[0], _GLF_IDENTITY(float(vec4(((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))[0], 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(mat3(float(vec4(((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))[0], 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), _GLF_FUZZED(6.8)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-3.9, mix(float(_GLF_IDENTITY(-3.9, (-3.9) - 0.0)), float(_GLF_FUZZED((4.7 - 4.7))), bool(false)))), ((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))[1]), bvec2(false, true)))))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), _GLF_IDENTITY(((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)) * mat2(1.0), vec2(mat3x2(((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)) * mat2(1.0), 1.0, 1.0, 0.0, 1.0)))), max(_GLF_IDENTITY((injectionSwitch) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), min(vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))), (false ? _GLF_FUZZED(vec2(-51.08, 51.16)) : _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), max((injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))), (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)))).x) - 0.0) : _GLF_FUZZED(_GLF_IDENTITY(-3.6, (true ? -3.6 : _GLF_FUZZED(-94.93)))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, true && (true)))), true, true)))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))) && true)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           atomicStore(buf[virtual_gid], read, 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), bool(bool(bool(bvec4(_GLF_DEAD(false), false, false, false)))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
}
