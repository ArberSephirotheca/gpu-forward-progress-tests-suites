#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(161.705)), float(0.0), bool(true)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(878.919)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), cos(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))) * exp(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false)), false, false))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(67.58) : 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0))) * (injectionSwitch), mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED((2788.7402 * -1.7))), vec2(_GLF_FUZZED(5.8), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], min((mat2(1.0) * (injectionSwitch))[1], (mat2(1.0) * (injectionSwitch))[1]))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], (mat2(1.0) * (injectionSwitch))[1]), (vec2((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED((2788.7402 * -1.7))), vec2(_GLF_FUZZED(5.8), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], min((mat2(1.0) * (injectionSwitch))[1], (mat2(1.0) * (injectionSwitch))[1]))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], (mat2(1.0) * (injectionSwitch))[1])) * mat2(1.0)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3520.2781), _GLF_FUZZED(7829.4423)), clamp(vec2(_GLF_FUZZED(-3520.2781), _GLF_FUZZED(7829.4423)), vec2(_GLF_FUZZED(-3520.2781), _GLF_FUZZED(7829.4423)), vec2(_GLF_FUZZED(-3520.2781), _GLF_FUZZED(7829.4423)))), bvec2(false, false)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(min(vec2(165.878, -6975.8122), 9296.3134)) : injectionSwitch)).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(false, (false) && true) || (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)) || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))) || (false)), (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false)))))))), false), false)))))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(195053u, 146005u, 162265u))))[1]) << 0u), gl_NumWorkGroups[2])).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_size * workgroup_id, 1u, 0u, 1u), ~ (~ (uvec4(workgroup_size * workgroup_id, 1u, 0u, 1u))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))));
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))) && true)), false, true, false)))), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, _GLF_IDENTITY((_GLF_IDENTITY(1 | 1, (1 | 1) ^ 0)) | 0, ((_GLF_IDENTITY(1 | 1, (1 | 1) ^ 0)) | 0) | ((_GLF_IDENTITY(1 | 1, (1 | 1) ^ 0)) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), ~ (_GLF_IDENTITY(~ (0 << _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter)) : ~ (0 << _GLF_IDENTITY(int(4), int(4))))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), ~ (~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))))))))) | (_injected_loop_counter --)))
          {
           do
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 ^ 1) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ (~ (6)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), determinant(mat3(abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0))))))).x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, true, true)))))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), 1.0 * (_GLF_IDENTITY(injectionSwitch.t, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-8.2)), float(mat4x3(float(_GLF_FUZZED(-8.2)), 1.0, tan(0.0), 0.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, sqrt(1.0)))), float(injectionSwitch.t), bool(true))))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y), min((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y)))) / 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), max(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), _GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.t), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y), ((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.t, float(mat2x4(_GLF_IDENTITY(injectionSwitch.t, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-8.2), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(-8.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-8.2), max(_GLF_FUZZED(-8.2), _GLF_FUZZED(-8.2))), _GLF_FUZZED(-8.2), _GLF_FUZZED(-8.2)))))), float(injectionSwitch.t), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))) : injectionSwitch.y)) + 0.0)))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 ^ (1 & 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(6), int(6)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(6), int(6)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-32038) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))) || false)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(2), int(2)))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
      return;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)) + subgroup_local_id, 0u, 1u, 0u), (true ? uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(160995u, 97106u, 21098u, 104898u))))), min(uint(_GLF_IDENTITY(uvec4(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(min(subgroup_base, subgroup_base), (_GLF_IDENTITY(min(subgroup_base, subgroup_base), (min(subgroup_base, subgroup_base)) << 0u)) * 1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) >> 0u))), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) >> 0u)))) | 0u), min(subgroup_base, subgroup_base)), min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(min(subgroup_base, subgroup_base), (min(subgroup_base, subgroup_base)) / 1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u + (subgroup_base)), min(subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))))))) + subgroup_local_id, 0u, 1u, 0u), (true ? uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(160995u, 97106u, 21098u, 104898u))))), uint(_GLF_IDENTITY(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)) + subgroup_local_id, 0u, 1u, 0u), (true ? uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(160995u, 97106u, 21098u, 104898u))))))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size)))))))) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((319.589 - -2578.2586)), _GLF_FUZZED(3.8)), bvec2(false, false)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(20404)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)) + (injectionSwitch))) + tan(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0))).y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(1.0), abs(0.0), sqrt(1.0), 1.0, 0.0, abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), exp(0.0)))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + tan(vec2(0.0, 0.0))).y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(1.0), abs(0.0), sqrt(1.0), 1.0, 0.0, abs(1.0), 1.0, _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0)), (determinant(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 0.0, abs(0.0), 1.0))), 1.0))))) * 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2129.4601)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(79.49)), float(1.0), bool(true)))), bool(true)))), float(_GLF_FUZZED(-245.814)), bool(false)))), vec2(0.0, 1.0))), exp(0.0)))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))) || false))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   return;
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  break;
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))));
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-90120) : int(3)))))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec4((! (_GLF_DEAD(false))), _GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-27125) : int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true))) && true))))), (false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true))))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, length(vec2(0.0, 0.0)) + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 95304)); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true)))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true))))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(336.061), _GLF_FUZZED(0.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         for(int _injected_loop_counter = ((1 & 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false)))))), _GLF_IDENTITY(false, false || (false)), false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(exp(tan(0.0)), (false ? _GLF_FUZZED(4.3) : _GLF_IDENTITY(exp(tan(0.0)), (exp(tan(0.0))) / 1.0))))), clamp(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0))))))).y)), int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0))), dot(vec2(0.0, 1.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))), 0.0, round(length(normalize(determinant(mat2(1.0, 0.0, 0.0, 1.0))))), tan(0.0), 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, exp(tan(0.0)))), clamp(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0))))))).y)), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), clamp(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, exp(tan(0.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, _GLF_IDENTITY(exp(tan(0.0)), log(1.0) + (exp(tan(0.0))))))))).y))))), (0 << _GLF_IDENTITY(int(5), int(5)))))), true && (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
    {
     if((subgroup_local_id % 2) == 0)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), true, false)))))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((4.7))), float(injectionSwitch.y), bool(true)))))))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     subgroupAll(false);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6.3, 5.8)) : injectionSwitch)).x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6.3, 5.8)) : injectionSwitch)).x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0))).x > injectionSwitch.y))))))), ((! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6.3, 5.8)) : injectionSwitch)).x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0))).x > injectionSwitch.y)))))))) || false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_IDENTITY(((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (false))))), bool(bvec3(((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(78.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / _GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(78.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(78.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / _GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(78.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(78.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / _GLF_ONE(1.0, injectionSwitch.y)))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), bool(bvec4(bool(bool(! (false))), false, true, true)))), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch.x, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0)))), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (true ? clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(2.0))))), 0.0 + (min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(78.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (true ? _GLF_IDENTITY(vec3(injectionSwitch, 1.0), (false ? _GLF_FUZZED(vec3(7459.4167, -2.3, -7316.9897)) : vec3(injectionSwitch, 1.0))) : _GLF_FUZZED(vec3(5283.0568, 1.4, -6347.4511))))), min(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (true ? _GLF_IDENTITY(vec3(injectionSwitch, 1.0), (false ? _GLF_FUZZED(vec3(7459.4167, -2.3, -7316.9897)) : vec3(injectionSwitch, 1.0))) : _GLF_FUZZED(vec3(5283.0568, 1.4, -6347.4511))))), vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (true ? _GLF_IDENTITY(vec3(injectionSwitch, 1.0), (false ? _GLF_FUZZED(vec3(7459.4167, -2.3, -7316.9897)) : vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0))) : _GLF_FUZZED(vec3(5283.0568, 1.4, -6347.4511)))))))).y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 + (_GLF_IDENTITY((1), 0 ^ ((1))))) << 0)))), 4, 64, _GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, ~ (~ (4)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, ~ (~ (4)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, ~ (~ (4)))), (~ (_GLF_IDENTITY(4, ~ (~ (4))))) ^ 0), ~ (_GLF_IDENTITY(4, ~ (~ (4)))))), 0 | (~ (_GLF_IDENTITY(4, ~ (~ (4))))))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(4, ~ (~ (4))))), ((~ (_GLF_IDENTITY(4, ~ (~ (4)))))) << 0)) / 1, 0 ^ ((_GLF_IDENTITY((~ (_GLF_IDENTITY(4, ~ (~ (4))))), ((~ (_GLF_IDENTITY(4, ~ (~ (4)))))) << 0)) / 1)))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, true))))), (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
                  break;
                 return;
                }
               break;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), false)))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         subgroupAll(false);
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)), (injectionSwitch) * mat2(1.0))), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2860.5817)), float(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED((-8383.4669))))), bool(true)))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)))))), mat2(mat4x2(mat2(1.0)))), (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0)))))).y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(min(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-354.831)), float(1.0), bool(true)))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (((injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)) * mat2(1.0)), (injectionSwitch) * mat2(1.0)), mix(vec2((min(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-354.831)), float(1.0), bool(true)))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (((injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)) * mat2(1.0)), (injectionSwitch) * mat2(1.0)))[0], (min(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-354.831)), float(1.0), bool(true)))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (((injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)) * mat2(1.0)), (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(-10.27), _GLF_FUZZED(9253.3785)), bvec2(false, false)))), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)), float(float(mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true))))))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)))))), mat2(mat4x2(mat2(1.0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)), float(float(mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true))))))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)))))), mat2(mat4x2(mat2(1.0)))), (false ? _GLF_FUZZED(mat2(mat4x3(-2.9, -9.7, 7511.5541, -1.1, -7.3, 19.09, 5732.5663, -4.8, 585.445, 647.032, -7865.4421, -5.2))) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)), float(float(mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true))))))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2860.5817)), float(1.0), bool(true)))))), mat2(mat4x2(mat2(1.0)))))) : _GLF_FUZZED(mat2(-6232.1218, -8.0, 625.674, 95.58)))), (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0)))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec2(37.73, -237.932)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(abs(vec2(1.0, 1.0)), min(abs(vec2(1.0, 1.0)), _GLF_IDENTITY(abs(vec2(1.0, 1.0)), (abs(vec2(1.0, 1.0))) / vec2(1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(abs(vec2(1.0, 1.0)), min(abs(vec2(1.0, 1.0)), _GLF_IDENTITY(abs(vec2(1.0, 1.0)), (abs(vec2(1.0, 1.0))) / vec2(1.0, 1.0))))).x > injectionSwitch.y))))))), _GLF_IDENTITY(((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(-42929))), bool(false)))) + (injectionSwitch)).y))))), bool(bvec2(((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) && true)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true), false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0), _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-91.56)), float(injectionSwitch.y), bool(true))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))) / 1.0), injectionSwitch.y)))))))))))), false || (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false)))))) && true)))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), _GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(137.893)), float(injectionSwitch.y), bool(true)))), ((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(137.893)), float(injectionSwitch.y), bool(true))))) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(137.893)), float(injectionSwitch.y), bool(true)))), ((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(137.893)), float(injectionSwitch.y), bool(true))))) / 1.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(137.893, min(137.893, 137.893)))), float(injectionSwitch.y), bool(true)))), ((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(137.893)), float(injectionSwitch.y), bool(true))))) / 1.0)) - 0.0)))))), false, false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, 1u, 1u), ~ (~ (clamp(1u, 1u, 1u))))) * (uint(_GLF_IDENTITY(1, min(1, 1))))), _GLF_IDENTITY(4, (4) ^ 0), 64, 4);
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))) || false)) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))) || false)) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec4(bvec3(! (! (false)), false, false), true))))))))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)), mix(vec2((mat2(1.0) * (max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)))[0], _GLF_FUZZED(-5.1)), vec2(_GLF_FUZZED(-2538.3728), (mat2(1.0) * (max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)))[1]), bvec2(false, true))))).x)) > injectionSwitch.y))))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))) || false)) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))) || false)) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(vec2((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))).x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (0 << _GLF_IDENTITY(int(8), int(8))) + (_injected_loop_counter)), _injected_loop_counter)) > int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 0.0, 0.0))))))), 0.0 + (max(0.0, _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)))))))))), injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(false, true && (false)) || ((true))))) && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y, false, false))))))))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       subgroupBarrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, sqrt(0.0), 0.0)), mix(float(float(mat4x2(injectionSwitch.x, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, sqrt(0.0), 0.0))), float(_GLF_FUZZED(602.799)), bool(false)))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))))))) && true))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false), _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, false || (false)))))); _injected_loop_counter --)
      {
       do
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, log(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), 0.0, log(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), abs(1.0), 0.0), (false ? _GLF_FUZZED(mat3(678.344, -0.6, 9.6, 12.18, 6054.5647, 41.96, 2.5, -814.342, -8.4)) : mat3(injectionSwitch, log(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), 0.0, log(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 0.0, 1.0, abs(1.0), 0.0))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   return;
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, false))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  return;
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | 0), int(_GLF_IDENTITY(ivec2((0 | 0), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2((0 | 0), 0), 1), ivec3(0, 0, 0) | (ivec3(ivec2((0 | 0), 0), 1))), min(_GLF_IDENTITY(ivec3(ivec2((0 | 0), 0), 1), ivec3(0, 0, 0) | (ivec3(ivec2((0 | 0), 0), 1))), _GLF_IDENTITY(ivec3(ivec2((0 | 0), 0), 1), ivec3(0, 0, 0) | (ivec3(ivec2((0 | 0), 0), 1)))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2((0 | 0), 0), 1), ivec3(0, 0, 0) | (ivec3(ivec2((0 | 0), 0), 1))))) >> ivec2(0, 0)))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / _GLF_ONE(1.0, injectionSwitch.y))) - 0.0))) & (_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4))))))), ((_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4))))))), max((_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4))))))), (_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) - (0 << _GLF_IDENTITY(int(4), int(4)))))))))) + 0)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}
