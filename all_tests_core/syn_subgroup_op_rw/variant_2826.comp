#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_41 {
 float _f0;
 mat3x4 _f1;
 uint _f2;
} ;

struct _GLF_struct_40 {
 ivec4 _f0;
} ;

struct _GLF_struct_39 {
 mat3x4 _f0;
 bool _f1;
 ivec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_38 {
 bool _f0;
} ;

struct _GLF_struct_42 {
 mat4 _f0;
 _GLF_struct_38 _f1;
 _GLF_struct_39 _f2;
 _GLF_struct_40 _f3;
 _GLF_struct_41 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_37 {
 bvec3 _f0;
 bvec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_35 {
 uvec2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_36 {
 mat3 _f0;
 _GLF_struct_35 _f1;
 mat3x4 _f2;
 uvec4 _f3;
 uint workgroup_size;
 mat3x4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_43 {
 _GLF_struct_36 _f0;
 bvec2 _f1;
 _GLF_struct_37 _f2;
 bvec2 _f3;
 _GLF_struct_42 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_32 {
 ivec4 _f0;
 bool _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_31 {
 mat2x3 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_30 {
 mat2x4 _f0;
 bvec2 _f1;
 mat4x3 _f2;
 float _f3;
 bvec2 _f4;
 vec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_33 {
 uint _f0;
 _GLF_struct_30 _f1;
 uvec2 _f2;
 bvec3 _f3;
 _GLF_struct_31 _f4;
 mat2x4 _f5;
 _GLF_struct_32 _f6;
} ;

struct _GLF_struct_28 {
 mat2x4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_27 {
 mat3x2 _f0;
 int _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_26 {
 bvec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_25 {
 bvec3 _f0;
 int _f1;
 ivec4 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_29 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_27 _f2;
 mat4x2 _f3;
 _GLF_struct_28 _f4;
} ;

struct _GLF_struct_23 {
 mat2x3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_22 {
 vec2 _f0;
 bvec3 _f1;
 mat4x3 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_21 {
 uvec4 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_24 {
 mat2x3 _f0;
 vec4 _f1;
 _GLF_struct_21 _f2;
 mat2x4 _f3;
 bool _f4;
 _GLF_struct_22 _f5;
 _GLF_struct_23 _f6;
} ;

struct _GLF_struct_34 {
 _GLF_struct_24 _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_33 _f2;
 float _f3;
} ;

struct _GLF_struct_18 {
 uint subgroup_local_id;
 bvec4 _f0;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_16 {
 mat4 _f0;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
 uvec3 _f1;
 bvec4 _f2;
 uvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 ivec2 _f1;
 _GLF_struct_16 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 mat4 _f1;
 _GLF_struct_19 _f2;
} ;

struct _GLF_struct_12 {
 mat3x4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_11 {
 bool _f0;
 vec2 _f1;
 bool _f2;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 mat4 _f1;
 bvec4 _f2;
 int _f3;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 vec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_13 {
 _GLF_struct_9 _f0;
 mat4x2 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 bvec4 _f1;
 uint _f2;
 uint _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 float _f1;
 mat2x3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 bvec3 _f1;
 ivec2 _f2;
 vec3 _f3;
 mat2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_3 {
 float _f0;
 mat2 _f1;
 vec4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 bvec2 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_7 _f5;
 uint subgroup_size;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 mat2 _f1;
 vec4 _f2;
 uvec3 _f3;
 mat4x3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_2 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_13 _f2;
 mat3x4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec3 GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         continue;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_2(_GLF_struct_0(uvec3(_GLF_IDENTITY(1u, (1u) | 0u))), _GLF_struct_1(ivec4(1), mat2(1.0), vec4(1.0), uvec3(1u), mat4x3(1.0), mat3x2(1.0))), _GLF_struct_8(_GLF_struct_3(1.0, mat2(1.0), vec4(1.0), vec2(1.0)), bvec2(true), _GLF_struct_4(uvec4(1u), bvec3(true), _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(ivec4(ivec2(_GLF_IDENTITY(1, (1) | (1))), 1, 0)))) | _GLF_IDENTITY((ivec2(1)), ~ (~ ((ivec2(1)))))), vec3(1.0), mat2(1.0), mat2x4(1.0)), _GLF_struct_5(ivec2(_GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? 1.0 : _GLF_FUZZED(-947.673))), mat2x3(1.0), mat3x4(1.0)), _GLF_struct_6(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), ((uvec2(1u))) | ((uvec2(1u)))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)))), uvec2(_GLF_IDENTITY(uvec2((uvec2(1u))), (uvec2((uvec2(1u)))) / uvec2(1u, 1u))))) >> _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec2(uvec2(0u, 0u))), max(uvec2(uvec2(uvec2(0u, 0u))), uvec2(uvec2(uvec2(0u, 0u))))))) ^ uvec2(0u, 0u)), bvec4(true), 1u, 1u, mat4x3(1.0)), _GLF_struct_7(ivec4(1)), gl_SubgroupSize), _GLF_struct_13(_GLF_struct_9(mat4x2(1.0), vec2(1.0), bvec4(true)), mat4x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0)), _GLF_struct_10(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) >> 0), 1))), max(ivec2(1), ivec2(1))), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1)))))))) | (ivec2(-96413, 68036) & ivec2(0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), ivec2(1))), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1))), max(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0))))))))), mat4(1.0), bvec4(true), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) << 0)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) * 1), 1))), _GLF_struct_11(true, vec2(1.0), true), _GLF_struct_12(mat3x4(1.0), mat3x2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.0)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-35.93)), float(1.0), bool(true))))), 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-295.431, (-295.431) / 1.0)), mix(float(_GLF_FUZZED(-295.431)), float(_GLF_FUZZED(9.6)), bool(false)))), bool(false)))))), mat3x4(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_17(_GLF_struct_15(uvec4(1u), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u))), bvec4(true), uvec2(1u), mat4x2(1.0)), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), 0)), (false ? _GLF_FUZZED(-77308) : int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), 0)))))) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), 0)), (false ? _GLF_FUZZED(-77308) : int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), 0)))))) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0)) >> 0)), _GLF_struct_16(mat4(1.0))), mat4(1.0), _GLF_struct_19(vec2(1.0), _GLF_struct_18(gl_SubgroupInvocationID, bvec4(true))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(false))) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true)))))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 _GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(_GLF_struct_36(mat3(1.0), _GLF_struct_35(uvec2(1u), ivec4(1)), mat3x4(1.0), uvec4(1u), gl_WorkGroupSize.x, mat3x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-70.48)), float(1.0), bool(true)))), bvec4(true)), bvec2(true), _GLF_struct_37(bvec3(true), bvec2(true), uvec2(1u)), bvec2(true), _GLF_struct_42(mat4(1.0), _GLF_struct_38(true), _GLF_struct_39(mat3x4(1.0), true, ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, _GLF_IDENTITY(1, 0 ^ (1)), 0)), ~ (~ (int(ivec3(1, 1, 0))))))), ivec3(1)), _GLF_struct_40(ivec4(1)), _GLF_struct_41(_GLF_IDENTITY(1.0, max(1.0, 1.0)), mat3x4(1.0), 1u), ivec4(1)), mat2(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), vec3(_GLF_IDENTITY(mat3x4(vec3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0), (true ? mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat3(7021.4603, 851.217, -3244.5219, -874.444, -5.2, -7.8, -9.4, -67.99, -909.835))))), clamp(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0), (true ? mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat3(7021.4603, 851.217, -3244.5219, -874.444, -5.2, -7.8, -9.4, -67.99, -909.835))))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0), (true ? mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat3(7021.4603, 851.217, -3244.5219, -874.444, -5.2, -7.8, -9.4, -67.99, -909.835))))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0), (true ? mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat3(7021.4603, 851.217, -3244.5219, -874.444, -5.2, -7.8, -9.4, -67.99, -909.835)))))))), 0.0, 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), mat3x4(mat3x4(mat3x4(vec3(injectionSwitch.y, 0.0, 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = _GLF_struct_replacement_43._f0.workgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((true), ! (! ((true)))), bool(bvec4(_GLF_IDENTITY((true), ! (! ((true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(822.383), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4063.8649)), bvec2(true, false))))).x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (! ((true)))), (! _GLF_IDENTITY(_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), (_GLF_IDENTITY((true), ((true)) && true)) && true))))))))), ! (! ((true))))) && true))))))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), false || ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))))) && true))));
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.z = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-65.92, min(-65.92, _GLF_IDENTITY(-65.92, mix(float(_GLF_FUZZED(-34.33)), float(-65.92), bool(true)))))), _GLF_FUZZED((1402.9223))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0)))), 1.0, 1.0)), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(2497.1928)), bool(false))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(0.0, 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), abs(0.0), log(1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat4x3(vec2(0.0, 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), abs(0.0), log(1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y))))))), vec2(0.0, cos(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0)))), 1.0, 1.0))) + 0.0))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
         else
          {
          }
        }
       return;
      }
    }
   GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.y = _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 0u, 1u, 1u)));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       break;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), true, false)), (bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), true, false))) || false)))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))).y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), (true ? _injected_loop_counter : _GLF_FUZZED(-72770))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.z * GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.y;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(normalize(vec2(-2.2, 6.7))))).y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     barrier();
    }
   else
    {
    }
  }
 GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x = workgroup_base;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x + _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * _GLF_struct_replacement_14._f1.subgroup_size + _GLF_struct_replacement_20._f2._f1.subgroup_local_id, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) / (1u | 1u)) ^ (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x + _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * _GLF_struct_replacement_14._f1.subgroup_size + _GLF_struct_replacement_20._f2._f1.subgroup_local_id));
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x, (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x) | (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x)) + _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_14._f1.subgroup_size, uint(uvec2(subgroup_id * _GLF_struct_replacement_14._f1.subgroup_size, 1u))))) + (_GLF_IDENTITY((_GLF_struct_replacement_20._f2._f1.subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size)), max(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size)), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size)), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size)), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_size, 0u | (_GLF_struct_replacement_14._f1.subgroup_size))))))))))), ((_GLF_struct_replacement_20._f2._f1.subgroup_local_id + 1) % _GLF_struct_replacement_14._f1.subgroup_size) | ((_GLF_struct_replacement_20._f2._f1.subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) * 1, 0 | ((1) * 1)))) % _GLF_struct_replacement_14._f1.subgroup_size)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) ^ 0, max(_GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) / 1)) ^ 0, ((int(4)) ^ 0) | ((int(4)) ^ 0)), _GLF_IDENTITY((int(4)) ^ 0, 0 | ((int(4)) ^ 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(int(_injected_loop_counter)), (false ? _GLF_FUZZED(-61857) : int(int(_injected_loop_counter))))) < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(int(int(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (int(int(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))))); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_struct_replacement_20._f2._f1.subgroup_local_id + 1 < _GLF_struct_replacement_14._f1.subgroup_size)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-17.86)), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-17.86), clamp(_GLF_IDENTITY(_GLF_FUZZED(-17.86), clamp(_GLF_IDENTITY(_GLF_FUZZED(-17.86), float(vec4(_GLF_FUZZED(-17.86), 0.0, 1.0, 1.0))), _GLF_FUZZED(-17.86), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-17.86), min(_GLF_FUZZED(-17.86), _GLF_FUZZED(-17.86))), min(_GLF_IDENTITY(_GLF_FUZZED(-17.86), min(_GLF_FUZZED(-17.86), _GLF_FUZZED(-17.86))), _GLF_IDENTITY(_GLF_FUZZED(-17.86), min(_GLF_FUZZED(-17.86), _GLF_FUZZED(-17.86))))))), _GLF_FUZZED(-17.86), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-17.86), (true ? _GLF_IDENTITY(_GLF_FUZZED(-17.86), clamp(_GLF_FUZZED(-17.86), _GLF_FUZZED(-17.86), _GLF_IDENTITY(_GLF_FUZZED(-17.86), 0.0 + (_GLF_FUZZED(-17.86))))) : _GLF_FUZZED(-3.2))), (false ? _GLF_FUZZED(-5.4) : _GLF_FUZZED(-17.86)))))), (float(_GLF_FUZZED(-17.86))) - 0.0)) + 0.0), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0)))))))), bool(true))), injectionSwitch.x)) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) + 0)))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     atomicStore(checker[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 + (4)), _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, (4) - 0)))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) * 1)) | (int(4))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), _GLF_IDENTITY(~ (~ (int(ivec3(int(4), 0, 1)))), min(~ (~ (int(ivec3(int(4), 0, 1)))), ~ (~ (int(ivec3(int(4), 0, 1)))))))), int(4))))), 1 * ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> 0)), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))))))), ~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))), 1 * ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))))))), ((~ (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))), 0, ((-16549 * 97267) & 0))))), 1 * ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))))))))) ^ 0))))) + (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 + (4)), (_GLF_IDENTITY(4, 0 + (4))) >> 0)))) - 0));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false), (injectionSwitch.x > injectionSwitch.y))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
        continue;
       barrier();
      }
    }
   for(_GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(_GLF_struct_24(mat2x3(1.0), vec4(1.0), _GLF_struct_21(uvec4(_GLF_IDENTITY(1u, (1u) * 1u)), uvec3(1u), mat4x3(1.0), mat2x3(1.0)), mat2x4(1.0), true, _GLF_struct_22(vec2(1.0), bvec3(true), mat4x3(1.0), bvec2(true)), _GLF_struct_23(mat2x3(1.0), uvec3(1u))), _GLF_struct_29(_GLF_struct_25(bvec3(true), 1, ivec4(1), 1), _GLF_struct_26(bvec4(true), 1u), _GLF_struct_27(mat3x2(1.0), 1, mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) / vec2(1.0, 1.0)))))), mat4x2(1.0), _GLF_struct_28(mat2x4(1.0), mat2x4(1.0))), _GLF_struct_33(1u, _GLF_struct_30(mat2x4(1.0), bvec2(true), mat4x3(1.0), 1.0, _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(true), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), true)), false, true)))), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(1.0)), uvec4(1u)), uvec2(1u), bvec3(true), _GLF_struct_31(mat2x3(1.0), mat3x2(1.0), mat3x2(1.0), mat2x4(1.0)), mat2x4(1.0), _GLF_struct_32(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-76902) : 1))))))), true, bvec4(true))), 1.0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_34._f1._f0._injected_loop_counter > 0); _GLF_struct_replacement_34._f1._f0._injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))), min(~ (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))), ~ (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))))) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
          continue;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) + vec2(0.0, 0.0)), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, 0.0, 1.0))).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
        break;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     atomicStore(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], read, 4, 64, 4);
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       subgroupAll(true);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
}
