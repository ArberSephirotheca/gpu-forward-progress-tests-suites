#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 uvec4 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.y = subgroup_size;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    break;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x))), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) * 1u), gl_NumWorkGroups.x));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.w = num_workgroup;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) || false))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) || false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat2(0.0, 0.0, tan(0.0), 0.0))) > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (0u ^ 0u)), max(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), workgroup_id));
 uint subgroup_base = GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.y;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x, 0u ^ (workgroup_base + subgroup_base + GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x));
 do
  {
   GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y = virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + 1) % GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.y);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z = next_virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), (false ? _GLF_FUZZED(-41485) : 64)), 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))
    {
     if((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup)).xy.x % 2) == 0)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         subgroupAll(false);
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       atomicStore(buf[GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z], uint(1), 4, 64, 4);
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
       switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0)))))
        {
         case 24:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))), (injectionSwitch.x < injectionSwitch.y))) || false))))))
            {
             return;
            }
           else
            {
            }
          }
         uvec2 _GLF_SWITCH_0_0v[47], _GLF_SWITCH_0_1v;
         case 21:
         if(_GLF_DEAD(false))
          return;
         if(false)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 return;
                }
              }
             return;
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
              return;
            }
           uint _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[51], _GLF_SWITCH_0_4v;
           (mat4x2(_GLF_IDENTITY(-6059.6860, 0.0 + (_GLF_IDENTITY(-6059.6860, min(_GLF_IDENTITY(-6059.6860, 0.0 + (-6059.6860)), _GLF_IDENTITY(-6059.6860, min(-6059.6860, -6059.6860)))))), 972.302, 369.383, 2.9, -93.98, 4104.7410, _GLF_IDENTITY(0.6, float(vec4(0.6, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(1.0, (1.0) * exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.1)), float(0.0), bool(true)))))), vec4(1.0, tan(0.0), 1.0, 0.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(float(-96485))), float(mat4x2(float(_GLF_FUZZED(float(-96485))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, 1.0), vec4(1.0, tan(0.0), 1.0, 0.0)), mix(float(dot(vec4(0.0, sqrt(1.0), 0.0, 1.0), vec4(1.0, tan(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0))), float(_GLF_FUZZED(-2836.3719)), bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(13.64)))), bool(true)))))), false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bool(bool(bool(injectionSwitch.x < injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bool(bool(bool(injectionSwitch.x < injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))), ! (! (! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bool(bool(bool(injectionSwitch.x < injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))))))))))))))), dot(vec4(0.0, sqrt(1.0), 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(tan(0.0), min(_GLF_IDENTITY(tan(0.0), (tan(0.0)) - 0.0), _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))))), 1.0, 0.0)))))), -25.51) * vec4(34.40, -8.2, _GLF_IDENTITY(6.9, (6.9) / _GLF_ONE(1.0, injectionSwitch.y)), 5180.3632));
           {
            for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  return;
                 }
                else
                 {
                 }
               }
             }
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 return;
                for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 + (1))) / 1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 + (1))) / 1)) >> 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)))), false, false), false)))))); _injected_loop_counter --)
                 {
                  mat3x2(29.68, -1586.1370, -13.72, -7778.7978, 3.8, -81.39);
                 }
               }
              else
               {
                do
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0))) > injectionSwitch.y) && true)))))
                   break;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      return;
                     }
                    else
                     {
                     }
                   }
                 }
                while(_GLF_WRAPPED_LOOP(false));
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 return;
               }
             }
            else
             {
             }
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 return;
                return;
               }
              return;
             }
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
               }
              else
               {
                mat2(2.7, -3.4, -8761.0707, -5585.3098);
               }
             }
            if(_GLF_DEAD(false))
             return;
            mat4x3 _GLF_SWITCH_0_5v;
            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
             {
              for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(float(true)))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2719.0981), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(75.29)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false), true)))))))))
                 continue;
                ;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
               }
             }
            else
             {
             }
            for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
             {
              _GLF_IDENTITY((26.28 + vec3(3164.5253, -5.8, 566.727)), clamp((26.28 + vec3(3164.5253, -5.8, 566.727)), (26.28 + vec3(3164.5253, -5.8, 566.727)), (26.28 + vec3(3164.5253, -5.8, 566.727))));
             }
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                 return;
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                 }
                else
                 {
                  return;
                 }
               }
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
               return;
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                (_GLF_IDENTITY(bvec4(false, false, true, false) == bvec4(true, true, false, true), true && (_GLF_IDENTITY(bvec4(false, false, true, false) == bvec4(true, true, false, true), (bvec4(false, false, true, false) == bvec4(true, true, false, true)) || false))));
               }
              else
               {
               }
              if(_GLF_DEAD(false))
               return;
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_DEAD(false))
                 return;
               }
              else
               {
               }
             }
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               return;
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                return;
               }
              else
               {
               }
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            do
             {
              if(_GLF_DEAD(false))
               continue;
              do
               {
                while(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, false))))))))))))
                 {
                  for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6))), false || (_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6))), bool(bool(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6))))))))); _injected_loop_counter --)
                       {
                        ;
                       }
                     }
                    else
                     {
                     }
                   }
                  if(_GLF_DEAD(false))
                   return;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              do
               {
                if(_GLF_DEAD(false))
                 return;
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-1.5)), bool(false))))).y))));
            do
             {
              if(false)
               {
                bvec4 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                bvec2 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    do
                     {
                      return;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                 }
                else
                 {
                  ;
                  if(_GLF_DEAD(false))
                   return;
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(17945) : _injected_loop_counter --)))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), 1.0, 0.0)), (vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), 1.0, 0.0))) * mat2(1.0))).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                     return;
                   }
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      return;
                     }
                    else
                     {
                     }
                   }
                 }
                vec3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
               }
              else
               {
                vec4 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v[19];
                if(_GLF_DEAD(false))
                 break;
                do
                 {
                  ;
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                clamp(uvec4(20591u, 96144u, 22922u, 56211u), uvec4(150905u, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z, 18219u), (uvec4(135515u, 148677u, 26354u, _GLF_IDENTITY(167308u, uint(uint(_GLF_IDENTITY(167308u, min(167308u, 167308u)))))) & _GLF_IDENTITY(uvec4(152739u, 77446u, _GLF_IDENTITY(91145u, (91145u) | (91145u)), 45898u), (uvec4(152739u, 77446u, _GLF_IDENTITY(91145u, (91145u) | (91145u)), 45898u)) | (uvec4(152739u, 77446u, _GLF_IDENTITY(91145u, (91145u) | (91145u)), 45898u)))));
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                   break;
                  if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                   return;
                  return;
                 }
               }
             }
            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
             {
              do
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  ;
                  if(_GLF_DEAD(false))
                   continue;
                 }
                else
                 {
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                       break;
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        return;
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                     }
                    else
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          return;
                         }
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        break;
                       }
                     }
                   }
                  break;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
           }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (false) && true)))
                break;
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1); _injected_loop_counter ++)
                {
                 94157;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               uvec2(30271u, 36204u);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(false)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY((+ 654.615), ((+ 654.615)) * round(length(normalize(vec3(1.0, 1.0, 1.0))))))), bool(false))))), false)), (_GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   vec3 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[27];
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       (mat4x3(0.4, 0.7, -4.0, _GLF_IDENTITY(_GLF_IDENTITY(2707.8796, mix(float(_GLF_FUZZED(3.1)), float(2707.8796), bool(true))), 0.0 + (2707.8796)), -4.8, _GLF_IDENTITY(-1.0, (false ? _GLF_FUZZED(74.83) : _GLF_IDENTITY(-1.0, (true ? -1.0 : _GLF_FUZZED(-433.645))))), 8.1, -0.9, _GLF_IDENTITY(-21.29, max(-21.29, -21.29)), 4.3, -7270.1555, -897.396) * mat2x4(-5.2, 8651.2889, -9673.4790, -4766.9100, 283.819, -2.9, -1.2, 3.5));
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   bvec2(true, false);
                   ivec3 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v;
                  }
                 while((false || false))
                  {
                   ;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     uvec3(165947u, 95240u, 149837u);
                    }
                   vec2 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v;
                   if(_GLF_DEAD(false))
                    break;
                   mat2 _GLF_SWITCH_0_24v[6], _GLF_SWITCH_0_25v[99];
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 1 * (6))) >> 0)))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         ivec2(-37684, -37019);
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 vec2 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     mat2x4(6634.5142);
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 mat3x2 _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v[97], _GLF_SWITCH_0_30v[96];
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(6649.6197)), bool(false))), injectionSwitch.y))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(true)
                    {
                     while((_GLF_IDENTITY(uvec2(72042u, 59709u) != _GLF_IDENTITY(_GLF_SWITCH_0_1v, uvec2(_GLF_IDENTITY(uvec3(_GLF_SWITCH_0_1v, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), uvec3(uvec4(_GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), clamp((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u))) | ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_IDENTITY(_GLF_SWITCH_0_1v, clamp(_GLF_SWITCH_0_1v, _GLF_SWITCH_0_1v, _GLF_IDENTITY(_GLF_SWITCH_0_1v, max(_GLF_SWITCH_0_1v, _GLF_IDENTITY(_GLF_SWITCH_0_1v, min(_GLF_SWITCH_0_1v, _GLF_SWITCH_0_1v)))))), 0u)))))), 1u)))))), true && (uvec2(72042u, 59709u) != _GLF_IDENTITY(_GLF_SWITCH_0_1v, uvec2(_GLF_IDENTITY(uvec3(_GLF_SWITCH_0_1v, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), uvec3(uvec4(_GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), clamp(_GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), clamp(_GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_IDENTITY(_GLF_SWITCH_0_1v, (_GLF_SWITCH_0_1v) / uvec2(1u, 1u)), 0u)), _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u))) | ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | (uvec3(_GLF_SWITCH_0_1v, 0u)))))), 1u))))))))))
                      {
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x != (false ? (156208u) : GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z)))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             uvec3(76079u, 21831u, 83993u);
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           ;
                          }
                        }
                       else
                        {
                         ivec2(_GLF_IDENTITY(-92788, (-92788) - 0), -31567);
                        }
                      }
                     else
                      {
                      }
                     do
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           while(true)
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                              return;
                             min(-80.53, 73.95);
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) || false))
                              continue;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     true;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          continue;
                         continue;
                        }
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       ;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                     uvec3 _GLF_SWITCH_0_31v[52], _GLF_SWITCH_0_32v[10], _GLF_SWITCH_0_33v;
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        return;
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           ivec2 _GLF_SWITCH_0_34v;
           {
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              do
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  continue;
                 }
                if(_GLF_DEAD(false))
                 continue;
                mat4 _GLF_SWITCH_0_35v;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  continue;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                uvec2(57286u, 69850u);
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    return;
                   }
                  break;
                 }
                if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    ivec3(61215, -25621, -28182);
                   }
                 }
                else
                 {
                 }
                if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                   continue;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
                   {
                   }
                  else
                   {
                    do
                     {
                      mat3(-181.545, -5741.0940, 7.3, 260.500, -2.3, 1.5, _GLF_IDENTITY(-481.932, (-481.932) * _GLF_ONE(1.0, injectionSwitch.y)), -5399.7142, 8809.5253);
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                   return;
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   continue;
                 }
                do
                 {
                  if(_GLF_DEAD(false))
                   break;
                  mat2(_GLF_IDENTITY(9.5, float(mat2x4(9.5, 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0, 0.0))), 32.06, 135.010, -3.2);
                  if(_GLF_DEAD(false))
                   break;
                 }
                while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), ! (! (bool(bool(_GLF_WRAPPED_LOOP(false))))))));
                bvec3 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v;
               }
              while(true);
             }
            ivec3(-83610, 91341, 3609);
            if(_GLF_DEAD(false))
             return;
            do
             {
              if(_GLF_IDENTITY(false, (false) && true))
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  uvec2(136921u, 23743u).yyx;
                 }
                else
                 {
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-205.714, -8.4)) : (injectionSwitch))))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))).y, (false ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0)), 1.0)).y))))))))
                 {
                 }
                else
                 {
                  _GLF_IDENTITY(_GLF_IDENTITY(not(bvec2(true, false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))))))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(not(bvec2(true, false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(not(bvec2(true, false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(not(bvec2(true, false)), false), bvec3(bvec3(bvec3(not(bvec2(true, false)), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(not(bvec2(true, false)), false), bvec3(bvec3(bvec3(not(bvec2(true, false)), false)))))))))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(not(bvec2(true, false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))))))), bvec2(bvec3(_GLF_IDENTITY(not(bvec2(true, false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(not(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(not(bvec2(true, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(not(bvec2(true, false)))))))))))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
                  if(_GLF_DEAD(false))
                   return;
                 }
                if(_GLF_DEAD(false))
                 return;
                (uvec4(9889u, 84898u, 99824u, 102833u) + GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z);
                bvec3 _GLF_SWITCH_0_38v;
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 return;
               }
              else
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                 }
                else
                 {
                 }
                if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), ! (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))) || (bool(bvec4(false, false, false, false)))))))
                 return;
                int _GLF_SWITCH_0_39v;
                mat2 _GLF_SWITCH_0_40v, _GLF_SWITCH_0_41v, _GLF_SWITCH_0_42v;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  do
                   {
                    if(_GLF_DEAD(false))
                     return;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  -74.76;
                  for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                   {
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_WRAPPED_IF_FALSE(false))
                       {
                       }
                      else
                       {
                        return;
                       }
                     }
                   }
                 }
                else
                 {
                 }
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                     }
                    else
                     {
                     }
                    return;
                   }
                 }
                (vec3(-51.91, -4.6, -56.36) * mat3(6.8, -255.345, _GLF_IDENTITY(692.110, float(mat2x3(_GLF_IDENTITY(692.110, (true ? 692.110 : _GLF_FUZZED(-291.168))), 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 2.0, 785.561, 8733.5634, -0.1, _GLF_IDENTITY(487.533, (487.533) + 0.0), -6429.9067));
               }
             }
            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            if(_GLF_DEAD(false))
             {
              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
               }
              else
               {
                return;
               }
             }
            vec2 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v;
            uvec3 _GLF_SWITCH_0_45v[55], _GLF_SWITCH_0_46v, _GLF_SWITCH_0_47v;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              if(_GLF_DEAD(false))
               return;
              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, int(ivec2(0, 0))), 1, 0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), 0 ^ (_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, int(ivec2(0, 0))), 1, 0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(ivec4(_GLF_IDENTITY(0, int(ivec2(0, 0))), 1, 0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))))))); _injected_loop_counter --)
               {
                return;
               }
             }
           }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             uvec4(158377u, 124727u, 76397u, _GLF_IDENTITY(80002u, (false ? _GLF_FUZZED(next_virtual_gid) : 80002u)));
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          return;
         case 0:
         case 46:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(false);
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         case 84:
         atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z, (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z) ^ 0u)) | 0u)], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         break;
         case 88:
         mat3x2 _GLF_SWITCH_0_48v, _GLF_SWITCH_0_49v[13], _GLF_SWITCH_0_50v;
         case 45:
         bool _GLF_SWITCH_0_51v, _GLF_SWITCH_0_52v, _GLF_SWITCH_0_53v[55];
         if(_GLF_DEAD(false))
          return;
         default:
         1;
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       subgroupBarrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), mat3x2(mat4(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.8)), bool(false)))), 1.0)))))).y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-78.95)), float(float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), bool(true)))), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-78.95)), float(float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), bool(true))))) / 1.0)))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], read, 4, 64, 4);
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
}
