#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 bool _f0;
 mat4x3 _f1;
 ivec3 _f2;
 float _f3;
 mat2x3 _f4;
 mat2x3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 int _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 bvec2 _f1;
 uint virtual_gid;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
 int _f3;
 bool _f4;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 vec3 _f1;
 vec2 _f2;
 uvec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 bool _f1;
 ivec3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_7 {
 float _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_6 _f2;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1.0, _GLF_struct_2(_GLF_struct_0(mat3x2(1.0), true, ivec3(1), uvec3(1u)), _GLF_struct_1(mat2x3(1.0), vec3(1.0), vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(((subgroup_local_id) + uvec3(74211u, 75320u, 22215u))) : _GLF_IDENTITY(uvec3(1u), max(uvec3(1u), uvec3(1u))))), (uvec3(_GLF_IDENTITY(1u, 0u ^ (1u)))) | (_GLF_IDENTITY(uvec3(1u), (false ? _GLF_FUZZED(uvec3(149126u, 60367u, 99911u)) : uvec3(1u))))), 1u)), _GLF_struct_6(_GLF_struct_3(bvec4(true), bvec4(_GLF_IDENTITY(true, true && (true))), mat3x4(1.0), mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_struct_4(ivec2(1), bvec4(true)), _GLF_struct_5(mat3x2(1.0), mat3x2(1.0), mat2x3(1.0), 1, true)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x);
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> ((1 ^ 1) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, 0 ^ (4)), 4, 4)))))))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _injected_loop_counter ++)))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true)), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), clamp(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 | (5))) + 0)), int(5), int(5))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != (_GLF_IDENTITY(1, (1) << 0) ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0))); _injected_loop_counter ++)
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         do
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             barrier();
                                                            }
                                                          }
                                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), min(workgroup_size, workgroup_size)) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(ivec4(1), bvec2(_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_base + subgroup_local_id, _GLF_struct_9(_GLF_struct_8(true, mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), ivec3(1), 1.0, mat2x3(1.0), mat2x3(1.0), mat4x2(1.0)), 1, _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))))))));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size), 0u + (workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))), 0u | (uint(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) ? uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))), 0u | (uint(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))))) : _GLF_FUZZED(workgroup_id)))), subgroup_local_id, subgroup_local_id)), subgroup_local_id)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size)))));
 uint read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), ((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, _GLF_IDENTITY(max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid), min(_GLF_IDENTITY(max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid), ~ (_GLF_IDENTITY(~ (max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)), (~ (max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))) - 0u))), max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)))))) | 0u))), ~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), ~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), ((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, _GLF_IDENTITY(max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid), min(_GLF_IDENTITY(max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid), ~ (_GLF_IDENTITY(~ (max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)), (~ (max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))) - 0u))), max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)))))) | 0u))), ~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), ~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), ((_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, _GLF_IDENTITY(max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid), min(_GLF_IDENTITY(max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid), ~ (_GLF_IDENTITY(~ (max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)), (~ (max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))) - 0u))), max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)))))) | 0u))), ~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))), ~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid)))))))) - (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))], (buf[_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, max(_GLF_struct_replacement_10.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, ~ (~ (_GLF_struct_replacement_10.virtual_gid))))))))]) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 4, 64, 2), 0u | (atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_10.virtual_gid], (_GLF_IDENTITY(1u, (1u) | 0u) ^ 1u) | (buf[_GLF_struct_replacement_10.virtual_gid])), _GLF_IDENTITY(4, (4) | 0), 64, _GLF_IDENTITY(2, (false ? _GLF_FUZZED(27020) : _GLF_IDENTITY(2, (2) - (1 ^ 1)))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.3)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), bool(true))) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.3)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), bool(true))) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.3)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), bool(true))) < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.3)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) / 1.0))))))), bool(true))) < injectionSwitch.y))) || false))))))))
  {
   for(int _injected_loop_counter = (1 | _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-51862) : 0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) ? _GLF_FUZZED(819.465) : injectionSwitch.x))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(819.465) : injectionSwitch.x))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true))) ? _GLF_FUZZED(819.465) : injectionSwitch.x)))))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
      {
       for(int _injected_loop_counter = (int(63185u) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-712.737)), float(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-712.737)), float(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), (true ? clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]) : _GLF_FUZZED(intBitsToFloat(-11122)))))), bool(true))), injectionSwitch[1]))) - vec2(0.0, 0.0)).x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if((_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), (_GLF_IDENTITY(0u | (subgroup_local_id), uint(uvec2(0u | (subgroup_local_id), 1u)))) ^ 0u)) % 2, (subgroup_local_id % 2) | 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2, (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (subgroup_local_id % 2))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) % 2, (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (_GLF_IDENTITY(subgroup_local_id % 2, uint(uvec3(subgroup_local_id % 2, 0u, 1u)))))) / 1u)) | (_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u))) % 2) | (subgroup_local_id % 2), ((subgroup_local_id % 2) | (subgroup_local_id % 2)) - 0u))) / 1u))), (subgroup_local_id % 2) | 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), (_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), min(subgroup_local_id % 2, subgroup_local_id % 2))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))), 0u | ((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))) | 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), (true ? (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), (true ? (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)) : _GLF_FUZZED(subgroup_base))))), (_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY((subgroup_local_id % 2) | 0u, 0u | ((subgroup_local_id % 2) | 0u))))))))), 1u, 1u), max(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % _GLF_IDENTITY(2, (false ? _GLF_FUZZED(-5262) : 2))) | 0u), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)) | (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), ((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY((subgroup_local_id % 2) | 0u, min((subgroup_local_id % 2) | 0u, _GLF_IDENTITY((subgroup_local_id % 2) | 0u, ((subgroup_local_id % 2) | 0u) | 0u))))) | (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))) - 0u))), (0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)) | (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)) | (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))) - 0u)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 1u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) / 1u)))))), _GLF_IDENTITY(0u, 0u + (0u)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), max(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), _GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)))) % 2, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) % 2) | 0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u + (0u)))))) | (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))))))), 1u, 1u))))))))) == 0)
                                  {
                                   do
                                    {
                                     do
                                      {
                                       do
                                        {
                                         do
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), 0 ^ (int(5))))) | (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))), ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), 0 ^ (_GLF_IDENTITY(~ (_injected_loop_counter --), (_GLF_IDENTITY(~ (_injected_loop_counter --), 0 ^ (~ (_injected_loop_counter --)))) << 0))))))
                                            {
                                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(int(6), 1, (0 << _GLF_IDENTITY(int(1), int(1))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(int(6), 1, (0 << _GLF_IDENTITY(int(1), int(1)))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(_injected_loop_counter)))))) / 1), 1, (0 << _GLF_IDENTITY(int(1), int(1))))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) * int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(int(6), (int(6)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     do
                                                      {
                                                       do
                                                        {
                                                         do
                                                          {
                                                           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, tan(0.0), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), (true ? _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) : _GLF_FUZZED(-9.2)))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0))))), true, false, true))); _injected_loop_counter ++)
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               do
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                  {
                                                                  }
                                                                 else
                                                                  {
                                                                   do
                                                                    {
                                                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       do
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                              {
                                                                              }
                                                                             else
                                                                              {
                                                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                  {
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                    {
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                      {
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), bool(bvec2(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                          {
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                           do
                                                                                            {
                                                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                              {
                                                                                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), false)), true, true))))))))
                                                                                                {
                                                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                  {
                                                                                                  }
                                                                                                 else
                                                                                                  {
                                                                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                    {
                                                                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                                                      {
                                                                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                                                        {
                                                                                                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                                                          {
                                                                                                           do
                                                                                                            {
                                                                                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                                                                                              {
                                                                                                              }
                                                                                                             else
                                                                                                              {
                                                                                                               for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) - 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                                                                {
                                                                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                                                                                                                  {
                                                                                                                  }
                                                                                                                 else
                                                                                                                  {
                                                                                                                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(int(7), min(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                                                                    {
                                                                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                      {
                                                                                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false || ((injectionSwitch.x < injectionSwitch.y)), ! (! (false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), ! (! (_GLF_IDENTITY(false || ((injectionSwitch.x < injectionSwitch.y)), ! (! (false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))))))), true, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true)), false)), true && (bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))), true), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))), true), true))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && true)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)), (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))) && true)), true), true)))))))), false || ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x < injectionSwitch.y))))), true, true)), false)))))))))
                                                                                                                        {
                                                                                                                         do
                                                                                                                          {
                                                                                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                                            {
                                                                                                                            }
                                                                                                                           else
                                                                                                                            {
                                                                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                                              {
                                                                                                                              }
                                                                                                                             else
                                                                                                                              {
                                                                                                                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), max(ivec2(0, 1), _GLF_IDENTITY(ivec2(0, 1), ivec2(ivec4(ivec2(0, 1), 1, 0))))))), 0))); _injected_loop_counter --)
                                                                                                                                {
                                                                                                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                                                                                  {
                                                                                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                                                    {
                                                                                                                                    }
                                                                                                                                   else
                                                                                                                                    {
                                                                                                                                     do
                                                                                                                                      {
                                                                                                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                                                                                                                                        {
                                                                                                                                        }
                                                                                                                                       else
                                                                                                                                        {
                                                                                                                                         do
                                                                                                                                          {
                                                                                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                                            {
                                                                                                                                             barrier();
                                                                                                                                            }
                                                                                                                                           else
                                                                                                                                            {
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))) && true)));
                                                                                                                        }
                                                                                                                       else
                                                                                                                        {
                                                                                                                        }
                                                                                                                      }
                                                                                                                     else
                                                                                                                      {
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                           while(_GLF_WRAPPED_LOOP(false));
                                                                                                          }
                                                                                                        }
                                                                                                       else
                                                                                                        {
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                   else
                                                                                                    {
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                             else
                                                                                              {
                                                                                              }
                                                                                            }
                                                                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                                          }
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(false));
                                                                      }
                                                                    }
                                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3297.8572)), float(1.0), bool(true))), 0.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), 0.0), _GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 0.0)), (_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 0.0)), vec4(1.0, 1.0, 1.0, 1.0) * ((vec4(1.0, 1.0, 1.0, 0.0))))) + vec4(0.0, 0.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), (vec4(1.0, 1.0, 1.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), vec4(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (true ? vec4(1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-959.719, -7422.0322, -93.19, 632.882)))), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0), (mat3x4(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (true ? vec4(1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-959.719, -7422.0322, -93.19, 632.882)))), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0)) * mat3(1.0)))) * (_GLF_IDENTITY(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), (vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-744.250) : 1.0)), 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))))))) * vec4(1.0, 1.0, 1.0, 1.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), (false ? _GLF_FUZZED(-60.88) : dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))))))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), (mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), clamp(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0), vec2(1.0, 0.0))))), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, abs(1.0), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch)) - vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), injectionSwitch), max(min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch)) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), injectionSwitch), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch)) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch)) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : injectionSwitch)) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), injectionSwitch)))).y), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), 1.0), _GLF_IDENTITY(mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6355.6977)), float(1.0), bool(true))), (1.0) * 1.0), 0.0, abs(1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))), (mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), abs(1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), mix(float(max(1.0, 1.0)), float(_GLF_FUZZED(15.06)), bool(false)))), 1.0, sqrt(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))) - mat4x3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), float(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), min(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(0.0, 0.0, 0.0))))), mix(vec3(_GLF_FUZZED(76.57), (vec3(0.0, 0.0, 0.0))[1], (vec3(0.0, 0.0, 0.0))[2]), vec3((_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))))[0], _GLF_IDENTITY(_GLF_FUZZED(-8.3), (_GLF_FUZZED(-8.3)) * 1.0), _GLF_FUZZED(2974.6656)), bvec3(true, false, false))), vec3(0.0, 0.0, 0.0))))), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)) / mat3(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(log(1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(vec2(_GLF_FUZZED(9.3), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (~ (0)) ^ 0)))) - 0)], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0])), _GLF_FUZZED(-73.05)), bvec2(true, false))).y))));
                                                                  }
                                                                }
                                                               while(_GLF_WRAPPED_LOOP(false));
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                          }
                                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), _GLF_IDENTITY(true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), (true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))) && true))))) && true)))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y : _GLF_FUZZED(4.7)))) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.0) : _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(clamp(-3.1, intBitsToFloat(_injected_loop_counter), 6572.9338)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_FUZZED(-451.641)), float(1.0), bool(true))))))), (1.0) - 0.0)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY((((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(9.3) : (((injectionSwitch)[0]) / 1.0))) - abs(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(float((_GLF_IDENTITY(-11677 / -3184, (_GLF_IDENTITY(-11677 / -3184, (-11677 / -3184) >> 0)) ^ 0)))), mix(float(_GLF_FUZZED(-10.00)), float(_GLF_FUZZED(float((_GLF_IDENTITY(-11677 / -3184, (_GLF_IDENTITY(-11677 / -3184, (-11677 / -3184) >> 0)) ^ 0))))), bool(true))), min(_GLF_IDENTITY(_GLF_FUZZED(float((_GLF_IDENTITY(-11677 / -3184, (_GLF_IDENTITY(-11677 / -3184, (-11677 / -3184) >> 0)) ^ 0)))), mix(float(_GLF_FUZZED(-10.00)), float(_GLF_FUZZED(float((_GLF_IDENTITY(-11677 / -3184, (_GLF_IDENTITY(-11677 / -3184, (-11677 / -3184) >> 0)) ^ 0))))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(float((_GLF_IDENTITY(-11677 / -3184, (_GLF_IDENTITY(-11677 / -3184, (-11677 / -3184) >> 0)) ^ 0)))), mix(float(_GLF_FUZZED(-10.00)), float(_GLF_FUZZED(float((_GLF_IDENTITY(-11677 / -3184, (_GLF_IDENTITY(-11677 / -3184, (-11677 / -3184) >> 0)) ^ 0))))), bool(true)))))), vec2(_GLF_FUZZED(-9.4), (injectionSwitch)[1]), bvec2(false, true)))) * mat2(1.0)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(68.47) : injectionSwitch[0])), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), (! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(68.47) : injectionSwitch[0])), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) || false)))) && _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, ! (! (true))))), (! ((_GLF_IDENTITY(true, ! (! (true)))))) || false))) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat4((injectionSwitch), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(length(0.0), min(length(0.0), length(0.0))))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(length(0.0), mix(float(length(0.0)), float(_GLF_FUZZED((493.558 - -5811.7615))), bool(false))))), float(vec2(dot(vec2(1.0, 0.0), vec2(1.0, length(0.0))), 1.0)))), sqrt(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.0) : 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), 0.0))) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * sqrt(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(60.27) : 1.0))) * determinant(mat3(1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, tan(0.0), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)))).y)))) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))));
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(false));
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, bool(bvec4((_GLF_IDENTITY(false, (false) && true)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       subgroupAll(false);
                                      }
                                    }
                                   else
                                    {
                                    }
                                   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), (int(0)) ^ (0 ^ 0)))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, false || (false))))), false || (! (! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! (_GLF_IDENTITY(! (! (! (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (! (false))), (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))) && true))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(! (! (! (false))), (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))) && true))), bool(bvec3((! (_GLF_IDENTITY(! (! (! (false))), (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))) && true))), false, false))))))))))))))
                                            {
                                            }
                                           else
                                            {
                                             for(int _injected_loop_counter = (-25611 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   do
                                                    {
                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1)))); _injected_loop_counter ++)
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                {
                                                                 do
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                    {
                                                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                      {
                                                                       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0))), (max(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-63929) : 1), 0 | ((false ? _GLF_FUZZED(-63929) : 1)))), 1)), _GLF_IDENTITY(1, (1) | 0))))))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), max(~ (~ (1)), ~ (~ (1)))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((~ (1)), min((~ (1)), (~ (1)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((~ (1)), min((~ (1)), (~ (1)))), 0 | (_GLF_IDENTITY((~ _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1))))))), min((~ (1)), (~ (1)))))) : _GLF_FUZZED(_injected_loop_counter))), clamp((~ (1)), (~ (1)), (~ (1)))), (~ (~ (1))) >> 0), ~ (~ (1))), (max(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), 0 + _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((~ (1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((~ (1)), ((~ (1))) * 1)))), _GLF_IDENTITY(((~ (~ (1)))), max(((~ (~ (1)))), ((~ (~ (1)))))) ^ (0 | 0)), min(_GLF_IDENTITY((~ (~ (1))), ((~ (~ (1)))) ^ (0 | 0)), _GLF_IDENTITY((~ (~ (1))), _GLF_IDENTITY(((~ (~ (1)))) ^ (0 | 0), ~ (_GLF_IDENTITY(~ (((~ (~ (1)))) ^ (0 | 0)), (~ (((~ (~ (1)))) ^ (0 | 0))) << 0))))))), (~ (~ (1))) >> 0), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1))), ((_GLF_IDENTITY(1, clamp(1, 1, 1)))) | ((_GLF_IDENTITY(1, clamp(1, 1, 1)))))))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, ((1.0) - 0.0) / 1.0))), 0.0 + ((_GLF_IDENTITY(1.0, (1.0) - 0.0))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(clamp(vec2(6373.7050, -2.1), 711.752, 6.0)) : injectionSwitch)).y)))), 0, 1)), (int(ivec3(_GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) | (~ (~ (1))))), (true ? (~ (~ (1))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (~ (1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (~ (1)))), (0 & -55928) | (~ ((~ (~ (1)))))), ~ (~ (~ ((~ (~ (1))))))))), (true ? (~ (~ (1))) : _GLF_FUZZED(_injected_loop_counter)))) << _GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) >> 0), ~ (~ (1))), (max(_GLF_IDENTITY(~ (~ (1)), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, (1 ^ 0)), clamp(ivec2(1, (1 ^ 0)), _GLF_IDENTITY(ivec2(1, (_GLF_IDENTITY(1 ^ 0, 0 | (1 ^ 0)))), ivec2(ivec3(ivec2(1, (1 ^ 0)), 1))), ivec2(1, (1 ^ 0))))), 0 | (int(ivec2(1, (1 ^ 0))))))))) >> 0), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), 0, 1))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), ~ (~ (1))), (max(_GLF_IDENTITY(~ (~ (1)), (~ (_GLF_IDENTITY(~ (1), min(~ _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), (_GLF_IDENTITY(~ ((1)), _GLF_IDENTITY(int(ivec2(~ ((1)), 1)), 0 + (int(ivec2(~ ((1)), 1)))))) - 0))), ~ (1))))) >> 0), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2.4)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))), int(ivec3((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), int(ivec2((1), (0 << _GLF_IDENTITY(int(6), int(6)))))), (1)))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), ~ (~ (1))), (max(_GLF_IDENTITY(~ (~ (1)), (~ (_GLF_IDENTITY(~ (1), min(~ _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))), ~ (_GLF_IDENTITY(~ ((1)), (~ ((1))) - 0))), _GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (1))))))) >> 0), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))), 1, 1))) / _GLF_IDENTITY(1, (1) ^ 0), ~ (~ ((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), ~ (~ (1))), (max(_GLF_IDENTITY(~ (~ (1)), (~ (_GLF_IDENTITY(~ (1), min(~ _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))))), (~ ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1))))) - 0))), ~ (1))))) >> 0), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, 1 * (1)))), (~ (~ (_GLF_IDENTITY(1, 1 * (1))))) + 0))) | 0), 1)))))) / _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.9)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))))))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.9)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y)))))))))) >> 0))))) / 1))))))), _GLF_IDENTITY(4, max(4, 4)), 64, 4);
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                 while(_GLF_WRAPPED_LOOP(false));
                                                                }
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-7.4), _GLF_FUZZED(-889.618)), vec2(1.0, 1.0) * (vec2(_GLF_FUZZED(-7.4), _GLF_FUZZED(-889.618)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(90.52)), bool(false)), mix(float(_GLF_IDENTITY(mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(90.52)), bool(false)), (mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(90.52)), bool(false))) - 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))))), bvec2(true, true))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))) * mat2(1.0)) * (mat2(1.0) * (injectionSwitch)))).y))));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       do
                                        {
                                         do
                                          {
                                           do
                                            {
                                             subgroupAll(false);
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || false, true && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || false, _GLF_IDENTITY(((_GLF_WRAPPED_LOOP(false)) || false), (((_GLF_WRAPPED_LOOP(false)) || false)) || false) && true)))))));
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(clamp(uint(1), uint(1), uint(1)), max(clamp(uint(1), uint(1), uint(1)), clamp(uint(1), _GLF_IDENTITY(uint(1), min(uint(1), uint(1))), uint(_GLF_IDENTITY(1, (1) ^ 0)))))), _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))))))), (_GLF_IDENTITY(uint(1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(workgroup_id))), uint(1), _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1)))), (clamp(uint(1), uint(1), _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))))) / 1u))) << 0u), 4, 64, 4);
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-17.65)), vec2(_GLF_FUZZED(5553.4029), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-1115.4597)), float((injectionSwitch)[1]), bool(true))), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))))) / 1.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-17.65)), vec2(_GLF_FUZZED(5553.4029), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))))).x < injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
                  {
                  }
                 else
                  {
                   do
                    {
                     subgroupBarrier();
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9652.6981)), bool(false))), 0.0)), max(float(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9652.6981)), bool(false))), 0.0)), float(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9652.6981)), bool(false))), 0.0))))) < injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (0)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) - 0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), clamp(0 << _GLF_IDENTITY(int(3), int(3)), 0 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), (0 << _GLF_IDENTITY(int(3), int(3))) / 1))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), min(0 << _GLF_IDENTITY(int(3), int(3)), 0 << _GLF_IDENTITY(int(3), int(3)))), 0 << _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               atomicStore(buf[_GLF_struct_replacement_10.virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) * 1), 4)), clamp(_GLF_IDENTITY(4, 1 * (4)), 4, 4)));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0), mat2(1.0) * (mat4x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))) > injectionSwitch.y) && true)))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
}
