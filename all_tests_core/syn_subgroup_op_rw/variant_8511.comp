#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 int _injected_loop_counter;
 ivec3 _f0;
 vec2 _f1;
 vec2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_5 {
 int _f0;
 mat3 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 vec3 _f4;
 int _f5;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 vec4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 uint read;
 uvec3 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 uint _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 uvec3 _f1;
 ivec2 _f2;
 mat2x3 _f3;
 ivec3 _f4;
 _GLF_struct_3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_7 {
 uint _f0;
 mat2x3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_6 _f3;
 int _f4;
} ;

struct _GLF_struct_1 {
 uint virtual_gid;
 mat2 _f0;
} ;

struct _GLF_struct_0 {
 float _f0;
 bvec3 _f1;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (true)) && (true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, true && (true)))), (bool(bool(_GLF_IDENTITY(true, true && (true))))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, ! (! (true))), true, false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && (_GLF_IDENTITY(false, true && (false))))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-26797) : int(4)))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)) - vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), true, false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false)), true, true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY((1 & 1), max((1 & 1), (1 & 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(bvec2(false, true)))))), (! (! (_GLF_IDENTITY(bool(bvec2(false, true)), true && (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, (true) || false))), (bool(bvec2(false, true))) || false)) || false)))))) || false)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec2(false, true)), true && _GLF_IDENTITY((bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec3((bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))), (! (! (_GLF_IDENTITY(bool(bvec2(false, true)), true && (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) || false)))))) || false))) || false)), false, false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), bool(bvec4(false, false, false, true)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)), clamp(~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)), max(~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)), ~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)))), ~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u))))));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false))) && true))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(_GLF_IDENTITY(-38041, 0 | (_GLF_IDENTITY(-38041, (-38041) - 0)))) : _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((mat3x2(7.4, -4.5, 3636.1759, 32.02, -8.0, -7.5) * vec3(-1.1, -181.872, -9396.9522))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -18.80)) : injectionSwitch))) + vec2(0.0, 0.0)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (injectionSwitch.x), max(1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x))), clamp(1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x), _GLF_IDENTITY(1.0 * (injectionSwitch.x), min(_GLF_IDENTITY(1.0 * (injectionSwitch.x), clamp(1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x))), 1.0 * (injectionSwitch.x)))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.5)), float(0.0), bool(true))))))), (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.5)), float(0.0), bool(true))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.5)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.5)), float(0.0), bool(true)))))))))) - 0.0), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(2.7)))))))), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) - _GLF_IDENTITY(dot(vec2(abs(0.0), 0.0), vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((568.300))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), dot(vec2(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-309.932) : abs(0.0), clamp(false ? _GLF_FUZZED(-309.932) : abs(0.0), false ? _GLF_FUZZED(-309.932) : abs(0.0), false ? _GLF_FUZZED(-309.932) : abs(0.0))), (false ? _GLF_FUZZED(-127.189) : _GLF_IDENTITY(false ? _GLF_FUZZED(-309.932) : abs(0.0), clamp(false ? _GLF_FUZZED(-309.932) : abs(0.0), false ? _GLF_FUZZED(-309.932) : abs(0.0), false ? _GLF_FUZZED(_GLF_IDENTITY(-309.932, (-309.932) - log(1.0))) : abs(0.0))))))), _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-553.005) : 0.0)), 0.0))), max(abs(0.0), abs(0.0))), abs(0.0)), 1.0 * (clamp(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-309.932), 1.0 * (_GLF_FUZZED(-309.932))) : abs(0.0), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(-309.932, min(_GLF_IDENTITY(-309.932, (-309.932) - 0.0), -309.932))) : abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(-309.932) : abs(0.0), (false ? _GLF_FUZZED(-7972.9858) : false ? _GLF_FUZZED(-309.932) : abs(0.0))), false ? _GLF_FUZZED(-309.932) : abs(0.0))), clamp(false ? _GLF_FUZZED(-309.932) : abs(0.0), false ? _GLF_FUZZED(-309.932) : abs(0.0), false ? _GLF_IDENTITY(_GLF_FUZZED(-309.932), max(_GLF_FUZZED(_GLF_IDENTITY(-309.932, float(mat4x2(-309.932, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0)), tan(log(1.0)), abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_FUZZED(-309.932), min(_GLF_FUZZED(-309.932), _GLF_FUZZED(-309.932))))) : _GLF_IDENTITY(abs(0.0), max(abs(0.0), _GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), max(abs(0.0), abs(0.0)))) + 0.0))))))), _GLF_IDENTITY(abs(0.0), max(abs(0.0), abs(0.0))), abs(0.0))))), 0.0), vec2(1.0, 1.0))))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-944.541)), bool(false)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-944.541)), bool(false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-944.541)), bool(false)))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-944.541)), bool(false)))))))))) && true))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.0)), bool(false))) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true))))))))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    break;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) - 0), int(1), _GLF_IDENTITY(int(1), (int(1)) - 0)))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false))))))), false)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(workgroup_base + subgroup_base + subgroup_local_id, mat2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(1.0, bvec3(true), _GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), clamp(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), _GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), min(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))), _GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) | 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     barrier();
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(810.683, 76.81)) : injectionSwitch)).x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), true, true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0, 1.0, 0.0)), float(_GLF_IDENTITY(vec2(float(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0), (vec2(float(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0)) / vec2(1.0, 1.0))))) > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(6), int(6))) & -53575)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1u, mat2x3(1.0), _GLF_struct_4(_GLF_struct_2(_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), atomicLoad(buf[_GLF_struct_replacement_1.virtual_gid], 4, 64, 2), uvec3(1u), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), mat2x4(1.0), 1u), uvec3(_GLF_IDENTITY(1u, 0u | (1u))), ivec2(_GLF_IDENTITY(1, max(1, 1))), mat2x3(1.0), ivec3(1), _GLF_struct_3(mat2(1.0), uvec3(1u)), mat4x2(1.0)), _GLF_struct_6(mat2x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), vec4(1.0), _GLF_struct_5(1, mat3(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, sqrt(1.0))))), ivec4(1), mat4x3(1.0), vec3(1.0), 1)), 1);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bool((_GLF_WRAPPED_IF_FALSE(false))))))) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, sqrt(0.0)), (_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, sqrt(0.0)), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, sqrt(0.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((true ? 85.33 : -76.58))))))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, sqrt(0.0))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9.0)), bool(false))) > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))))))))), true)))))) || false))))), (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))))) || false))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))))) || false))))), bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))))) || false))))), true))))))) || false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-97.74), _GLF_FUZZED(-4.3)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, ~ (~ ((0) * 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))), uint(_GLF_IDENTITY(uint(subgroup_local_id % 2), (uint(subgroup_local_id % 2)) | (uint(subgroup_local_id % 2)))))) | (_GLF_IDENTITY(subgroup_local_id, (1u ^ 0u) * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) % 2))) == 0)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.4), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-6804.0381)), bvec2(true, false))).x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       do
        {
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))))));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch))))) + vec2(0.0, 0.0)).y))))
              return;
            }
           else
            {
            }
           return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
              break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
            {
             atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.next_virtual_gid, (_GLF_struct_replacement_0.next_virtual_gid) | 0u)], uint(_GLF_IDENTITY(1, (1) >> 0)), 4, 64, 4);
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), bool(bvec4(bool(_GLF_IDENTITY(false, true && (false))), true, true, true))))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
          break;
        }
       do
        {
         atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, 0 ^ (4)))), max(4, 4)), 64, 4);
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec4(! (false), false, false, _GLF_IDENTITY(true, bool(bool(true))))))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.2, -7.9)) : injectionSwitch)).y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(false, false)))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mod(injectionSwitch, injectionSwitch)))).y)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(904.450)), bool(false))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
  }
 for(_GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), int(_GLF_IDENTITY(2, min(2, 2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(2, (2) ^ 0)) | 0)))))) >> _GLF_IDENTITY(int(2), int(2))), min(((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (_GLF_IDENTITY(0, 0 ^ (0)) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) / 1)) << 0)) | 0))))), _GLF_IDENTITY((ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))), ((ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))))) | ((ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))))) + _GLF_IDENTITY(ivec4(0, 0, 0, 0), clamp(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, (2) / 1), 1, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))) >> _GLF_IDENTITY(int(2), int(2))), ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (0))), (~ (_GLF_IDENTITY(0, (0) | (0)))) | (~ (_GLF_IDENTITY(0, (0) | (0))))))), 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0)))))) / 1), int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) + 0)), int(2)))))) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.1)), bool(false)))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0), mat4x2(mat4(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, 2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2)), clamp((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, 2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, 2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, 2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))) >> _GLF_IDENTITY(int(2), int(2))), min(((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), int(3))))), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), (int(3)) | 0) : _GLF_FUZZED(82353))))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), max(1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))) >> _GLF_IDENTITY(int(2), int(2))), ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))) >> _GLF_IDENTITY(int(2), int(2)))))) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0), mat4x2(mat4(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0))))), float(mat2x3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0), mat4x2(mat4(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0), mat4x2(mat4(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0)))))) / 1.0), 1.0, exp(0.0), 1.0, 0.0, 1.0))))))), (false ? _GLF_FUZZED(43784) : _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(2, 1, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1))), int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (ivec4(2, 1, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1))), int(_GLF_ONE(1.0, injectionSwitch.y))))))), min(_GLF_IDENTITY(int(ivec4(2, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(ivec4(2, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(_GLF_IDENTITY(ivec4(2, 1, _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)) / 1, min(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)) / 1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0, (0) >> 0)) / 1 : _GLF_FUZZED(sign(9236)))), (_GLF_IDENTITY(0, (0) >> 0)) / 1))), int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec4(2, 1, _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)) / 1, min(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)) / 1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0, (0) >> 0)) / 1 : _GLF_FUZZED(sign(9236)))), (_GLF_IDENTITY(0, (0) >> 0)) / 1))), int(_GLF_ONE(1.0, injectionSwitch.y)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) + 0)) ^ 0), _GLF_IDENTITY(int(ivec4(2, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, (0) ^ 0))) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_IDENTITY(int(int(ivec4(2, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, (0) ^ 0))) / 1), int(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (~ (int(int(ivec4(2, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, (0) ^ 0))) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, 0 + (2)), 2))), (int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, 0 + (2)), 2)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))), (false ? _GLF_FUZZED(23627) : int(_GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), int(2))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3)))))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), injectionSwitch.y)))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))) >> _GLF_IDENTITY(int(2), int(2))), min(((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(1, (1) + 0), (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, _GLF_IDENTITY(1, 1 * (1)), (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0))).y)), (false ? _GLF_FUZZED((-43586)) : _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - length(cross(vec3(1.1, -566.864, -8218.8433), vec3(1.1, -566.864, -8218.8433)))))), 1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (true ? int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) - 0.0))), 1.0)))), injectionSwitch.y)) : _GLF_IDENTITY(_GLF_FUZZED(21181), 0 ^ (_GLF_IDENTITY(_GLF_FUZZED(21181), ~ (~ (_GLF_FUZZED(21181)))))))))))))), max(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min((1.0), _GLF_IDENTITY((1.0), clamp((1.0), _GLF_IDENTITY((1.0), mix(float((1.0)), float(_GLF_FUZZED(4849.4769)), bool(false))), (1.0))))) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))), injectionSwitch.y)), (false ? _GLF_FUZZED((-43586)) : _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))), injectionSwitch.y)), (true ? int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), mix(float(float(mat2x4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-1909.4753)), bool(false)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))), injectionSwitch.y)) : _GLF_FUZZED(21181))))))))), int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, ((1.0) - 0.0) + 0.0)))), 1.0)))), injectionSwitch.y)), (false ? _GLF_FUZZED((-43586)) : _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))), injectionSwitch.y)), (true ? int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))), injectionSwitch.y)) : _GLF_FUZZED(21181))))))))))), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ _GLF_IDENTITY(0, (0) | (0)))))))) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0))), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0))), (~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0)))) | 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-34.14), _GLF_FUZZED(float(77794u))), bvec2(false, false))).y)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0))), ~ (~ (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0))))))))), min((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0))), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0))), (~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0)))) | 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-34.14), _GLF_FUZZED(float(77794u))), bvec2(false, false))).y)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0))), ~ (~ (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0))))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0))), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0))), (~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0)))), (~ (int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3)))), (ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))) >> (0 | 0)))) | 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec4(2, 1, 0, int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-34.14), _GLF_FUZZED(float(77794u))), bvec2(false, false))).y)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0))), ~ (~ (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0))))))))))) >> _GLF_IDENTITY(int(2), int(2)))))) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)), mat4x2(mat4(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, sin(0.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0), mat2x3(mat4x3(mat2x3(1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0)))))), 0.0, 0.0)))))))))))) - (0 | 0))), ivec3(1), vec2(1.0), vec2(1.0), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8._injected_loop_counter != 0, bool(bvec3(_GLF_struct_replacement_8._injected_loop_counter != 0, true, true))), false || (_GLF_struct_replacement_8._injected_loop_counter != 0))); _GLF_struct_replacement_8._injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4878.7662)), float(1.0), bool(true))), sin(determinant(mat2(0.0, 0.0, 0.0, 0.0))), abs(1.0), abs(1.0), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))).y))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    continue;
   atomicStore(buf[_GLF_struct_replacement_1.virtual_gid], _GLF_struct_replacement_7._f2._f0.read, _GLF_IDENTITY(4, (4) << 0), 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, false))))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
}
