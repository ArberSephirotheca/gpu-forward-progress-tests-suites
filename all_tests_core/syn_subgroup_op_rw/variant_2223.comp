#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false))))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, (workgroup_size) / (1u | 1u)) * workgroup_id) >> 0u);
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-2.0)), bool(false))), _GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), (true ? ~ (~ (subgroup_id)) : _GLF_FUZZED(subgroup_size))))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), 0u + (~ (subgroup_id))))), subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size) / (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) * 1u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u))))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), 0u + (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u)))))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), min(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(3u), uint(3u)), 1u)), (uint(uvec2(_GLF_IDENTITY(uint(3u), uint(3u)), 1u))) / 1u))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY((true ? (_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), max((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), 0u ^ (_GLF_IDENTITY(3u, 0u | (3u))))), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))), (true ? (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(workgroup_base))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), ~ (~ ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))))))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u)))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u))))))))))))) : _GLF_FUZZED(workgroup_size)), min((true ? (_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), max((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), 0u ^ (_GLF_IDENTITY(3u, 0u | (3u))))), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))), (true ? (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(workgroup_base))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), ~ (~ ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))))))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u)))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u))))))))))))) : _GLF_FUZZED(workgroup_size)), _GLF_IDENTITY((true ? (_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), max((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), 0u ^ (_GLF_IDENTITY(3u, 0u | (3u))))), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))), (true ? (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(workgroup_base))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), ~ (~ ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))))))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u)))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u))))))))))))) : _GLF_FUZZED(workgroup_size)), (true ? (true ? (_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), max((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), 0u ^ (_GLF_IDENTITY(3u, 0u | (3u))))), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))), (true ? (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(workgroup_base))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), ~ (~ ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) * (_GLF_IDENTITY(1u, max(1u, 1u))))))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u)))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u))))))))))))) : _GLF_FUZZED(workgroup_size)) : _GLF_FUZZED(subgroup_size))))))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), 0u + (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(_GLF_IDENTITY(3u, 0u + (3u))), uint(3u))))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), uint(uint((1u << _GLF_IDENTITY(uint(3u), uint(3u)))))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true)))))))))) ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u)), _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u)))))))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), ~ (~ (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), uint(uint((1u << _GLF_IDENTITY(uint(3u), uint(3u)))))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true)))))))))) ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u)), _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u)))))))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))))))), _GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), min(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(subgroup_local_id))), uint(3u)), min(1u << _GLF_IDENTITY(uint(3u), uint(3u)), 1u << _GLF_IDENTITY(uint(3u), uint(3u))))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), (_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), ~ (~ ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) + 0u))), clamp(_GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY(uint(3u), uint(3u))))))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), _GLF_IDENTITY((_GLF_FUZZED(workgroup_size)), (true ? (_GLF_FUZZED(workgroup_size)) : _GLF_FUZZED(num_workgroup))) + 0u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) + 0u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, max(3u, 3u))))), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) + 0u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) >> 0u) << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), 0u + (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u)))))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), max(1u << _GLF_IDENTITY(uint(3u), uint(3u)), 1u << _GLF_IDENTITY(uint(3u), uint(3u))))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false) ? (_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), max((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY(0u | (3u), clamp(0u | (3u), 0u | (3u), _GLF_IDENTITY(0u | (3u), (true ? 0u | (3u) : _GLF_FUZZED(subgroup_local_id))))))), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))), ~ (~ ((_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u))))), ((_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, max(1u, 1u)))))) >> 0u) ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))))))))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), clamp(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), (false ? _GLF_FUZZED(subgroup_size) : 1u << _GLF_IDENTITY(uint(3u), uint(3u)))), 1u << _GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), (1u << _GLF_IDENTITY(uint(3u), uint(3u))) | 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) << 0u)))) | (_GLF_FUZZED(workgroup_size))))), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u)))))))), 0u + (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u))))))), uint(uvec2(0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u)))), 0u | (max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u))))))))), 0u)))))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), _GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (~ (3u)))), uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u)))), uint(uvec4(min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 0u))), 0u | (_GLF_IDENTITY(min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u)))), uint(uvec4(min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_FUZZED(workgroup_size)))), (1u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 0u)))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u)))), (true ? ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) + _GLF_IDENTITY(0u, (0u) / 1u))))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) << 0u)))) | (0u | 0u)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))) / 1u) + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (4)), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) - (0 | 0))) & 95709); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 & 2124); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 & -45756); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_injected_loop_counter) : int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(11390) : 1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-674.466), _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 0.0, 1.0)))), vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[0], _GLF_FUZZED((7.8 + -786.184))), bvec2(true, false))).x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(true, (true) && true)))) || false, ((bool(bool(_GLF_IDENTITY(true, (true) && true)))) || false) && true))), true)), true && (bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false, true, true))))))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))) && true)))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(1131.9866), mix(float(_GLF_FUZZED(4.2)), float(true ? injectionSwitch.y : _GLF_FUZZED(1131.9866)), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))) && true))))))))), 0.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 0.0, 0.0), vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-871.558)))) + _GLF_ZERO(0.0, injectionSwitch.x)), 0.0)), dot(vec4(tan(0.0), 1.0, 0.0, 0.0), vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(1131.9866), mix(float(_GLF_FUZZED(4.2)), float(true ? injectionSwitch.y : _GLF_FUZZED(1131.9866)), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))) && true))))))))), 0.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 0.0, 0.0), vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-871.558)))) + _GLF_ZERO(0.0, injectionSwitch.x)), 0.0)), dot(vec4(tan(0.0), 1.0, 0.0, 0.0), vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(733.393) : injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), false, true))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), float(float((injectionSwitch.x))))))) - 0.0) - 0.0) < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))))) && true))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))) << 0))))), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))))) && true))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (0) << 0)))), bool(bvec3(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) >> 0)) | 0), _GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), (int(5)) - 0)))), (false ? _GLF_FUZZED(90000) : _GLF_IDENTITY(int(5), int(5))))) ^ (0))))), false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))); _injected_loop_counter --)
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true)))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), 0 | ((0 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                        barrier();
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(false, false, false))))), _GLF_IDENTITY(true && (false), false || (true && (false)))), ! (! (_GLF_IDENTITY(false, true && (false)))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        barrier();
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / exp(0.0))) / 1.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / exp(0.0))) / 1.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), false || (! (! (true)))))))
        {
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x)) + (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))) / (1u ^ _GLF_IDENTITY(0u, (0u) ^ 0u))) + 1 < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 1u * ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (0u ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 1u * ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(1.0, 0.0)), (dot(vec2(abs(0.0), 1.0), vec2(1.0, 0.0))) / 1.0)), 1.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)));
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-381.283, 1957.6992)))).x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         atomicStore(checker[virtual_gid], read, 4, 64, 4);
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     subgroupAll(false);
                    }
                   else
                    {
                     atomicStore(buf[virtual_gid], read, 4, 64, 4);
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       subgroupAll(true);
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.6)), float(injectionSwitch.y), bool(true)))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false))))))))))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) - 0.0)), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) - 0.0))) >> (0 >> _GLF_IDENTITY(int(0), int(0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, false, true))); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), clamp(_GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2))))))) + 0), int(2))), (false ? _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter)) : (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))), 0 ^ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), clamp(_GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), (int(2)) << (0 >> _GLF_IDENTITY(int(2), int(2))))))) + 0), int(2))), (false ? _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter)) : (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(478.099, 31.72)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(478.099, 31.72)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)) && true))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           barrier();
                                          }
                                         barrier();
                                        }
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         barrier();
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                         else
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(-80832, max(-80832, -80832))) : 4))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0))), vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0)), 1.0, sqrt(0.0)), min(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0)), 1.0, sqrt(0.0)), min(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0)), 1.0, sqrt(0.0)), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0)), 1.0, sqrt(0.0)))), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-699.806), _GLF_FUZZED(34.73)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), mat4x3(mat4(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0)), (mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0), 1.0, determinant(mat2(tan(0.0), sin(0.0), 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(715.097) : 1.0)), cos(0.0), 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0)), 1.0, sqrt(0.0)))))), injectionSwitch)).x))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))) && true))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                  barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (true ? ~ (_injected_loop_counter ++) : _GLF_FUZZED(_injected_loop_counter))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = (-66963 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (1 ^ (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) >> 0)))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, _GLF_IDENTITY(true, (true) || false))))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), 1 * (~ (_injected_loop_counter ++)))))) ^ 0))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((0 | int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat4x2(mat4x2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat4x2(mat4x2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
}
