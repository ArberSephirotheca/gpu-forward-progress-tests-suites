#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_33 {
 bvec2 _f0;
 mat2x3 _f1;
 mat2 _f2;
 mat3 _f3;
 bvec4 _f4;
 int _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_32 {
 int _f0;
 bvec2 _f1;
 float _f2;
 uvec4 _f3;
 bvec3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_34 {
 bvec4 _f0;
 _GLF_struct_32 _f1;
 _GLF_struct_33 _f2;
} ;

struct _GLF_struct_30 {
 bvec3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_29 {
 ivec4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 bvec3 _f1;
 mat4 _f2;
 bool _f3;
 int _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_31 {
 _GLF_struct_28 _f0;
 uint _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
 vec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_26 {
 float _f0;
 bvec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_27 {
 _GLF_struct_26 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_35 {
 _GLF_struct_27 _f0;
 int _injected_loop_counter;
 _GLF_struct_31 _f1;
 _GLF_struct_34 _f2;
} ;

struct _GLF_struct_25 {
 uint workgroup_size;
 mat2x4 _f0;
} ;

struct _GLF_struct_22 {
 bool _f0;
 bvec4 _f1;
 bvec4 _f2;
 bvec4 _f3;
 ivec4 _f4;
 mat4x2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_21 {
 vec2 _f0;
 uvec4 _f1;
 uint _f2;
 int _f3;
 vec2 _f4;
} ;

struct _GLF_struct_20 {
 ivec3 _f0;
 bvec2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_23 {
 ivec2 _f0;
 mat3x4 _f1;
 _GLF_struct_20 _f2;
 bvec2 _f3;
 _GLF_struct_21 _f4;
 mat3x2 _f5;
 _GLF_struct_22 _f6;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 mat2x3 _f1;
 uvec2 _f2;
 mat2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_17 {
 uvec4 _f0;
 mat3 _f1;
 int _f2;
} ;

struct _GLF_struct_16 {
 float _f0;
} ;

struct _GLF_struct_19 {
 vec3 _f0;
 mat3 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 ivec4 _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_15 {
 ivec4 _f0;
 bvec3 _f1;
 int _f2;
} ;

struct _GLF_struct_24 {
 _GLF_struct_15 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_23 _f2;
 int _f3;
 uint subgroup_size;
 mat2 _f4;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_11 {
 uint virtual_gid;
 bvec2 _f0;
 mat3x4 _f1;
 uvec3 _f2;
 bvec3 _f3;
 int _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 ivec2 _f1;
 mat2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 mat4 _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_8 {
 uint subgroup_local_id;
 ivec2 _f0;
 bvec2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_6 {
 uint _f0;
 ivec3 _f1;
 bvec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 mat4 _f1;
 mat4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 mat2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 int _f4;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 uint _f1;
 bvec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 ivec2 _f1;
 float _f2;
 bool _f3;
 bool _f4;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 int _f1;
 mat2x4 _f2;
 vec4 _f3;
 vec2 _f4;
 uvec2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 uvec3 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 vec2 _f1;
 bvec4 _f2;
 ivec2 _f3;
 _GLF_struct_7 _f4;
 mat4x2 _f5;
 _GLF_struct_8 _f6;
} ;

struct _GLF_struct_0 {
 uint subgroup_id;
 bvec2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupID, bvec2(true));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) | (1 ^ 0))), min((1 ^ 0), (1 ^ 0))))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_15(ivec4(1), bvec3(true), 1), _GLF_struct_19(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.8)), bool(false)))), mat3(1.0), _GLF_struct_16(1.0), _GLF_struct_17(uvec4(1u), mat3(1.0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - 0))) / 1)), ivec4(1), _GLF_struct_18(uvec3(1u), mat2x3(1.0), uvec2(1u), mat2(1.0), mat4x2(1.0))), _GLF_struct_23(ivec2(1), mat3x4(1.0), _GLF_struct_20(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), min(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((1), ~ (~ ((1)))), 0, 1), ivec3(1, 1, 1) * (ivec3(_GLF_IDENTITY((1), ~ (~ ((1)))), 0, 1)))))), _GLF_IDENTITY(1, 0 ^ (1))))) >> 0)), bvec2(true), mat2x3(1.0)), bvec2(true), _GLF_struct_21(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) - (uvec4(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))), 0u) ^ uvec4(0u, 0u, 0u, 0u))), ~ (~ (_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u)), ~ (~ (_GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u))))) : _GLF_IDENTITY(uvec4(1u), clamp(uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, 1u * (1u)), 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), min(_GLF_IDENTITY(uvec4(1u), min(uvec4(1u), uvec4(1u))), uvec4(1u))), max(uvec4(1u), uvec4(1u))), uvec4(1u))), clamp(false ? _GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u)) : _GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(1u))), false ? _GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u)) : _GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(1u))), _GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u)) : _GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(1u))), min(false ? _GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u)) : _GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(1u))), false ? _GLF_FUZZED(uvec4(92546u, 145286u, 182716u, 94294u)) : _GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(1u)))))))))) - (uvec4(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))), 0u) ^ _GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) * 1u), 0u, 0u, 0u), _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u), (true ? (uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u) : _GLF_FUZZED(uvec4(45071u, 32418u, 175453u, 138237u))))) >> uvec4(0u, 0u, 0u, 0u)))))))), 1u, 1, vec2(1.0)), mat3x2(1.0), _GLF_struct_22(true, bvec4(true), bvec4(true), bvec4(true), ivec4(1), mat4x2(1.0), ivec4(1))), 1, gl_SubgroupSize, mat2(1.0));
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_4(_GLF_struct_1(mat3(1.0), _GLF_IDENTITY(1, (1) | (1)), mat2x4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec2(1.0), _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), mat4x2(1.0)), _GLF_struct_2(ivec2(1), ivec2(1), 1.0, true, true), uvec3(1u), _GLF_struct_3(ivec2(1), 1u, bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), false || (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), mat3x2(1.0))), vec2(1.0), bvec4(true), ivec2(1), _GLF_struct_7(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true) ? _GLF_FUZZED(-61.37) : 1.0)), 1.0)))))), mat2(1.0), _GLF_struct_5(vec2(1.0), mat4(1.0), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-16.35) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), min(_GLF_IDENTITY(0.0 + (1.0), _GLF_IDENTITY(float(mat2x4(0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(0.0 + (1.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) * 1.0)), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0), transpose(transpose(mat3x4(0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), min(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) - 0.0)), 0.0 + _GLF_IDENTITY((1.0), clamp((1.0), (1.0), _GLF_IDENTITY((1.0), min((1.0), (1.0)))))))), min(1.0, 1.0)), 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-16.35) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), min(_GLF_IDENTITY(0.0 + (1.0), _GLF_IDENTITY(float(mat2x4(0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(0.0 + (1.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 0.0), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0), transpose(transpose(mat3x4(0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), min(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))), 1.0, 0.0)), dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) / 1.0) : _GLF_FUZZED(-80.79)))), vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) - 0.0)), 0.0 + (1.0)))), min(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(-16.35) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), min(_GLF_IDENTITY(0.0 + (1.0), _GLF_IDENTITY(float(mat2x4(0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(_GLF_IDENTITY(0.0 + (1.0), clamp(0.0 + (1.0), 0.0 + (1.0), 0.0 + (1.0))), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, ((1.0) / 1.0) / 1.0))) - 0.0), 0.0), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0), transpose(transpose(mat3x4(0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), min(round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), clamp(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))))), _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(309.470)), float(1.0), bool(true))), 1.0, 1.0, 1.0)))), float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) - 0.0)), 0.0 + (1.0)))), min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0))))) / 1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-16.35) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0 + (1.0), min(_GLF_IDENTITY(0.0 + (1.0), _GLF_IDENTITY(float(mat2x4(0.0 + (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(0.0 + (1.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 0.0), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), tan(0.0), 1.0, 1.0), transpose(transpose(mat3x4(0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), min(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(_GLF_IDENTITY(0.0, abs(0.0) + (0.0)), 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) - 0.0)), 0.0 + (1.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(vec4(9.1, 2196.0639, -3.8, 95.77)) : vec4(1.0, 0.0, 0.0, 0.0)))), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))) * (_GLF_IDENTITY(_GLF_IDENTITY(0.0 + (1.0), min(_GLF_IDENTITY(0.0 + (1.0), _GLF_IDENTITY(float(mat2x4(0.0 + (_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (0.0) - 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(0.0 + _GLF_IDENTITY((1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1.0) : _GLF_FUZZED(atan(5872.7421)))), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 0.0), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0), transpose(transpose(mat3x4(0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), min(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(181.232) : 1.0)), 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) - 0.0)), 0.0 + (1.0))), float(mat2x3(_GLF_IDENTITY(0.0 + (1.0), min(_GLF_IDENTITY(0.0 + (1.0), _GLF_IDENTITY(float(mat2x4(0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(0.0 + (1.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 0.0), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0), transpose(transpose(mat3x4(0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), min(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0)))), (mat2(1.0, 1.0, 0.0, length(tan(vec2(0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1570.7694) : 0.0))))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) - 0.0)), 0.0 + (1.0))), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), mix(float(determinant(mat2(1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED((-9.2 / 84.83))), bool(false))))))))), min(1.0, 1.0)), 1.0))))))), mat4x2(1.0)), _GLF_struct_6(1u, ivec3(1), bvec2(true), ivec3(_GLF_IDENTITY(1, (1) << 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0)), mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 1.0))), _GLF_struct_8(gl_SubgroupInvocationID, ivec2(1), bvec2(true), ivec4(1)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), int(ivec4(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0, 1, 0)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 & 1))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            break;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(74002))), max(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(74002))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(74002)))))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), injectionSwitch)).y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        continue;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), bool(bvec2(! (_injected_loop_counter != 0), false)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))), false || (bool(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))))))) && true)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), injectionSwitch)))).x) - tan(0.0)) > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(462.983, (462.983) * 1.0))), bool(false)), max(mix(float(1.0), float(_GLF_FUZZED(462.983)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(462.983)), bool(false))))))), 1.0))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) * abs(vec2(1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).x) / 1.0)) * 1.0) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))) && _GLF_IDENTITY(true, (true) && true)), bool(bvec2(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-200.887)), bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))) | (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(gl_WorkGroupSize.x, mat2x4(1.0));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.7) : injectionSwitch.y))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))), bvec2(bvec3(bvec2(false, true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9574.5535)), _GLF_IDENTITY(float(injectionSwitch.x), float(mat4x3(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(injectionSwitch.x), float(mat2(float(injectionSwitch.x), 1.0, 1.0, 0.0))) : _GLF_FUZZED(-0.9))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), sqrt(1.0), 0.0, 0.0))), bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-48.45), (false ? _GLF_FUZZED(vec3(-82.84, 4.6, 3806.7650).y) : _GLF_FUZZED(-48.45))), float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(-48.45), (false ? _GLF_FUZZED(vec3(-82.84, 4.6, 3806.7650).y) : _GLF_FUZZED(-48.45))), tan(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) * sqrt(vec2(1.0, 1.0)))).x, (true ? injectionSwitch.x : _GLF_FUZZED(-253.963))))), (true ? _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9574.5535)), _GLF_IDENTITY(float(injectionSwitch.x), float(mat4x3(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(injectionSwitch.x), float(mat2(float(injectionSwitch.x), 1.0, 1.0, 0.0))) : _GLF_FUZZED(-0.9))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6153.6071)), bool(false)))), sqrt(1.0), 0.0, 0.0))), bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) * sqrt(vec2(1.0, 1.0)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) * sqrt(vec2(1.0, 1.0)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.45)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) * sqrt(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 0.0, sin(0.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.9 * (-92.86)))), bvec2(true, false))).x : _GLF_FUZZED(-253.963))))) : _GLF_FUZZED(5426.2581))) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || false)))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))), false))))))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               break;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false, true))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), (true && (false)) && _GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bvec3(! ((true)), false, true))))) || false))))))));
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(5142.4189), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(5142.4189), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0))).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                continue;
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + ((injectionSwitch)[0])), (injectionSwitch)[_GLF_IDENTITY(1, clamp(1, 1, 1))]), vec2(_GLF_FUZZED(-87.28), _GLF_FUZZED(-229.663)), bvec2(false, false))).x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))) || false)) && true)))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))) && true))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6091.0269))) < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6091.0269))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6091.0269))) < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6091.0269))) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6091.0269))) < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6091.0269))) < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, injectionSwitch.y))))))
                          break;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                          }
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  return;
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), min(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))), int(2))))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY((_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))) && true, bool(bool((_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))) && true))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))))))))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_base = _GLF_struct_replacement_25.workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(1.0)))))).x, mix(float(_GLF_FUZZED(-633.814)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(1.0)))))).x), bool(true))) < _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))) && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))) || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
                return;
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-23848 & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
                        }
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                break;
                               return;
                              }
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               break;
                              }
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 1), (_injected_loop_counter != (1 ^ 1)) && true)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! _GLF_IDENTITY((! (false)), true && ((! (false)))))))))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      return;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 uint subgroup_base = _GLF_struct_replacement_0.subgroup_id * _GLF_struct_replacement_24.subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_13(_GLF_struct_10(ivec4(1), ivec2(1), mat2(1.0), ivec3(1)), _GLF_struct_11(workgroup_base + subgroup_base + _GLF_struct_replacement_9._f6.subgroup_local_id, _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), mat3x4(1.0), uvec3(1u), bvec3(true), 1, mat3x2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))))), (_GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(-1.5, -0.5, _GLF_IDENTITY(1.6, clamp(1.6, _GLF_IDENTITY(1.6, _GLF_IDENTITY(max(1.6, 1.6), float(vec3(_GLF_IDENTITY(max(1.6, 1.6), clamp(max(1.6, 1.6), max(1.6, 1.6), max(1.6, 1.6))), sqrt(sin(0.0)), 1.0)))), 1.6)), 14.29, -8.7, -5770.5848, -7.3, 7.3, -1819.9545, -5.5, _GLF_IDENTITY(0.1, _GLF_IDENTITY((0.1) / sqrt(1.0), (false ? _GLF_FUZZED(9.5) : (0.1) / sqrt(1.0)))), 4.3, -3.0, 3.8, 474.906, _GLF_IDENTITY(-2.8, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9091.3315)), mix(float(_GLF_FUZZED(0.1)), float(float(_GLF_FUZZED(-9091.3315))), bool(true))), float(-2.8), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) : mat4(1.0)))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_struct_12(vec2(1.0), mat2x4(1.0))), bvec4(true));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0 & -19653))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))) + ((_GLF_struct_replacement_9._f6.subgroup_local_id + 1) % _GLF_struct_replacement_24.subgroup_size), min(workgroup_base + subgroup_base + ((_GLF_struct_replacement_9._f6.subgroup_local_id + 1) % _GLF_struct_replacement_24.subgroup_size), workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_struct_replacement_9._f6.subgroup_local_id + 1), uint(uvec4((_GLF_struct_replacement_9._f6.subgroup_local_id + 1), 1u, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))) % _GLF_struct_replacement_24.subgroup_size)));
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_14._f0._f1.virtual_gid], max(buf[_GLF_struct_replacement_14._f0._f1.virtual_gid], _GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, (_GLF_struct_replacement_14._f0._f1.virtual_gid) >> 0u), clamp(_GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, (_GLF_struct_replacement_14._f0._f1.virtual_gid) >> 0u), _GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, (_GLF_struct_replacement_14._f0._f1.virtual_gid) >> 0u), _GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, (_GLF_struct_replacement_14._f0._f1.virtual_gid) >> 0u)))) + (1u ^ 1u))], min(buf[_GLF_struct_replacement_14._f0._f1.virtual_gid], buf[_GLF_struct_replacement_14._f0._f1.virtual_gid])))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), (true ? _GLF_IDENTITY(64, max(64, 64)) : _GLF_FUZZED(70362)))) * 1), 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if((_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, 1u * (_GLF_struct_replacement_9._f6.subgroup_local_id)), _GLF_struct_replacement_9._f6.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, (_GLF_struct_replacement_9._f6.subgroup_local_id) * 1u))), uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, 1u * (_GLF_struct_replacement_9._f6.subgroup_local_id)), _GLF_struct_replacement_9._f6.subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, (_GLF_struct_replacement_9._f6.subgroup_local_id) * 1u), min(_GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, (_GLF_struct_replacement_9._f6.subgroup_local_id) * 1u), _GLF_IDENTITY(_GLF_struct_replacement_9._f6.subgroup_local_id, (_GLF_struct_replacement_9._f6.subgroup_local_id) * 1u))))), _GLF_IDENTITY(0u, min(0u, 0u)), 0u, _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(1u, 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(92.55), _GLF_FUZZED((7323.8658 - 17.93))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-9.7) : (injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(true, (true) || false), true))).y)), 0u), (uvec4(1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)) / uvec4(1u, 1u, 1u, 1u)))))))) - 0u) % 2) == 0)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_injected_loop_counter, _injected_loop_counter))) - 0), _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ (~ (6)))))), clamp((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), (true ? _GLF_IDENTITY(6, ~ (~ (6))) : _GLF_FUZZED(99560)))))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ (~ (6)))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ _GLF_IDENTITY((~ (6)), max(_GLF_IDENTITY((~ (6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((~ (6)), ((~ (6))) - 0))), _GLF_IDENTITY((~ (6)), clamp(_GLF_IDENTITY((~ (6)), ~ (_GLF_IDENTITY(~ ((~ (6))), ~ (~ (~ ((~ (6)))))))), (~ (6)), (~ (6)))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))) : _GLF_FUZZED(3523)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) / vec2(1.0, 1.0))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(1), int(1))) & -53813)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))) && true))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec4(5, 0, 0, 0)))), max(int(5), int(5))), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((3559 ^ -61635)) : 0)), max(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((3559 ^ -61635)) : 0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED((3559 ^ -61635)) : 0)))), _GLF_IDENTITY((0) ^ 0, max((0) ^ 0, (0) ^ 0))), (_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != 0) && true, ((_injected_loop_counter != 0) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(findMSB(read)) : _injected_loop_counter --)))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       do
                        {
                         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               subgroupAll(false);
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false)))), (bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false))))) || false))), (false) && true)))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(144.084), max(_GLF_FUZZED(144.084), _GLF_IDENTITY(_GLF_FUZZED(144.084), mix(float(_GLF_FUZZED(-9.4)), float(_GLF_FUZZED(144.084)), bool(true))))), (_GLF_IDENTITY(_GLF_FUZZED(144.084), max(_GLF_FUZZED(144.084), _GLF_IDENTITY(_GLF_FUZZED(144.084), mix(float(_GLF_FUZZED(-9.4)), float(_GLF_FUZZED(144.084)), bool(true)))))) + 0.0)), (float(_GLF_FUZZED(144.084))) - 0.0), bool(false))), bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(144.084)), bool(false)))), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(144.084)), bool(false)))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0)).y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(false);
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(44.54), _GLF_FUZZED(-1124.2042)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))), (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.7)), bool(false))), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true)))))) && true)))), (injectionSwitch.x > injectionSwitch.y) && true))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-18.20)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(true && (! (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(true && (! (injectionSwitch.x > injectionSwitch.y)), bool(bool(true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)) && (! (! (injectionSwitch.x > injectionSwitch.y))))) || false))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), bool(true))))), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8.1, max(-8.1, -8.1)))), float(injectionSwitch.x), bool(true))))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true)))))) - 0.0), 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0)), min(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))))), 0.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-5.4) : float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), 0.0, 1.0, 1.0, 1.0, 0.0)))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.0, 500.397)) : injectionSwitch))) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), exp(0.0), 1.0, tan(0.0), exp(0.0), 1.0, 1.0, cos(0.0), 1.0, 1.0))), 0.0)))))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(-3327.7149)), float(sqrt(1.0)), bool(true))))), 1.0)), 0.0 + (float(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), bool(true))))), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8.1, max(-8.1, -8.1)))), float(injectionSwitch.x), bool(true))))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true)))))) - 0.0), 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0)), min(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))))), 0.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-5.4) : float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), 0.0, 1.0, 1.0, 1.0, 0.0)))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.0, 500.397)) : injectionSwitch))) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(-8.1)), float(injectionSwitch.x), bool(true))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), exp(0.0), 1.0, tan(0.0), exp(0.0), 1.0, 1.0, cos(0.0), 1.0, 1.0))), 0.0)))))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(-3327.7149)), float(sqrt(1.0)), bool(true))))), 1.0))))) > injectionSwitch.y)))))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(9840.3246, float(_GLF_IDENTITY(mat3x4(9840.3246, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0)), (mat3x4(9840.3246, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_FUZZED(5.3)), bvec2(false, false))).y))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), ! (! (_GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))))))))))), _GLF_IDENTITY(false, ! (! (false))), true, true)))))))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         break;
                        }
                       break;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))).x < injectionSwitch.y) || false))))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, length(0.0), 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(60.79))), 0.0, 0.0, 0.0))), injectionSwitch.y), 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))).x < injectionSwitch.y) || false))))))))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                          return;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             do
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 continue;
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                   do
                                    {
                                     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        continue;
                                       if(_GLF_DEAD(false))
                                        break;
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                            {
                                             if(_GLF_DEAD(false))
                                              continue;
                                             return;
                                            }
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(false))
                                return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-63407))), 4)), _GLF_IDENTITY(4, clamp(4, 4, 4)))))));
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                               if(_GLF_DEAD(false))
                                break;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), true))))))))));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), sqrt(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))) > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                  {
                   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = ((0 ^ 0) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))))
                                continue;
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       return;
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        return;
                                       if(_GLF_DEAD(false))
                                        break;
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).y))))
                                continue;
                               if(_GLF_DEAD(false))
                                return;
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true) && true)) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(max(-419.294, -6.6)) : injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   for(_GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(_GLF_struct_27(_GLF_struct_26(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), mix(float(min(1.0, 1.0)), float(_GLF_FUZZED(6007.8510)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0)), bvec2(true), mat2(1.0)), uvec4(1u)), 0, _GLF_struct_31(_GLF_struct_28(mat4(1.0), bvec3(true), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true)))) / 1.0)), bool(true)), min(mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7.4)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(1.0), bool(true)))), bool(true)), mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true)))), bool(true))))), mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true)))) / 1.0)), bool(true)), mix(float(_GLF_FUZZED(vec2(-32.23, 7.0).r)), float(mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / 1.0), float(1.0), bool(true)))) / 1.0)), bool(true))), bool(true))), min(mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_FUZZED(-9.3))) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7.4)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(1.0), bool(true)))), bool(true)), mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.3)), (float(_GLF_IDENTITY(_GLF_FUZZED(-9.3), min(_GLF_FUZZED(-9.3), _GLF_FUZZED(-9.3))))) / 1.0), float(1.0), bool(true)))), bool(true)))))), float(_GLF_FUZZED(-1795.0982)), bool(false)))), true, 1, mat2x4(1.0)), 1u, _GLF_struct_29(_GLF_IDENTITY(ivec4(1), max(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 1, 0, 1), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec4(1, 1, 0, 1), (ivec4(1, 1, 0, 1)) | (ivec4(1, 1, 0, 1)))))), (int(_GLF_IDENTITY(ivec4(1, 1, 0, 1), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec4(1, 1, 0, 1), (ivec4(1, 1, 0, 1)) | (ivec4(1, 1, 0, 1))))))) / 1))), ivec4(1))), mat3x4(1.0), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u))), _GLF_struct_30(bvec3(true), uvec2(1u)), vec2(1.0), vec4(1.0)), _GLF_struct_34(bvec4(true), _GLF_struct_32(1, bvec2(true), 1.0, _GLF_IDENTITY(uvec4(1u), (false ? _GLF_FUZZED(uvec4(122575u, 94963u, 79833u, 135263u)) : uvec4(1u))), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), uvec3(1u)), _GLF_struct_33(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), mat2x3(1.0), mat2(1.0), mat3(1.0), bvec4(true), 1, bvec3(true)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_35._injected_loop_counter < 1); _GLF_IDENTITY(_GLF_struct_replacement_35._injected_loop_counter ++, (_GLF_struct_replacement_35._injected_loop_counter ++) * 1))
    {
     subgroupBarrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true, true)))))) && true))))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((1 | int(_GLF_ONE(1.0, injectionSwitch.y))), ((1 | int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((1 | int(_GLF_ONE(1.0, injectionSwitch.y))), clamp((1 | int(_GLF_ONE(1.0, injectionSwitch.y))), (1 | int(_GLF_ONE(1.0, injectionSwitch.y))), (1 | int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_14._f0._f1.virtual_gid, 0u | (_GLF_struct_replacement_14._f0._f1.virtual_gid))))], read, 4, 64, 4);
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))) || false))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(28737) : int(0))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 0.0, 1.0, 1.0, sin(tan(0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, abs(1.0)))))), 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))).y))))
              {
              }
             else
              {
               return;
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (11806 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    return;
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), false)))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))) && true))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false))))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
