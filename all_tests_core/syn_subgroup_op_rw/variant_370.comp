#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 78:
         case 18:
         case 59:
         case 95:
         case 65:
         case 70:
         case 7:
         case 77:
         case 86:
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
         break;
         case 55:
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           while(false)
            {
             {
              for(bvec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[80]; false; bvec4(true, false, true, true))
               {
                switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                 {
                  case 0:
                  do
                   {
                    ivec4(-90276, -65958, 61905, 42627);
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  case 81:
                  case 51:
                  ivec4(89255, 52383, -88291, 48797);
                  case 88:
                  virtual_gid;
                  -2.4;
                  (mat2x3(6.5, -8.2, 8.6, -717.457, -1.0, -947.269) , isinf(vec4(1783.8809, -6.5, 2327.7411, -367.060)));
                  float _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v;
                  break;
                  case 94:
                  (-26144 , mat2(-9656.0444, 7932.6436, -37.55, 692.819));
                  default:
                  1;
                 }
               }
              ivec3(5024, -69680, 6387);
             }
             (ivec2(90482, -18384) - ivec2(-9429, 77126));
            }
          }
         else
          {
          }
         case 80:
         mat4(mat3x4(9664.5651, -8.8, 661.879, 8.5, 91.97, -9648.8493, -64.39, -4748.3037, -193.195, -178.483, 518.045, 1951.8342));
         default:
         1;
        }
      }
    }
  }
 else
  {
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
