#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_62 {
 mat4 _f0;
 mat3x2 _f1;
 float _f2;
 float _f3;
 vec3 _f4;
} ;

struct _GLF_struct_63 {
 _GLF_struct_62 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_60 {
 bvec2 _f0;
 uint _f1;
 mat2x3 _f2;
 uint _f3;
 vec4 _f4;
 ivec4 _f5;
 int _f6;
} ;

struct _GLF_struct_61 {
 vec2 _f0;
 float _f1;
 ivec2 _f2;
 _GLF_struct_60 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_58 {
 uvec4 _f0;
 uint _f1;
 bvec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_57 {
 int _f0;
 bvec3 _f1;
 int _f2;
 mat4x2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_59 {
 mat3 _f0;
 _GLF_struct_57 _f1;
 int _f2;
 _GLF_struct_58 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_64 {
 _GLF_struct_59 _f0;
 _GLF_struct_61 _f1;
 mat3x2 _f2;
 int _injected_loop_counter;
 uvec4 _f3;
 _GLF_struct_63 _f4;
} ;

struct _GLF_struct_54 {
 float _f0;
 uvec4 _f1;
 bvec3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_53 {
 bvec4 _f0;
 mat3x2 _f1;
 int _f2;
} ;

struct _GLF_struct_52 {
 vec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_51 {
 mat3x4 _f0;
 uvec4 _f1;
 uint _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_50 {
 mat4 _f0;
 bool _f1;
 int _f2;
 mat2x4 _f3;
 uint _f4;
} ;

struct _GLF_struct_55 {
 _GLF_struct_50 _f0;
 ivec3 _f1;
 _GLF_struct_51 _f2;
 _GLF_struct_52 _f3;
 _GLF_struct_53 _f4;
 _GLF_struct_54 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_48 {
 mat2 _f0;
 uvec4 _f1;
 mat3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_49 {
 _GLF_struct_48 _f0;
} ;

struct _GLF_struct_56 {
 _GLF_struct_49 _f0;
 int _injected_loop_counter;
 _GLF_struct_55 _f1;
} ;

struct _GLF_struct_45 {
 mat3x4 _f0;
 mat3 _f1;
 int _f2;
} ;

struct _GLF_struct_44 {
 uvec3 _f0;
} ;

struct _GLF_struct_43 {
 uvec3 _f0;
 bvec4 _f1;
 mat4x2 _f2;
 mat4 _f3;
 mat3 _f4;
 uvec3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_42 {
 mat3 _f0;
 uvec4 _f1;
 vec3 _f2;
 ivec2 _f3;
 int _f4;
 mat2 _f5;
} ;

struct _GLF_struct_46 {
 bool _f0;
 _GLF_struct_42 _f1;
 _GLF_struct_43 _f2;
 _GLF_struct_44 _f3;
 _GLF_struct_45 _f4;
} ;

struct _GLF_struct_40 {
 mat3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_39 {
 ivec3 _f0;
 vec4 _f1;
 uvec3 _f2;
 uvec3 _f3;
 uvec4 _f4;
 uint _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_41 {
 _GLF_struct_39 _f0;
 _GLF_struct_40 _f1;
} ;

struct _GLF_struct_37 {
 uvec4 _f0;
 bool _f1;
 mat4 _f2;
 mat2x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_38 {
 float _f0;
 uvec2 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 _GLF_struct_37 _f4;
} ;

struct _GLF_struct_35 {
 ivec2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_34 {
 mat3 _f0;
 int _f1;
 uint _f2;
} ;

struct _GLF_struct_33 {
 ivec2 _f0;
} ;

struct _GLF_struct_32 {
 mat3x2 _f0;
 float _f1;
 bool _f2;
 bvec3 _f3;
 mat3x2 _f4;
 float _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_36 {
 _GLF_struct_32 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_35 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_47 {
 mat2x4 _f0;
 uint num_workgroup;
 _GLF_struct_36 _f1;
 _GLF_struct_38 _f2;
 _GLF_struct_41 _f3;
 _GLF_struct_46 _f4;
 int _f5;
} ;

struct _GLF_struct_29 {
 int _f0;
 mat3 _f1;
 uvec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_30 {
 uvec3 _f0;
 _GLF_struct_29 _f1;
} ;

struct _GLF_struct_27 {
 bool _f0;
 bvec4 _f1;
 bvec4 _f2;
 bvec4 _f3;
 ivec4 _f4;
 mat4x2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_28 {
 _GLF_struct_27 _f0;
 int _f1;
 mat2 _f2;
 mat3 _f3;
 vec4 _f4;
 int _f5;
} ;

struct _GLF_struct_25 {
 vec2 _f0;
 uvec4 _f1;
 uint _f2;
 int _f3;
 vec2 _f4;
} ;

struct _GLF_struct_24 {
 bvec2 _f0;
 mat2x3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_23 {
 uvec2 _f0;
 mat2 _f1;
 mat4x2 _f2;
 mat4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_22 {
 ivec4 _f0;
 bvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_26 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 mat3x4 _f2;
 ivec3 _f3;
 _GLF_struct_24 _f4;
 _GLF_struct_25 _f5;
} ;

struct _GLF_struct_20 {
 float _f0;
} ;

struct _GLF_struct_19 {
 int _f0;
 mat2x4 _f1;
 vec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 _GLF_struct_20 _f1;
 uvec4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_31 {
 _GLF_struct_21 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_28 _f2;
 uint subgroup_size;
 _GLF_struct_30 _f3;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 mat3x4 _f1;
 mat2 _f2;
 vec3 _f3;
 int _f4;
 mat4 _f5;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 uvec2 _f1;
 vec2 _f2;
 mat2x4 _f3;
 bvec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_13 {
 mat3x4 _f0;
 uvec3 _f1;
 bvec3 _f2;
 int _f3;
} ;

struct _GLF_struct_17 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 bvec3 _f2;
 uint next_virtual_gid;
 vec4 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_11 {
 bool _f0;
 ivec4 _f1;
 ivec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 ivec2 _f1;
 bvec2 _f2;
 ivec4 _f3;
 mat2x3 _f4;
 vec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 mat4x2 _f1;
 bvec3 _f2;
 uint _f3;
 ivec3 _f4;
 bvec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_9 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_17 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 uint _f1;
 bvec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 ivec2 _f1;
 ivec2 _f2;
 float _f3;
 bool _f4;
 bool _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 vec4 _f1;
 uint subgroup_local_id;
 vec2 _f2;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 _GLF_struct_2 _f1;
 uvec2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 ivec2 _f1;
 ivec4 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_1 {
 uint subgroup_id;
 int _f0;
 _GLF_struct_0 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(gl_SubgroupID, 1, _GLF_struct_0(uvec2(1u), ivec2(1), ivec4(1), ivec4(_GLF_IDENTITY(1, (1) >> 0))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-279.790), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(12.72)), bvec2(true, false))), 0.0, 0.0), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-279.790), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(12.72)), bvec2(true, false))), 0.0, 0.0)))))).x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-97.72), _GLF_FUZZED(7587.0134)), bvec2(false, false))))).y)))) && true))
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        break;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), ! (! (false)))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -25275)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    break;
  }
 _GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(_GLF_struct_21(_GLF_struct_19(1, mat2x4(1.0), vec3(1.0), mat3(1.0)), _GLF_struct_20(1.0), uvec4(1u), uvec4(1u)), _GLF_struct_26(_GLF_struct_22(_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1)))) | (ivec4(1))), bvec3(true), uvec3(1u)), _GLF_struct_23(uvec2(1u), mat2(1.0), mat4x2(1.0), mat4(1.0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (false ? _GLF_FUZZED(-22420) : _GLF_IDENTITY(1, (1) | (1))))), ivec2(0, 0) ^ (ivec2(1)))), mat3x4(1.0), ivec3(1), _GLF_struct_24(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true)))), mat2x3(1.0), bvec2(true)), _GLF_struct_25(vec2(1.0), uvec4(1u), 1u, _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 | (1)))), vec2(1.0))), _GLF_struct_28(_GLF_struct_27(true, bvec4(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)), _GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))), true)))), bvec4(true), bvec4(true), _GLF_IDENTITY(ivec4(1), (ivec4(1)) / ivec4(1, 1, 1, 1)), mat4x2(1.0), ivec4(1)), _GLF_IDENTITY(1, int(ivec3(1, 1, 1))), mat2(1.0), mat3(1.0), vec4(1.0), 1), gl_SubgroupSize, _GLF_struct_30(uvec3(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_struct_29(_GLF_IDENTITY(1, (1) | 0), mat3(1.0), uvec3(1u), mat2(1.0))));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_6(_GLF_IDENTITY(mat3(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat3(1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 1.0), mat3x2(mat3x2(mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(93.99) : 0.0)))), 0.0, 0.0) + _GLF_IDENTITY((mat3(1.0)), (true ? _GLF_IDENTITY((mat3(1.0)), mat3(_GLF_IDENTITY(mat4((mat3(1.0))), (mat4((mat3(1.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED((2.1 / mat3(-32.81, -805.077, 662.343, 0.0, -4.0, 48.55, -148.834, 4905.6032, 4.7))))))), (transpose(mat3(1.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_struct_2(mat2x4(1.0), vec4(1.0), gl_SubgroupInvocationID, vec2(1.0)), uvec2(1u), _GLF_struct_3(bvec3(true), ivec2(1), ivec2(1), 1.0, true, true, uvec3(1u)), _GLF_struct_4(ivec2(1), 1u, bvec3(true), mat3x2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, sqrt(0.0))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x4(_GLF_IDENTITY(mat2x4(mat2x4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, sqrt(0.0))), 0.0, 1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(mat2x4(-8.7, 405.239, 9.5, -8.0, -70.26, 2.8, _GLF_IDENTITY(7835.6651, _GLF_IDENTITY(float(mat4x2(7835.6651, 0.0, 1.0, sin(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0)), 0.0 + (float(mat4x2(_GLF_IDENTITY(7835.6651, min(7835.6651, 7835.6651)), 0.0, 1.0, sin(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0))))), 21.17)) : mat2x4(mat2x4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, sqrt(0.0))), 0.0, 1.0, 1.0, 1.0, 1.0)))))))), 1.0)))), _GLF_struct_5(bvec4(true)), ivec2(1)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, 1.0))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, 1.0))) > injectionSwitch.y))))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, (true) && true)), false))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
      }
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), ~ (~ (_GLF_IDENTITY(0, (0) | _GLF_IDENTITY(0, (0) | (0))))))) >> 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) >> 0, min((int(3)) >> 0, (int(3)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), injectionSwitch.x)) > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 _GLF_struct_47 _GLF_struct_replacement_47 = _GLF_struct_47(mat2x4(1.0), gl_NumWorkGroups.x, _GLF_struct_36(_GLF_struct_32(mat3x2(1.0), 1.0, true, bvec3(true), mat3x2(1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 1.0)), ivec3(1)), _GLF_struct_33(ivec2(1)), _GLF_struct_34(mat3(1.0), 1, 1u), _GLF_struct_35(ivec2(1), ivec2(1)), ivec4(1)), _GLF_struct_38(1.0, uvec2(1u), mat3x4(1.0), ivec2(1), _GLF_struct_37(uvec4(1u), true, mat4(1.0), mat2x4(1.0), vec2(1.0))), _GLF_struct_41(_GLF_struct_39(_GLF_IDENTITY(ivec3(1), ~ _GLF_IDENTITY((~ (ivec3(1))), ivec3(0, 0, 0) | ((~ (ivec3(1)))))), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), uvec3(1u), uvec3(1u), uvec4(1u), 1u, _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), max(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u))), uvec4(1u))), (false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(144981u, _GLF_IDENTITY(min(144981u, 144981u), (true ? min(144981u, 144981u) : _GLF_FUZZED(146040u)))), 39484u, 160050u, 47131u)) : _GLF_IDENTITY(uvec4(1u), clamp(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec4(1u), uvec4(1u)))))), _GLF_struct_40(_GLF_IDENTITY(mat3(1.0), mat3(mat4(mat3(1.0)))), mat4(1.0))), _GLF_struct_46(_GLF_IDENTITY(true, bool(bool(true))), _GLF_struct_42(mat3(1.0), _GLF_IDENTITY(uvec4(1u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (uvec4(1u))), vec3(1.0), ivec2(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, 0 | (1)), 1)))), 1, mat2(1.0)), _GLF_struct_43(uvec3(1u), bvec4(true), mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0))), mat4(1.0), _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY((mat3(1.0)) / mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat3(8.8, -1.6, 689.074, -17.35, -15.46, -29.78, 9.2, -7.0, 9365.2368)) : _GLF_IDENTITY((mat3(1.0)) / mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose((mat3(1.0)) / _GLF_IDENTITY(mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))), _GLF_IDENTITY(uvec3(1u), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (uvec3(1u))), mat4x2(1.0)), _GLF_struct_44(uvec3(1u)), _GLF_struct_45(mat3x4(1.0), mat3(1.0), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1))))))), 1);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.1) : injectionSwitch.x)) < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.2), _GLF_FUZZED((-3685.1347 / -3233.2238))), bvec2(false, false))).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (! (true))), true && (_GLF_IDENTITY(! (true), false || (! (true))))))), (injectionSwitch.x < injectionSwitch.y))), ! (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec4(bool(_GLF_WRAPPED_LOOP(false)), true, true, false))))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 1.0, sin(0.0)))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(faceforward(881.935, 59.70, -1325.1460)))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)) && true)), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true))))))) && true))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)) && true)), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true))))))) && true))))), false, true)), true && (bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)) && true)), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true))))))) && true))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(3207.4769))), (injectionSwitch.x) - 0.0) < injectionSwitch.y)))) && true)) && true)), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * 1.0))).y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true)))) + 0.0))))) && true)))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)) && true)), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true))))))) && true))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)) && true)), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.y), bool(true))))))) && true)))))))))) || false)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8343.4933, -9.2)) : injectionSwitch)), injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-5711.5672, -169.635))), ((true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8343.4933, -9.2)) : injectionSwitch)), injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-5711.5672, -169.635)))) + vec2(0.0, 0.0))) : _GLF_FUZZED(vec2(1.2, 5.4)))).x < injectionSwitch.y))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), bool(bvec4(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY((false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 1.0)), mix(float(_GLF_FUZZED(-306.302)), float(float(vec2(injectionSwitch.x, 1.0))), bool(true)))) < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), vec2(1.0, 1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) + vec2(0.0, 0.0))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(mat2(vec2(0.0, 0.0), 0.0, 1.0)), mix(vec2((vec2(mat2(vec2(0.0, 0.0), 0.0, 1.0)))[0], _GLF_FUZZED(5.1)), vec2(_GLF_FUZZED(-7111.4617), (vec2(mat2(vec2(0.0, 0.0), 0.0, 1.0)))[1]), bvec2(false, true))))) : _GLF_FUZZED(vec2(-5711.5672, -169.635)))) : _GLF_FUZZED(vec2(1.2, 5.4)))).x < injectionSwitch.y))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true), bool(bvec4(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), ! (! ((false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-5711.5672, -169.635)))) : _GLF_FUZZED(vec2(1.2, 5.4)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-5711.5672, -169.635)))) : _GLF_FUZZED(vec2(1.2, 5.4))))) / vec2(1.0, 1.0)).x < injectionSwitch.y))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), bool(bvec4(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))) || false), ! (! (! (false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true, bool(bvec3((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true, true, false))))), ! (! ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))) && true))))))))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(99.54, 43.48)))), 1.0, 0.0), (true ? _GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(99.54, 43.48)), vec2(mat2(true ? injectionSwitch : _GLF_FUZZED(vec2(99.54, 43.48)), 0.0, determinant(mat4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), 1.0, 0.0), mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? injectionSwitch : _GLF_FUZZED(vec2(99.54, 43.48)))), 1.0, 0.0)))) : _GLF_FUZZED(mat2(52.05, 4578.7872, 4779.7617, 87.90)))))).y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))), true && (bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    return;
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 | 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
                      {
                       return;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           break;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, false), false))))) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(146.988)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(-6122.9475), (mix(vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(146.988)), bvec2(true, false)))[1]), vec2((mix(vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(146.988)), bvec2(true, false)))[0], _GLF_FUZZED((-67.57))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), 1.0))), injectionSwitch, injectionSwitch)).y, float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), 0.0))))), 1 * (int(_GLF_ONE(1.0, injectionSwitch.y))))) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), 0))), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(146.988, (146.988) - _GLF_ZERO(0.0, injectionSwitch.x)))), bvec2(true, false))), 1.0))), injectionSwitch, injectionSwitch)).y, float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)))), mat3(mat4x3(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))))))))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), 0.0))))), 1 * (int(_GLF_ONE(1.0, injectionSwitch.y))))) | _GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(146.988), (_GLF_FUZZED(146.988)) - _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(224.906))))), bvec2(true, false))), 1.0))), injectionSwitch, injectionSwitch)).y, float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(92.05)), bool(false))), 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) + sin(0.0)) : _GLF_FUZZED(6745.5994))), injectionSwitch.x), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), 0.0))))), 1 * _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), min((int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) | _GLF_IDENTITY(0, max(0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (bool(bvec4(true, true, true, false))))))) && (_GLF_IDENTITY(true, (true) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(731.698)), vec2(_GLF_FUZZED(2476.1407), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch)))) / vec2(1.0, 1.0)).y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             return;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(false))
                            return;
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4((false), true, false, true))), (! (_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))), ! (! (false)))));
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_31.subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_7._f0._f1.subgroup_local_id, clamp(_GLF_struct_replacement_7._f0._f1.subgroup_local_id, _GLF_struct_replacement_7._f0._f1.subgroup_local_id, _GLF_struct_replacement_7._f0._f1.subgroup_local_id)), 0u ^ (workgroup_base + _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_31.subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_7._f0._f1.subgroup_local_id, min(_GLF_struct_replacement_7._f0._f1.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_7._f0._f1.subgroup_local_id, max(_GLF_struct_replacement_7._f0._f1.subgroup_local_id, _GLF_struct_replacement_7._f0._f1.subgroup_local_id))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 0)), (int(ivec3(1, 1, 0))) << 0)), (1) | (1))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_9(_GLF_struct_8(mat4(1.0), mat4x2(1.0), bvec3(true), 1u, ivec3(1), bvec2(true), ivec3(1))), _GLF_struct_12(_GLF_struct_10(ivec2(1), ivec2(1), bvec2(true), ivec4(1), mat2x3(1.0), vec3(1.0), uvec3(_GLF_IDENTITY(1u, max(1u, 1u)))), _GLF_struct_11(true, ivec4(1), ivec2(1), mat2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-743.185)), bool(false))), _GLF_IDENTITY(1.0, (1.0) / 1.0))) : _GLF_FUZZED(96.32))))), ivec3(1)), _GLF_struct_17(_GLF_struct_13(mat3x4(1.0), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) << (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u), 0u, 0u), max(_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) << (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u, 0u ^ ((_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u))))), 0u, 0u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) << (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u), 0u, 0u), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) << (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u), 0u, 0u)) | (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) << (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) ^ 0u), 0u, 0u)))))), bvec3(true), 1), _GLF_struct_14(_GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(-7659.0939, 385.793, -556.590, 9822.3425, 9.1, -75.39, 6890.8765, -682.099, -9412.2201, _GLF_IDENTITY(511.121, (511.121) - 0.0), 761.836, -58.57, -670.203, _GLF_IDENTITY(-16.80, min(-16.80, -16.80)), -4.2, -892.336)))), uvec2(1u), vec2(1.0), mat2x4(1.0), bvec4(true), ivec2(1)), bvec3(true), workgroup_base + _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_31.subgroup_size, _GLF_IDENTITY(0u ^ (_GLF_struct_replacement_31.subgroup_size), max(0u ^ (_GLF_struct_replacement_31.subgroup_size), 0u ^ (_GLF_struct_replacement_31.subgroup_size)))) + ((_GLF_struct_replacement_7._f0._f1.subgroup_local_id + 1) % _GLF_struct_replacement_31.subgroup_size), vec4(_GLF_IDENTITY(1.0, float(mat4x2(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), _GLF_struct_15(mat3x4(1.0), mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2(1.0), vec3(1.0), 1, mat4(1.0)), _GLF_struct_16(mat2x3(1.0), uvec2(1u))), mat3x2(1.0));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true && (false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true))))))))))))))), true && (false))), true)), false || (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true && (false))), true)))))) || false))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(sign(-6.3)))), injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), clamp(mat2(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2.4)), float(1.0), bool(true))), injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), (max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) / _GLF_ONE(1.0, injectionSwitch.y))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (true ? mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch) : _GLF_FUZZED(vec2(-3.3, 7377.1311)))), clamp(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y), true && ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0, mix(float((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0), float(_GLF_FUZZED(4560.3820)), bool(false)))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0)), clamp(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4)))))); _injected_loop_counter ++)
              {
               return;
              }
            }
           else
            {
            }
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f2.next_virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_18._f2.next_virtual_gid), (_GLF_IDENTITY(~ (_GLF_struct_replacement_18._f2.next_virtual_gid), (~ (_GLF_struct_replacement_18._f2.next_virtual_gid)) | (~ (_GLF_struct_replacement_18._f2.next_virtual_gid)))) - 0u)))], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, int(ivec4(4, 0, 1, (0 & 74515))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, int(ivec4(4, 0, 1, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0) & 74515, min(_GLF_IDENTITY(0, (0) | 0) & 74515, _GLF_IDENTITY(0, (0) | 0) & 74515))))))), ((_GLF_IDENTITY(4, int(ivec4(4, 0, 1, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0) & 74515, min(_GLF_IDENTITY(0, (0) | 0) & 74515, _GLF_IDENTITY(0, (0) | 0) & 74515)))))))) / 1), clamp((_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 0, 1, (0 & 74515)), min(ivec4(4, 0, _GLF_IDENTITY(1, int(ivec3(1, 1, 1))), _GLF_IDENTITY((0 & 74515), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) | (_GLF_IDENTITY((0 & 74515), min(_GLF_IDENTITY((0 & 74515), max((0 & 74515), (0 & 74515))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 0))))), (0) - 0)))) >> 0) & 74515)))))), ivec4(4, 0, 1, (0 & 74515))))))), (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, (0 & _GLF_IDENTITY(74515, ~ (_GLF_IDENTITY(~ (74515), int(ivec2(~ (74515), 0)))))))))), (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, (0 & 74515))))))) : _GLF_FUZZED(74465))) << 0), 64, 4);
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), true))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), true))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), true))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true)))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! (_GLF_IDENTITY(true, false || (true))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, false || (true)))), false || (! (! (_GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).y))), _GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))), true, true))) && true)))))) || false)), true), false)))))))), true)))))))))))), false)))))), bool(bvec3(true, false, true))), false, true)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) && true)), false, true)), false, true))))))
    {
     do
      {
       do
        {
         for(_GLF_struct_56 _GLF_struct_replacement_56 = _GLF_struct_56(_GLF_struct_49(_GLF_struct_48(mat2(1.0), uvec4(1u), mat3(1.0), mat2x4(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_55(_GLF_struct_50(mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), 1, mat2x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1)))), _GLF_struct_51(mat3x4(1.0), uvec4(1u), 1u, bvec3(true)), _GLF_struct_52(vec2(1.0), vec4(1.0)), _GLF_struct_53(bvec4(true), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1.0, 1.0, 1.0), (clamp(1.0, 1.0, 1.0)) * exp(0.0)), (_GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.8)), bool(false)))))), float(mat4x3(clamp(1.0, 1.0, 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-372.694) : 1.0)), 0.0)))) / 1.0))), 1), _GLF_struct_54(1.0, uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))), bvec3(true), uvec3(1u)), mat4(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_56._injected_loop_counter < 1); _GLF_struct_replacement_56._injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                }
               if(_GLF_struct_replacement_7._f0._f1.subgroup_local_id + 1 < _GLF_struct_replacement_31.subgroup_size)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED((_injected_loop_counter - 23367)) : 1))) | 0) : _GLF_FUZZED(-94230)))); _injected_loop_counter ++)
                  {
                   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) | (read)), min(_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) | (read)), clamp(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) | (read)))), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) | (read))))) | (_GLF_IDENTITY(_GLF_IDENTITY(read, (read) - 0u), uint(uvec4(read, 1u, 0u, 1u))))), 4, 64, 4);
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 subgroupAll(false);
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))))) && true)))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (~ (~ (_injected_loop_counter --))) << 0), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, min(0, 0)))) | (~ (~ (_injected_loop_counter --)))))))), 0 | (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), ~ (_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), 0 | (~ (~ (_injected_loop_counter --)))))))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          return;
                         for(_GLF_struct_64 _GLF_struct_replacement_64 = _GLF_struct_64(_GLF_struct_59(mat3(1.0), _GLF_struct_57(1, bvec3(true), 1, mat4x2(1.0), vec4(1.0)), 1, _GLF_struct_58(uvec4(1u), 1u, bvec4(true), mat2x4(1.0)), bvec2(true)), _GLF_struct_61(vec2(1.0), 1.0, ivec2(1), _GLF_struct_60(bvec2(true), 1u, mat2x3(1.0), 1u, vec4(1.0), ivec4(1), 1), mat4x3(1.0)), mat3x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, 1)), int(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, 1)), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), uvec4(1u), _GLF_struct_63(_GLF_struct_62(mat4(1.0), mat3x2(1.0), 1.0, 1.0, vec3(1.0)), mat2x4(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_64._injected_loop_counter > 0); _GLF_struct_replacement_64._injected_loop_counter --)
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 return;
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               atomicStore(buf[virtual_gid], read, 4, 64, 4);
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))))))))))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           do
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false)))))));
                         break;
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), (true ? ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) : _GLF_FUZZED(bitfieldInsert(57143, _injected_loop_counter, -37846, _injected_loop_counter)))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), min(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) * 1))))), int(5))))))), max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(560.682) : injectionSwitch.x)) > injectionSwitch.y))))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                     subgroupAll(true);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))) ? injectionSwitch.y : _GLF_FUZZED(distance(vec2(7.6, 1.3), vec2(-7.9, 631.570))))))))))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(425.857)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, true && (true))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           do
            {
             for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))))) >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY((_GLF_IDENTITY((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)))))), 0 | ((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))))))), (_GLF_IDENTITY((_GLF_IDENTITY((0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)))), max((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)))), (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)))))))), 0 | ((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))), (_GLF_IDENTITY((_GLF_IDENTITY((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)))))), 0 | ((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))), ((_GLF_IDENTITY((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)))))), 0 | ((0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))) << 0)) >> 0)) >> 0) + (0 >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 else
  {
  }
}
