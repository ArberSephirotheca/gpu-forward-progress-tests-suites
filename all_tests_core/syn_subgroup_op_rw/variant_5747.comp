#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_22 {
 vec4 _f0;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
 uvec2 _f1;
 uint workgroup_base;
 _GLF_struct_22 _f2;
} ;

struct _GLF_struct_20 {
 bvec2 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 float _f1;
} ;

struct _GLF_struct_17 {
 int _f0;
 uint _f1;
 ivec4 _f2;
 ivec2 _f3;
 int _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_16 {
 uvec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 bvec2 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 vec4 _f1;
 uvec2 _f2;
 uvec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
 bvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_21 {
 _GLF_struct_15 _f0;
 vec3 _f1;
 mat4x3 _f2;
 _GLF_struct_18 _f3;
 _GLF_struct_19 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 int _f1;
 mat2x4 _f2;
 mat3x2 _f3;
 mat4x2 _f4;
 mat2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 vec2 _f1;
 mat3x4 _f2;
 uint _f3;
 mat2 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 uvec2 _f1;
 mat4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 uvec3 _f1;
 ivec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 vec4 _f3;
 mat3x2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 bool _f1;
 float _f2;
 mat3x2 _f3;
 mat2 _f4;
 int _f5;
} ;

struct _GLF_struct_3 {
 uint _f0;
 uvec2 _f1;
 mat4x3 _f2;
 vec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 mat3x2 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 ivec2 _f1;
 float _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 bvec3 _f1;
 mat4x2 _f2;
 ivec4 _f3;
 ivec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 _GLF_struct_2 _f1;
 ivec4 _f2;
 uint virtual_gid;
 uvec4 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_12 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec4(_GLF_IDENTITY(int(5), int(5)), 1, 0, 0))), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)), max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))) | (6), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))) | (6)) | (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))) | (6))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-47798) : _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), int(ivec4(int(6), 1, 1, 0)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(156.857) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.5), _GLF_FUZZED(-5.4)), bvec2(false, false))).y))))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, max(5, 5))))), int(5)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, max(5, 5))))), int(5)), 1)))), clamp((0 >> _GLF_IDENTITY(int(5), int(5))), (0 >> _GLF_IDENTITY(int(5), int(5))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) | (5))))), int(5)))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), false || (bool(bvec4(_GLF_DEAD(false), false, true, false))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || false)) || false), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ~ (~ ((1 << _GLF_IDENTITY(int(2), int(2))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), int(2)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), int(2))))))))), (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), int(2)))))))))) << 0)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) + (0 ^ 0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) << (0 << _GLF_IDENTITY(int(6), int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + (0 << _GLF_IDENTITY(int(6), int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_15(_GLF_struct_14(uvec3(1u), _GLF_IDENTITY(vec4(1.0), (true ? vec4(1.0) : _GLF_IDENTITY(_GLF_FUZZED(fract(vec4(_GLF_IDENTITY(25.17, max(_GLF_IDENTITY(25.17, float(vec4(25.17, 0.0, 1.0, 0.0))), 25.17)), 720.375, 3860.8978, 6757.5237))), min(_GLF_FUZZED(fract(vec4(25.17, 720.375, 3860.8978, 6757.5237))), _GLF_FUZZED(fract(vec4(25.17, 720.375, 3860.8978, 6757.5237))))))), uvec2(1u), uvec3(1u), uvec2(1u)), bvec3(true), uvec3(1u)), vec3(1.0), mat4x3(1.0), _GLF_struct_18(_GLF_struct_16(uvec2(1u), mat2x4(1.0)), bvec2(true), _GLF_struct_17(1, 1u, ivec4(1), ivec2(1), 1, mat2x4(1.0))), _GLF_struct_19(uvec4(_GLF_IDENTITY(1u, (0u & 86052u) + (1u))), 1.0), _GLF_struct_20(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(bvec3(bvec2(true), true)))))), gl_SubgroupID));
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = _GLF_struct_replacement_21._f5.subgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), ! (! (false)))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != (0 ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, false))), bool(bool(! (bool(bvec3(true, false, false)))))))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), ! (! (bool(_GLF_IDENTITY(false, false || (false))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (false))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, false || (false))))), false || (! (! (bool(_GLF_IDENTITY(false, false || (false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, false || (false))))), false || (! (! (bool(_GLF_IDENTITY(false, false || (false)))))))), ! (! (bool(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, false || (false))))), false || (! (! (bool(_GLF_IDENTITY(false, false || (false)))))))))))))))))))))), (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = num_workgroup;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), uvec2(1u), workgroup_size * workgroup_id, _GLF_struct_22(vec4(1.0)));
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(vec2(1.0), mix(vec2((vec2(1.0))[0], (vec2(1.0))[1]), vec2(_GLF_FUZZED(-23.82), _GLF_FUZZED(-2379.0969)), bvec2(false, false))), vec2(1.0))), _GLF_struct_2(_GLF_struct_0(mat3x4(1.0), bvec3(true), mat4x2(1.0), ivec4(1), _GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(_GLF_IDENTITY(1, (1 ^ 0) * (1))))), bvec4(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, (false) && true)))))), _GLF_struct_1(vec2(1.0), ivec2(1), 1.0, ivec2(1)), mat3(1.0)), ivec4(1), _GLF_IDENTITY(_GLF_struct_replacement_23.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + subgroup_local_id, (_GLF_struct_replacement_23.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + subgroup_local_id) << 0u), uvec4(1u), _GLF_struct_8(_GLF_struct_3(1u, uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u))) - 0u)), mat4x3(1.0), vec2(1.0), 1u), _GLF_struct_4(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), vec4(1.0))), true, 1.0, mat3x2(1.0), mat2(1.0), 1), _GLF_struct_5(mat2(1.0), mat2x3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), bvec3(true), vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-288.799)), float(1.0), bool(true)))), mat3x2(1.0), mat4(1.0)), _GLF_struct_6(mat3x4(1.0), uvec3(1u), ivec4(1), uvec3(1u)), mat3x2(1.0), _GLF_struct_7(mat3x2(1.0), uvec2(1u), mat4(1.0), mat3x4(1.0))), _GLF_struct_10(_GLF_struct_9(bvec3(_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(1.0)), mix(vec2(_GLF_FUZZED(51.48), _GLF_FUZZED(555.373)), _GLF_IDENTITY(vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), clamp(_GLF_IDENTITY(vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), clamp(vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]))), vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), _GLF_IDENTITY(vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), mix(vec2((vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]))[0], (vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]))[1]), vec2(_GLF_FUZZED(7.4), _GLF_FUZZED(0.9)), bvec2(false, false))))), bvec2(true, true)))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(mat2(1.0) * (vec2(1.0)), mix(vec2(_GLF_FUZZED(51.48), _GLF_FUZZED(555.373)), vec2(_GLF_IDENTITY((mat2(1.0) * (vec2(1.0)))[0], mix(float(_GLF_FUZZED(925.664)), float(_GLF_IDENTITY((mat2(1.0) * (vec2(1.0)))[0], (true ? (mat2(1.0) * (vec2(1.0)))[0] : _GLF_FUZZED(-93.20)))), bool(true))), (mat2(1.0) * (vec2(1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(1.0)), mix(vec2(_GLF_FUZZED(51.48), _GLF_FUZZED(555.373)), vec2((mat2(1.0) * (vec2(1.0)))[0], (mat2(1.0) * (vec2(1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(1.0)), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(51.48), _GLF_FUZZED(555.373)), vec2((mat2(1.0) * (vec2(1.0)))[0], (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)) * (vec2(1.0)))[1]), bvec2(true, true)), (false ? _GLF_FUZZED(vec2(8457.0080, -1432.5421)) : mix(vec2(_GLF_FUZZED(51.48), _GLF_FUZZED(555.373)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (vec2(1.0)))[0], (true ? (mat2(1.0) * (vec2(1.0)))[0] : _GLF_FUZZED(-16.38))), (_GLF_IDENTITY((mat2(1.0) * (vec2(1.0)))[0], 1.0 * ((mat2(1.0) * (vec2(1.0)))[0]))) - sin(sin(0.0))), (mat2(1.0) * (vec2(1.0)))[_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(79523)))]), bvec2(true, true)))))))), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0)))), vec2(vec4((vec2(1.0)), 1.0, 0.0))) / _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY((vec2(1.0, 1.0)), min((vec2(1.0, 1.0)), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2676.8709)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2676.8709)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - _GLF_IDENTITY(_GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) * 1.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) * 1.0), min(_GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) * 1.0), _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) * 1.0))), _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) * 1.0), _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) * 1.0)))), 1.0)))) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-578.573)), bool(false)))), (true ? (vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), _GLF_IDENTITY(min(1.0, 1.0), (min(1.0, 1.0)) - 0.0)))), injectionSwitch.y)), (mat2(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8011.3689)), float(injectionSwitch.y), bool(true)))))) / mat2(1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))))))), mat3x4(1.0), 1u, mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), _GLF_struct_12(_GLF_struct_11(mat4(1.0), 1, mat2x4(1.0), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), mix(vec4((vec4(1.0, 0.0, 0.0, 1.0))[0], _GLF_FUZZED(0.5), (vec4(1.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(8.7)), vec4(_GLF_FUZZED(-45.48), (vec4(1.0, 0.0, 0.0, 1.0))[1], _GLF_FUZZED(-3.7), (vec4(1.0, 0.0, 0.0, 1.0))[3]), bvec4(false, true, false, true)))), (float(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), mix(vec4((vec4(1.0, 0.0, 0.0, 1.0))[0], _GLF_FUZZED(0.5), (vec4(1.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(8.7)), vec4(_GLF_FUZZED(-45.48), (vec4(1.0, 0.0, 0.0, 1.0))[1], _GLF_FUZZED(-3.7), (vec4(1.0, 0.0, 0.0, 1.0))[3]), bvec4(false, true, false, true))))) - 0.0))), mat4x2(1.0), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.0)), bool(false))), 1.0)), 1.0)), _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))) * mat3(1.0)))));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bvec2(false, true)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bvec2(false, true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_23.workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size, clamp(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_size), (0u ^ (subgroup_size)) | (0u ^ (subgroup_size)))))))), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_13.virtual_gid, max(_GLF_struct_replacement_13.virtual_gid, _GLF_struct_replacement_13.virtual_gid))], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read) / 1u))) : _GLF_FUZZED(86428u)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), (false ? _GLF_FUZZED((25664)) : 0 ^ (4)))), 64, 4);
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2((_GLF_IDENTITY(false, (false) && true)), true))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(subgroup_local_id + 1 < subgroup_size)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))) ? injectionSwitch.y : _GLF_FUZZED(-73.02)))) + 0.0)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), true && (bool(_GLF_DEAD(false))))), false, false)))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))) && true))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec2(0.0, 1.0)), dot(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec2(0.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8)))))); _injected_loop_counter --)
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_13.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_13.virtual_gid, (false ? _GLF_FUZZED(read) : _GLF_struct_replacement_13.virtual_gid)), _GLF_struct_replacement_13.virtual_gid)), max(_GLF_struct_replacement_13.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_13.virtual_gid, (true ? _GLF_IDENTITY(_GLF_struct_replacement_13.virtual_gid, (_GLF_struct_replacement_13.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_13.virtual_gid, min(_GLF_struct_replacement_13.virtual_gid, _GLF_struct_replacement_13.virtual_gid)))) : _GLF_FUZZED(subgroup_size)))))], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 subgroupAll(false);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0))))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) | (1)), 1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(max(int(6), int(6)), (max(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) >> 0)), int(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) | 0) ^ (6)))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ((_GLF_IDENTITY(true, ! (! (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             atomicStore(buf[_GLF_struct_replacement_13.virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(54851)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec3(_injected_loop_counter != 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))); _injected_loop_counter --)
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       barrier();
                                      }
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   for(int _injected_loop_counter = (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), max(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))) & (1 & _GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                        {
                         subgroupAll(true);
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))))))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))))))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), bool(bvec2(! (_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))))))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
