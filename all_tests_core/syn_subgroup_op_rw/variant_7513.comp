#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec3(_injected_loop_counter != 0, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))))), false)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ (_GLF_IDENTITY(6001 & 0, (6001 & 0) | 0))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) / 1.0) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4093.9347)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4093.9347)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0), (vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4093.9347)), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0))) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0))) < injectionSwitch.y)))) && true)))))), 0.0, 1.0, 0.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) && true))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && true)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).x < injectionSwitch.y)))))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 & 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
        }
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x))), 0u + (uint(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x)))))) | 0u)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), max(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))), _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), (clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) << 0u), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))))), (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), max(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), min(workgroup_id, workgroup_id))), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))), _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), (clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) << 0u), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, workgroup_id), clamp(min(workgroup_id, workgroup_id), min(workgroup_id, workgroup_id), min(workgroup_id, workgroup_id)))), max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), max(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))), _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u)), _GLF_IDENTITY((clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) << 0u, _GLF_IDENTITY(1u, (1u) / 1u) * ((clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u))))) << 0u))), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))))))), _GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, workgroup_id), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | (min(workgroup_id, workgroup_id))))), max(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), min(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))))), clamp(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))), _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), (_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u), min(workgroup_id, workgroup_id))), (clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u), min(workgroup_id, workgroup_id)))) | (clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u), min(workgroup_id, workgroup_id)))))) << 0u), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) | 0u)))))) >> 0u, ((workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), clamp(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), max(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), ~ (~ (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))))))), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, workgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), (clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) << 0u), uint(uvec3(_GLF_IDENTITY(clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (true ? _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u) : _GLF_FUZZED(subgroup_local_id))), workgroup_id, workgroup_id)))), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), (clamp(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), min(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)))), _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)))), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) << 0u), 0u, 1u))), clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))))) >> 0u) ^ (164073u & 0u)));
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))) && true))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / 1), 1, 1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1, 1))) | (1))), _GLF_IDENTITY(0, _GLF_IDENTITY(0, min(0, 0)) + (0)) | (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1))))))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec2(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec2(! (_GLF_WRAPPED_IF_FALSE(false)), true))), false))))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED((virtual_gid + subgroup_local_id)) : (subgroup_local_id + 1))) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1) % subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uint((subgroup_local_id + 1)), 0u ^ (_GLF_IDENTITY(uint((subgroup_local_id + 1)), (uint((subgroup_local_id + 1))) ^ 0u))))) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)))))) << 0u)) >> 0u), (subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2((subgroup_local_id + 1), 1u), uvec2(uvec4(uvec2((subgroup_local_id + 1), 1u), 1u, 1u))))) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * (1u & 1u)), subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY(1u, (1u) + 0u) * ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) << 0u), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), (_GLF_IDENTITY(162983u, min(162983u, 162983u)) & 0u), 1u)), ~ (~ (uint(uvec3((subgroup_local_id + 1), (_GLF_IDENTITY(162983u & 0u, (162983u & 0u) | (162983u & 0u))), 1u)))))) % subgroup_size))) | 0u)), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), clamp((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), 1u * ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)))) | 0u, (((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)))) | 0u) | (((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)))) | 0u))) << 0u), (subgroup_local_id + 1) % subgroup_size))), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1))))) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) << 0u), (subgroup_local_id + 1) % subgroup_size))), uint(uvec4((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), min(subgroup_size, subgroup_size)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), clamp((_GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id : _GLF_FUZZED(max(subgroup_base, usubBorrow(workgroup_id, subgroup_size, workgroup_size))))) + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1))) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) << 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1, (false ? _GLF_FUZZED(uvec2(152206u, 11120u).y) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) ^ 0u))), subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) << 0u))), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) + 1) % subgroup_size))), 0u, 0u, 0u))), (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1))) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, _GLF_IDENTITY(0, 1 * (0))), ~ (~ (ivec4(1, int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)), 0, 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ~ (~ (ivec4(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y)), 0, 0))))))) + 0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ~ (~ (ivec4(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y)), 0, 0))))))) + 0, max((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ~ (~ (ivec4(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y)), 0, 0))))))) + 0, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ~ (~ (ivec4(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y)), 0, 0))))))) + 0)) : _GLF_FUZZED(-96078))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))) << 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(64, 64)), 2);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if((subgroup_local_id % _GLF_IDENTITY(2, (2) + (0 | 0))) == _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), _GLF_IDENTITY(max((0), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)), ~ (~ ((_GLF_IDENTITY(0, (0) - 0)))))) / 1)), (_GLF_IDENTITY(max((0), (0)), (max((0), (0))) << 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), min(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0))))) << 0)) | (_GLF_IDENTITY(0, max(0, 0)))), 0))) / 1)) * 1))), 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) / 1), 0), max(min(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) / 1), 0), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? 0 : _GLF_FUZZED(45858))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, _GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), 0 ^ (min(0, _GLF_IDENTITY(0, (0) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) + _GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))), 0)))))))))) / 1), 0), (min(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))) / _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 1, 0)), (true ? int(ivec4(1, 0, 1, 0)) : _GLF_FUZZED(-45339)))), 0 ^ (1))))), 0)) / 1))))) | 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(false);
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (_GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true))))) && true)), false))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))) | (1))) | (1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), 0 ^ (1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))) || _GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false, true)))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (_GLF_IDENTITY(0, 1 * (0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.4) : injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), injectionSwitch)).y, mix(float(_GLF_FUZZED(5199.2605)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))))), false, false))), true, false, true)))))))) / 1.0))))) || (false))));
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && (injectionSwitch.x > injectionSwitch.y))))), true), false)))))))), true, false))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), true, false)))) && true)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0)))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-72015) : int(4))))), max((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-72015) : int(4))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-72015) : int(4)))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), false || ((! (true))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.54)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(24.60)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true)))), max(mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.54)), bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)))))), float(_GLF_FUZZED(24.60)), bool(_GLF_IDENTITY(false, (false) || false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.54)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(24.60)), bool(_GLF_IDENTITY(false, (false) || false)))))) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(632.556)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, bool(bool((injectionSwitch.x < injectionSwitch.y) && true))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, abs(1.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, ! (! ((injectionSwitch.x < injectionSwitch.y) && true))), false, true))), bool(bool((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y) && true))))), true, true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, bool(bool((injectionSwitch.x < injectionSwitch.y) && true))))), true, true)))))))))))))))
          {
           do
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) + 0), 1))), 4, 64, 4);
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true)))), ! (! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), _GLF_IDENTITY(true, ! (! (true))), true))))))))))))))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false)))))) && true)))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) / 1)) | (int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (false))))))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))), false || (! (false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (false))))))))))))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true)), bvec3(bvec3(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true && (bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))) && (false))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(1, int(ivec2(1, 1))) & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != (0 | 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, 0 | (4)), 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-65643 & 0)); _injected_loop_counter --)
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, 0 | (_GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0))))), max(1, 1)) | 0)); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), ~ (_GLF_IDENTITY(~ ((_injected_loop_counter ++)), 0 + (~ ((_injected_loop_counter ++)))))) ^ 0))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), clamp((_injected_loop_counter) | (_injected_loop_counter), _GLF_IDENTITY((_injected_loop_counter), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0), clamp(ivec2(_GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY(true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter), int(int(true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter)))))), 0), ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0), ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0))))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(90183) : _GLF_IDENTITY(0, (0) >> 0)))), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0), (false ? _GLF_FUZZED(ivec2(-10776, 78423)) : ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0))), ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0), ivec2(_GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), 0)))))))) / 1)) | (_injected_loop_counter), _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) - 0)) + 0) | (_injected_loop_counter)))) > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))) != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))))) || false)))))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 + (_GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (true ? (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch)))).x))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(vec2((0.0), determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) / 1.0), _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)))))))); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(97749) : int(_GLF_IDENTITY(0, (0) | (0))))))) >> _GLF_IDENTITY(int(0), int(0))) & _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))), ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))))), 0 ^ (~ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), 0 | (int(2)))))))))))); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), true && ((true))))) && true) && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) << (0 >> _GLF_IDENTITY(int(6), int(6)))) != 0); _injected_loop_counter --)
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2(false, false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(true && (bool(bvec2(false, false))), (true && (bool(bvec2(false, false)))) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), bool(bool(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), false, false)))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false)), false, true))), true && (bool(bvec2(false, false))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec3(bvec4(bvec3(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))), (_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), true))))))), false, false)))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))), false), false))))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(true && (bool(bvec2(false, false))), true && (true && (bool(bvec2(false, false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && _GLF_IDENTITY((bool(bvec2(false, false))), ! (_GLF_IDENTITY(! ((bool(bvec2(false, false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((bool(bvec2(false, false))))), true && (bool(! ((bool(bvec2(false, false)))))))), false || (bool(_GLF_IDENTITY(bool(! ((bool(bvec2(false, false))))), true && (bool(! ((bool(bvec2(false, false)))))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3975.1616), _GLF_FUZZED(18.60)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))), false, false))))))))), false)))))), bvec2(bvec2(bvec2((_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ((_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false), (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false))) || false)) && true)) && true)), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, false || (false)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false))) && true)))))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 do
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       return;
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(43.41)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(43.41)), bool(false)))) + log(1.0)))) > injectionSwitch.y))));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true))))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(87687) : int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupBarrier();
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || false)));
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false)), bvec2(bvec3(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false)), true))))))); _injected_loop_counter ++)
  {
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid)), (_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) / 1u))), ((0u & 136583u) ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), (_GLF_IDENTITY(max(1u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), 1u))), (true ? max(_GLF_IDENTITY(1u, 0u | (1u)), 1u) : _GLF_FUZZED(next_virtual_gid)))) - 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))], read, 4, 64, _GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, ~ (~ (4))), 1))));
  }
}
