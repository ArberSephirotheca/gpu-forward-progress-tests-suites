#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(vec3(8.0, -108.266, -22.47))))), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (0 >> _GLF_IDENTITY(int(8), int(8))) >> 0)) & -15942); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)) * _GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)))))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(true, (true) && true) ? 0u : _GLF_FUZZED(num_workgroup))) >> _GLF_IDENTITY(uint(3u), uint(3u))) + (subgroup_id * subgroup_size)), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(true, (true) && true) ? 0u : _GLF_FUZZED(num_workgroup))) >> _GLF_IDENTITY(uint(3u), uint(3u))) + (subgroup_id * subgroup_size))) | 0u) + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      break;
     return;
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
            {
             for(int _injected_loop_counter = ((0 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) << 0) != _GLF_IDENTITY(1, 0 ^ (1))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true))))))))
              continue;
             continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
  }
 else
  {
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), max(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 0u))))))), (uint(1)) | 0u)), (true ? _GLF_IDENTITY(uint(uint(1)), (uint(uint(1))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), _GLF_IDENTITY((uint(1)), min((uint(1)), (uint(1)))) | 0u)), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(uint(uint(1)), (uint(uint(1))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id)))), max(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), (uint(1)) | 0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(1)), (_GLF_IDENTITY(uint(uint(1)), uint(uvec2(uint(uint(1)), 0u)))) | 0u), _GLF_IDENTITY((uint(uint(1))) | (uint(uint(1))), ((uint(uint(1))) | (uint(uint(1)))) >> 0u)) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), (uint(1)) | 0u)), (true ? _GLF_IDENTITY(uint(uint(1)), (uint(uint(1))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u)) - 0u, clamp((uint(1)) - 0u, (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1)))) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1)))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id)))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u))), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u))), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u))), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)) : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u))))) / 1u)) - 0u)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1))), _GLF_IDENTITY((uint(1)), ((uint(1))) << (1u ^ 1u)) | (uint(1)))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) - 0u, clamp((uint(1)) - 0u, (uint(1)) - 0u, (uint(1)) - 0u))), (uint(1)) | 0u)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), 0u ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), max(true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id), true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (1) >> 0))))), (uint(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53433)))))))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))), 1u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))) ^ 0u))))))), 0u | (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), (uint(1)) | 0u)), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true)), false || (! (_GLF_IDENTITY(true, (true) && true)))))) ? _GLF_IDENTITY(uint(uint(1)), (uint(uint(1))) | (uint(uint(1)))) : _GLF_FUZZED(subgroup_local_id))))))))), uint(1))), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x < injectionSwitch.y))), (bool(! ((injectionSwitch.x < injectionSwitch.y)))) || false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))), true)), (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) || false)), ! (! (true && (_GLF_IDENTITY(false, (false) || false)))))), true))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), false))), (true) || false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) || false))), true), true)))), (bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), true))) || false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.4) : injectionSwitch.x)) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))) < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              return;
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_local_id)))) + 1 < subgroup_size)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true)), bool(bool(bool(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true))))))))), (false) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) * vec2(1.0, 1.0))).y))));
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), max(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), (ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) * 1)) - 0))))), (1 & 1))) | ivec3(0, 0, 0)))), (ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), int(0))), (1 & 1))) - ivec3(0, 0, 0))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), int(ivec4(4, 0, (0 << _GLF_IDENTITY(int(0), int(0))), 1)))) - 0), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec2(int(0), 1))), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, 0))), min(int(0), int(0)))))) >> 0), _GLF_IDENTITY((1 & 1), ((1 & 1)) | ((1 & 1)))), ivec3(ivec4(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))), ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) >> 0), _GLF_IDENTITY((1 & 1), ((_GLF_IDENTITY(1 & 1, (false ? _GLF_FUZZED(48048) : 1 & 1)))) | (_GLF_IDENTITY((1 & _GLF_IDENTITY(1, (1) | (1))), ((1 & _GLF_IDENTITY(1, (1) | (1)))) | ((1 & _GLF_IDENTITY(1, (1) | (1)))))))), ~ (~ (ivec3(_GLF_IDENTITY(4, (4) - 0), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) >> 0), _GLF_IDENTITY((1 & 1), ((1 & 1)) | ((1 & 1))))))), (1 | 0)))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), max((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))))), (1 & 1)), (ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1))) | ivec3(0, 0, 0)))), (ivec3(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (0 >> _GLF_IDENTITY(int(0), int(0))) >> 0)), (1 & 1))) - ivec3(0, 0, 0)))) | _GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), max(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), (ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1))) | ivec3(0, 0, 0)))), (false ? _GLF_FUZZED(ivec3(-75047, 71898, -28240)) : _GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 1 * (1))))) / 1) & 1)), max(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), max(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0))))), _GLF_IDENTITY(int(0), min(int(0), int(0))))))))), (1 & 1)), (ivec3(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0)))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (_GLF_IDENTITY(1 & 1, (false ? _GLF_FUZZED(53327) : 1 & 1))))) | ivec3(_GLF_IDENTITY(0, (0) + 0), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(44221))))))))), (ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0 ^ (_GLF_IDENTITY(1 & 1, (1 & 1) / 1))) * (0))), _GLF_IDENTITY(clamp(int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (clamp(int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))))))))), (1 & 1))) - ivec3(0, 0, 0)))), ((int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), max(ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), min(int(0), int(0))))), (1 & 1)), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)), max(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), (int(0)) / 1), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1)), (ivec3(_GLF_IDENTITY(4, (4) - 0), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (1 & 1))) | ivec3(0, 0, 0)))), (ivec3(_GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, ((4) - 0) >> 0)), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), clamp(int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (0))), int(_GLF_IDENTITY(0, (0 ^ (1 & 1)) * (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, 0 ^ (0)), 0)), 1, 1, 1), (ivec4(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, 0 ^ (0)), 0)), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))))))))))), (1 & 1))) - ivec3(0, 0, 0))))) ^ 0)))) + 0), 64, 4);
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
           for(int _injected_loop_counter = (0 & 47179); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
            {
             subgroupAll(false);
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                return;
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1 * (_injected_loop_counter), max(_GLF_IDENTITY(1 * (_injected_loop_counter), min(_GLF_IDENTITY(1 * (_injected_loop_counter), int(_GLF_IDENTITY(ivec4(1 * (_injected_loop_counter), 0, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(1 * (_injected_loop_counter), 0, 1, 1))))), 1 * (_injected_loop_counter))), 1 * (_injected_loop_counter)))) != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                }
               return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                return;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / vec2(1.0, 1.0)))).y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), determinant(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), max(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), float(mat3x4(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0))))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat4x2(_GLF_IDENTITY((0.0), mix(float((0.0)), float(_GLF_FUZZED(-0.0)), bool(false))), 0.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 1.0))) / sqrt(1.0)), 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), mix(float(_GLF_FUZZED(-279.336)), float(length(normalize(vec2(1.0, 1.0)))), bool(true)))), 1.0, 1.0, 0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (true ? vec3(0.0, 1.0, 0.0) : _GLF_FUZZED(vec3(8.9, -626.425, -0.3)))), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), clamp(max(1.0, 1.0), max(1.0, 1.0), max(1.0, 1.0)))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), determinant(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7384.4518))), 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) * mat3(1.0)), vec3(0.0, 1.0, 0.0))), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)), 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), max(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (true ? length(normalize(vec2(1.0, 1.0))) : _GLF_FUZZED(-4248.2949))), length(normalize(vec2(1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, determinant(mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 1.0, log(1.0), 0.0, 0.0))), 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(36.17))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0))))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), determinant(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), clamp(float(1.0), float(1.0), float(1.0)))) - 0.0), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), float(mat2(round(length(normalize(vec2(1.0, 1.0)))), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0))))), 1.0, 1.0, 0.0, 1.0, determinant(mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(7357.2379))), _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 1.0, log(1.0), 0.0, 0.0))), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0)))))) / 1.0))))))))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & -38917) | (0 & 223))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = (0 ^ (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)), (true ? int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)) : _GLF_FUZZED(42514))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(4, min(4, 4)), 64, 4);
              }
            }
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))));
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(false)))) || false)))
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                       continue;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))) ^ _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))) >> _GLF_IDENTITY(int(1), int(1))), 1)))) ^ _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0))))))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             return;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), false)), (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true, false))) || false), (bool(bvec3(_GLF_DEAD(false), true, false))) && true))) || _GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
                              break;
                             return;
                            }
                           break;
                          }
                         subgroupAll(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false));
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))
                  return;
                 continue;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))) || false)))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))), true)))))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(23.21)), vec2(_GLF_FUZZED(800.389), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) / vec2(1.0, 1.0)))[0], float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], injectionSwitch[1]))[0], abs(1.0), 0.0, 0.0, tan(0.0), 1.0, 0.0, exp(0.0)))), injectionSwitch[1])).y))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), bool(bvec3(! (! (true)), false, false)))) ? int(2) : _GLF_FUZZED((-12196 - _GLF_IDENTITY(min(34025, -1544), (_GLF_IDENTITY(min(34025, -1544), clamp(min(34025, -1544), _GLF_IDENTITY(min(34025, -1544), 0 ^ (min(34025, -1544))), min(34025, -1544)))) >> 0))))), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(int(7), int(7)))) ^ (0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(49687) : 0)) | (int(2)), (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false))) ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (int(2)), (0 | (int(2))) | (0 | (int(2)))), (_GLF_IDENTITY(0 | (int(2)), (0 | (_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), 0 ^ (_GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))) | (0 | (int(2))))) * 1) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-96630, (false ? _GLF_FUZZED(-56330) : -96630)), (_GLF_IDENTITY(-96630, (false ? _GLF_FUZZED(-56330) : -96630))) - ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false))))))), (false || (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((! (false))), bool(bvec4(((! (false))), false, _GLF_IDENTITY(true, (true) && true), false))), bool(bvec4(! ((! (false))), false, true, true)))))), false))))) && true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  return;
}
