#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size;
 uvec4 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_size;
 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.xy = GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_4_1_1_11readsubgroup_id;
 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.zw = GLF_merged2_0_1_4_1_1_11readsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.zw.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z = workgroup_size;
 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.xy.y = GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y = workgroup_id;
 uint workgroup_base = GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.xy.y * GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y;
 uint subgroup_base = GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.zw.y * GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x;
 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.xy.x = subgroup_base;
 uint virtual_gid = workgroup_base + GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.xy.x + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.xy.x + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.zw.x = read;
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[virtual_gid], GLF_merged2_0_2_52_2_2_39GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readsubgroup_id.zw.x, 4, 64, 4);
}
