#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_181 {
 mat4x2 _f0;
 uvec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_180 {
 mat3x2 _f0;
 ivec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_179 {
 vec4 _f0;
 ivec2 _f1;
 mat4 _f2;
 ivec3 _f3;
 bvec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_178 {
 vec4 _f0;
 bvec4 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 mat3 _f4;
 uvec4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_177 {
 mat3 _f0;
 uint _f1;
} ;

struct _GLF_struct_182 {
 _GLF_struct_177 _f0;
 _GLF_struct_178 _f1;
 _GLF_struct_179 _f2;
 mat4x3 _f3;
 _GLF_struct_180 _f4;
 mat3x2 _f5;
 _GLF_struct_181 _f6;
} ;

struct _GLF_struct_176 {
 mat4x2 _f0;
 int _f1;
} ;

struct _GLF_struct_174 {
 vec2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_173 {
 mat3x2 _f0;
 mat3x4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_175 {
 mat3x2 _f0;
 vec2 _f1;
 _GLF_struct_173 _f2;
 _GLF_struct_174 _f3;
} ;

struct _GLF_struct_172 {
 mat4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_170 {
 uvec3 _f0;
} ;

struct _GLF_struct_169 {
 uint _f0;
 uint _f1;
 mat4x2 _f2;
 bvec4 _f3;
 ivec2 _f4;
 bvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_168 {
 bvec2 _f0;
 uvec2 _f1;
 mat4 _f2;
 uvec3 _f3;
 vec2 _f4;
 int _f5;
} ;

struct _GLF_struct_167 {
 vec2 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_166 {
 bvec4 _f0;
 uvec2 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_171 {
 _GLF_struct_166 _f0;
 _GLF_struct_167 _f1;
 _GLF_struct_168 _f2;
 vec3 _f3;
 _GLF_struct_169 _f4;
 _GLF_struct_170 _f5;
} ;

struct _GLF_struct_183 {
 _GLF_struct_171 _f0;
 int _injected_loop_counter;
 _GLF_struct_172 _f1;
 _GLF_struct_175 _f2;
 _GLF_struct_176 _f3;
 _GLF_struct_182 _f4;
} ;

struct _GLF_struct_165 {
 vec4 _f0;
 vec3 _f1;
 mat2x4 _f2;
 uint next_virtual_gid;
 int _f3;
} ;

struct _GLF_struct_162 {
 uint _f0;
 mat3x4 _f1;
 mat4 _f2;
 mat2 _f3;
 bvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_161 {
 vec3 _f0;
 vec4 _f1;
 vec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_160 {
 vec2 _f0;
 mat3 _f1;
 mat2 _f2;
 mat2x3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_159 {
 float _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_163 {
 bvec3 _f0;
 _GLF_struct_159 _f1;
 _GLF_struct_160 _f2;
 _GLF_struct_161 _f3;
 _GLF_struct_162 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_158 {
 uvec4 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 mat2x3 _f3;
 vec2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_156 {
 vec3 _f0;
 bool _f1;
 int _f2;
} ;

struct _GLF_struct_155 {
 mat4 _f0;
 mat4x3 _f1;
 bool _f2;
 mat2x4 _f3;
 bool _f4;
} ;

struct _GLF_struct_157 {
 _GLF_struct_155 _f0;
 mat3 _f1;
 _GLF_struct_156 _f2;
 mat4 _f3;
 bool _f4;
} ;

struct _GLF_struct_153 {
 mat3x2 _f0;
 uint _f1;
 uvec3 _f2;
 mat3x4 _f3;
 vec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_154 {
 mat2 _f0;
 _GLF_struct_153 _f1;
} ;

struct _GLF_struct_164 {
 _GLF_struct_154 _f0;
 uvec4 _f1;
 bvec2 _f2;
 bvec2 _f3;
 _GLF_struct_157 _f4;
 int _injected_loop_counter;
 _GLF_struct_158 _f5;
 _GLF_struct_163 _f6;
} ;

struct _GLF_struct_150 {
 uvec4 _f0;
 int _f1;
 vec4 _f2;
 mat4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_151 {
 _GLF_struct_150 _f0;
} ;

struct _GLF_struct_148 {
 bvec3 _f0;
 mat4 _f1;
 bvec2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_147 {
 bvec3 _f0;
 vec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_146 {
 vec2 _f0;
 mat2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_145 {
 ivec2 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_149 {
 _GLF_struct_145 _f0;
 _GLF_struct_146 _f1;
 vec2 _f2;
 _GLF_struct_147 _f3;
 _GLF_struct_148 _f4;
 mat4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_143 {
 mat4x2 _f0;
 uint _f1;
} ;

struct _GLF_struct_144 {
 int _f0;
 _GLF_struct_143 _f1;
 uvec2 _f2;
 float _f3;
} ;

struct _GLF_struct_141 {
 mat3 _f0;
 int _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_140 {
 vec2 _f0;
 mat3x4 _f1;
 mat2x3 _f2;
 mat3 _f3;
 mat3x2 _f4;
 uint _f5;
} ;

struct _GLF_struct_142 {
 bvec2 _f0;
 mat2 _f1;
 uint _f2;
 bvec3 _f3;
 _GLF_struct_140 _f4;
 vec2 _f5;
 _GLF_struct_141 _f6;
} ;

struct _GLF_struct_138 {
 uvec2 _f0;
 int _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_137 {
 bvec4 _f0;
 bvec4 _f1;
 ivec2 _f2;
 mat4x3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_139 {
 vec2 _f0;
 _GLF_struct_137 _f1;
 _GLF_struct_138 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_152 {
 _GLF_struct_139 _f0;
 mat3x2 _f1;
 _GLF_struct_142 _f2;
 int _injected_loop_counter;
 _GLF_struct_144 _f3;
 _GLF_struct_149 _f4;
 _GLF_struct_151 _f5;
} ;

struct _GLF_struct_134 {
 vec4 _f0;
 float _f1;
 mat3 _f2;
} ;

struct _GLF_struct_133 {
 float _f0;
 uvec2 _f1;
 vec4 _f2;
 mat4 _f3;
 uint _f4;
 bvec3 _f5;
 bool _f6;
} ;

struct _GLF_struct_135 {
 _GLF_struct_133 _f0;
 mat2x3 _f1;
 _GLF_struct_134 _f2;
} ;

struct _GLF_struct_131 {
 mat4 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 bvec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_130 {
 mat2 _f0;
} ;

struct _GLF_struct_129 {
 ivec4 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 uvec3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_132 {
 _GLF_struct_129 _f0;
 _GLF_struct_130 _f1;
 vec4 _f2;
 _GLF_struct_131 _f3;
} ;

struct _GLF_struct_127 {
 bvec4 _f0;
 mat3x2 _f1;
 int _f2;
} ;

struct _GLF_struct_126 {
 mat2x4 _f0;
 bool _f1;
 mat4x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_128 {
 _GLF_struct_126 _f0;
 _GLF_struct_127 _f1;
} ;

struct _GLF_struct_124 {
 mat3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_123 {
 uvec4 _f0;
 float _f1;
 bvec3 _f2;
 vec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_122 {
 mat4x2 _f0;
 vec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_125 {
 int _f0;
 _GLF_struct_122 _f1;
 bvec4 _f2;
 _GLF_struct_123 _f3;
 _GLF_struct_124 _f4;
} ;

struct _GLF_struct_136 {
 mat2x3 _f0;
 _GLF_struct_125 _f1;
 _GLF_struct_128 _f2;
 _GLF_struct_132 _f3;
 _GLF_struct_135 _f4;
 ivec2 _f5;
 uint workgroup_base;
} ;

struct _GLF_struct_119 {
 mat4x2 _f0;
} ;

struct _GLF_struct_118 {
 uint _f0;
 uvec3 _f1;
 uvec3 _f2;
 ivec2 _f3;
 bvec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_120 {
 _GLF_struct_118 _f0;
 mat3x2 _f1;
 _GLF_struct_119 _f2;
} ;

struct _GLF_struct_117 {
 mat3 _f0;
} ;

struct _GLF_struct_115 {
 int _injected_loop_counter;
 bool _f0;
 mat2x3 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 bvec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_116 {
 bvec3 _f0;
 _GLF_struct_115 _f1;
} ;

struct _GLF_struct_121 {
 bool _f0;
 uvec4 _f1;
 _GLF_struct_116 _f2;
 _GLF_struct_117 _f3;
 _GLF_struct_120 _f4;
} ;

struct _GLF_struct_112 {
 uvec2 _f0;
 mat4x2 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_111 {
 uvec4 _f0;
 bvec2 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_110 {
 ivec4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_113 {
 _GLF_struct_110 _f0;
 mat4x3 _f1;
 mat2x3 _f2;
 _GLF_struct_111 _f3;
 vec3 _f4;
 _GLF_struct_112 _f5;
} ;

struct _GLF_struct_108 {
 mat2x4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_107 {
 uvec4 _f0;
 int _f1;
 bool _f2;
 mat3x2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_106 {
 mat4x2 _f0;
 bvec3 _f1;
 vec4 _f2;
 ivec4 _f3;
 mat4x2 _f4;
 mat2x3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_109 {
 _GLF_struct_106 _f0;
 uint _f1;
 mat2 _f2;
 uvec2 _f3;
 bool _f4;
 _GLF_struct_107 _f5;
 _GLF_struct_108 _f6;
} ;

struct _GLF_struct_104 {
 ivec4 _f0;
 bvec3 _f1;
 mat2 _f2;
 uvec3 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_105 {
 _GLF_struct_104 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_114 {
 _GLF_struct_105 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 _GLF_struct_109 _f3;
 uint num_workgroup;
 mat4x2 _f4;
 mat2x4 _f5;
 _GLF_struct_113 _f6;
} ;

struct _GLF_struct_101 {
 vec2 _f0;
 float _f1;
} ;

struct _GLF_struct_100 {
 mat4x3 _f0;
 mat4 _f1;
 bool _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_99 {
 vec4 _f0;
 uvec2 _f1;
 ivec3 _f2;
 mat4 _f3;
 bool _f4;
 mat3x4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_98 {
 mat3x2 _f0;
 mat2 _f1;
 vec3 _f2;
 bvec2 _f3;
 int _f4;
 mat3x4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_97 {
 mat4x2 _f0;
} ;

struct _GLF_struct_102 {
 _GLF_struct_97 _f0;
 bvec2 _f1;
 _GLF_struct_98 _f2;
 _GLF_struct_99 _f3;
 _GLF_struct_100 _f4;
 _GLF_struct_101 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_95 {
 uvec4 _f0;
 uvec4 _f1;
 uint _f2;
 uvec3 _f3;
 int _f4;
} ;

struct _GLF_struct_96 {
 uvec3 _f0;
 int _injected_loop_counter;
 _GLF_struct_95 _f1;
 float _f2;
} ;

struct _GLF_struct_103 {
 uvec2 _f0;
 mat3 _f1;
 _GLF_struct_96 _f2;
 _GLF_struct_102 _f3;
 bvec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_92 {
 mat4x2 _f0;
 ivec4 _f1;
 mat2 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_91 {
 ivec3 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_90 {
 uvec3 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 vec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_89 {
 mat4x2 _f0;
 bool _f1;
 ivec2 _f2;
 bool _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_88 {
 mat2x4 _f0;
 ivec2 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_93 {
 mat2 _f0;
 _GLF_struct_88 _f1;
 vec4 _f2;
 _GLF_struct_89 _f3;
 _GLF_struct_90 _f4;
 _GLF_struct_91 _f5;
 _GLF_struct_92 _f6;
} ;

struct _GLF_struct_86 {
 mat2x4 _f0;
 bool _f1;
 uvec3 _f2;
 mat3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_85 {
 mat4 _f0;
} ;

struct _GLF_struct_87 {
 _GLF_struct_85 _f0;
 mat3 _f1;
 int _f2;
 vec4 _f3;
 _GLF_struct_86 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_83 {
 vec4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_84 {
 _GLF_struct_83 _f0;
} ;

struct _GLF_struct_81 {
 mat2 _f0;
 int _injected_loop_counter;
 mat3x2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_80 {
 bool _f0;
 uvec4 _f1;
 uvec3 _f2;
 float _f3;
 mat3x2 _f4;
 float _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_82 {
 mat3x4 _f0;
 _GLF_struct_80 _f1;
 _GLF_struct_81 _f2;
} ;

struct _GLF_struct_94 {
 _GLF_struct_82 _f0;
 bool _f1;
 _GLF_struct_84 _f2;
 ivec3 _f3;
 _GLF_struct_87 _f4;
 bvec2 _f5;
 _GLF_struct_93 _f6;
} ;

struct _GLF_struct_78 {
 uvec3 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_79 {
 _GLF_struct_78 _f0;
} ;

struct _GLF_struct_75 {
 uvec4 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 ivec4 _f3;
 uvec4 _f4;
 mat2x3 _f5;
 float _f6;
} ;

struct _GLF_struct_74 {
 mat3x4 _f0;
 mat2x3 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 vec2 _f4;
 bvec4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_76 {
 mat4x2 _f0;
 _GLF_struct_74 _f1;
 _GLF_struct_75 _f2;
} ;

struct _GLF_struct_72 {
 bvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_71 {
 vec4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_70 {
 uint _f0;
 bvec4 _f1;
 mat3x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_69 {
 ivec2 _f0;
 mat4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_73 {
 _GLF_struct_69 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 _GLF_struct_70 _f3;
 _GLF_struct_71 _f4;
 mat3x2 _f5;
 _GLF_struct_72 _f6;
} ;

struct _GLF_struct_68 {
 ivec2 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_77 {
 uint _f0;
 _GLF_struct_68 _f1;
 _GLF_struct_73 _f2;
 _GLF_struct_76 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_65 {
 uvec4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_64 {
 bool _f0;
} ;

struct _GLF_struct_66 {
 _GLF_struct_64 _f0;
 _GLF_struct_65 _f1;
} ;

struct _GLF_struct_62 {
 uint _f0;
} ;

struct _GLF_struct_63 {
 mat3x4 _f0;
 _GLF_struct_62 _f1;
} ;

struct _GLF_struct_67 {
 int _f0;
 int _injected_loop_counter;
 int _f1;
 _GLF_struct_63 _f2;
 uvec4 _f3;
 _GLF_struct_66 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_59 {
 mat2x3 _f0;
 bvec4 _f1;
 ivec4 _f2;
 mat3x2 _f3;
 mat4x3 _f4;
 mat2 _f5;
 float _f6;
} ;

struct _GLF_struct_58 {
 uvec3 _f0;
 vec2 _f1;
 bvec4 _f2;
 ivec3 _f3;
 ivec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_57 {
 mat3x4 _f0;
 mat2x4 _f1;
 uint _f2;
 uvec2 _f3;
 ivec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_56 {
 vec4 _f0;
} ;

struct _GLF_struct_60 {
 _GLF_struct_56 _f0;
 _GLF_struct_57 _f1;
 _GLF_struct_58 _f2;
 bvec4 _f3;
 _GLF_struct_59 _f4;
} ;

struct _GLF_struct_61 {
 _GLF_struct_60 _f0;
 mat2 _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_53 {
 bvec4 _f0;
 bvec2 _f1;
 mat2 _f2;
 uint _f3;
 mat4 _f4;
 bvec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_52 {
 bvec2 _f0;
 ivec3 _f1;
 mat4 _f2;
 mat3x4 _f3;
 mat4x3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_54 {
 uvec4 _f0;
 _GLF_struct_52 _f1;
 _GLF_struct_53 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_50 {
 mat4x3 _f0;
 mat4 _f1;
 mat3 _f2;
 uvec2 _f3;
 mat4x3 _f4;
 uint subgroup_base;
} ;

struct _GLF_struct_51 {
 uvec4 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 _GLF_struct_50 _f3;
 mat4x3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_55 {
 _GLF_struct_51 _f0;
 _GLF_struct_54 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_48 {
 uint _f0;
 mat4 _f1;
 uint workgroup_id;
 bool _f2;
} ;

struct _GLF_struct_46 {
 ivec4 _f0;
 mat4x2 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 mat3 _f4;
 float _f5;
} ;

struct _GLF_struct_45 {
 int _f0;
 vec4 _f1;
} ;

struct _GLF_struct_47 {
 bvec4 _f0;
 mat4x3 _f1;
 mat4x2 _f2;
 _GLF_struct_45 _f3;
 uvec4 _f4;
 _GLF_struct_46 _f5;
} ;

struct _GLF_struct_43 {
 int _f0;
 uvec4 _f1;
 float _f2;
} ;

struct _GLF_struct_42 {
 ivec4 _f0;
} ;

struct _GLF_struct_41 {
 mat2x4 _f0;
 mat4 _f1;
 mat3x4 _f2;
 bool _f3;
 int _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_44 {
 _GLF_struct_41 _f0;
 _GLF_struct_42 _f1;
 _GLF_struct_43 _f2;
 ivec4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_49 {
 _GLF_struct_44 _f0;
 _GLF_struct_47 _f1;
 float _f2;
 _GLF_struct_48 _f3;
} ;

struct _GLF_struct_38 {
 bvec2 _f0;
 vec4 _f1;
 mat4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_37 {
 uvec2 _f0;
} ;

struct _GLF_struct_39 {
 ivec4 _f0;
 _GLF_struct_37 _f1;
 uvec4 _f2;
 bvec4 _f3;
 _GLF_struct_38 _f4;
 uvec3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_35 {
 bool _f0;
 bvec3 _f1;
 bvec2 _f2;
 mat3x4 _f3;
 mat2x4 _f4;
 uint _f5;
 mat4 _f6;
} ;

struct _GLF_struct_34 {
 mat4x2 _f0;
 mat4x3 _f1;
 bvec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_33 {
 mat4 _f0;
 mat4x3 _f1;
 bvec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_32 {
 mat2x4 _f0;
 float _f1;
 vec2 _f2;
} ;

struct _GLF_struct_31 {
 mat3x4 _f0;
 mat3x2 _f1;
 bool _f2;
} ;

struct _GLF_struct_36 {
 mat3x4 _f0;
 _GLF_struct_31 _f1;
 _GLF_struct_32 _f2;
 _GLF_struct_33 _f3;
 _GLF_struct_34 _f4;
 _GLF_struct_35 _f5;
} ;

struct _GLF_struct_29 {
 mat4 _f0;
 uint _f1;
 vec4 _f2;
 uvec4 _f3;
 int _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_30 {
 _GLF_struct_29 _f0;
} ;

struct _GLF_struct_40 {
 _GLF_struct_30 _f0;
 mat4x3 _f1;
 int _injected_loop_counter;
 _GLF_struct_36 _f2;
 vec3 _f3;
 _GLF_struct_39 _f4;
} ;

struct _GLF_struct_26 {
 ivec2 _f0;
 bvec3 _f1;
 bvec3 _f2;
 uvec2 _f3;
 bvec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_25 {
 bvec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_27 {
 mat2x3 _f0;
 _GLF_struct_25 _f1;
 mat2x4 _f2;
 bool _f3;
 _GLF_struct_26 _f4;
} ;

struct _GLF_struct_28 {
 _GLF_struct_27 _f0;
} ;

struct _GLF_struct_22 {
 mat4 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_21 {
 mat4 _f0;
 ivec4 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 _GLF_struct_22 _f1;
} ;

struct _GLF_struct_19 {
 ivec3 _f0;
} ;

struct _GLF_struct_20 {
 uvec3 _f0;
 vec4 _f1;
 _GLF_struct_19 _f2;
 int _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_17 {
 ivec2 _f0;
 mat4x3 _f1;
 int _f2;
 mat3x2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_16 {
 bool _f0;
 ivec2 _f1;
 ivec2 _f2;
 int _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 ivec3 _f1;
 _GLF_struct_16 _f2;
 uvec3 _f3;
 mat2 _f4;
 _GLF_struct_17 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 mat3x2 _f1;
 bvec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_15 {
 mat3 _f0;
 ivec3 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_12 {
 uvec4 _f0;
} ;

struct _GLF_struct_24 {
 _GLF_struct_12 _f0;
 uint read;
 _GLF_struct_15 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_20 _f3;
 vec4 _f4;
 _GLF_struct_23 _f5;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 ivec4 _f1;
 bvec2 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 int _f1;
 int _f2;
 int _f3;
 mat4x3 _f4;
 int _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 ivec2 _f1;
 bool _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
 mat2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 uvec2 _f1;
 _GLF_struct_4 _f2;
 ivec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_2 {
 bool _f0;
 mat2x3 _f1;
 vec3 _f2;
 ivec3 _f3;
 bvec4 _f4;
 vec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
} ;

struct _GLF_struct_0 {
 float _f0;
 uvec4 _f1;
 mat4 _f2;
 bool _f3;
 vec4 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
 int _f3;
 _GLF_struct_2 _f4;
 mat4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
 uint subgroup_size;
 _GLF_struct_8 _f2;
 _GLF_struct_10 _f3;
 mat4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_3(_GLF_struct_0(1.0, uvec4(1u), mat4(1.0), true, vec4(1.0)), _GLF_struct_1(mat4(1.0)), mat2(1.0), 1, _GLF_struct_2(true, mat2x3(1.0), vec3(1.0), ivec3(1), bvec4(true), vec4(1.0), vec3(1.0)), mat4(1.0), mat3x4(1.0)), _GLF_struct_5(uvec3(1u), uvec2(1u), _GLF_struct_4(mat2x4(1.0)), ivec4(1), vec4(1.0)), gl_SubgroupSize, _GLF_struct_8(mat4x3(1.0), mat2(1.0), _GLF_struct_6(ivec2(1), ivec2(1), true, uvec4(1u)), _GLF_struct_7(uvec2(1u), 1, 1, 1, mat4x3(1.0), 1, bvec2(true))), _GLF_struct_10(uvec2(1u), ivec4(1), bvec2(true), _GLF_struct_9(ivec4(1), bvec4(true))), mat4(1.0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_114 _GLF_struct_replacement_114 = _GLF_struct_114(_GLF_struct_105(_GLF_struct_104(ivec4(1), bvec3(true), mat2(1.0), uvec3(1u), mat3x2(1.0)), mat2(1.0)), mat3x4(1.0), uvec4(1u), _GLF_struct_109(_GLF_struct_106(mat4x2(1.0), bvec3(true), vec4(1.0), ivec4(1), mat4x2(1.0), mat2x3(1.0), ivec3(1)), 1u, mat2(1.0), uvec2(1u), true, _GLF_struct_107(uvec4(1u), 1, true, mat3x2(1.0), vec3(1.0)), _GLF_struct_108(mat2x4(1.0), vec3(1.0))), gl_NumWorkGroups.x, mat4x2(1.0), mat2x4(1.0), _GLF_struct_113(_GLF_struct_110(ivec4(1), bvec3(true)), mat4x3(1.0), mat2x3(1.0), _GLF_struct_111(uvec4(1u), bvec2(true), mat3x4(1.0), bvec4(true), 1u), vec3(1.0), _GLF_struct_112(uvec2(1u), mat4x2(1.0), mat4(1.0))));
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(_GLF_struct_121 _GLF_struct_replacement_121 = _GLF_struct_121(true, uvec4(1u), _GLF_struct_116(bvec3(true), _GLF_struct_115(0, true, mat2x3(1.0), mat4x3(1.0), uvec4(1u), mat2x3(1.0), bvec3(true), mat4(1.0))), _GLF_struct_117(mat3(1.0)), _GLF_struct_120(_GLF_struct_118(1u, uvec3(1u), uvec3(1u), ivec2(1), bvec3(true), mat3x4(1.0)), mat3x2(1.0), _GLF_struct_119(mat4x2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_121._f2._f1._injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_struct_replacement_121._f2._f1._injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             break;
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_49 _GLF_struct_replacement_49 = _GLF_struct_49(_GLF_struct_44(_GLF_struct_41(mat2x4(1.0), mat4(1.0), mat3x4(1.0), true, 1, mat3x4(1.0)), _GLF_struct_42(ivec4(1)), _GLF_struct_43(1, uvec4(1u), 1.0), ivec4(1), bvec3(true)), _GLF_struct_47(bvec4(true), mat4x3(1.0), mat4x2(1.0), _GLF_struct_45(1, vec4(1.0)), uvec4(1u), _GLF_struct_46(ivec4(1), mat4x2(1.0), mat4x3(1.0), uvec4(1u), mat3(1.0), 1.0)), 1.0, _GLF_struct_48(1u, mat4(1.0), gl_WorkGroupID.x, true));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         return;
        }
       else
        {
        }
      }
     return;
    }
  }
 _GLF_struct_136 _GLF_struct_replacement_136 = _GLF_struct_136(mat2x3(1.0), _GLF_struct_125(1, _GLF_struct_122(mat4x2(1.0), vec3(1.0), mat4x3(1.0)), bvec4(true), _GLF_struct_123(uvec4(1u), 1.0, bvec3(true), vec3(1.0), vec2(1.0)), _GLF_struct_124(mat3(1.0), mat3(1.0))), _GLF_struct_128(_GLF_struct_126(mat2x4(1.0), true, mat4x3(1.0), mat2x3(1.0)), _GLF_struct_127(bvec4(true), mat3x2(1.0), 1)), _GLF_struct_132(_GLF_struct_129(ivec4(1), mat4x2(1.0), mat2x3(1.0), uvec3(1u), ivec2(1)), _GLF_struct_130(mat2(1.0)), vec4(1.0), _GLF_struct_131(mat4(1.0), uvec4(1u), mat3x2(1.0), bvec2(true), mat4(1.0))), _GLF_struct_135(_GLF_struct_133(1.0, uvec2(1u), vec4(1.0), mat4(1.0), 1u, bvec3(true), true), mat2x3(1.0), _GLF_struct_134(vec4(1.0), 1.0, mat3(1.0))), ivec2(1), workgroup_size * _GLF_struct_replacement_49._f3.workgroup_id);
 for(_GLF_struct_164 _GLF_struct_replacement_164 = _GLF_struct_164(_GLF_struct_154(mat2(1.0), _GLF_struct_153(mat3x2(1.0), 1u, uvec3(1u), mat3x4(1.0), vec4(1.0), uvec4(1u))), uvec4(1u), bvec2(true), bvec2(true), _GLF_struct_157(_GLF_struct_155(mat4(1.0), mat4x3(1.0), true, mat2x4(1.0), true), mat3(1.0), _GLF_struct_156(vec3(1.0), true, 1), mat4(1.0), true), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_158(uvec4(1u), mat2x3(1.0), uvec3(1u), mat2x3(1.0), vec2(1.0), uvec2(1u)), _GLF_struct_163(bvec3(true), _GLF_struct_159(1.0, mat3x4(1.0), mat2x4(1.0), bvec2(true)), _GLF_struct_160(vec2(1.0), mat3(1.0), mat2(1.0), mat2x3(1.0), uvec3(1u)), _GLF_struct_161(vec3(1.0), vec4(1.0), vec2(1.0), vec4(1.0)), _GLF_struct_162(1u, mat3x4(1.0), mat4(1.0), mat2(1.0), bvec3(true), bvec3(true)), mat4x3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_164._injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_164._injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | _GLF_IDENTITY(0, (0) * 1))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 _GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(_GLF_struct_51(uvec4(1u), mat4x2(1.0), mat3x2(1.0), _GLF_struct_50(mat4x3(1.0), mat4(1.0), mat3(1.0), uvec2(1u), mat4x3(1.0), subgroup_id * _GLF_struct_replacement_11.subgroup_size), mat4x3(1.0), mat3x2(1.0)), _GLF_struct_54(uvec4(1u), _GLF_struct_52(bvec2(true), ivec3(1), mat4(1.0), mat3x4(1.0), mat4x3(1.0), vec3(1.0)), _GLF_struct_53(bvec4(true), bvec2(true), mat2(1.0), 1u, mat4(1.0), bvec3(true), mat3(1.0)), mat3x2(1.0)), mat3(1.0));
 for(_GLF_struct_152 _GLF_struct_replacement_152 = _GLF_struct_152(_GLF_struct_139(vec2(1.0), _GLF_struct_137(bvec4(true), bvec4(true), ivec2(1), mat4x3(1.0), mat2(1.0)), _GLF_struct_138(uvec2(1u), 1, mat2x4(1.0)), mat2(1.0)), mat3x2(1.0), _GLF_struct_142(bvec2(true), mat2(1.0), 1u, bvec3(true), _GLF_struct_140(vec2(1.0), mat3x4(1.0), mat2x3(1.0), mat3(1.0), mat3x2(1.0), 1u), vec2(1.0), _GLF_struct_141(mat3(1.0), 1, ivec2(1))), (0 ^ 0), _GLF_struct_144(1, _GLF_struct_143(mat4x2(1.0), 1u), uvec2(1u), 1.0), _GLF_struct_149(_GLF_struct_145(ivec2(1), mat4x3(1.0)), _GLF_struct_146(vec2(1.0), mat2(1.0), bvec4(true)), vec2(1.0), _GLF_struct_147(bvec3(true), vec3(1.0), bvec3(true)), _GLF_struct_148(bvec3(true), mat4(1.0), bvec2(true), bvec3(true)), mat4(1.0), mat4x3(1.0)), _GLF_struct_151(_GLF_struct_150(uvec4(1u), 1, vec4(1.0), mat4(1.0), mat4x3(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_152._injected_loop_counter < 1); _GLF_struct_replacement_152._injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(_GLF_struct_103 _GLF_struct_replacement_103 = _GLF_struct_103(uvec2(1u), mat3(1.0), _GLF_struct_96(uvec3(1u), 1, _GLF_struct_95(uvec4(1u), uvec4(1u), 1u, uvec3(1u), 1), 1.0), _GLF_struct_102(_GLF_struct_97(mat4x2(1.0)), bvec2(true), _GLF_struct_98(mat3x2(1.0), mat2(1.0), vec3(1.0), bvec2(true), 1, mat3x4(1.0), uvec3(1u)), _GLF_struct_99(vec4(1.0), uvec2(1u), ivec3(1), mat4(1.0), true, mat3x4(1.0), mat3x4(1.0)), _GLF_struct_100(mat4x3(1.0), mat4(1.0), true, uvec2(1u)), _GLF_struct_101(vec2(1.0), 1.0), uvec4(1u)), bvec4(true), ivec2(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_103._f2._injected_loop_counter != 0); _GLF_struct_replacement_103._f2._injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_61 _GLF_struct_replacement_61 = _GLF_struct_61(_GLF_struct_60(_GLF_struct_56(vec4(1.0)), _GLF_struct_57(mat3x4(1.0), mat2x4(1.0), 1u, uvec2(1u), ivec2(1), uvec3(1u)), _GLF_struct_58(uvec3(1u), vec2(1.0), bvec4(true), ivec3(1), ivec3(1), mat3x4(1.0)), bvec4(true), _GLF_struct_59(mat2x3(1.0), bvec4(true), ivec4(1), mat3x2(1.0), mat4x3(1.0), mat2(1.0), 1.0)), mat2(1.0), _GLF_struct_replacement_136.workgroup_base + _GLF_struct_replacement_55._f0._f3.subgroup_base + subgroup_local_id);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_165 _GLF_struct_replacement_165 = _GLF_struct_165(vec4(1.0), vec3(1.0), mat2x4(1.0), _GLF_struct_replacement_136.workgroup_base + _GLF_struct_replacement_55._f0._f3.subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_11.subgroup_size), 1);
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_12(uvec4(1u)), atomicLoad(buf[_GLF_struct_replacement_61.virtual_gid], 4, 64, 2), _GLF_struct_15(mat3(1.0), ivec3(1), _GLF_struct_13(mat2x4(1.0), mat3(1.0)), _GLF_struct_14(mat2(1.0), mat3x2(1.0), bvec2(true), mat2(1.0)), ivec4(1)), _GLF_struct_18(vec3(1.0), ivec3(1), _GLF_struct_16(true, ivec2(1), ivec2(1), 1, ivec2(1)), uvec3(1u), mat2(1.0), _GLF_struct_17(ivec2(1), mat4x3(1.0), 1, mat3x2(1.0), bvec2(true)), mat3x4(1.0)), _GLF_struct_20(uvec3(1u), vec4(1.0), _GLF_struct_19(ivec3(1)), 1, ivec3(1)), vec4(1.0), _GLF_struct_23(_GLF_struct_21(mat4(1.0), ivec4(1), mat3x4(1.0), mat3x2(1.0)), _GLF_struct_22(mat4(1.0), mat4x2(1.0), mat2x4(1.0), vec2(1.0))));
 do
  {
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((+ -28919) & (0 << _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                          }
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          return;
                         break;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       return;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                       else
                        {
                         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           for(_GLF_struct_183 _GLF_struct_replacement_183 = _GLF_struct_183(_GLF_struct_171(_GLF_struct_166(bvec4(true), uvec2(1u), mat4x2(1.0)), _GLF_struct_167(vec2(1.0), uvec2(1u), ivec2(1), mat3x2(1.0), mat2x4(1.0)), _GLF_struct_168(bvec2(true), uvec2(1u), mat4(1.0), uvec3(1u), vec2(1.0), 1), vec3(1.0), _GLF_struct_169(1u, 1u, mat4x2(1.0), bvec4(true), ivec2(1), bvec3(true), ivec2(1)), _GLF_struct_170(uvec3(1u))), (0 << _GLF_IDENTITY(int(0), int(0))), _GLF_struct_172(mat4(1.0), ivec3(1)), _GLF_struct_175(mat3x2(1.0), vec2(1.0), _GLF_struct_173(mat3x2(1.0), mat3x4(1.0), mat3x2(1.0)), _GLF_struct_174(vec2(1.0), ivec2(1))), _GLF_struct_176(mat4x2(1.0), 1), _GLF_struct_182(_GLF_struct_177(mat3(1.0), 1u), _GLF_struct_178(vec4(1.0), bvec4(true), mat3x2(1.0), mat2x4(1.0), mat3(1.0), uvec4(1u), mat2x3(1.0)), _GLF_struct_179(vec4(1.0), ivec2(1), mat4(1.0), ivec3(1), bvec2(true), bvec3(true)), mat4x3(1.0), _GLF_struct_180(mat3x2(1.0), ivec2(1), uvec4(1u)), mat3x2(1.0), _GLF_struct_181(mat4x2(1.0), uvec3(1u), mat3(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_183._injected_loop_counter != 1); _GLF_struct_replacement_183._injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   return;
                                   if(_GLF_DEAD(false))
                                    break;
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       switch(_GLF_SWITCH(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1), ~ (~ (ivec4(0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))))))
        {
         case 0:
         if(_GLF_DEAD(false))
          continue;
         for(_GLF_struct_79 _GLF_struct_replacement_79 = _GLF_struct_79(_GLF_struct_78(uvec3(1u), 0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_79._f0._injected_loop_counter != 1); _GLF_struct_replacement_79._f0._injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(_GLF_struct_40 _GLF_struct_replacement_40 = _GLF_struct_40(_GLF_struct_30(_GLF_struct_29(mat4(1.0), 1u, vec4(1.0), uvec4(1u), 1, bvec2(true))), mat4x3(1.0), 0, _GLF_struct_36(mat3x4(1.0), _GLF_struct_31(mat3x4(1.0), mat3x2(1.0), true), _GLF_struct_32(mat2x4(1.0), 1.0, vec2(1.0)), _GLF_struct_33(mat4(1.0), mat4x3(1.0), bvec3(true), mat3(1.0)), _GLF_struct_34(mat4x2(1.0), mat4x3(1.0), bvec2(true), uvec2(1u)), _GLF_struct_35(true, bvec3(true), bvec2(true), mat3x4(1.0), mat2x4(1.0), 1u, mat4(1.0))), vec3(1.0), _GLF_struct_39(ivec4(1), _GLF_struct_37(uvec2(1u)), uvec4(1u), bvec4(true), _GLF_struct_38(bvec2(true), vec4(1.0), mat4(1.0), mat2(1.0)), uvec3(1u), uvec2(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_40._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_40._injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       subgroupAll(false);
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                        continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         atomicStore(buf[_GLF_struct_replacement_165.next_virtual_gid], uint(1), 4, 64, 4);
         break;
         default:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   continue;
                  }
                }
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(_GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_27(mat2x3(1.0), _GLF_struct_25(bvec4(true), 1), mat2x4(1.0), true, _GLF_struct_26(ivec2(1), bvec3(true), bvec3(true), uvec2(1u), bvec4(true), uvec2(1u)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_28._f0._f1._injected_loop_counter > (0 | 0)); _GLF_struct_replacement_28._f0._f1._injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0)))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                       break;
                      }
                     break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       break;
                      }
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         break;
                        }
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         break;
                        }
                       break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                         continue;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                            break;
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
                      return;
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      continue;
                     continue;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 & -5242); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
         1;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      continue;
     for(_GLF_struct_67 _GLF_struct_replacement_67 = _GLF_struct_67(1, _GLF_IDENTITY(0, (0) - 0), 1, _GLF_struct_63(mat3x4(1.0), _GLF_struct_62(1u)), uvec4(1u), _GLF_struct_66(_GLF_struct_64(true), _GLF_struct_65(uvec4(1u), mat4x2(1.0))), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_67._injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 1)); _GLF_struct_replacement_67._injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_struct_replacement_165.next_virtual_gid], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             continue;
            }
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       return;
      }
     for(_GLF_struct_77 _GLF_struct_replacement_77 = _GLF_struct_77(1u, _GLF_struct_68(ivec2(1), 0), _GLF_struct_73(_GLF_struct_69(ivec2(1), mat4(1.0), uvec4(1u)), ivec3(1), mat2x3(1.0), _GLF_struct_70(1u, bvec4(true), mat3x4(1.0), uvec2(1u)), _GLF_struct_71(vec4(1.0), uvec4(1u)), mat3x2(1.0), _GLF_struct_72(bvec3(true), vec2(1.0))), _GLF_struct_76(mat4x2(1.0), _GLF_struct_74(mat3x4(1.0), mat2x3(1.0), uvec2(1u), mat2x4(1.0), vec2(1.0), bvec4(true), mat4(1.0)), _GLF_struct_75(uvec4(1u), uvec4(1u), mat3x2(1.0), ivec4(1), uvec4(1u), mat2x3(1.0), 1.0)), mat3x2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_77._f1._injected_loop_counter != 1); _GLF_struct_replacement_77._f1._injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     for(_GLF_struct_94 _GLF_struct_replacement_94 = _GLF_struct_94(_GLF_struct_82(mat3x4(1.0), _GLF_struct_80(true, uvec4(1u), uvec3(1u), 1.0, mat3x2(1.0), 1.0, mat4x3(1.0)), _GLF_struct_81(mat2(1.0), 1, mat3x2(1.0), bvec4(true))), true, _GLF_struct_84(_GLF_struct_83(vec4(1.0), mat2(1.0))), ivec3(1), _GLF_struct_87(_GLF_struct_85(mat4(1.0)), mat3(1.0), 1, vec4(1.0), _GLF_struct_86(mat2x4(1.0), true, uvec3(1u), mat3(1.0), ivec2(1)), vec2(1.0)), bvec2(true), _GLF_struct_93(mat2(1.0), _GLF_struct_88(mat2x4(1.0), ivec2(1), mat4x2(1.0)), vec4(1.0), _GLF_struct_89(mat4x2(1.0), true, ivec2(1), true, mat2x3(1.0)), _GLF_struct_90(uvec3(1u), mat2x3(1.0), bvec4(true), vec4(1.0), 1u), _GLF_struct_91(ivec3(1), mat2x4(1.0), mat3x2(1.0), ivec3(1)), _GLF_struct_92(mat4x2(1.0), ivec4(1), mat2(1.0), mat4x3(1.0), mat3x4(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_94._f0._f2._injected_loop_counter > 0); _GLF_struct_replacement_94._f0._f2._injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (61268 & 0)); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           subgroupBarrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
          {
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[_GLF_struct_replacement_61.virtual_gid], _GLF_struct_replacement_24.read, 4, 64, 4);
  }
 else
  {
  }
}
