#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))))))))))) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), false || (bool(bool(bool(false))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), false || (bool(bool(bool(false))))))), false, true, false)))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, true && (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))) || false, (((injectionSwitch.x > injectionSwitch.y)) || false) || _GLF_IDENTITY(false, true && (false))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false || (((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))), true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))))) && true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))))))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), (_GLF_DEAD(false)) || false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, (false) && true))), true && (bool(! (_GLF_IDENTITY(false, (false) && true))))))))))))))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.4) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], injectionSwitch[1]))) + _GLF_IDENTITY(tan(vec2(0.0, 0.0)), min(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(tan(vec2(0.0, 0.0)), max(tan(vec2(0.0, 0.0)), tan(vec2(0.0, 0.0))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], injectionSwitch[1]))) + _GLF_IDENTITY(tan(vec2(0.0, 0.0)), min(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(tan(vec2(0.0, 0.0)), max(tan(vec2(0.0, 0.0)), tan(vec2(0.0, 0.0))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y))) || false)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], injectionSwitch[1]))) + _GLF_IDENTITY(tan(vec2(0.0, 0.0)), min(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(tan(vec2(0.0, 0.0)), max(tan(vec2(0.0, 0.0)), tan(vec2(0.0, 0.0))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y))) || false)))))), true, false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), min(log(1.0), log(1.0)))), 1.0), (mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(log(1.0)), 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9671.6775)))) / 1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-528.493)), float(0.0), bool(true))), 0.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), 1.0 * (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(min(log(1.0), log(1.0)), clamp(min(log(1.0), log(1.0)), _GLF_IDENTITY(min(log(1.0), log(1.0)), float(mat3x4(min(log(1.0), log(1.0)), tan(0.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), min(log(1.0), log(1.0)))))), 1.0), (mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-148.822)), bool(false))), 0.0, 1.0, 1.0, 0.0, 1.0, abs(log(1.0)), 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9671.6775)))) / 1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), clamp(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), (vec4(0.0, 0.0, 1.0, 0.0)) / sqrt(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-528.493)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))))))), (true ? (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(log(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (true ? _GLF_IDENTITY(1.0, (1.0) / 1.0) : _GLF_FUZZED(-23.91)))), min(log(1.0), log(1.0)))), 1.0), (mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(log(1.0)), 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6310.2356)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9671.6775)))) / 1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-528.493)), float(0.0), bool(true))), 0.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), _GLF_IDENTITY(1.0 * (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), min(log(1.0), log(1.0)))), 1.0), (mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(log(1.0)), 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9671.6775)))) / 1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-528.493)), float(0.0), bool(true))), 0.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), mix(float(_GLF_FUZZED(1.1)), float(1.0 * (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), min(log(1.0), log(1.0)))), 1.0), (mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(log(1.0)), 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9671.6775)))) / 1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-528.493)), float(0.0), bool(true))), 0.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))))), bool(true)))))) : _GLF_FUZZED(atanh(4452.4850)))) - sqrt(0.0)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))) && true)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-510.190) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, tan(sin(0.0)), 0.0, sqrt(length(0.0)), cos(0.0), 0.0)), mix(vec2(_GLF_FUZZED(-313.108), _GLF_FUZZED(-2.5)), vec2((vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, tan(sin(0.0)), 0.0, sqrt(length(0.0)), cos(0.0), 0.0)))[0], (vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, tan(sin(0.0)), 0.0, sqrt(length(0.0)), cos(0.0), 0.0)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))).y)))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))) && true)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) && true)) || false, bool(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) && true)) || false, true)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-170.837)), float(injectionSwitch.x), bool(true)))) / 1.0), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-170.837)), float(injectionSwitch.x), bool(true)))) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))) / round(length(normalize(vec3(1.0, 1.0, 1.0))))))), mix(float(_GLF_FUZZED(-170.837)), float(injectionSwitch.x), bool(true)))) / 1.0), injectionSwitch.x, injectionSwitch.x)), float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-170.837), clamp(_GLF_FUZZED(-170.837), _GLF_FUZZED(-170.837), _GLF_FUZZED(-170.837)))), _GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) + 0.0), float(injectionSwitch.x))), bool(true)))) / 1.0), injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, 1.0, 0.0))) > injectionSwitch.y)))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) | (workgroup_size * workgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-65.03) : injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) >> 0u) / _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), max(uint(uint(1u)), uint(uint(1u)))))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, 1))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 1u, 0u)))))), ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), uint(uvec3((subgroup_local_id + 1), 1u, 0u))))))) * 1u)) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, determinant(mat3(1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)))), vec2(0.0, 0.0) + (vec2(mat4x2(injectionSwitch, 1.0, determinant(mat3(1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0))))))).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(-207.519, -96.30, -173.433).s)), bool(false))), sqrt(1.0), 0.0, 0.0), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(-207.519, -96.30, -173.433).s)), bool(false))), sqrt(1.0), 0.0, 0.0))))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))) ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(889.126))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(889.126))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false, true, true))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0)), mix(vec2((vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0)))[0], (vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0)))[1]), vec2(_GLF_FUZZED(8.9), _GLF_FUZZED(1.6)), bvec2(false, false)))).x > injectionSwitch.y)), true, true, true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0)), mix(vec2((vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0)))[0], (vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0)))[1]), vec2(_GLF_FUZZED(8.9), _GLF_FUZZED(1.6)), bvec2(false, false)))).x > injectionSwitch.y)), true, true, true))))) || false))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false, true))))))))))), false, true, true))), false, _GLF_IDENTITY(true, ! (! (true))), false)))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((subgroup_local_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ ((0u << _GLF_IDENTITY(uint(4u), uint(4u))) << _GLF_IDENTITY(uint(3u), uint(3u)))), ((subgroup_local_id)) - 0u) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)), max(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((subgroup_local_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(uint(1u), uint(uvec2(uint(1u), 0u))))), _GLF_IDENTITY(uint(1u), (uint(1u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((subgroup_local_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((subgroup_local_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((subgroup_local_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((subgroup_local_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u)))))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)))))) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   int i = _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((5965 + -86666)) : 0)), 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(_GLF_IDENTITY(0, 0 | (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) | (int(ivec3(_GLF_IDENTITY(0, 0 | (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)), (bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, true && (true)), false, false))) || false)), (false) || _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false))), ! (! (false))))) && true)) && true) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false || (false)))) || false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (_GLF_IDENTITY(uint(uint(read_2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uint(read_2)), (uint(uint(read_2))) << 0u)), (false ? _GLF_FUZZED(read_1) : ~ (_GLF_IDENTITY(uint(uint(read_2)), (uint(uint(read_2))) << 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(_GLF_IDENTITY(uint(read_2), (true ? _GLF_IDENTITY(uint(read_2), (uint(read_2)) | (uint(read_2))) : _GLF_FUZZED(workgroup_base))))))), ~ (~ (_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(_GLF_IDENTITY(uint(read_2), (true ? _GLF_IDENTITY(uint(read_2), (uint(read_2)) | (uint(read_2))) : _GLF_FUZZED(workgroup_base))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(read_2)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(uint(uint(read_2)), (uint(uint(read_2))) << 0u))), 0u + (uint(uint(read_2))))), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2)))))) - 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (_GLF_IDENTITY(uint(uint(read_2)), ~ (~ (uint(uint(read_2)))))))), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(_GLF_IDENTITY(uint(read_2), _GLF_IDENTITY((true ? _GLF_IDENTITY(uint(read_2), (uint(read_2)) | (uint(read_2))) : _GLF_FUZZED(workgroup_base)), uint(uint(_GLF_IDENTITY((true ? _GLF_IDENTITY(uint(read_2), (uint(read_2)) | (uint(read_2))) : _GLF_FUZZED(workgroup_base)), ~ (~ ((true ? _GLF_IDENTITY(uint(read_2), (uint(read_2)) | (uint(read_2))) : _GLF_FUZZED(workgroup_base)))))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_2, (read_2) + 0u))), 0u + (uint(uint(read_2))))), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2)))), (_GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2))))) | 0u))) - 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2))))), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2)))), (_GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2))))) | _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u ^ (~ (0u)))))))) - 0u)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (_GLF_IDENTITY(uint(uint(read_2)), ~ (~ (uint(uint(read_2)))))))), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(read_2), 0u + (uint(read_2)))), 0u + (uint(_GLF_IDENTITY(uint(read_2), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(uint(read_2), (uint(read_2)) | (uint(read_2))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) * 1u))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(read_2)), ~ (~ (uint(uint(read_2))))), 0u + (_GLF_IDENTITY(uint(uint(read_2)), ~ (~ (uint(uint(read_2)))))))), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uint(read_2)), 0u + (uint(uint(read_2)))))) - 0u))))) * 1u)))) + _GLF_IDENTITY(1, (1) - _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, ~ (~ (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)))))), ((_GLF_IDENTITY(0 ^ 0, ~ (~ (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))))))) - 0)), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(4, 1, 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), _GLF_IDENTITY((1 ^ 1) | ((4)), clamp((1 ^ 1) | ((4)), (1 ^ 1) | ((4)), _GLF_IDENTITY((1 ^ 1) | ((4)), 0 | ((1 ^ 1) | ((4))))))))) | (4))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1, 0)), (int(ivec3(4, 1, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, (0) - 0), 0))))) | (int(ivec3(4, 1, 0))))), max((_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), (1 ^ 1) | ((4))))) | (4))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, min(4, 4)))), 1, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1)))), 0)))), (int(ivec3(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, min(4, 4)))), 1, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1)))), 0))))) | 0)) | (int(ivec3(4, 1, 0))))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), (1 ^ 1) | ((4))))) | (4))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1, 0)), (int(ivec3(4, 1, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, (0) - 0), 0))))) | (int(ivec3(4, 1, 0))))))) | (int(ivec3(4, 1, 0))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2(_GLF_FUZZED(vec4(41.89, 0.6, -5.6, 4.3).b), _GLF_FUZZED(-835.689)), bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))) && true))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
      return;
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec4(read_1, (181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), ((1u | 0u) & 1u), 1u))), (_GLF_IDENTITY(read_1, uint(uvec4(read_1, (_GLF_IDENTITY(181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u))), min(181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u))), 181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), ((1u | 0u) & 1u), 1u)))) / 1u) == read_2) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0))))), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, uint(uvec4(read_1, (181092u & _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(4u), uint(4u))), ((0u << _GLF_IDENTITY(uint(4u), uint(4u)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ((1u | 0u) & 1u), 1u))) == read_2) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(0, 0 | (0))), clamp(ivec2(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(1, 1)))), 0), ivec2(1, 0), ivec2(1, 0))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, uint(uvec4(read_1, (181092u & (0u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) + 0u))))), ((1u | 0u) & 1u), 1u))) == read_2) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0))), max(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0))), _GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0))))))), (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, uint(uvec4(read_1, (181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), ((1u | 0u) & 1u), 1u))) == read_2) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1, uint(uvec4(read_1, (181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), ((1u | 0u) & 1u), 1u))) == read_2) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0)))))) / 1u, 0u ^ ((uint(_GLF_IDENTITY(read_1, uint(uvec4(read_1, (181092u & (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), ((1u | 0u) & 1u), 1u))) == read_2) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0)))))) / 1u)))))) << 0u))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), clamp(64, 64, _GLF_IDENTITY(64, _GLF_IDENTITY((64) * 1, ((64) * 1) >> 0)))), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.8), _GLF_FUZZED(4.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
