#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec4 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 uvec4 GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uvec4 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size) ^ (uvec2(0u, 0u) | uvec2(0u, 0u)));
 uvec2 GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_id;
 GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy = GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(false, false, false))))))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-47.55), _GLF_FUZZED(8.1)), bvec2(false, false))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(3345.9727, 5.6)), max(_GLF_FUZZED(vec2(3345.9727, 5.6)), _GLF_FUZZED(vec2(3345.9727, 5.6)))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), (! (false || (false))) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0), 0 ^ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0), min((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, cos(0.0)))))).x)) ^ 0)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy = GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.zw;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw = GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid.xy = GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw;
 GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy = _GLF_IDENTITY(GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid, (false ? _GLF_FUZZED(GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid) : GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid)).xy;
 uvec3 GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_base;
 GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz = GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz = GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz = GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz, uvec3(0u, 0u, 0u) + (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz = _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz, (GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz) | (GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz))))) >> uvec3(0u, 0u, 0u), ((_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz = GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz, uvec3(0u, 0u, 0u) + (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz = _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz, (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size, min(GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size, GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size)).xyz) | (GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.xyz))))) >> uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)));
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy.x = subgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
      barrier();
     barrier();
    }
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.y = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))), uint(4u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), uint(uvec3(uint(4u), 0u, 1u)))) / 1u), uint(4u)))), ~ _GLF_IDENTITY((~ (uvec4(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, _GLF_IDENTITY(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), (false ? _GLF_FUZZED((subgroup_id ^ uvec2(102808u, 24666u))) : _GLF_IDENTITY(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), min(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))))) | (uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), min(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))))) | (uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size) - uvec2(0u, 0u))) : (_GLF_IDENTITY(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), min(uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)), uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))))) | (uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u)))))))))))), 1u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))))) | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))) >> 0u))))))), ((~ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).xy, uvec2(uvec3(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy, 1u))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))) >> uvec4(0u, 0u, 0u, 0u))))).x;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(70941) : _GLF_IDENTITY(1, (1) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy.x = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 1u * _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))) * 1u)) | 0u);
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
      barrier();
     GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.z = num_workgroup;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x = GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.z;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(max(_GLF_IDENTITY(0u, uint(uint(0u))), 0u), 1u * (max(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), max(uint(uint(0u)), uint(uint(0u))))), 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) ^ uvec4(0u, 0u, 0u, 0u)).xy.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u, max(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u, ((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, max(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x)), ~ (~ (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, max(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x))))), GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x)), (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, min(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, max(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x)), GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x)), (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u) : _GLF_FUZZED(66124u)))) >> 0u : _GLF_FUZZED(num_workgroup)))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy, clamp(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy)).x) / 1u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy, clamp(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy, GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy)).x) / 1u)) : _GLF_FUZZED(subgroup_local_id))) >> 0u), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u)) | (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)), min((_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)))) >> 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) - 0u)) ^ 0u)), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / _GLF_IDENTITY(1u, (1u) ^ 0u))) - 0u)) >> 0u), uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x), max((GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x), (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x))), 0u, 0u, 0u)), (uint(uvec4(_GLF_IDENTITY((GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x), max((GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x), (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x))), 0u, 0u, 0u))) | 0u)) / 1u), ~ (~ (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u))))) >> 0u), 1u))))))), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x, (GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.x) / 1u)) >> 0u)) + 0u))) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w, _GLF_IDENTITY(uint(uvec4(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w, 1u, 1u, 1u)), (uint(uvec4(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w, 1u, 1u, 1u))) - 0u))) | (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (false ? -66624 : 17426))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = _GLF_IDENTITY((1 & _GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(~ ((1 & 1)), 0 ^ (~ ((1 & 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY((vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(5945.5972)), bool(_GLF_IDENTITY(false, ! (! (false))))), max(mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(5945.5972)), bool(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(5945.5972)), bool(_GLF_IDENTITY(false, ! (! (false))))), (false ? _GLF_FUZZED(95.35) : mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(5945.5972)), bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), min((vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), clamp((vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), ((vec2(injectionSwitch.y, 1.0))) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), ((vec2(injectionSwitch.y, 1.0))) - vec2(0.0, 0.0)), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), ((vec2(injectionSwitch.y, 1.0))) - vec2(0.0, 0.0)), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), ((vec2(injectionSwitch.y, 1.0))) - vec2(0.0, 0.0)))))))) * mat2(1.0)))), _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y)) || false))))))), _GLF_IDENTITY(true, true && (true)) && (! (bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) && true)))), false || (! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 1151.0987)))))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 1151.0987)))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 1151.0987)))))).x > injectionSwitch.y)), true), true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 1151.0987)))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 1151.0987)))))).x > injectionSwitch.y)), true), true))))))))))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) << 0))) & -41104), 1 * ((0 & -41104))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) & -41104), 1 * ((0 & -41104))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(0, 0 + (0)))), (0) | (0)) & -41104), 1 * _GLF_IDENTITY(((0 & -41104)), ~ (~ (((0 & -41104)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) & -41104), 1 * ((0 & -41104)))))) >> 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -22181)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))) >> 0) > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.w = workgroup_size;
 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.y = GLF_merged2_0_3_64_3_1_14GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_baseworkgroup_size.w;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.xy.y = GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.y;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.y = _GLF_IDENTITY(workgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))), ((~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))));
 for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) & int((9.5))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) & int((9.5)))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.0), _GLF_FUZZED(9.3)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = (27698 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) + 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1146.7009)), vec2(_GLF_FUZZED(-34.95), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1146.7009)), vec2(_GLF_FUZZED(-34.95), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), false, true, true)), bool(bvec4(bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1146.7009)), vec2(_GLF_FUZZED(-34.95), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), false, true, true)), true, false, true)))))))
            {
            }
           else
            {
             GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy.y = GLF_merged2_0_2_50_2_2_52GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idGLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.xy.y;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), false, true))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), true && (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))), false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.w = GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy.y;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id, max(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id)).xy.y * GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.w;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.z = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y;
 uint virtual_gid = GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.z + GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w * GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.y + GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy.x;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 do
  {
   GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid.w = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))));
 do
  {
   GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.x = GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, max(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))) | (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))) | (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))))), max(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))) | (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))) | (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))) | (~ (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) | uvec4(0u, 0u, 0u, 0u)))))))))))), GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid)).xyz.z + GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroupsubgroup_id.w * _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, clamp(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz)), 1u), clamp(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, clamp(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz)), 1u), uvec4(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, clamp(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz)), 1u), uvec4(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, clamp(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz)), 1u))))).y + ((GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy.x + 1) % GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.y);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid.z = next_virtual_gid;
  }
 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.w = GLF_merged3_0_2_54_2_1_16_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idnext_virtual_gidvirtual_gid.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) / 1.0) + 0.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.x = GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.w;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), (_GLF_IDENTITY((0 ^ 1), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 ^ 1)))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((- -26239) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false)))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))))) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.x], uint(1), 4, 64, 4);
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, true)), (bool(bvec3(! (false), false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))))) && true)))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)) && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, (0) | (0)), 1, (0 << _GLF_IDENTITY(int(7), int(7))), 1), ~ (~ (ivec4(_GLF_IDENTITY(0, (0) | (0)), 1, (0 << _GLF_IDENTITY(int(7), int(7))), 1)))), (ivec4(1, 1, 1, 1) | (ivec4(1, 1, 1, 1) & ivec4(1, 1, 1, 1))) * (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, (0) | (0)), 1, (0 << _GLF_IDENTITY(int(7), int(7))), 1), ~ (~ (ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))) | (0)), 1, (0 << _GLF_IDENTITY(int(7), int(7))), 1))))))))], _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(float((2.0 < -43.79))), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, int(int(1)))))], ((injectionSwitch)[1]) + 0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(float((2.0 < -43.79))), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(float((2.0 < -43.79))), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(33.45) : (injectionSwitch)[0])), _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(float((2.0 < -43.79))), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) * mat2(1.0)) * vec2(1.0, 1.0))).x > injectionSwitch.y))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), bool(bool((false)))), ! (_GLF_IDENTITY(! (true && (false)), (! (true && (false))) || false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))), ! (! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))))) && true))))), (true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), bool(bool((false)))), ! (_GLF_IDENTITY(! (true && (false)), (! (true && (false))) || false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))), ! (! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))))) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-34.17) : injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ (0 >> _GLF_IDENTITY(int(4), int(4)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
  }
 uint read_1 = atomicLoad(buf[GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.x], _GLF_IDENTITY(4, (4) ^ 0), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.z = read_1;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.x = GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 1.0)), (true ? float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(atan(468.568)))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))))))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)))), false)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.x], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.w = read_2;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(true, bool(bool(true))))), true && (bool(bvec4(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.4)), bvec2(true, false))), 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0))).x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0))))) || false)))))), false, true))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.z = GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.w;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy, uvec2(1u, 1u) * (_GLF_IDENTITY(GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy, uvec2(uvec4(GLF_merged3_0_2_54_2_1_6_3_1_6GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_1read_2.xy, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))).x + 1 < GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.y)
      {
       int i = _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(-3805, -67939, -98224, 2163).x) : 0), 1 * (_GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(-3805, -67939, -98224, 2163).x) : 0), ((false ? _GLF_FUZZED(ivec4(-3805, -67939, -98224, 2163).x) : 0)) / 1))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.x], uint(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, uvec3(uvec4(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz, 0u))).x == _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, _GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id))) : _GLF_FUZZED(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid)))[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[3]), (true ? uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[3]) : _GLF_FUZZED(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid)))).z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[3])).z, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id) ^ (uvec4(0u, 0u, 0u, 0u) & uvec4(58894u, 74042u, 112076u, 75289u)))[_GLF_IDENTITY(3, min(3, 3))])).z), clamp(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[_GLF_IDENTITY(3, min(3, 3))])).z), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[_GLF_IDENTITY(3, min(3, 3))])).z)) >> 0u), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[_GLF_IDENTITY(3, min(3, 3))])).z), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[_GLF_IDENTITY(3, min(3, 3))])).z))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[3])).z))) - 0u)) + _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(sign(i), 0 ^ (sign(i)))))), 64, 4);
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.x], _GLF_IDENTITY(uint(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.x == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.z), uint(uint(uint(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.x == _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id[3])))).z, ! (! (GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenext_virtual_gid.xyz.x == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_12next_virtual_gidnum_workgroupread_2workgroup_id.z))))))) + 1, _GLF_IDENTITY(4, (4) | (4)), 64, 4);
       for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), int(int((1 << _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), int(6))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((0 ^ 0) ^ 1), _GLF_IDENTITY(! (! (_injected_loop_counter < ((0 ^ 0) ^ 1))), ! (! (! (! (_injected_loop_counter < ((0 ^ 0) ^ 1)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, (false) || false)))))))))) && true)));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
}
