#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH((0 ^ 0)))
    {
     case 0:
     case 70:
     case 91:
     int i = 0;
     case 58:
     case 40:
     case 27:
     case 41:
     case 12:
     case 5:
     case 54:
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
     break;
     case 15:
     for(ivec4 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[27], _GLF_SWITCH_0_2v; (42.92 > -883.638); uvec2(87204u, 191854u))
      {
       for(       false;
 (true != false); bvec2(false, true))
        {
         if(false)
          {
          }
         while(true)
          {
           vec4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
           bvec2(false, true);
           subgroup_local_id;
           ivec2(-45242, -71481);
           mat4x2 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
           uvec4 _GLF_SWITCH_0_9v[38];
          }
        }
       while((vec2(9.1, -2385.0620) != vec2(78.66, -2.1)))
        {
         {
          ivec4 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v;
          mat4x3(-0.5, -21.24, -77.35, 6.7, -51.47, -1.1, 4.8, 6.6, -2307.0243, -103.486, 239.872, 4174.2594);
          uint _GLF_SWITCH_0_13v;
          vec4(7760.4325, 3303.1930, -0.8, 21.15);
          uint _GLF_SWITCH_0_14v[46], _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v;
          mat4x2 _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v[17];
          ;
          (_GLF_SWITCH_0_2v - i);
         }
         uvec2 _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v;
        }
      }
     case 71:
     {
      {
       mat4x3(ceil(4.0));
       if(true)
        {
         (+ 4.2);
         vec3 _GLF_SWITCH_0_23v[16];
         mat4x3(0.0, -659.957, 7.4, -5.1, -11.91, 8544.0653, -7.2, -32.73, 5.4, 1.8, -0.4, 30.14);
         (-5.5 / (mat2x3(99.99, 8.2, -1.6, 5822.2908, -9.6, -9.4) / mat2x3(343.851, -486.788, 4721.6640, 6075.8650, -4.0, 667.442)));
         uvec4 _GLF_SWITCH_0_24v[5];
         mat2x4 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
         vec4 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v;
        }
       {
        uvec3 _GLF_SWITCH_0_29v[69];
        mat3(mat2x3(3230.3371, 3.9, 743.613, 3.5, -6317.1157, 6.6));
        uint _GLF_SWITCH_0_30v[18];
        notEqual(ivec3(52352, -27574, 49704), bitCount(sign(ivec3(61650, -77048, 28615))));
        ivec2 _GLF_SWITCH_0_31v;
        uvec4(67024u, 152557u, 51459u, 19906u);
       }
       ((mat3x2(-3475.1233, 4621.6980, 0.7, 62.34, 8936.1824, -3934.0765) , i) | ivec2(-66701, -27853));
      }
      (mat4x3(-7637.6025, -582.557, 50.22, 39.75, 9.4, -8.0, 1530.4009, -470.578, 6.9, 2.0, -33.34, -6.1) - mat4x3(inverse(mat4(-84.92, 2697.5926, -9.3, 980.023, -564.360, 6646.6912, -433.750, -56.75, 4.2, -8902.1678, 887.173, -3.4, -3.7, -6457.2501, -5410.9460, -0.1))));
      mat3x2(-0.6, -787.165, 1.7, 429.068, -8216.4463, -271.894);
      for(      ivec3(31484, -71089, -7540);
 false; bvec4(false, true, true, false))
       {
        mat3x2 _GLF_SWITCH_0_32v, _GLF_SWITCH_0_33v;
        vec3 _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v[21], _GLF_SWITCH_0_36v;
        ;
        mat3(105.281, -8.7, -26.48, -5.3, -1534.6801, -6.6, -215.400, 2.5, 8.1);
        ;
        while(true)
         {
          mat2(-915.333, 3.4, 81.77, -7.1);
          mat3x4 _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v, _GLF_SWITCH_0_39v[75];
          bvec3(true, false, false);
          mat3x2(mat3(6536.6915, -2609.9807, 3.5, 4.7, 4.7, 9.4, 73.28, -425.214, -5.6));
          vec3 _GLF_SWITCH_0_40v, _GLF_SWITCH_0_41v[95];
          uint _GLF_SWITCH_0_42v, _GLF_SWITCH_0_43v[62], _GLF_SWITCH_0_44v;
          ivec3 _GLF_SWITCH_0_45v;
         }
       }
     }
     default:
     1;
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
}
