#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) || false); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(1.5, mix(float(_GLF_FUZZED((193.358 * 7.3))), float(1.5), bool(true))), _GLF_IDENTITY(-426.313, max(-426.313, -426.313)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ (163918u & 0u));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(83487u, 163731u, _GLF_IDENTITY(89005u, max(89005u, 89005u)))) : gl_WorkGroupSize)).x), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(83487u, 163731u, _GLF_IDENTITY(89005u, max(89005u, 89005u)))) : gl_WorkGroupSize)).x), ~ (~ ((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(83487u, 163731u, _GLF_IDENTITY(89005u, max(89005u, 89005u)))) : gl_WorkGroupSize)).x))))) + 0u)), 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x)), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x)), _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uvec2((1u), (1u & 1u)), (false ? _GLF_FUZZED(uvec2(25881u, 20185u)) : uvec2((1u), (1u & 1u))))))) * (gl_WorkGroupSize.x)))), _GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, ((1u) + 0u) << 0u)), _GLF_IDENTITY(0u, (0u) + 0u)))), 1u))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u)))))) / 1u), (false ? _GLF_FUZZED(atomicOr(subgroup_id, subgroup_local_id)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x), (_GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x)) | (_GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x)))), 1u, 1u))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u)), _GLF_IDENTITY((false ? _GLF_FUZZED(167525u) : uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * _GLF_IDENTITY((gl_WorkGroupSize.x), ~ (~ ((gl_WorkGroupSize.x))))), 1u, 1u))), 0u ^ ((false ? _GLF_FUZZED(167525u) : uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u)))))))))))) / 1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), _GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x)), 1u, 1u))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u)))))) / 1u)) >> 0u, 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), _GLF_IDENTITY(1u, (1u) | (1u)) * (gl_WorkGroupSize.x)), 1u, 1u))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), 1u, 1u)))))) / 1u)) >> 0u))))) : _GLF_FUZZED(subgroup_local_id)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), (_GLF_IDENTITY(int(5), 0 + (_GLF_IDENTITY(int(5), (int(5)) << 0)))) | (_GLF_IDENTITY(int(5), ~ (~ (int(5)))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), min((int(5)), (int(5)))) / 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), 0u ^ ((subgroup_id * subgroup_size)))) | 0u) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_FUZZED(num_workgroup))), 0u, 1u, 1u))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_FUZZED(num_workgroup))), 0u, 1u, 1u))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_FUZZED(num_workgroup))), 0u, 1u, 1u))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_FUZZED(num_workgroup))), 0u, 1u, 1u))), subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_FUZZED(num_workgroup))), 0u, 1u, 1u))))))))) + subgroup_local_id, _GLF_IDENTITY(uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(165741u) : _GLF_FUZZED(num_workgroup)))) - 0u))), 0u, 1u, 1u), ~ (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(_GLF_IDENTITY(165741u, min(165741u, 165741u))) : _GLF_FUZZED(num_workgroup)))) - 0u))), 0u, 1u, 1u), min(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(165741u) : _GLF_FUZZED(num_workgroup)))) - 0u))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(165741u) : _GLF_FUZZED(num_workgroup)))) - 0u))), 0u, 1u, 1u)))))))))) + subgroup_local_id, 0u, 1u, 0u)), (uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | 0u))), (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) : _GLF_FUZZED(num_workgroup))), 0u, 1u, 1u))))) + subgroup_local_id, 0u, 1u, 0u))) / _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) >> 0), 4))))) << 0)) ^ (1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))) / 1.0))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))), (false ? _GLF_FUZZED(-80069) : _GLF_IDENTITY(1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(44393) : _GLF_IDENTITY(int(4), min(int(4), int(4))))), int(4))) ^ (1), 0 | ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1)))))))), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(int(4), int(4))) ^ (1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-90512) : _GLF_IDENTITY(1, (1) | 0))), 0 ^ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-90512) : _GLF_IDENTITY(1, (1) | 0)))))))], clamp(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1]), clamp(vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1]), vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1]), vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch))))[1], max(injectionSwitch[1], injectionSwitch[1])))))).y))) && true)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), false || (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 ^ 1))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(56.61) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(56.61) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(56.61) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true))))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(492.692)), vec2(_GLF_FUZZED(3587.4329), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1])), 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0)), clamp(float(mat2x3(_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1])), 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0)), float(mat2x3(_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1])), 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0)), float(mat2x3(_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1])), 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0)))))), bvec2(false, true))))).x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, 1.0))).y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) : _GLF_FUZZED(workgroup_size)))) >> 0u), (false ? _GLF_FUZZED(subgroup_size) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), true && (bool(bvec4(false, false, true, true))))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) >> 0u), (false ? _GLF_FUZZED(subgroup_size) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))), min(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) >> 0u), (false ? _GLF_FUZZED(subgroup_size) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))), workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) >> 0u), (false ? _GLF_FUZZED(subgroup_size) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - (1u ^ 1u))], _GLF_IDENTITY(uint(1), clamp(uint(_GLF_IDENTITY(1, max(1, 1))), uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))))), _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), (_GLF_IDENTITY(~ (~ (4)), (~ (~ (4))) | 0)) - 0))) | (_GLF_IDENTITY(4, ~ (~ (4))))), 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) ^ 0, clamp(_GLF_IDENTITY((_injected_loop_counter) ^ 0, ((_injected_loop_counter) ^ 0) ^ 0), (_injected_loop_counter) ^ 0, _GLF_IDENTITY((_injected_loop_counter) ^ 0, min((_injected_loop_counter) ^ 0, (_injected_loop_counter) ^ 0))))) < 1, false, false, true)), (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1, false, false, true))) || false))) || false)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) ^ (-6759 & 0)) ^ 0) < 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) ^ 0, clamp(_GLF_IDENTITY((_injected_loop_counter) ^ 0, ((_injected_loop_counter) ^ 0) ^ 0), (_injected_loop_counter) ^ 0, (_injected_loop_counter) ^ 0))) < 1, false, false, true)), (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) ^ 0) < 1, false, false, true))) || false))) || false))) && true); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(831.296, 4979.5041)) : injectionSwitch))) / vec2(1.0, 1.0)).y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.2)), float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(63.04)), float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / 1.0)), bool(true))), 0.0, 0.0)))), bool(true)))) || false))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) / _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((+ 55557)), (true ? 1 : _GLF_FUZZED((+ 55557))) | (true ? 1 : _GLF_FUZZED((+ 55557)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 55557)))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 55557)))), 1, 1, 0))))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 55557)))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 55557)))), 1, 1, 0)))))) | 0))), 0);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    {
     do
      {
       for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, true))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, (true) && true), true, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true, false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(5, int(int(5))) : _GLF_FUZZED(findMSB(workgroup_id))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 0 ^ (5))), 0 | (int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 0 ^ (5))))))))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))) || false))
            break;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (true && (_GLF_DEAD(false))))))))), true && (! (_GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(false)), ! (! (true && (_GLF_DEAD(false))))))))))))))) && true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), bool(bvec2(bool(bvec3(_GLF_DEAD(false), true, true)), false)))) || false), true && (bool(bvec3(_GLF_DEAD(false), true, true))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (3223 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false))), ((bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false)))) && _GLF_IDENTITY(true, (true) && true)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(83711) : _injected_loop_counter))) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     int i = 0;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true))))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true))))), true, false, false)))))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), false))))))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
        }
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 1u * (next_virtual_gid))], uint(read_1 == read_2) + 1, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 ^ (64), (1 & 1) * (0 ^ (64))))) | _GLF_IDENTITY((64), (_GLF_IDENTITY((64), max(_GLF_IDENTITY((64), ((64)) * 1), (64)))) | ((64)))), 4);
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) << 0u) == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) << 0u) == _GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, uint(uvec2(read_2, 1u))), read_2, read_2)), false || (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) << 0u) == _GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, uint(uvec2(read_2, 1u))), read_2, read_2)), bool(bvec2(_GLF_IDENTITY(read_1, (read_1) << 0u) == _GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, uint(uvec2(read_2, 1u))), read_2, read_2)), true)))))) && true)) + 1, 4, 64, _GLF_IDENTITY(4, (4) | (4)));
    }
  }
 if(_GLF_DEAD(false))
  return;
}
