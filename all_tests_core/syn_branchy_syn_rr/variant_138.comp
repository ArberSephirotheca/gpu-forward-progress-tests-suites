#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), false || ((! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(((! (false))) || false, true && (((! (false))) || false))) && true), (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), _GLF_IDENTITY(((! (false))), (_GLF_IDENTITY(((! (false))), (((! (false)))) || false)) || false) || false) && true)) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), false || ((! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(((! (false))) || false, true && (((! (false))) || false))) && true), (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), _GLF_IDENTITY(((! (false))), (_GLF_IDENTITY(((! (false))), (((! (false)))) || false)) || false) || false) && true)) || false), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), bool(bool(! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), bool(false))), mix(float(_GLF_FUZZED(626.884)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) : injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), bool(false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), bool(false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_IDENTITY(_GLF_FUZZED(486.713), min(_GLF_FUZZED(486.713), _GLF_FUZZED(486.713)))), bool(false))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_IDENTITY(_GLF_FUZZED(486.713), min(_GLF_FUZZED(486.713), _GLF_FUZZED(486.713)))), bool(false)))))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) : _GLF_FUZZED(injectionSwitch)))))).y, float(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(-94.48, -864.572)) : 0.0)))), float(_GLF_FUZZED(486.713)), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), bool(false))), mix(float(_GLF_FUZZED(626.884)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) : injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), bool(false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(486.713)), bool(false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_IDENTITY(_GLF_FUZZED(486.713), min(_GLF_FUZZED(486.713), _GLF_FUZZED(486.713)))), bool(false))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_IDENTITY(_GLF_FUZZED(486.713), min(_GLF_FUZZED(486.713), _GLF_FUZZED(486.713)))), bool(false)))))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) : _GLF_FUZZED(injectionSwitch)))))).y, cos(_GLF_ZERO(0.0, injectionSwitch.x)), log(1.0), 0.0)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false)))))), ! _GLF_IDENTITY((! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, false), false))))))))))), ! (_GLF_IDENTITY(! ((! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, false), false)))))))))))), (! ((! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, false), false))))))))))))) && true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))) && true)), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))) && true)), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))), false)))))))), bool(bool((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), _GLF_IDENTITY(false, false || (false))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), clamp(_GLF_IDENTITY(min(0.0, 0.0), mix(float(_GLF_FUZZED(7.9)), float(_GLF_IDENTITY(min(0.0, 0.0), min(min(0.0, 0.0), min(0.0, 0.0)))), bool(true))), min(0.0, 0.0), min(0.0, 0.0)))), injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(-9.3))), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))), log(sqrt(1.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)))), mix(float(_GLF_FUZZED(1.4)), float(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(-9.3))), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))), log(sqrt(1.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)))), float(mat2x4(float(mat3(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(-9.3))), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))), log(sqrt(1.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))), bool(true)))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) | uvec3(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x) | (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec2(2440.8139, -6.3).s)), bool(false))), 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((9.7 - 9910.8621))), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), _GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch.x))).x))) << 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(vec2(-4.4, -643.807)))) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9061.1825) : injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch, injectionSwitch), clamp(clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch))))) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - log(exp(vec2(0.0, 0.0)))).y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), 0u ^ (subgroup_id)) * subgroup_size + subgroup_local_id, 0u ^ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id))), 1u, 1u, 0u)))) * subgroup_size + subgroup_local_id, _GLF_IDENTITY(uint(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + subgroup_local_id, 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + subgroup_local_id, 0u)), 0u), uvec2(uvec2(uvec2(uint(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + subgroup_local_id, 0u)), 0u))))), (uint(uvec2(uint(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), min(_GLF_IDENTITY((subgroup_id), clamp((subgroup_id), (subgroup_id), (subgroup_id))), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) / 1u)))) * subgroup_size + subgroup_local_id, 0u)), 0u))) << (1u ^ 1u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), max(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u << _GLF_IDENTITY(uint(6u), uint(6u))))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, ((subgroup_id) ^ 0u) >> 0u)), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, ((subgroup_id) ^ 0u) >> 0u))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, ((subgroup_id) ^ 0u) >> 0u)))))) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uint(subgroup_id), 0u | (uint(subgroup_id))))), subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), 1u * (_GLF_IDENTITY((subgroup_id), 1u * ((subgroup_id))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) | 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, max(0u, 0u)) ^ (_GLF_IDENTITY(0u, (0u) | (0u)))))), _GLF_IDENTITY(((subgroup_id) ^ 0u) >> 0u, (((subgroup_id) ^ 0u) >> 0u) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))) ^ 0u) >> 0u, 0u ^ (((subgroup_id) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) / 1u)) >> 0u)))))))) * subgroup_size) + 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u)) | (next_virtual_gid))], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) - (0 << _GLF_IDENTITY(int(2), int(2)))), 0 + (4)), _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY((64) ^ 0, min(_GLF_IDENTITY((64) ^ 0, 0 | ((64) ^ 0)), (64) ^ 0)))) << 0), 64)), 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, 0 ^ (0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))) && true) || (false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))) && true) || (false)))), true, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, _GLF_IDENTITY(true, (true) && true)))) && true), true, true, false)))), (injectionSwitch.x > injectionSwitch.y)) || (false)))))) && _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true)))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED((-29.34 / 8.6))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    return;
   int i = _GLF_IDENTITY(0, 0 + (0));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.5)), float(injectionSwitch.y), bool(true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 1u * (read_1)) == _GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) | (read_2)), _GLF_IDENTITY((read_2), 0u | ((read_2))) | (read_2)), (_GLF_IDENTITY(read_1, max(read_1, read_1)) == _GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))) ^ 0u)) || false)) + 1, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, (false) || false))), true, false))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.8)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-571.099) : injectionSwitch.y))), bool(true)))) / 1.0))))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), abs(1.0) * (float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0))))) > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((false), true && ((false)))), _GLF_IDENTITY(bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ((_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && ((false)))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && ((false))))))), _GLF_IDENTITY(bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3((bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3((bool(bvec3((! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true), true)), false))))))))))))) && true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(read_1 == _GLF_IDENTITY(read_2, _GLF_IDENTITY(~ (~ (read_2)), (~ (~ (read_2))) << 0u))) + 1, 4, 64, 4);
  }
}
