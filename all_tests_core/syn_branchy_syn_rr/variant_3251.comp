#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) < _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))), 0 | (int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))))), int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))))), max(int(3), int(3)))), 0 ^ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : int(3)), max((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(_injected_loop_counter) : int(3)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) - 0)))))), int(3))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 | (3))), max(int(3), int(3))))) - 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, _GLF_IDENTITY(1 * (_GLF_IDENTITY(3, (3) ^ 0)), (1 * _GLF_IDENTITY((_GLF_IDENTITY(3, (3) ^ 0)), ((_GLF_IDENTITY(3, (3) ^ 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), (_GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(3, (3) ^ 0)))), clamp(_GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0))), 0 + (_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0)))))) >> 0)), max(clamp(3, 3, _GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0)))), clamp(3, 3, _GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(3, int(ivec3(3, 0, 1))), 1)), max(int(ivec2(_GLF_IDENTITY(3, int(ivec3(3, 0, 1))), 1)), int(ivec2(_GLF_IDENTITY(3, int(ivec3(3, 0, 1))), 1))))), 1 * (_GLF_IDENTITY(3, (3) ^ 0)))))), clamp(3, 3, _GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0)))), clamp(3, 3, _GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0))))))) << 0))), _GLF_IDENTITY(int(3), max(int(3), int(3))))))) | (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, 0)))) >> _GLF_IDENTITY(int(0), int(0)))), ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))), 0 | (int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))))), int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((- -71963))))))), max(int(3), int(3)))), 0 ^ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : int(3)), max((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(_injected_loop_counter) : int(3)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) - 0)))))), int(3))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 | (3))), max(int(3), int(3))))) - 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, _GLF_IDENTITY(1 * (_GLF_IDENTITY(3, (3) ^ 0)), (1 * _GLF_IDENTITY((_GLF_IDENTITY(3, (3) ^ 0)), ((_GLF_IDENTITY(3, (3) ^ 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), (_GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(3, (3) ^ 0)))), clamp(_GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0))), 0 + (_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0)))))) >> 0)), max(clamp(3, 3, _GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0)))), clamp(3, 3, _GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(3, int(ivec3(3, 0, 1))), 1)), max(int(ivec2(_GLF_IDENTITY(3, int(ivec3(3, 0, 1))), 1)), int(ivec2(_GLF_IDENTITY(3, int(ivec3(3, 0, 1))), 1))))), 1 * (_GLF_IDENTITY(3, (3) ^ 0)))))), clamp(3, 3, _GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0)))), clamp(3, 3, _GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) ^ 0))))))) << 0))), _GLF_IDENTITY(int(3), max(int(3), int(3))))))) | (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, 0)))) >> _GLF_IDENTITY(int(0), int(0))))) | 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))), ! (! (bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))))))))), (_GLF_IDENTITY(false, (false) && true)) && true)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           continue;
           if(_GLF_DEAD(false))
            break;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.y = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.z = workgroup_size;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0))))), max(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0))))), float(mat4(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0))))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) || false)), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), max(int(5), int(5)))))))), _GLF_IDENTITY(int(5), min(int(5), int(5))))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), int(ivec3(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), 1, 1))))), false || (_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), min(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), min(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))))), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (int(5))), min(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))))) / 1))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec2(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (false ? _GLF_FUZZED(ivec2(-95353, -46511)) : ivec2(1, 1))))) * (int(7)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true))), true && (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((0 | (1 ^ 1)) << _GLF_IDENTITY(int(2), int(2))), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((0 | (1 ^ 1)) << _GLF_IDENTITY(int(2), int(2)))), (! (_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + (0 << _GLF_IDENTITY(int(4), int(4)))))) | (1 ^ 1)) << _GLF_IDENTITY(int(2), int(2))), (true ? ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + (0 << _GLF_IDENTITY(int(4), int(4)))))) | (1 ^ 1)) << _GLF_IDENTITY(int(2), int(2))) : _GLF_FUZZED(_injected_loop_counter))))) && true)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) || false)))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.z * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) << uvec3(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))), 0u), min((GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) << uvec3(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))), 0u), (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) << uvec3(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))), 0u)))).y;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, true))), true)))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           continue;
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 114267u, ~ (~ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & _GLF_IDENTITY(114267u, max(114267u, _GLF_IDENTITY(114267u, (114267u) | 0u))))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), (uint(uvec3(subgroup_size, 0u, 0u))) | (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))))), ~ (subgroup_size))))) + ((GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.y + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(23358) : 1))) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, true && (true)) && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))))))
        return;
      }
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))) && true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-32592) : int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (_GLF_IDENTITY(int(1), (int(1)) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           return;
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(bool(false), true), bvec2(bvec2(bvec2(bool(false), true))))))))))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), 0 | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      break;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), true), true)))))))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? 2.4 : 45.19)), _GLF_FUZZED(-8.8)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0) : _GLF_FUZZED(clamp(7807.7929, 831.394, 365.767))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
      return;
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x = read_1, (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x = read_1) + _GLF_IDENTITY(0u, 1u * (0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && _GLF_IDENTITY(((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) && true), (((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) && true)) || false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(sinh(4.8))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_injected_loop_counter != 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(277.283) : injectionSwitch.x)))) > injectionSwitch.y))))
                  continue;
                 return;
                }
              }
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))) && true)) && true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (! (true))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))) && true))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))); _injected_loop_counter --)
          {
           return;
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, true, true)), bool(bvec4(bool(bvec4(! (true), true, true, true)), false, false, true))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    return;
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, sin(0.0)))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))) ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-8.8, 0.1), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (vec2(-8.8, 0.1)), (mat2(1.0) * (vec2(-8.8, 0.1))) * mat2(1.0)), vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.2)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, tan(0.0))), (float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, tan(0.0)))) - 0.0), min(float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, tan(0.0))), float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.8) : _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0)))))))))))), 1.0) * (mat2(1.0) * (vec2(-8.8, _GLF_IDENTITY(0.1, clamp(0.1, 0.1, 0.1)))))))) : injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch, max(false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch)))))).y, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, 0.1)), mix(vec2((_GLF_FUZZED(vec2(-8.8, 0.1)))[0], (_GLF_FUZZED(vec2(-8.8, 0.1)))[1]), vec2(_GLF_FUZZED(vec2(_GLF_IDENTITY(948.442, _GLF_IDENTITY(min(948.442, 948.442), float(mat2(_GLF_IDENTITY(min(948.442, 948.442), max(min(948.442, 948.442), min(948.442, 948.442))), 1.0, 1.0, 1.0)))), -1493.6611).r), _GLF_FUZZED(3.4)), bvec2(false, false))) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0), transpose(transpose(mat4x3(injectionSwitch, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))))))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch)))).y) / 1.0, (_GLF_IDENTITY(true, bool(bool(true))) ? (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.8, _GLF_IDENTITY(0.1, min(0.1, _GLF_IDENTITY(0.1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(tanh(1.6)) : 0.1)))))) : injectionSwitch)).y) / 1.0 : _GLF_FUZZED(2708.9334)))) : _GLF_FUZZED(1.1)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, 0.1)), mix(vec2((_GLF_FUZZED(vec2(-8.8, 0.1)))[0], (_GLF_FUZZED(vec2(-8.8, 0.1)))[1]), vec2(_GLF_FUZZED(vec2(_GLF_IDENTITY(948.442, _GLF_IDENTITY(min(948.442, 948.442), float(mat2(_GLF_IDENTITY(min(948.442, 948.442), max(min(948.442, 948.442), min(948.442, 948.442))), 1.0, 1.0, 1.0)))), -1493.6611).r), _GLF_FUZZED(3.4)), bvec2(false, false))) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0), transpose(transpose(mat4x3(injectionSwitch, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))))))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(-8.8, 0.1)) : injectionSwitch)))).y) / 1.0, (_GLF_IDENTITY(true, bool(bool(true))) ? (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.8, _GLF_IDENTITY(0.1, min(0.1, _GLF_IDENTITY(0.1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(tanh(1.6)) : 0.1)))))) : injectionSwitch)).y) / 1.0 : _GLF_FUZZED(2708.9334)))) : _GLF_FUZZED(1.1))) + 0.0))))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.y, uint(uvec3(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.y, 1u, 1u))) + 1 < _GLF_IDENTITY(subgroup_size, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))) * _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u), clamp(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u)) | (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u)))), true && (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.y + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u ^ (3u))), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))) * _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(((subgroup_size)), ~ (~ (((subgroup_size))))) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) + 0u), 0u)))), uint(uvec2(_GLF_IDENTITY(subgroup_size, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u ^ (3u))), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))) * _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(((subgroup_size)), ~ (~ (((subgroup_size))))) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) + 0u), 0u)))), 0u))))))
        {
         int i = 0;
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 1 * (0)), 0))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(0, 0, 0)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
            break;
           if(_GLF_DEAD(false))
            continue;
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x, (true ? _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x : _GLF_FUZZED(workgroup_id))), min(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x, _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, min(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size))) << uvec3(0u, 0u, 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size), min(_GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size), _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size))) : _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, min(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) << uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, clamp((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, clamp((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u))), clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, clamp((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, clamp((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u))), 0u | (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, clamp((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u))))), _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, clamp((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2)))) + 0u)))))))) + (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) : GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x)))) == read_2) + 1, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, max(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size)).x == read_2))))))) + 1, (uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, true && (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))) + 1) >> 0u), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, _GLF_IDENTITY(! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))), true && (! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))))), true && (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))))), true && (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))))), true && (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))))))))) || false)))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u)))))), min((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, max(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size))) - uvec3(0u, 0u, 0u)).x == read_2) + 1) >> 0u), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size, (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)).x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, bool(bvec2(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, true))), ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, _GLF_IDENTITY(! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)), ! (_GLF_IDENTITY(! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))) || false))))) || false)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, _GLF_IDENTITY(! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)), ! (_GLF_IDENTITY(! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))) || false))))) || false))))))), ~ (~ (uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, _GLF_IDENTITY(! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)), ! (_GLF_IDENTITY(! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))) || false))))) || false)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, _GLF_IDENTITY(! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)), ! (_GLF_IDENTITY(! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))), (! (! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)))) || false))))) || false)))))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u))), (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2, ! (! (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2))))))) + 1, (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2) + 1) >> 0u))))))))))))), 4, 64, 4);
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x, 1u * (GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x)) == read_2), (uint(GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size.x == read_2)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) | (1))), (_GLF_IDENTITY(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) | (1))), (max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) | (1)))) | (max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) | (1)))))) + 0)), max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 + (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) | (1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(int(4), int(4))) | (1)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(4, 0, 0, 0)))))) | _GLF_IDENTITY((1), ((1)) ^ (0 >> _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(0, 0 ^ (0)) >> _GLF_IDENTITY(int(4), int(4))) | (1))))) - 0))))), _GLF_IDENTITY(4, int(ivec3(_GLF_IDENTITY(4, int(ivec3(4, 1, 0))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 64, 4);
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
  }
}
