#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_71 {
 mat2 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_68 {
 mat3 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 ivec2 _f4;
 bool _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_67 {
 int _f0;
 uvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_69 {
 mat4x2 _f0;
 _GLF_struct_67 _f1;
 _GLF_struct_68 _f2;
 uvec2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_65 {
 vec2 _f0;
 uvec3 _f1;
 ivec2 _f2;
 mat3x4 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_64 {
 mat4x2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_66 {
 _GLF_struct_64 _f0;
 vec2 _f1;
 _GLF_struct_65 _f2;
} ;

struct _GLF_struct_62 {
 bool _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_61 {
 mat2x4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_60 {
 ivec3 _f0;
} ;

struct _GLF_struct_59 {
 mat3 _f0;
 ivec4 _f1;
 ivec4 _f2;
 mat4 _f3;
 uint _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_63 {
 _GLF_struct_59 _f0;
 mat3x2 _f1;
 _GLF_struct_60 _f2;
 uvec3 _f3;
 int _f4;
 _GLF_struct_61 _f5;
 _GLF_struct_62 _f6;
} ;

struct _GLF_struct_57 {
 uvec3 _f0;
 bool _f1;
 mat4x3 _f2;
 uvec2 _f3;
 mat3x4 _f4;
 float _f5;
} ;

struct _GLF_struct_56 {
 mat3x4 _f0;
 float _f1;
 bool _f2;
 mat3 _f3;
 mat4x3 _f4;
 ivec3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_55 {
 uvec2 _f0;
 ivec3 _f1;
 mat4x3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_54 {
 int _f0;
 float _f1;
 vec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_53 {
 uvec3 _f0;
 float _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_58 {
 _GLF_struct_53 _f0;
 _GLF_struct_54 _f1;
 _GLF_struct_55 _f2;
 _GLF_struct_56 _f3;
 _GLF_struct_57 _f4;
} ;

struct _GLF_struct_51 {
 mat2x4 _f0;
 bool _f1;
 vec4 _f2;
 float _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_50 {
 ivec3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_49 {
 mat4x3 _f0;
 int _f1;
 mat4x2 _f2;
 uvec3 _f3;
 bvec3 _f4;
 mat3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_48 {
 uvec3 _f0;
 bool _f1;
 mat2 _f2;
 mat4x3 _f3;
 mat4x3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_52 {
 _GLF_struct_48 _f0;
 _GLF_struct_49 _f1;
 _GLF_struct_50 _f2;
 int _f3;
 mat3x2 _f4;
 _GLF_struct_51 _f5;
} ;

struct _GLF_struct_70 {
 _GLF_struct_52 _f0;
 _GLF_struct_58 _f1;
 _GLF_struct_63 _f2;
 bvec4 _f3;
 _GLF_struct_66 _f4;
 _GLF_struct_69 _f5;
 int i;
} ;

struct _GLF_struct_45 {
 uvec2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_46 {
 mat2x3 _f0;
 _GLF_struct_45 _f1;
} ;

struct _GLF_struct_43 {
 ivec4 _f0;
 bvec3 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_42 {
 bvec4 _f0;
 ivec4 _f1;
 mat4x3 _f2;
 mat4x3 _f3;
 mat4 _f4;
 vec3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_41 {
 int _f0;
 uint _f1;
 uint read_1;
 uvec4 _f2;
 int _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_40 {
 float _f0;
} ;

struct _GLF_struct_44 {
 _GLF_struct_40 _f0;
 mat3x2 _f1;
 _GLF_struct_41 _f2;
 _GLF_struct_42 _f3;
 _GLF_struct_43 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_47 {
 _GLF_struct_44 _f0;
 _GLF_struct_46 _f1;
} ;

struct _GLF_struct_37 {
 mat2x4 _f0;
 ivec3 _f1;
 bvec3 _f2;
 bool _f3;
 bvec4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_38 {
 ivec4 _f0;
 _GLF_struct_37 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_35 {
 vec3 _f0;
 mat3x4 _f1;
 bool _f2;
 mat3 _f3;
} ;

struct _GLF_struct_34 {
 vec4 _f0;
} ;

struct _GLF_struct_33 {
 bvec3 _f0;
 vec4 _f1;
 uvec3 _f2;
 vec3 _f3;
 bvec3 _f4;
 bvec3 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_32 {
 vec4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_31 {
 mat3x4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_36 {
 _GLF_struct_31 _f0;
 mat2x3 _f1;
 _GLF_struct_32 _f2;
 mat2 _f3;
 _GLF_struct_33 _f4;
 _GLF_struct_34 _f5;
 _GLF_struct_35 _f6;
} ;

struct _GLF_struct_29 {
 vec3 _f0;
} ;

struct _GLF_struct_30 {
 int _f0;
 ivec2 _f1;
 _GLF_struct_29 _f2;
 uvec4 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_27 {
 ivec3 _f0;
 bvec4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_26 {
 int _f0;
 mat3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_25 {
 mat2x3 _f0;
 bvec4 _f1;
 uvec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_28 {
 mat3 _f0;
 uint num_workgroup;
 int _f1;
 vec2 _f2;
 mat4x3 _f3;
 _GLF_struct_25 _f4;
 _GLF_struct_26 _f5;
 _GLF_struct_27 _f6;
} ;

struct _GLF_struct_23 {
 ivec4 _f0;
 vec3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_22 {
 uvec2 _f0;
 vec3 _f1;
 mat4x3 _f2;
 float _f3;
 mat4x2 _f4;
 uint _f5;
 mat4 _f6;
} ;

struct _GLF_struct_21 {
 ivec3 _f0;
 int _f1;
 mat3 _f2;
 bvec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_20 {
 float _f0;
 mat2x3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
 bvec2 _f3;
 _GLF_struct_23 _f4;
} ;

struct _GLF_struct_39 {
 _GLF_struct_24 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_30 _f2;
 mat4x2 _f3;
 _GLF_struct_36 _f4;
 bvec4 _f5;
 _GLF_struct_38 _f6;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
 float _f1;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
 bvec4 _f1;
 mat4x3 _f2;
 vec2 _f3;
 bvec2 _f4;
 ivec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
 uint _f1;
 int _f2;
 uvec4 _f3;
 mat4 _f4;
 bvec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
 ivec2 _f1;
 ivec3 _f2;
 uvec4 _f3;
 mat4x2 _f4;
 int _f5;
} ;

struct _GLF_struct_10 {
 uvec3 _f0;
 ivec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_19 {
 uint subgroup_local_id;
 _GLF_struct_12 _f0;
 _GLF_struct_14 _f1;
 bool _f2;
 uvec4 _f3;
 int _f4;
 _GLF_struct_16 _f5;
 _GLF_struct_18 _f6;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 uvec2 _f1;
 vec4 _f2;
 mat4x3 _f3;
 uint _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 uvec3 _f1;
 vec4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 vec2 _f1;
 int _f2;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 int _f1;
 bvec4 _f2;
 vec3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat2x4 _f1;
 uvec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 float _f3;
 ivec4 _f4;
 vec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 ivec3 _f1;
 _GLF_struct_1 _f2;
 mat2 _f3;
 bool _f4;
 _GLF_struct_2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_3 _f0;
 _GLF_struct_6 _f1;
 uint subgroup_id;
 _GLF_struct_8 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_3(_GLF_struct_0(mat3x4(1.0)), ivec3(1), _GLF_struct_1(uvec3(1u), bvec4(true), mat2x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(629.444), min(_GLF_FUZZED(629.444), _GLF_FUZZED(629.444))), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(abs(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0))) * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(629.444, mix(float(629.444), float(_GLF_FUZZED(-639.007)), bool(false)))), min(_GLF_FUZZED(629.444), _GLF_FUZZED(629.444))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(629.444), min(_GLF_FUZZED(629.444), _GLF_FUZZED(629.444))), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-0.5))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))) * (_GLF_IDENTITY(_GLF_FUZZED(629.444), min(_GLF_FUZZED(629.444), _GLF_FUZZED(629.444))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(629.444, mix(float(629.444), float(_GLF_FUZZED(7375.4382)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(_GLF_FUZZED(629.444), _GLF_FUZZED(629.444))), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(abs(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0))) * (_GLF_IDENTITY(_GLF_FUZZED(629.444), min(_GLF_FUZZED(629.444), _GLF_FUZZED(629.444)))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0, ivec4(1), vec2(1.0), vec2(1.0)), mat2(1.0), true, _GLF_struct_2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), uvec4(1u), mat2x4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mat3x2(1.0)), _GLF_struct_6(uvec2(1u), 1, bvec4(true), vec3(1.0), _GLF_struct_4(_GLF_IDENTITY(ivec2(1), ivec2(ivec3(ivec2(_GLF_IDENTITY(1, min(1, 1))), (1 & _GLF_IDENTITY(1, (false ? _GLF_FUZZED((false ? -66595 : 50186)) : 1)))))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) * vec2(1.0, 1.0)), 1), _GLF_struct_5(mat3x4(1.0), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, max(1u, 1u))), uvec3(uvec4(uvec3(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | 0u), 1u))), 1u))), vec4(1.0), mat3(1.0))), gl_SubgroupID, _GLF_struct_8(_GLF_struct_7(uvec3(1u), uvec2(1u), vec4(1.0), mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1u), mat2(1.0)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(gl_SubgroupInvocationID, _GLF_struct_12(_GLF_struct_10(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), ((1u) | (1u)) | 0u))), max(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u))), (1u) | (1u))), uvec3(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u))), (1u) | (1u)))))), uvec3(_GLF_IDENTITY(1u, (1u) | (1u))))), ivec2(1), 1u), _GLF_struct_11(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, _GLF_IDENTITY(0u, 0u | (0u)), 0u) ^ (uvec4(1u))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, _GLF_IDENTITY(0u, 0u | (0u)), 0u) ^ (uvec4(1u))))), ivec2(1), ivec3(1), uvec4(1u), mat4x2(1.0), 1)), _GLF_struct_14(mat2(1.0), _GLF_struct_13(mat2(1.0), 1u, 1, uvec4(1u), mat4(1.0), bvec4(true), bvec2(true))), true, uvec4(1u), 1, _GLF_struct_16(_GLF_struct_15(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, (0u | 0u), (1u | 0u))), 0u + (uint(uvec4(1u, 1u, (0u | 0u), (_GLF_IDENTITY(1u | 0u, (1u | 0u) - 0u))))))), _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u))), bvec4(true), mat4x3(1.0), vec2(1.0), bvec2(true), ivec2(1), mat3x4(1.0))), _GLF_struct_18(_GLF_struct_17(mat2x3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9962.3313) : 1.0))), mat2x4(1.0), mat4x2(1.0), vec2(1.0)), 1.0));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(_GLF_struct_24(_GLF_struct_20(1.0, mat2x3(1.0), ivec3(1)), _GLF_struct_21(ivec3(1), _GLF_IDENTITY(1, (1) * 1), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-9.8)))), bvec4(true), uvec4(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u))))), _GLF_struct_22(uvec2(1u), vec3(1.0), mat4x3(1.0), 1.0, mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.7)), float(_GLF_IDENTITY(1.0, 0.0 + (1.0))), bool(true)))), 1u, mat4(1.0)), bvec2(true), _GLF_struct_23(ivec4(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 0)))), vec3(1.0), vec2(1.0))), _GLF_struct_28(mat3(1.0), _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x, gl_NumWorkGroups.x)), 1, vec2(1.0), mat4x3(1.0), _GLF_struct_25(mat2x3(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, exp(0.0), _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(_GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(vec2(1.0, abs(0.0)), mix(vec2(_GLF_FUZZED(vec4(6.9, -7.6, -9360.3248, -92.82).a), _GLF_FUZZED(-2.8)), vec2((vec2(1.0, abs(0.0)))[_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) << (0 >> _GLF_IDENTITY(int(1), int(1))))) | (0), ((_GLF_IDENTITY(0, (0) << (0 >> _GLF_IDENTITY(int(1), int(1))))) | (0)) ^ 0))], (vec2(1.0, abs(0.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0)), vec2(1.0, abs(0.0))), (dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0)), vec2(1.0, abs(0.0)))) * 1.0), mix(float(_GLF_FUZZED(-2178.0977)), float(_GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0)), vec2(1.0, abs(0.0))), (dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0)), vec2(1.0, abs(0.0)))) * 1.0)), bool(true))), _GLF_IDENTITY((dot(vec2(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, exp(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) / vec2(1.0, 1.0)).y), sqrt(0.0)), vec2(1.0, abs(0.0)))), float(mat4((dot(vec2(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, exp(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) / vec2(1.0, 1.0)).y), sqrt(0.0)), vec2(1.0, abs(0.0)))), sin(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0)), sqrt(1.0)))) * 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), log(abs(1.0)), 0.0, cos(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) - 0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)))), bvec4(true), uvec4(1u), uvec2(_GLF_IDENTITY(1u, (1u) * 1u))), _GLF_struct_26(1, mat3(1.0), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(true), true)), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec3(bvec2(true), true)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))))), _GLF_struct_27(_GLF_IDENTITY(ivec3(1), (true ? _GLF_IDENTITY(ivec3(1), ivec3(ivec4(ivec3(1), (1 ^ 1)))) : _GLF_FUZZED((29648 - ivec3(-85656, -87381, 33374))))), bvec4(_GLF_IDENTITY(true, ! (! (true)))), bvec3(true))), _GLF_struct_30(1, ivec2(1), _GLF_struct_29(vec3(1.0)), uvec4(1u), mat3x4(1.0)), mat4x2(1.0), _GLF_struct_36(_GLF_struct_31(mat3x4(1.0), mat3x4(1.0)), mat2x3(1.0), _GLF_struct_32(vec4(1.0), bvec4(true)), _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), _GLF_struct_33(bvec3(true), vec4(1.0), uvec3(1u), vec3(1.0), bvec3(true), bvec3(true), mat2(1.0)), _GLF_struct_34(vec4(1.0)), _GLF_struct_35(vec3(1.0), mat3x4(1.0), true, mat3(1.0))), bvec4(true), _GLF_struct_38(ivec4(1), _GLF_struct_37(mat2x4(1.0), ivec3(1), bvec3(true), _GLF_IDENTITY(true, false || (true)), bvec4(true), mat3x4(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! _GLF_IDENTITY(((true)), false || (_GLF_IDENTITY(((true)), (((true))) && true)))))))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), _GLF_IDENTITY(true, ! (! (true))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((true))))))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), _GLF_IDENTITY(true, ! (! (true))))))), false))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))), ! (! ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))) && true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, ((_GLF_IDENTITY(true, ! (! (true)))) && true) && true)), (bool(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, ((_GLF_IDENTITY(true, ! (! (true)))) && true) && true))) || false))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false)))))))) && true))))), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))))), false)))))))), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((2780.5542 * -59.66))), bool(false))) > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))))), true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-19.05), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), bvec2(true, false))).y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-19.05), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), bvec2(true, false))).y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-19.05), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), bvec2(true, false))).y)), (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-19.05), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), bvec2(true, false))).y))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))))), true))), _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(true, ! (! (true)))) && true, false), bvec2(bvec4(bvec2((_GLF_IDENTITY(true, ! (! (true)))) && true, false), false, false))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec2(true, true)))), false)), true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (_GLF_IDENTITY(true, ! (! (true)))) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))) && true)), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true), false)), true)))))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true, true)))))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(41.60, -178.588)) : injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))), false, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false))), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))))))), false, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-132.367)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_9.subgroup_id * subgroup_size + _GLF_struct_replacement_19.subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, ! (! (true))))))));
  }
 _GLF_struct_71 _GLF_struct_replacement_71 = _GLF_struct_71(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base)) + _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id * subgroup_size, max(_GLF_struct_replacement_9.subgroup_id * subgroup_size, _GLF_struct_replacement_9.subgroup_id * subgroup_size))) >> 0u), (workgroup_base + _GLF_struct_replacement_9.subgroup_id * subgroup_size) | 0u) + ((_GLF_struct_replacement_19.subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base)) + _GLF_struct_replacement_9.subgroup_id * subgroup_size, (workgroup_base + _GLF_struct_replacement_9.subgroup_id * subgroup_size) | 0u) + ((_GLF_struct_replacement_19.subgroup_local_id + 1) % subgroup_size)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base)) + _GLF_struct_replacement_9.subgroup_id * subgroup_size, (workgroup_base + _GLF_struct_replacement_9.subgroup_id * subgroup_size) | 0u) + ((_GLF_struct_replacement_19.subgroup_local_id + 1) % subgroup_size))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   atomicStore(buf[_GLF_struct_replacement_71.next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))), (uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1)))) | (uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))))) : _GLF_FUZZED(workgroup_id))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, false, false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_47 _GLF_struct_replacement_47 = _GLF_struct_47(_GLF_struct_44(_GLF_struct_40(1.0), mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_41(1, 1u, atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(64, 64)), 0), uvec4(1u), 1, uvec3(1u)), _GLF_struct_42(bvec4(true), _GLF_IDENTITY(ivec4(1), ((ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(2), ivec4(2))) | ivec4(0, 0, 0, 0)) | (ivec4(1))), mat4x3(1.0), mat4x3(1.0), mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.0)), bool(false)))), vec3(1.0), mat2x4(1.0)), _GLF_struct_43(_GLF_IDENTITY(ivec4(1), (ivec4(1)) / ivec4(1, 1, 1, 1)), _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), false)))))), uvec2(_GLF_IDENTITY(1u, max(1u, 1u)))), mat3x4(1.0)), _GLF_struct_46(mat2x3(1.0), _GLF_struct_45(uvec2(1u), uvec4(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u))))));
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_struct_replacement_19.subgroup_local_id + 1, 0u | (_GLF_struct_replacement_19.subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-81861))))) < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) + 0) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((0 & -60426), ((0 & -60426)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-18.51)), vec2(_GLF_FUZZED(1702.9954), (injectionSwitch)[1]), bvec2(false, true))))).y)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat2x3(injectionSwitch[0], _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(injectionSwitch[0], _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0))))), injectionSwitch[1])).y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)), false || (bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)), false || (bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))))), (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))) > injectionSwitch.y)))) && true)))))))))))))) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) / cos(0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-5205.9411), float(vec4(_GLF_FUZZED(-5205.9411), tan(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), float(injectionSwitch.y), bool(true)))))))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))
    barrier();
   _GLF_struct_70 _GLF_struct_replacement_70 = _GLF_struct_70(_GLF_struct_52(_GLF_struct_48(uvec3(1u), true, mat2(1.0), mat4x3(1.0), mat4x3(1.0), mat2(1.0)), _GLF_struct_49(mat4x3(1.0), 1, mat4x2(1.0), uvec3(1u), bvec3(true), mat3(1.0), ivec3(_GLF_IDENTITY(1, min(1, 1)))), _GLF_struct_50(ivec3(1), uvec3(1u)), 1, mat3x2(1.0), _GLF_struct_51(mat2x4(1.0), true, vec4(1.0), 1.0, mat4x3(1.0))), _GLF_struct_58(_GLF_struct_53(uvec3(1u), 1.0, ivec4(1)), _GLF_struct_54(1, 1.0, vec2(1.0), ivec3(1)), _GLF_struct_55(uvec2(1u), ivec3(1), mat4x3(1.0), vec4(1.0)), _GLF_struct_56(mat3x4(1.0), 1.0, true, mat3(1.0), mat4x3(1.0), ivec3(1), mat3x4(1.0)), _GLF_struct_57(uvec3(1u), true, mat4x3(1.0), uvec2(1u), mat3x4(1.0), 1.0)), _GLF_struct_63(_GLF_struct_59(mat3(1.0), ivec4(1), ivec4(1), mat4(1.0), 1u, mat3x4(1.0)), mat3x2(1.0), _GLF_struct_60(ivec3(1)), uvec3(1u), 1, _GLF_struct_61(mat2x4(1.0), ivec3(1)), _GLF_struct_62(true, bvec4(true))), bvec4(true), _GLF_struct_66(_GLF_struct_64(mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(643.464)), float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), bool(true)))), mat4x2(1.0)), vec2(1.0), _GLF_struct_65(vec2(1.0), uvec3(1u), ivec2(1), mat3x4(1.0), mat4x2(1.0))), _GLF_struct_69(mat4x2(1.0), _GLF_struct_67(1, uvec4(1u), mat2x3(1.0)), _GLF_struct_68(mat3(1.0), uvec3(1u), mat2x4(1.0), mat4x2(1.0), ivec2(1), true, uvec3(1u)), _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), mat3x2(1.0)), _GLF_IDENTITY(0, (0) | 0));
   atomicStore(buf[_GLF_struct_replacement_71.next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), 0u ^ (_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)))), read_2)), (_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), 0u ^ (_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)))), read_2))) && true)) + 1, min(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))) + 1, (uint(_GLF_IDENTITY(_GLF_struct_replacement_47._f0._f2.read_1, (_GLF_struct_replacement_47._f0._f2.read_1) ^ 0u) == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))) + 1) + 0u), min(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(111842u) : read_2)), 0u | (read_2)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_2, 0u | (read_2)), 1u, 0u), (uvec3(_GLF_IDENTITY(read_2, 0u | (read_2)), 1u, 0u)) - uvec3(0u, 0u, 0u)))), read_2, read_2)), read_2))) + 1, uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))) + 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_2, 0u | (read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, 0u | (read_2)), clamp(_GLF_IDENTITY(read_2, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_2)), _GLF_IDENTITY(read_2, 0u | (read_2)), _GLF_IDENTITY(read_2, 0u | (read_2))))) >> 0u), read_2, read_2)), read_2))), ~ (~ (_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))), (_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))), (uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | _GLF_IDENTITY((read_2), (_GLF_IDENTITY((read_2), (false ? _GLF_FUZZED(workgroup_base) : (read_2)))) - 0u)), read_2, read_2)), read_2)))) >> 0u)) / 1u)))) + 1, (_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(0u | (read_2), (_GLF_IDENTITY(0u | (read_2), clamp(0u | (read_2), _GLF_IDENTITY(0u | (read_2), max(0u | (read_2), 0u | (read_2))), 0u | (read_2)))) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, 0u | (read_2)), clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), _GLF_IDENTITY(read_2, 0u | (read_2)), _GLF_IDENTITY(read_2, 0u | (read_2))))) >> 0u), read_2, read_2)), read_2))), ~ (~ (_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))), (_GLF_IDENTITY(uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | (read_2)), read_2, read_2)), read_2))), (uint(_GLF_struct_replacement_47._f0._f2.read_1 == _GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, 0u | _GLF_IDENTITY((read_2), (_GLF_IDENTITY((read_2), (false ? _GLF_FUZZED(workgroup_base) : (read_2)))) - 0u)), read_2, read_2)), read_2)))) >> 0u)) / 1u)))) + 1) ^ 0u)))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false))))))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false))))))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false))))))))), false), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_71.next_virtual_gid, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_struct_replacement_71.next_virtual_gid : _GLF_FUZZED(_GLF_struct_replacement_71.next_virtual_gid)))], uint(_GLF_struct_replacement_47._f0._f2.read_1 == read_2) + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, ~ (~ (4))), 4)), 64, 4);
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
