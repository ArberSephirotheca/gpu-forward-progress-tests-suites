#version 460
struct _GLF_struct_7 {
 uvec3 _f0;
 mat2x3 _f1;
 bool _f2;
 bvec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 mat2x4 _f1;
 vec3 _f2;
 int _f3;
 mat3x4 _f4;
 bvec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 bvec3 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_6 _f0;
 mat2x3 _f1;
 uint workgroup_id;
 _GLF_struct_8 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_3 {
 uint workgroup_size;
 vec3 _f0;
} ;

struct _GLF_struct_0 {
 bool _f0;
 vec2 _f1;
 mat2x4 _f2;
 ivec4 _f3;
 vec4 _f4;
 float _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 uint subgroup_local_id;
 _GLF_struct_1 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat3x2(1.0), gl_SubgroupInvocationID, _GLF_struct_1(_GLF_struct_0(true, vec2(1.0), mat2x4(1.0), ivec4(1), vec4(1.0), 1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_WorkGroupSize.x, vec3(1.0));
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_6(_GLF_struct_4(bvec3(true), mat2x4(1.0), vec3(1.0), 1, mat3x4(1.0), bvec3(true), bvec2(true)), bvec3(true), _GLF_struct_5(vec4(1.0), bvec2(true))), mat2x3(1.0), gl_WorkGroupID.x, _GLF_struct_8(_GLF_struct_7(uvec3(1u), mat2x3(1.0), true, bvec3(true), uvec2(1u))), mat3x4(1.0));
 uint workgroup_base = _GLF_struct_replacement_3.workgroup_size * _GLF_struct_replacement_9.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_2.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_2.subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_struct_replacement_2.subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
}
