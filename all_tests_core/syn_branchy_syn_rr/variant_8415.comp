#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_33 {
 vec4 _f0;
 bvec2 _f1;
 ivec4 _f2;
 ivec2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_32 {
 bvec4 _f0;
 mat4 _f1;
 bvec4 _f2;
 bvec4 _f3;
 ivec3 _f4;
 int _f5;
 vec2 _f6;
} ;

struct _GLF_struct_34 {
 _GLF_struct_32 _f0;
 _GLF_struct_33 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_31 {
 ivec4 _f0;
} ;

struct _GLF_struct_30 {
 vec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 bvec4 _f1;
 uint _f2;
 bvec3 _f3;
 ivec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_29 {
 mat4x2 _f0;
 _GLF_struct_28 _f1;
 mat4x2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_35 {
 uint subgroup_local_id;
 bool _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_30 _f2;
 _GLF_struct_31 _f3;
 bvec3 _f4;
 _GLF_struct_34 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_27 {
 bvec3 _GLF_SWITCH_0_10v;
 mat4x3 _f0;
 bvec3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_25 {
 mat4x2 _f0;
} ;

struct _GLF_struct_23 {
 uvec2 _f0;
} ;

struct _GLF_struct_22 {
 vec3 _f0;
 float _f1;
 vec3 _f2;
 vec4 _f3;
 int _f4;
 uint subgroup_id;
} ;

struct _GLF_struct_24 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_20 {
 vec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_19 {
 mat2x4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_21 {
 mat3 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_20 _f2;
} ;

struct _GLF_struct_26 {
 _GLF_struct_21 _f0;
 ivec2 _f1;
 uvec3 _f2;
 _GLF_struct_24 _f3;
 _GLF_struct_25 _f4;
} ;

struct _GLF_struct_18 {
 mat4 _GLF_SWITCH_0_26v;
 mat4x2 _f0;
} ;

struct _GLF_struct_15 {
 mat3x2 _f0;
 uvec2 _f1;
 bool _f2;
 bvec4 _f3;
 vec3 _f4;
 int _f5;
 float _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 bool _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
 mat4 _f1;
 bvec4 _f2;
 _GLF_struct_13 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
 mat2x4 _f1;
 int _f2;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
 mat3x4 _f1;
 mat2x3 _f2;
 bool _f3;
 vec4 _f4;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
 float _f1;
} ;

struct _GLF_struct_7 {
 int _f0;
 uvec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 bvec4 _f1;
 bvec2 _f2;
 vec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 bvec4 _f3;
 _GLF_struct_8 _f4;
 vec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_9 _f0;
 _GLF_struct_12 _f1;
 ivec3 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_16 _f4;
 uvec3 _GLF_SWITCH_0_22v;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 bvec3 _f1;
 mat2 _f2;
 mat2 _f3;
 uvec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
} ;

struct _GLF_struct_4 {
 uint _f0;
 _GLF_struct_2 _f1;
 uint _GLF_SWITCH_0_3v;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 uvec4 _f1;
 ivec2 _f2;
 _GLF_struct_4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_21(mat3(1.0), _GLF_struct_19(mat2x4(1.0), mat2(1.0)), _GLF_struct_20(vec2(1.0), vec4(1.0))), ivec2(1), uvec3(1u), _GLF_struct_24(_GLF_struct_22(vec3(1.0), 1.0, vec3(1.0), vec4(1.0), 1, gl_SubgroupID), _GLF_struct_23(uvec2(1u)), ivec3(1)), _GLF_struct_25(mat4x2(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = _GLF_struct_replacement_26._f3._f0.subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(gl_SubgroupInvocationID, true, _GLF_struct_29(mat4x2(1.0), _GLF_struct_28(mat4(1.0), bvec4(true), 1u, bvec3(true), ivec4(1), bvec4(true)), mat4x2(1.0), uvec3(1u)), _GLF_struct_30(vec4(1.0), true), _GLF_struct_31(ivec4(1)), bvec3(true), _GLF_struct_34(_GLF_struct_32(bvec4(true), mat4(1.0), bvec4(true), bvec4(true), ivec3(1), 1, vec2(1.0)), _GLF_struct_33(vec4(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false)))))), ivec4(1), ivec2(1), uvec4(1u)), ivec3(1)), ivec4(1));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
  {
   switch(_GLF_SWITCH(0))
    {
     case 6:
     uvec2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v;
     if(_GLF_DEAD(false))
      barrier();
     case 0:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     case 65:
     case 67:
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       switch(_GLF_SWITCH((0 & (- -14159))))
        {
         case 74:
         if(_GLF_DEAD(false))
          barrier();
         if(false)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             (mat3x2(-0.6, 8.7, -885.371, 12.42, -6.6, 6590.0430) / (mat3x2(-6262.9864, -831.503, 1.7, _GLF_IDENTITY(-33.74, min(-33.74, -33.74)), 33.42, -1.7) / mat3x2(97.10, -603.607, 2.9, 289.937, 4687.8520, -654.395)));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            ivec2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
             return;
            for(_GLF_struct_5 _GLF_struct_replacement_5; false; (mat2x4(mat3x2(9.7, -9.8, -0.7, 3.2, -6.7, -8.7)) + 7.8))
             {
              for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(ivec4(int(5), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), _GLF_IDENTITY(1, (1) >> 0), (1 ^ 0))))) + 0), int(5))) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
               {
                if(_GLF_DEAD(false))
                 {
                  for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) * int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                   }
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                    break;
                   }
                  barrier();
                 }
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  return;
                 }
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  return;
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    barrier();
                   }
                  else
                   {
                   }
                 }
               }
              ivec2 _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(346.911)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.4)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(346.911)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.4)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)))))))), (bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(346.911)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.4)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))
               barrier();
              do
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
               }
              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             }
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 ((mat3x4(-5761.4578) / mat3x4(23.99, 8.8, _GLF_IDENTITY(-0.6, (true ? -0.6 : _GLF_FUZZED(vec4(4.5, 1.8, -4646.0625, 390.346).s))), -0.0, -0.1, 1337.2562, 65.43, -62.54, 8.4, 8.6, 8.0, 8.0)) / (+ mat3x4(3848.2545, 0.3, -8472.3588, -5526.4240, -93.02, 1.6, 8.8, 2261.0090, 8.9, -7502.2659, 1.1, -338.158)));
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(vec2(9947.2785, -991.423))) : injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true)))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + vec2(0.0, 0.0)).y, false)), true, true, true)))), true, false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false)), true, true, true)))), true, false), true)))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true)))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))))), bool(bool(_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true, true)))), true, false), true)))))))))), false, false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             ivec3 _GLF_SWITCH_0_6v;
             mat3x4 _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))), (injectionSwitch.x < injectionSwitch.y))))
                {
                 injectionSwitch;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             ;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))) * 1.0) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (0 >> _GLF_IDENTITY(int(5), int(5))) ^ (int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             _GLF_struct_27 _GLF_struct_replacement_27;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             mat3 _GLF_SWITCH_0_11v[20];
             num_workgroup;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             mat3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
            }
            int _GLF_SWITCH_0_14v;
            if(_GLF_DEAD(false))
             barrier();
            bvec2 _GLF_SWITCH_0_15v;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
               {
                barrier();
               }
             }
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
               return;
              barrier();
             }
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                barrier();
               }
              else
               {
               }
             }
            if(mix(true, _GLF_IDENTITY(false, bool(bool(false))), false))
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) : _GLF_FUZZED(-92.98)), (true ? (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) : _GLF_FUZZED(-92.98)) : _GLF_FUZZED(0.2))))))))))
                 barrier();
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                return;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  return;
                 }
                if(_GLF_DEAD(false))
                 barrier();
                barrier();
               }
              ivec4 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[70], _GLF_SWITCH_0_18v;
              if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
               barrier();
              bvec4(true, false, false, true);
              mat4x2 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v[22], _GLF_SWITCH_0_21v;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  return;
                 }
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  barrier();
                 }
                else
                 {
                 }
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))).y))))
               barrier();
              _GLF_struct_17 _GLF_struct_replacement_17;
              mat3 _GLF_SWITCH_0_23v[33];
              bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))), ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), false, false, true);
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                return;
               }
              mat3x2(6.4, -8351.8879, -2725.3524, _GLF_IDENTITY(6143.5712, (_GLF_IDENTITY(6143.5712, min(6143.5712, 6143.5712))) - sqrt(0.0)), -5996.4061, _GLF_IDENTITY(-780.606, _GLF_IDENTITY((_GLF_IDENTITY(-780.606, (false ? _GLF_FUZZED(8.9) : -780.606))), (true ? (_GLF_IDENTITY(-780.606, (false ? _GLF_FUZZED(8.9) : -780.606))) : _GLF_FUZZED(9.1))) * 1.0));
             }
            else
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   {
                    for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                     {
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                       {
                        return;
                       }
                     }
                   }
                  barrier();
                 }
                return;
               }
              if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
               return;
              if(_GLF_DEAD(false))
               return;
              mat4 _GLF_SWITCH_0_24v, _GLF_SWITCH_0_25v;
              bitfieldExtract((uvec3(18956u, 121032u, 28321u)), floatBitsToInt(-7409.6446), _GLF_SWITCH_0_14v);
              if(_GLF_DEAD(false))
               barrier();
              for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 0, int(ivec2(_GLF_IDENTITY(1 | 0, (1 | 0) ^ 0), 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > (0 | (1 ^ 1))); _injected_loop_counter --)
               {
                outerProduct(vec3(-68.58, -8.6, -53.94), vec2(-9.2, 11.83));
               }
              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                   }
                  else
                   {
                    barrier();
                   }
                 }
               }
              _GLF_struct_18 _GLF_struct_replacement_18;
              _GLF_SWITCH_0_2v;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                barrier();
               }
              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
               {
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                   return;
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
                   barrier();
                 }
               }
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(false))
               {
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                 {
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                   }
                  else
                   {
                    barrier();
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                   }
                 }
               }
              mat4x2 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v[24], _GLF_SWITCH_0_29v;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                barrier();
               }
              if(_GLF_DEAD(false))
               barrier();
              282.980;
              bvec3 _GLF_SWITCH_0_30v[68], _GLF_SWITCH_0_31v;
              if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 barrier();
                barrier();
               }
              if(_GLF_DEAD(false))
               barrier();
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  barrier();
                 }
                barrier();
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              bool _GLF_SWITCH_0_32v;
             }
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              mat4(7.3, 2598.3049, -7.2, _GLF_IDENTITY(9586.7451, mix(float(9586.7451), float(_GLF_FUZZED(-0.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.5, 7.1, -5.6, -4.3, 3.2, _GLF_IDENTITY(-377.074, _GLF_IDENTITY((-377.074) / 1.0, clamp(_GLF_IDENTITY((-377.074) / 1.0, float(mat4((-377.074) / 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0))), (-377.074) / 1.0, (-377.074) / 1.0))), 195.879, -6.3, -2.2, 23.29, -1.1, 82.75);
             }
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  barrier();
                 }
               }
              barrier();
             }
            if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                barrier();
               }
              else
               {
               }
             }
            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
             {
              mat4(-7.5, -7.5, -465.590, 2017.0193, -654.171, 7.9, 52.43, _GLF_IDENTITY(-4.8, float(mat3(_GLF_IDENTITY(-4.8, clamp(-4.8, -4.8, -4.8)), 1.0, 0.0, exp(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0))), 6989.6135, 4544.2484, 8824.2064, -9.7, 2.0, 96.10, 1786.8893, -28.34);
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  return;
                 }
                else
                 {
                 }
               }
              (mat4x3(-404.814, -68.85, 65.26, 7.7, -1873.8004, -666.592, -217.707, -965.326, 5241.5774, -4.1, -92.49, -257.981) , mat3x2(-7.9, 307.659, 7.2, 2543.3423, 1.7, -3546.5491));
              do
               {
                if(_GLF_DEAD(false))
                 {
                  for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                   {
                    barrier();
                    if(_GLF_DEAD(false))
                     continue;
                   }
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), length(sin(vec2(0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0))))), (true ? vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), length(sin(vec2(0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0))))) : _GLF_FUZZED(vec2(681.325, 62.19))))).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
               barrier();
              bvec2 _GLF_SWITCH_0_33v[33];
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 1.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0)), max(_GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 1.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) - vec2(0.0, 0.0)), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0)), (_GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 1.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-9.8, -7273.4898))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(mat2x4(injectionSwitch.y, 1.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-9.8, -7273.4898))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0)) : _GLF_FUZZED(reflect(247.383, 624.926))))) - 0.0), float(mat2x4(injectionSwitch.y, 1.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), mix(vec2(_GLF_FUZZED(-62.84), _GLF_FUZZED(28.06)), vec2((vec2(0.0, 1.0))[0], (vec2(0.0, 1.0))[1]), bvec2(true, true)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0)))))))))
                 barrier();
               }
              else
               {
               }
             }
            for(            (mat3(vec3(_GLF_IDENTITY(-9815.3031, min(-9815.3031, -9815.3031)), -478.927, 1.9), vec3(-33.90, -699.850, _GLF_IDENTITY(-2.8, (-2.8) / abs(1.0))), vec3(505.868, -963.111, -1.6)) * mat3(8.7, -8347.5874, -4826.6322, -865.319, 48.14, 67.33, _GLF_IDENTITY(1562.3873, mix(float(_GLF_FUZZED(8676.0767)), float(1562.3873), bool(true))), -2.3, -1.4));
 false; ((uvec4(14932u, 193352u, 5050u, 155165u) | uvec4(91080u, 92804u, 43979u, 98562u)) * (uvec2(54136u, 197568u).r | subgroup_size)))
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                break;
               }
              switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
               {
                case 67:
                vec4 _GLF_SWITCH_2_0v[71], _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                   {
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       barrier();
                      return;
                     }
                   }
                  break;
                 }
                case 69:
                uint _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v, _GLF_SWITCH_2_5v[20];
                if(_GLF_DEAD(false))
                 barrier();
                case 0:
                mat3 _GLF_SWITCH_0_34v[50], _GLF_SWITCH_0_35v;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  barrier();
                 }
                mat2x3 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v[15], _GLF_SWITCH_0_38v;
                if(_GLF_DEAD(false))
                 barrier();
                trunc(smoothstep(-3.3, -61.38, vec4(3002.2560, 3563.9046, -4.3, -86.89)));
                case 62:
                if(_GLF_DEAD(false))
                 break;
                (ivec3(-21813, _GLF_IDENTITY(-15039, (_GLF_IDENTITY(-15039, 1 * (-15039))) ^ (0 >> _GLF_IDENTITY(int(4), int(4)))), -13137) & _GLF_SWITCH_0_14v);
                break;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(false))
                 barrier();
                case 25:
                do
                 {
                  if(_GLF_DEAD(false))
                   {
                    do
                     {
                      barrier();
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                mat4x2 _GLF_SWITCH_2_6v;
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                default:
                if(_GLF_DEAD(false))
                 continue;
                1;
                if(_GLF_DEAD(false))
                 barrier();
               }
             }
           }
           while((num_workgroup > 197628u))
            {
             for(uvec2 _GLF_SWITCH_0_39v[38], _GLF_SWITCH_0_40v[20]; ((subgroup_size % (+ subgroup_size)) > 104165u); (ivec2(_GLF_IDENTITY(68778, clamp(68778, 68778, 68778)), 92566) + ivec2(54269, 28116)))
              {
               float _GLF_SWITCH_0_41v, _GLF_SWITCH_0_42v;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               mat4 _GLF_SWITCH_0_43v;
               if(_GLF_DEAD(false))
                break;
               _GLF_IDENTITY(ivec4(19068, _GLF_IDENTITY(-89174, (-89174) + int(_GLF_ZERO(0.0, injectionSwitch.x))), -40792, 38829).yxzw, (ivec4(19068, _GLF_IDENTITY(-89174, (-89174) + int(_GLF_ZERO(0.0, injectionSwitch.x))), -40792, 38829).yxzw) - ivec4(0, 0, 0, 0));
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               bitCount(ivec2(int(_GLF_SWITCH_0_41v), 17423));
               mat3x4(-7.2, 5.0, -7.5, 9.2, -0.6, 2223.5357, 9.3, 926.160, 7068.7194, -229.555, 705.310, -0.2);
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) || false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
                barrier();
              }
             for(             mat4x2(-3994.5991, -8.6, 7.2, 487.170, -151.059, -4990.2817, _GLF_IDENTITY(3.3, float(mat2x3(3.3, 1.0, 1.0, 1.0, round(length(normalize(1.0))), 1.0))), 6.7);
 true; ivec4(14815, -16851, -82108, 93547))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(float(19420)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(288.208)))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               switch(_GLF_IDENTITY(_GLF_SWITCH(_GLF_IDENTITY(0, (0) + 0)), max(_GLF_SWITCH(_GLF_IDENTITY(0, (0) + 0)), _GLF_SWITCH(_GLF_IDENTITY(0, (0) + 0)))))
                {
                 case 83:
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   ivec2(72758, 60425);
                  }
                 else
                  {
                  }
                 case 0:
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 mat3x2(4965.8081, 9172.3889, -9.2, _GLF_IDENTITY(49.76, _GLF_IDENTITY((49.76), mix(float(_GLF_FUZZED(-26.69)), float((49.76)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / 1.0), 706.455, -5.2);
                 case 20:
                 if(_GLF_DEAD(false))
                  barrier();
                 mat3 _GLF_SWITCH_0_44v, _GLF_SWITCH_0_45v;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 case 78:
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(94132) : int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((4161 & (84243 ^ -4225)) & 0)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) * 1))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 bool _GLF_SWITCH_0_46v[91];
                 mat4 _GLF_SWITCH_0_47v[50], _GLF_SWITCH_0_48v, _GLF_SWITCH_0_49v;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, true), true)))), true && (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true)))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 case 56:
                 case 95:
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_ZERO(0.0, injectionSwitch.x)), false, false, true)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5799.6807)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_ZERO(0.0, injectionSwitch.x)), false, false, true))) || false))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 case 22:
                 if(_GLF_DEAD(false))
                  barrier();
                 mat3x2 _GLF_SWITCH_0_50v, _GLF_SWITCH_0_51v;
                 case 75:
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 int _GLF_SWITCH_0_52v[45], _GLF_SWITCH_0_53v, _GLF_SWITCH_0_54v;
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   subgroup_size;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), (_GLF_IDENTITY(bool(false), false || (bool(false)))) || false))) || false))));
                 case 91:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                 (-- GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid);
                 break;
                 case 18:
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   mat2x3(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)), -52.91, 623.303, 1.7, _GLF_IDENTITY(_GLF_IDENTITY(-9.6, max(-9.6, -9.6)), (_GLF_IDENTITY(-9.6, max(-9.6, -9.6))) / 1.0), 308.653);
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                 case 27:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 bvec3 _GLF_SWITCH_1_0v[51];
                 default:
                 1;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, false)), ! (! (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, false))))))))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           (-834.651 / normalize(-1.5));
           if(_GLF_DEAD(false))
            barrier();
           ;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         case 0:
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(7), int(7)))))
            {
             case 32:
             ;
             case 13:
             uint _GLF_SWITCH_3_0v;
             case 0:
             if(_GLF_DEAD(false))
              barrier();
             case 90:
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             case 62:
             case 98:
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             break;
             case 63:
             if((num_workgroup < _GLF_struct_replacement_35.subgroup_local_id))
              {
               mat3(8245.7281, 8.5, 88.30, 35.56, 700.962, 724.206, 482.332, 8.8, 9.3);
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               workgroup_size;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               mat4x3(mat2(5.6, 8823.5114, 4.1, 6903.4393));
               mat4x2 _GLF_SWITCH_3_1v[61], _GLF_SWITCH_3_2v[48], _GLF_SWITCH_3_3v;
               (++ _GLF_SWITCH_3_3v);
               ivec4(74852, 52064, -2512, -90744).gbb;
               mat2 _GLF_SWITCH_3_4v, _GLF_SWITCH_3_5v, _GLF_SWITCH_3_6v[86];
              }
             case 65:
             mat4(915.298, 225.826, -9.1, 4214.7798, 2.0, -55.74, -81.00, 81.42, -512.716, 0.7, 832.155, 1525.6836, -44.89, 638.440, -3.5, 4.6);
             default:
             1;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         case 3:
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         case 31:
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         case 57:
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), int(4)), (_GLF_IDENTITY(int(4), int(4))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         case 71:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         case 77:
         case 10:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).y))))
            barrier();
           barrier();
          }
         case 59:
         case 27:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))), _GLF_IDENTITY(~ (0), (~ (0)) - 0)))))), ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))), _GLF_IDENTITY(~ (0), (~ (0)) - 0))))))) - _GLF_IDENTITY(0, max(0, 0))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
              barrier();
            }
          }
         break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0), (true ? mat2x4(injectionSwitch, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat2x4(-2.7, 1938.3012, 7.6, -930.276, 4458.7856, 850.935, -993.586, -2.5)))))).x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          return;
         case 37:
         mat4 _GLF_SWITCH_0_55v, _GLF_SWITCH_0_56v;
         case 75:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   break;
                  }
                }
               while(any(bvec4(true, false, false, _GLF_IDENTITY(true, true && (true)))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         default:
         1;
        }
      }
     break;
     if(_GLF_DEAD(false))
      barrier();
     default:
     if(_GLF_DEAD(false))
      barrier();
     _GLF_IDENTITY(1, (1) >> 0);
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)));
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * subgroup_size + _GLF_struct_replacement_35.subgroup_local_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y = virtual_gid;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(vec2(1.0), _GLF_IDENTITY(workgroup_base + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * subgroup_size, (workgroup_base + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) << 0u) + (_GLF_IDENTITY((_GLF_struct_replacement_35.subgroup_local_id + 1) % subgroup_size, max((_GLF_struct_replacement_35.subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_35.subgroup_local_id + 1), min(_GLF_IDENTITY((_GLF_struct_replacement_35.subgroup_local_id + 1), ((_GLF_struct_replacement_35.subgroup_local_id + 1)) | 0u), (_GLF_struct_replacement_35.subgroup_local_id + 1))) % subgroup_size, ((_GLF_struct_replacement_35.subgroup_local_id + 1) % subgroup_size) >> 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_struct_replacement_35.subgroup_local_id + 1) % subgroup_size, ((_GLF_struct_replacement_35.subgroup_local_id + 1) % subgroup_size) >> 0u))))))));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_IDENTITY((bool(false)), true && ((bool(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(false)), true && ((bool(false)))), ! (! (_GLF_IDENTITY((bool(false)), true && ((bool(false)))))))))) && true)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_struct_replacement_1._f0.next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))
  barrier();
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_struct_replacement_35.subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), clamp(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))) << (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))
  {
   switch(_GLF_IDENTITY(_GLF_SWITCH(0), clamp(_GLF_SWITCH(0), _GLF_SWITCH(0), _GLF_SWITCH(0))))
    {
     case 0:
     int i = 0;
     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     case 43:
     atomicStore(buf[_GLF_struct_replacement_1._f0.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true, false, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     case 77:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(i) : int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     case 61:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     break;
     case 75:
     {
      if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
       barrier();
      ;
      if(_GLF_DEAD(false))
       {
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            barrier();
           }
          else
           {
           }
         }
        return;
       }
      if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
       {
        if(_GLF_WRAPPED_IF_FALSE(false))
         {
         }
        else
         {
          barrier();
         }
       }
      mat2x3(825.753, _GLF_IDENTITY(8648.1054, clamp(8648.1054, 8648.1054, _GLF_IDENTITY(8648.1054, max(8648.1054, 8648.1054)))), -1.7, 1.4, -28.03, -7.6);
      uvec3(_GLF_IDENTITY(uvec4(21557u, 53795u, 69115u, 20861u), ~ (~ (uvec4(21557u, 53795u, 69115u, 20861u)))));
      for(mat3x4 _GLF_SWITCH_1_0v; false; mat4x2(-1295.6997, -5.6, -20.71, -2.1, -107.468, -6989.6039, -3.1, -6.6))
       {
        if(_GLF_DEAD(false))
         barrier();
        (_GLF_SWITCH_1_0v != _GLF_SWITCH_1_0v);
        while(true)
         {
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            if(_GLF_DEAD(false))
             {
              do
               {
                barrier();
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
           }
          else
           {
           }
          if(_GLF_DEAD(false))
           return;
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            vec2(28.23, 3816.9330);
           }
          vec2 _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v[9];
          if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
           {
            for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter --)
             {
              barrier();
             }
           }
          vec4 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
          _GLF_IDENTITY(ivec2(71536, 96868), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(71536, 96868), ivec2(0, 0) + (ivec2(71536, 96868)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(71536, 96868), ivec2(0, 0) + (ivec2(71536, 96868)))), min(~ (_GLF_IDENTITY(ivec2(71536, 96868), ivec2(0, 0) + (ivec2(71536, 96868)))), ~ (_GLF_IDENTITY(ivec2(71536, 96868), ivec2(0, 0) + (ivec2(71536, 96868))))))) * ivec2(1, 1))));
          if(_GLF_DEAD(false))
           {
            do
             {
              barrier();
             }
            while(_GLF_WRAPPED_LOOP(false));
           }
          findMSB((num_workgroup / uvec4(60948u, 88060u, 125804u, 158648u)));
          if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
           {
            if(_GLF_DEAD(false))
             return;
            continue;
           }
          if(_GLF_DEAD(false))
           continue;
          int _GLF_SWITCH_1_6v[4], _GLF_SWITCH_1_7v;
          mat2 _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v[32], _GLF_SWITCH_1_10v;
         }
        if(_GLF_DEAD(false))
         barrier();
       }
      while(true)
       {
        if(_GLF_DEAD(false))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
             {
              barrier();
             }
           }
          break;
         }
        do
         {
          mat4x2(3.4, 3.7, -558.011, 302.116, -6842.6272, -8.7, 58.87, -3233.1584);
         }
        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        if(_GLF_DEAD(false))
         {
          do
           {
            barrier();
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         }
        if(_GLF_DEAD(false))
         {
          do
           {
            barrier();
           }
          while(_GLF_WRAPPED_LOOP(false));
         }
        mat4x2 _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v[75];
        if(_GLF_DEAD(false))
         return;
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         -8616.0746;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           mat4(29.96, 779.378, 5722.0558, -85.60, -548.115, -4502.2630, -7.9, 0.8, 8.8, 1787.6860, -22.48, 6.6, -4996.1681, 43.34, 69.54, -97.03);
          }
         ;
         ;
         do
          {
           do
            {
             min(vec4(_GLF_IDENTITY(-16.55, (true ? -16.55 : _GLF_FUZZED(step(-7522.8671, -0.0)))), 555.830, -20.24, -807.983), -148.823);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         ;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         bvec4(false, true, false, _GLF_IDENTITY(true, (true) || false));
         if(_GLF_DEAD(false))
          continue;
        }
        do
         {
          if(_GLF_DEAD(false))
           barrier();
         }
        while((ivec4(-91694, 62761, -75372, -14790) != ivec4(79247, 88092, 98229, -31403)));
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          for(vec4 _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v; (mat2(mat3x4(944.972, -9619.2806, -6.3, 450.866, 7.0, -443.323, -2.3, 7538.4773, 26.01, -9.9, -6418.1561, 661.199)) != mat2(-2699.9936, 356.854, -2.1, 9.7)); ivec4(98022, 73504, -12652, 30607))
           {
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              uvec3(16059u, 129190u, 159754u);
             }
            mat4x2 _GLF_SWITCH_1_16v[93];
            if(_GLF_DEAD(false))
             break;
            if(_GLF_DEAD(false))
             continue;
            mat3x4 _GLF_SWITCH_1_17v[2], _GLF_SWITCH_1_18v;
            if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
             {
             }
            else
             {
              (+ _GLF_SWITCH_1_18v);
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 continue;
                barrier();
               }
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
            do
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
             barrier();
            mat3x2(345.279, 206.562, -4398.3351, 5.8, 1.6, -9.4);
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
           }
         }
        else
         {
         }
        bool _GLF_SWITCH_1_19v[88], _GLF_SWITCH_1_20v[33];
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
          do
           {
            barrier();
           }
          while(_GLF_WRAPPED_LOOP(false));
         }
        for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
         {
          mat4x3(-425.241, 6562.9702, -1.1, -7108.0149, 3182.6350, -4.2, -3.4, -1.2, -784.382, _GLF_IDENTITY(-8.0, clamp(-8.0, -8.0, _GLF_IDENTITY(-8.0, (-8.0) - 0.0))), -76.12, -2.5);
         }
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_DEAD(false))
         continue;
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         barrier();
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true), (injectionSwitch.x < injectionSwitch.y))))
         {
          if(_GLF_DEAD(false))
           {
            if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
             barrier();
            barrier();
           }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
          _GLF_SWITCH_1_12v;
         }
        else
         {
         }
        mat4x3(-297.464, 7073.0031, -1171.0050, 544.067, -61.80, -6.7, 7.9, -1974.1944, 26.40, -17.54, 8460.8701, -2737.7057);
       }
      mat4x2(392.535, 9.7, 3.2, 8.1, -6.5, 181.528, 8.3, 37.32);
      if(_GLF_DEAD(false))
       barrier();
     }
     case 32:
     mat2x4 _GLF_SWITCH_1_21v, _GLF_SWITCH_1_22v[28];
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     default:
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (true ? _GLF_IDENTITY(int(0), min(int(0), int(0))) : _GLF_FUZZED(i)))) - 0)), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       1;
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
    }
   switch(_GLF_SWITCH(0))
    {
     case 65:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
        barrier();
       vec3(-9.4, 755.023, 2100.2486);
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     case 0:
     case 31:
     case 71:
     case 8:
     case 59:
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     case 46:
     atomicStore(buf[_GLF_struct_replacement_1._f0.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, abs(0.0)))).x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     break;
     default:
     if(_GLF_DEAD(false))
      barrier();
     1;
    }
  }
}
