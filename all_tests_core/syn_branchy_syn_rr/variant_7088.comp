#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_6_1_1_14read_2workgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_6_1_1_14read_2workgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_6_1_1_14read_2workgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged2_0_1_6_1_1_14read_2workgroup_size.x = read_2;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 60:
     bool _GLF_SWITCH_1_0v;
     case 0:
     case 81:
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       atomicStore(buf[next_virtual_gid], uint(read_1 == GLF_merged2_0_1_6_1_1_14read_2workgroup_size.x) + 1, 4, 64, 4);
      }
     else
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 12:
         atomicStore(buf[next_virtual_gid], uint(read_1 == GLF_merged2_0_1_6_1_1_14read_2workgroup_size.x) + 1, 4, 64, 4);
         break;
         case 24:
         ivec3 _GLF_SWITCH_0_0v[61], _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
         default:
         1;
        }
      }
     break;
     case 93:
     for(     (ivec3(72655, 12692, -860) | findLSB(ivec3(-66045, 34713, 76401)));
 (bvec2(true, true) == bvec2(false, false)); ivec4(-17456, 42262, 13206, -30092))
      {
      }
     default:
     1;
    }
  }
}
