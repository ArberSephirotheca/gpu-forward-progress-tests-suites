#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 ivec3 _f0;
 uint virtual_gid;
 ivec2 _f1;
} ;

struct _GLF_struct_8 {
 uint num_workgroup;
 mat3 _f0;
 mat2x4 _f1;
 float _f2;
 mat4x2 _f3;
 float _f4;
 vec3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_7 {
 uint _f0;
 mat2 _f1;
 mat2x4 _f2;
 ivec2 _f3;
 float _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 ivec3 _f1;
 uvec4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat4 _f1;
 mat3x2 _f2;
 _GLF_struct_4 _f3;
 ivec2 _f4;
 mat4x3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_2 {
 int _f0;
 bool _f1;
 mat2x3 _f2;
 uvec2 _f3;
 bvec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 float _f1;
 bvec3 _f2;
 ivec4 _f3;
 mat4x2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_3 {
 int _injected_loop_counter;
 bvec4 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
 int _f2;
 ivec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat3x2 _f1;
 uint workgroup_base;
 ivec3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true)))) || false)) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))) || false)), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))) || false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
       return;
      }
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY(((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true))), true)))))))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), false, false)))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, ! (! (false))) || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0) : _GLF_FUZZED(float(97386u))))))) || false)))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || false)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_IF_FALSE(false)) && true)), (bool(bool((_GLF_WRAPPED_IF_FALSE(false)) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(injectionSwitch.s) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-762.160), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(5868.4790) : (injectionSwitch)[0])), _GLF_FUZZED(-376.488)), bvec2(true, false))), injectionSwitch)).y) || false)))))))))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(-1700.1188, -6498.0032, -7093.0021, -4.7).g), _GLF_FUZZED(-4.9)), bvec2(false, false))).y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_9(_GLF_struct_7(1u, mat2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-945.989) : 1.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) - tan(0.0)))), 1.0, 0.0, 0.0, 1.0, 0.0)))), mat2x4(1.0), ivec2(_GLF_IDENTITY(1, (1) + (0 | (0 >> _GLF_IDENTITY(int(8), int(8)))))), 1.0), _GLF_struct_8(gl_NumWorkGroups.x, mat3(1.0), mat2x4(1.0), 1.0, mat4x2(_GLF_IDENTITY(1.0, (1.0) + 0.0)), 1.0, vec3(1.0), mat2x4(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), false || ((_GLF_IDENTITY(false, false || (false)))))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), false || ((_GLF_IDENTITY(false, false || (false))))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), bool(bvec2(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), true)))), false || _GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))))))), true && ((! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))))))))))), (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))), (bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))))))) || false)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec2((_GLF_IDENTITY(false, false || (false))), true)))) || false))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))))))))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))))))))))))))))))))), (! ((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(((_GLF_IDENTITY(false, false || (false)))), true, true))))))), false || (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), true && (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))))) || false))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false || (false)))), bool(bvec2(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false || (false)))), true)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))) || false)), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false)))))))))))), ! (! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true)))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))), bool(bvec2(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))))) || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), false, true)))))), bool(bvec4(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), false, true)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! _GLF_IDENTITY((false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((false || ((_GLF_IDENTITY(false, false || (false))))), ! (! ((false || ((_GLF_IDENTITY(false, false || (false))))))))) || false))), false, true))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))), false))))))), (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))) || false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, (false) || false) || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))) && _GLF_IDENTITY(true, (true) && true)))))) || false)))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec2((_GLF_IDENTITY(false, false || (false))), true)))) || false))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))))))))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))))))))))))))))))))), (! ((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(((_GLF_IDENTITY(false, false || (false)))), true, true))))))), false || (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), true && (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))))) || false))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false || (false)))), bool(bvec2(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false || (false)))), true)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))) || false)), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false)))))))))))), ! (! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true)))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))), bool(bvec2(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))))) || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), false, true)))))), bool(bvec4(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), false, true)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! _GLF_IDENTITY((false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((false || ((_GLF_IDENTITY(false, false || (false))))), ! (! ((false || ((_GLF_IDENTITY(false, false || (false))))))))) || false))), false, true))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))), false))))))), (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))) || false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, (false) || false) || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))) && _GLF_IDENTITY(true, (true) && true)))))) || false)))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec2((_GLF_IDENTITY(false, false || (false))), true)))) || false))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))))))))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))))))))))))))))))))), (! ((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(((_GLF_IDENTITY(false, false || (false)))), true, true))))))), false || (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), true && (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))))) || false))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false || (false)))), bool(bvec2(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false || (false)))), true)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))) || false)), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false)))))))))))), ! (! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true)))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), (false || ((_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))), bool(bvec2(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))))) || (false))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || (false)))), bool(bvec3(_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), false, true)))))), bool(bvec4(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), false, true)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! _GLF_IDENTITY((false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((false || ((_GLF_IDENTITY(false, false || (false))))), ! (! ((false || ((_GLF_IDENTITY(false, false || (false))))))))) || false))), false, true))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))), false))))))), (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))))))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))) || false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))), false || (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, (false) || false) || ((_GLF_IDENTITY(false, false || (false))))))))))))))))))) && _GLF_IDENTITY(true, (true) && true)))))) || false)))) || false))) && true)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, false || (true)), true))) && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)))))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((-8307)) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-58988))))), int(ivec2(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((-8307)) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-58988))))), 1))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        break;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(sin(vec2(0.0, 0.0))) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(1, mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), workgroup_size * workgroup_id, ivec3(1));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(ivec3(1), _GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, ivec2(_GLF_IDENTITY(1, min(1, 1))));
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))) && true))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((+ ivec4(6589, 12001, -85597, -11938)).g & 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))))), 1u * (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))))), ~ (_GLF_IDENTITY(~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u)), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))) - 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u)), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))) - 0u)))) / 1u))), (~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u)), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))) - 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u)), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))) - 0u)))) / 1u)))) | (~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u)), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))) - 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_base, ~ (~ (_GLF_struct_replacement_0.workgroup_base))), (_GLF_struct_replacement_0.workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(8328u) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u)), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) | 0u))) - 0u)))) / 1u)))))))))), max(_GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size, _GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
   for(int _injected_loop_counter = (0 & -33384); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(15422 & int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.5)), float(0.0), bool(true))), injectionSwitch.x)), min(15422 & int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(15422, _GLF_IDENTITY((15422), ((15422)) / 1) / 1) & int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(326.535))), injectionSwitch.x)), (15422 & int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_11.virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-15.32)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x : _GLF_IDENTITY(_GLF_FUZZED(-1.7), min(_GLF_FUZZED(-1.7), _GLF_IDENTITY(_GLF_FUZZED(-1.7), (_GLF_FUZZED(-1.7)) / 1.0))))) > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))) && true), false, true))))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false))))) || false) && true)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_11.virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) >> 0), 0 ^ (_GLF_IDENTITY(64, min(64, 64)))), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.8)), bool(false))) > injectionSwitch.y))))
      barrier();
     if(subgroup_local_id + 1 < subgroup_size)
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (0 ^ 0) ^ (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), clamp(1 << _GLF_IDENTITY(int(1), int(1)), 1 << _GLF_IDENTITY(int(1), int(1)), 1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(int(1), 0, 1), (_GLF_IDENTITY(ivec3(int(1), 0, 1), clamp(ivec3(int(1), 0, 1), ivec3(int(1), 0, 1), ivec3(int(1), 0, 1)))) >> ivec3(0, 0, 0)))), int(1)), (false ? _GLF_FUZZED(17143) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(-6728) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))))))), 1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))) << 0))))) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))) << 0))))) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))), true)))) && true); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             continue;
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
       int i = 0;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
       if(_GLF_DEAD(false))
        break;
       for(_GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(0, bvec4(true), _GLF_struct_1(mat3(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(630.883)), float(1.0), bool(true))), bvec3(true), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), clamp(ivec4(1), ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((i))))), ivec4(1))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((i + ivec4(78440, -45015, -49741, 84284))) : _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), clamp(ivec4(1), ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((i))))), ivec4(1))), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(1), clamp(ivec4(1), ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((i))))), ivec4(1))))))), mat4x2(1.0), bvec4(true)), _GLF_struct_2(1, true, mat2x3(1.0), uvec2(1u), bvec4(true), mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-8.9 + -1.0))), float(1.0), bool(true)))))), _GLF_struct_5(mat3x2(1.0), mat4(1.0), mat3x2(1.0), _GLF_struct_4(bvec2(true), ivec3(1), uvec4(1u), bvec4(true)), ivec2(1), mat4x3(1.0), ivec2(1)), 1, ivec2(1), mat2x3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED((- 7.4))), float(_GLF_IDENTITY((1.0), ((1.0)) * 1.0)), bool(true))) + 0.0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_6._f0._injected_loop_counter < ((0 ^ 1) & 1)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_6._f0._injected_loop_counter, clamp(_GLF_IDENTITY(_GLF_struct_replacement_6._f0._injected_loop_counter, (false ? _GLF_FUZZED(61647) : _GLF_struct_replacement_6._f0._injected_loop_counter)), _GLF_struct_replacement_6._f0._injected_loop_counter, _GLF_IDENTITY(_GLF_struct_replacement_6._f0._injected_loop_counter, int(ivec4(_GLF_struct_replacement_6._f0._injected_loop_counter, 0, 0, 0))))) < ((0 ^ 1) & 1)), ! (! (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_6._f0._injected_loop_counter < ((0 ^ 1) & 1))))))); _GLF_struct_replacement_6._f0._injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)), min(_GLF_IDENTITY(read_1, (read_1) | (read_1)), _GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)), (_GLF_IDENTITY(read_1, (read_1) | (read_1))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (read_1), (0u ^ 1u) * (_GLF_IDENTITY((_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(read_2))), read_1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(read_2))), read_1))))), (uint(uint((_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(read_2))), read_1)))))) / 1u)) | (read_1)))))))) == read_2) + 1, 4, 64, 4);
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))) && true))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
          barrier();
         break;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(4.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}
