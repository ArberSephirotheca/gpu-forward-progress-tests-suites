#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_6_1_1_12read_1workgroup_id;
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.x = num_workgroup;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z = workgroup_size;
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_6_1_1_12read_1workgroup_id.y = workgroup_id;
 uint workgroup_base = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z * GLF_merged2_0_1_6_1_1_12read_1workgroup_id.y;
 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y = workgroup_base;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y + subgroup_id * subgroup_size + subgroup_local_id, max(GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y + subgroup_id * subgroup_size + subgroup_local_id, GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y + subgroup_id * subgroup_size + subgroup_local_id));
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size);
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))))], uint(1), 4, _GLF_IDENTITY(64, (64) - 0), 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 _GLF_IDENTITY(GLF_merged2_0_1_6_1_1_12read_1workgroup_id.x = read_1, (GLF_merged2_0_1_6_1_1_12read_1workgroup_id.x = read_1) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u))));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) ^ 0));
 do
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_12read_1workgroup_id, min(GLF_merged2_0_1_6_1_1_12read_1workgroup_id, GLF_merged2_0_1_6_1_1_12read_1workgroup_id)).x == read_2) + 1, 4, 64, 4);
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(GLF_merged2_0_1_6_1_1_12read_1workgroup_id.x == _GLF_IDENTITY(read_2, ~ (~ (read_2)))) + 1, 4, 64, _GLF_IDENTITY(4, (4) / 1));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
