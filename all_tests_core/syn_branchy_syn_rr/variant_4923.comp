#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 mat2 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 mat2 _f3;
 mat4x3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 uvec2 _f1;
 uint workgroup_size;
 mat3x4 _f2;
 uvec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat2x4 _f1;
 vec4 _f2;
 int _f3;
 int _f4;
 vec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2x3 _f2;
 float _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 bool _f6;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 mat4 _f1;
 bvec2 _f2;
 _GLF_struct_4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(ivec3(1), mat4(1.0), bvec2(true), _GLF_struct_4(_GLF_struct_0(ivec3(1)), _GLF_struct_1(1, mat2x4(1.0), vec4(1.0), 1, 1, vec4(1.0), true), mat2x3(1.0), 1.0, _GLF_struct_2(uvec4(1u), uvec2(1u), gl_WorkGroupSize.x, mat3x4(1.0), uvec3(1u), bvec2(true)), _GLF_struct_3(mat2(1.0), uvec2(1u), mat4x3(1.0), mat2(1.0), mat4x3(1.0), bvec3(true)), true));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_5._f3._f4.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
