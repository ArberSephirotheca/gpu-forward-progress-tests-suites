#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))), bool(bvec2(bool(bool((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))), true))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED((+ -6.5))), vec2(_GLF_FUZZED(-6.7), (vec2(0.0, 0.0))[1]), bvec2(false, true)))))).x > injectionSwitch.y), true), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED((+ -6.5))), vec2(_GLF_FUZZED(-6.7), (vec2(0.0, 0.0))[1]), bvec2(false, true)))))).x > injectionSwitch.y), true), false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))))), (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))) && true)))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) && (false)), _GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(-58.17)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))) && true))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))))) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u | (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | (~ (subgroup_local_id)))))) | 0u))), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))) | (~ (subgroup_local_id)))))))), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))))) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u | (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | (~ (subgroup_local_id)))))) | 0u))), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))) | (~ (subgroup_local_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))))) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u | (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | (~ (subgroup_local_id)))))) | 0u))), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))) | (~ (subgroup_local_id)))))))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))))) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u | (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | (~ (subgroup_local_id)))))) | 0u))), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))) | (~ (subgroup_local_id))))))))) >> 0u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))))) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u | (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | (~ (subgroup_local_id)))))) | 0u))), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))) | (~ (subgroup_local_id))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0))) > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((-4188 & 0), min((-4188 & 0), (-4188 & 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, true, false, false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec3(_GLF_IDENTITY(false || (false), bool(bvec2(false || (false), false))), false, true))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))) && true))))))
              return;
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) | 0u, min((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) | 0u, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) | 0u))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) << 0)) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, (1) << 0)) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))) ^ 0u), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) | 0u, min((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) | 0u, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) | 0u))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) << 0)) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, (1) << 0)) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))) ^ 0u)) >> 0u);
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), true && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid]))) | 0u), clamp(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], _GLF_IDENTITY((buf[virtual_gid]), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | ((buf[virtual_gid]))) | (buf[_GLF_IDENTITY(virtual_gid, 0u | (_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)))])), buf[virtual_gid], buf[virtual_gid])), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), min(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-33527, -84343)), ivec2(0, 0) | (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-33527, -84343)), max(_GLF_FUZZED(ivec2(-33527, -84343)), _GLF_FUZZED(ivec2(-33527, -84343)))))) : ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-33527, -84343)), ivec2(0, 0) | (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-33527, -84343)), max(_GLF_FUZZED(ivec2(-33527, -84343)), _GLF_FUZZED(ivec2(-33527, -84343)))))) : ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0)) << ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (_GLF_IDENTITY(0, (0) | 0))) | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), ~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) + (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))))), ivec2(0, 0) + ((_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 | (0)), 0)), min(~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 | (0)), 0)))))), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), ~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((-8026.4475 + 38.00))), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)), bool(true))), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) + (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))))))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0)))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0))))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0))))), (ivec2(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0)))))) >> ivec2(0, 0))))), ~ (~ (ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0))))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0))))), (ivec2(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), clamp(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))) | (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), clamp(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) >> ivec2(0, 0))))))), 0, 1)), ~ (~ (ivec2(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (false ? _GLF_FUZZED(bitfieldExtract(ivec2(32233, 80854), 98605, -93994)) : ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), ivec2(ivec4(ivec2(_GLF_IDENTITY(0, 0 | (0)), 0), 0, 1))))))) | (~ (ivec2(_GLF_IDENTITY(0, 0 | (0)), 0)))), 0, 1)))))), ~ (ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (0)))), 0)))))) >> ivec2(0, 0))))))))))))) - 0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))))), false, false))), true, false, true)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))), _GLF_IDENTITY(false, (false) && true))), false, true), bvec3(bvec3(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true)))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true), bvec3(bvec3(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true), bvec3(bvec3(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true))))))), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true), bvec3(bvec3(bvec3(bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) && true))), false, true)))))))))), true)))))))))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))), false)), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))), false)), false)))))) || false))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))), (false || (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || false))), bool(bvec2(bool(_GLF_DEAD(false)), false))))) && true)))) && true))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true))))))))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))) || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, false || (false)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), false, false))), false))), (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))), false)))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), (((injectionSwitch.x < injectionSwitch.y))) || false)))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), (_GLF_DEAD(false)) && true)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))), false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))), false))))), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))), false))))), bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))), false)))))), bool(bvec2(bool(! ((_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))), false)))))), true))))), false, false, true))), (! ((_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))), false)))))) || false))))), false)))) || false), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(67.11)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y)), false, true))))))))), (false) || false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(67.11)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y)), false, true))))))))), (false) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(67.11)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y)), false, true))))))))), (false) || false)))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(67.11)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y)), false, true))))))))), (false) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(67.11)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y)), false, true))))))))), (false) || false)))), false), true))))))))) || false))) || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(false)))))), true, false, false)), ! (! (bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(false)))))), true, false, false))))))))), false))))))) && true)))))))))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, false)), true))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-676.820)), float(injectionSwitch.x), bool(true)))) - 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-40.27))), min(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-40.27))), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-40.27))))))) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / sqrt(vec2(1.0, 1.0)), clamp(_GLF_IDENTITY((injectionSwitch) / sqrt(vec2(1.0, 1.0)), (true ? (injectionSwitch) / sqrt(vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(-50.31, 467.250)))), (injectionSwitch) / sqrt(vec2(1.0, 1.0)), (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-7.5 * 7.1))), bool(false)))), (false ? _GLF_FUZZED(mat4x3(-6.0, -0.3, _GLF_IDENTITY(-4.2, (-4.2) / 1.0), 8034.4844, 7607.6684, 5543.4376, 515.898, 6.7, -162.622, -36.38, 1.6, -506.990)) : mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 1.0), mat2x3(mat2x4(_GLF_IDENTITY(mat2x3(0.0, 1.0, 1.0, 1.0, 0.0, 1.0), (mat2x3(0.0, 1.0, 1.0, 1.0, 0.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.1))), 1.0, 0.0, 1.0, 1.0))))) > injectionSwitch.y) && true)) || false))))))), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)))))))))), true, true, true)), bool(bvec4(bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, _GLF_IDENTITY(log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), max(log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, _GLF_IDENTITY(0.0, length(0.0) + (0.0)), log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(85.02)), float(0.0), bool(true)))) - abs(0.0)), exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-116.417) : 1.0))))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))), (_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-116.417) : 1.0))))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))), vec2(mat2x4(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-116.417) : 1.0))))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))), length(vec2(0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, abs(0.0), 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(intBitsToFloat(_injected_loop_counter)) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-869.351)))))))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 0.0 + (0.0))) - length(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, 1.0))), log(_GLF_IDENTITY(cos(0.0), min(_GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), cos(0.0)))), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))) : _GLF_FUZZED(-229.221))))))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)), (true ? float(mat4x3(1.0, _GLF_IDENTITY(log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 1.0 * (_GLF_IDENTITY(log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), clamp(log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))))), log(cos(0.0)), 0.0, 0.0, log(determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, exp(tan(0.0)), round(length(normalize(1.0))), 0.0, 1.0, 0.0)) : _GLF_FUZZED(-229.221))))))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))).x > injectionSwitch.y)))), true, true, true)), _GLF_IDENTITY(false, ! (! (false))), true, true)))) && true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), _GLF_IDENTITY(int(ivec3((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), 0, 0)), min(_GLF_IDENTITY(int(ivec3((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), 0, 0)), clamp(int(ivec3((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), 0, 0)), int(ivec3((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), 0, 0)), int(ivec3((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), 0, 0)))), int(ivec3((((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) << _GLF_IDENTITY(int(2), int(2))) & 65515), 0, 0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 0))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.3), _GLF_FUZZED(-72.78)), bvec2(false, false))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)), (false ? _GLF_FUZZED(-2.4) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) / cos(0.0))))) + 0.0)))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(1)))) | 0)), (int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(1)))) | 0))) << 0)))) < subgroup_size, false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1 < subgroup_size), false || ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1 < subgroup_size))), ! (! ((subgroup_local_id + 1 < subgroup_size))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(70224)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(false, (false) && true) || (true && (false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))), bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) && (false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) && (false), false || (_GLF_IDENTITY(true, ! (! (true))) && (false))))))))), true))))))), bool(bvec4((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), false || (true && (false)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), false || (true && (false)))) && true)), ! (! (! (_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), false || (true && (false)))) && true))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false || (_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), false || (true && (false)))) && true))))), true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false || (_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), false || (true && (false)))) && true)))))))))), bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))))) && true) && (false)) || false), false || (true && (false))))), true))))))), false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0)))) + 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-98.89 + (788.595 - -7.1)))), float(injectionSwitch.y), bool(true)))), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)))), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0)) - 0))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(793.152)), bool(false))))))).y))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), true, true, false)), ! (! (bool(bvec4(! (false), true, true, false))))))))))
        return;
       barrier();
      }
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(vec3(vec2(0.0, 0.0), 0.0))), _GLF_IDENTITY(vec2(0.0, 0.0), min(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0))))) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(562.834))), min(injectionSwitch.y, injectionSwitch.y)))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(761.002)), bool(false))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, exp(0.0), 0.0), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, exp(0.0), 0.0), vec3(mat3x2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, exp(0.0), 0.0), 1.0, 0.0, 0.0))), vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, exp(0.0), 0.0), vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, exp(0.0), 0.0))))))))))) || false)))))) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2) + 1, _GLF_IDENTITY(max(uint(read_1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) | 0u)), (true ? _GLF_IDENTITY(max(uint(read_1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) | 0u)), max(max(uint(read_1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) | 0u)), max(uint(read_1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) | 0u)))) : _GLF_FUZZED(virtual_gid)))), _GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), max((4) | _GLF_IDENTITY((4), ((4)) << 0), _GLF_IDENTITY(_GLF_IDENTITY((4) | (4), _GLF_IDENTITY(int(int((4) | (4))), (int(int((4) | (4)))) | 0)), ((_GLF_IDENTITY(4, clamp(4, 4, 4))) | (4)) - 0)))), 64, 4);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 0), (ivec2(_injected_loop_counter, _GLF_IDENTITY(0, 1 * (0)))) << ivec2(0, 0)))) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.4)), bool(false))) > injectionSwitch.y))))
          continue;
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), bool(bvec3(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), true, false))), (bool(bool(_GLF_DEAD(false)))) || false)))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0), (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(2), ivec2(2))) | (ivec2(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0)))), (int(_GLF_IDENTITY(ivec2(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0), (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(2), ivec2(2))) | (ivec2(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0))))) | (int(_GLF_IDENTITY(ivec2(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0), (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(2), ivec2(2))) | (ivec2(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter > 0))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false))), true, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false))), true, true, true)), false, false, false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-1.2, clamp(-1.2, -1.2, -1.2))), _GLF_FUZZED(7.8)), vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)) * 1.0), float(_GLF_IDENTITY(mat3x4(0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)) * 1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat3x4(mat4(mat3x4(0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)) * 1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) != 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), min(_GLF_FUZZED(_GLF_IDENTITY((+ _injected_loop_counter), ((+ _injected_loop_counter)) - 0)), _GLF_FUZZED((+ _injected_loop_counter)))) : _injected_loop_counter --), 1 * (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), min(_GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)))) : _injected_loop_counter --), ~ (~ (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), min(_GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)))) : _injected_loop_counter --), ((false ? _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), min(_GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), (_GLF_FUZZED((+ _injected_loop_counter))) - (0 >> _GLF_IDENTITY(int(4), int(4)))), _GLF_FUZZED((+ _injected_loop_counter)))) : _injected_loop_counter --)) * 1))))))))
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, (false) || false)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                 break;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                      barrier();
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) && true))))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0) >> _GLF_IDENTITY(0, 0 | (0)))], min(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0) >> _GLF_IDENTITY(0, 0 | (0)))], injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0) >> _GLF_IDENTITY(0, 0 | (0)))])), mix(float(injectionSwitch[0]), float(_GLF_FUZZED(4.0)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))), injectionSwitch[_GLF_IDENTITY(1, 1 * (1))])).y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-6225.3338))) > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) - sin(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.3), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5.9)), float((injectionSwitch)[0]), bool(true))), _GLF_FUZZED(-8365.2581)), bvec2(true, false))), injectionSwitch)).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3267.2799, -93.67)))).y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, _GLF_IDENTITY(clamp(read_2, read_2, read_2), min(_GLF_IDENTITY(clamp(read_2, read_2, read_2), 0u ^ (clamp(read_2, read_2, read_2))), _GLF_IDENTITY(clamp(read_2, read_2, read_2), uint(uvec3(clamp(read_2, read_2, read_2), 1u, 1u)))))), false || (read_1 == _GLF_IDENTITY(read_2, _GLF_IDENTITY(clamp(read_2, _GLF_IDENTITY(read_2, 0u ^ (_GLF_IDENTITY(read_2, uint(uvec3(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), read_2), min(_GLF_IDENTITY(clamp(read_2, read_2, read_2), 0u ^ (clamp(read_2, read_2, read_2))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(read_2, read_2, read_2), uint(uvec3(clamp(read_2, read_2, read_2), 1u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(clamp(read_2, read_2, read_2), uint(uvec3(clamp(read_2, read_2, read_2), 1u, 1u))), (_GLF_IDENTITY(clamp(read_2, read_2, read_2), uint(uvec3(clamp(read_2, read_2, read_2), 1u, 1u)))) - 0u), _GLF_IDENTITY(clamp(read_2, read_2, read_2), uint(uvec3(clamp(read_2, read_2, read_2), 1u, 1u))))))))))) + 1, _GLF_IDENTITY(4, int(ivec2(4, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 | (_GLF_IDENTITY(~ (0), int(ivec4(~ (0), 0, 0, 0)))))))))), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(1.8))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.7, 9589.6202)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
}
