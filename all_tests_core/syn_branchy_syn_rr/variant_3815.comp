#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 ivec2 _f0;
 vec3 _f1;
 uvec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 int _f1;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
 vec3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_5 {
 uint _f0;
 mat4x2 _f1;
 float _f2;
 mat3x4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_3 {
 float _f0;
 uint _f1;
 vec4 _f2;
 vec2 _f3;
 ivec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 bvec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_0 {
 float _f0;
 vec2 _f1;
 bvec3 _f2;
 int _f3;
 bool _f4;
 ivec4 _f5;
 float _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_10 {
 bvec2 _f0;
 _GLF_struct_2 _f1;
 int i;
 _GLF_struct_4 _f2;
 _GLF_struct_9 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(50.25)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) && true))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6835.5391)), bool(false))), injectionSwitch.y)))), true)))), (_GLF_DEAD(false)) || false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), _GLF_IDENTITY(bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, true, true, true)))), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), true, true)), true, true)))))))))
                      barrier();
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) << 0), min(int(4), int(4))), _GLF_IDENTITY((int(4)), 0 + (_GLF_IDENTITY((int(4)), ((int(4))) >> _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0)), _GLF_IDENTITY(int(8), clamp(int(8), _GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), ~ (~ (int(8))))))), int(8))))), 0 + (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) / 1), int(8))), clamp((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) / 1), int(8))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) / 1), int(8))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) / 1), int(8)))))))))) ^ 0))), ((_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) << 0), min(int(4), int(4))), _GLF_IDENTITY((int(4)), 0 + (_GLF_IDENTITY((int(4)), ((int(4))) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 1 * (~ (8))))))) / 1), int(8)))))) ^ 0)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 0)))) + 0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(determinant(mat2(6.8, -21.38, 390.215, -31.09))))) > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)) && true))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, false, false)))))))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), true && (bool(false)))))))) && true))) && true))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.3) : injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y), false, true, true))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))) || false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), clamp((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ ((1 & int(_GLF_ONE(1.0, injectionSwitch.y)))))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec2(bool(bvec4(false, false, false, true)), true)))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec2(bool(bvec4(false, false, false, true)), true)))), (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(_GLF_IDENTITY(mat3(injectionSwitch.y, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0), (true ? _GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0), mat3(mat3(mat3(injectionSwitch.y, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 0.0), transpose(transpose(mat2(1.0, 0.0, 1.0, 0.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0)))) : _GLF_FUZZED(mat3(-3285.6138, 9.9, -6.6, 9.4, -483.781, -365.852, -5.1, -569.774, -9963.8934))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), (bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))) && true), true)))) && true)))) || false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), false, false))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), false, false))))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), false, false))))), false), true)))))), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(134848u, 130098u, 115853u).g) : workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)))))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), bool(bvec4(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), true, false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0))).y))) && true)));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u)))))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) + 0u)))), (uint(uint(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), subgroup_local_id)))) + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) | (((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), int(ivec2((1) | (1), 1))))) % subgroup_size)))))) >> 0u));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)) || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), true)))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))));
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) / 1), 1, 1)), (false ? _GLF_FUZZED(68) : int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) / (1 | 1)), _GLF_IDENTITY(1, (1) / 1))), 1))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) / 1), 1, 1)), (false ? _GLF_FUZZED(68) : int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) / (1 | 1)), _GLF_IDENTITY(1, (1) / 1))), 1))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) / 1), 1, 1)), (false ? _GLF_FUZZED(68) : int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) / (1 | 1)), _GLF_IDENTITY(1, (1) / 1))), 1))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)))) << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) / 1), 1, 1)), (false ? _GLF_FUZZED(68) : int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) / (1 | 1)), _GLF_IDENTITY(1, (1) / 1))), 1))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) / 1), 1, 1)), (false ? _GLF_FUZZED(68) : int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) / (1 | 1)), _GLF_IDENTITY(1, (1) / 1))), 1))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) / 1), 1, 1)), (false ? _GLF_FUZZED(68) : int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) / (1 | 1)), _GLF_IDENTITY(1, (1) / 1))), 1))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)))) << _GLF_IDENTITY(int(5), int(5)))) - 0) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), 1, 1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) > int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x)) : _GLF_FUZZED(155.970))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)).x) / 1.0)))))); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32449) : int(4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))) ^ 0), int(4), int(4))), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))) ^ 0), int(4), int(4))), int(4))) + (1 ^ 1)))), _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) || false, ! (! ((_GLF_IDENTITY(false, true && (false))) || false)))), false))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)) : _GLF_FUZZED(8043.1424))) : _GLF_FUZZED(49.09))), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)) : _GLF_FUZZED(8043.1424))) : _GLF_FUZZED(49.09))))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(4, 4)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | 0)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0)))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, true, false)), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, true, false))) || false))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(1, int(ivec3(1, 1, 1))) * (_GLF_IDENTITY((0), ((0)) ^ 0))) << 0)), int(0)))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (_injected_loop_counter --)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))) || (_GLF_IDENTITY(false, false || (false))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y))))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! _GLF_IDENTITY((! (! (true))), bool(bvec4((! (! (true))), true, false, true))))), ((_GLF_IDENTITY(! (true), ! _GLF_IDENTITY(_GLF_IDENTITY((! (! (true))), bool(bvec4((! (! (true))), true, false, true))), false || (_GLF_IDENTITY((! (! (true))), bool(bvec4((! (! (true))), true, false, true)))))))) || false))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), true)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) && true) || (true)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bvec4(false || (true), false, false, false)), true && (bool(bvec4(false || (true), false, false, false))))))))) && true, (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))) || false)) && true) && true)) && true)), true)), false, true), bvec3(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ((true)) || false))))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bool(_GLF_IDENTITY(true, false || (true)))))), (false || (_GLF_IDENTITY(true, false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), true)), false, true))))))), (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, _GLF_IDENTITY(false, true && (false)))), (bool(bvec4(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))), true, _GLF_IDENTITY(false, true && (false))))) && true)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)) && true, bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)) && true, true, false, true)))), false, false))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, false)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (_GLF_IDENTITY(0, (0) >> 0)) | (_GLF_IDENTITY(0, (0) >> 0)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))) || false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))))))))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)))))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                  {
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true))), true, true, false))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
                              barrier();
                             barrier();
                            }
                           barrier();
                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))) || false)))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (59223 & _GLF_IDENTITY((0 | 0), ((0 | 0)) << 0))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))))
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ float(183138u))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(3156.6850, (true ? _GLF_IDENTITY(3156.6850, clamp(3156.6850, 3156.6850, 3156.6850)) : _GLF_FUZZED(0.5))))), bvec2(true, false))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ float(183138u))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3156.6850)), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)), (bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))).x, mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ float(183138u))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3156.6850)), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)), (bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))).x), float(_GLF_FUZZED(4.7)), bool(false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ float(183138u))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3156.6850)), bvec2(true, false))).x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))) || false)), ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) || false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, int(int(4))), 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((97979 >> -97272) & 0, max(_GLF_IDENTITY((97979 >> -97272), clamp((97979 >> -97272), _GLF_IDENTITY((97979 >> -97272), ((97979 >> -97272)) | ((97979 >> -97272))), _GLF_IDENTITY((97979 >> -97272), ((97979 >> -97272)) - 0))) & 0, (97979 >> -97272) & 0)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) + _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, min(0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) + 0u, max((subgroup_local_id) + 0u, (subgroup_local_id) + 0u)), ((subgroup_local_id) + 0u) ^ 0u)) ^ 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (1))), _GLF_IDENTITY(1, (1) | (1))))) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x))) < _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((true ? injectionSwitch[0] : _GLF_FUZZED(5.7)), ((true ? injectionSwitch[0] : _GLF_FUZZED(5.7))) * 1.0)))), injectionSwitch[1])).x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-96.77, float(vec4(_GLF_IDENTITY(-96.77, (_GLF_IDENTITY(-96.77, min(-96.77, -96.77))) - 0.0), 0.0, 0.0, 0.0)))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 | (0)), 0))])), _GLF_FUZZED(-15.19)), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) || false)))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), min(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_ZERO(0.0, injectionSwitch.x))))))) | (int(4))))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-81679)))) | 0), min(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4))) | 0))))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-81679)))) | 0), min(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(4))) | 0)))))))) | (0 >> _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), min(0 | (1), 0 | (1)))), 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-753.054), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.9)), bvec2(true, false)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, (0 ^ 0), 1, 1), (ivec4(0, (0 ^ 0), 1, 1)) ^ (ivec4(1, 1, 1, 1) ^ ivec4(1, 1, 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, log(1.0), 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 0.0))), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, log(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), float(_GLF_FUZZED((540.476 * 9.3))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 0.0))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(mat2(injectionSwitch[1], 1.0, 0.0, 1.0)), mix(float(float(mat2(injectionSwitch[1], 1.0, 0.0, 1.0))), float(_GLF_FUZZED(-86.07)), bool(false)))))))).x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(bvec2(true), _GLF_struct_2(_GLF_struct_0(1.0, vec2(1.0), bvec3(true), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) - 0)) / (1 | 1)), true, _GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) | (ivec4(1))), 1.0), _GLF_struct_1(ivec2(1), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), ivec4(_GLF_IDENTITY(1, (1) + (0 & -44204))))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (_GLF_IDENTITY(int(ivec2(1, 0)), (true ? int(ivec2(1, 0)) : _GLF_FUZZED(14621)))))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)) << (ivec3(0, 0, 0) & ivec3(-1639, 64650, 14316))), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0))))), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ _GLF_IDENTITY((int(ivec2(1, 0))), ((int(ivec2(1, 0)))) << 0))), 1), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), _GLF_IDENTITY(0 ^ (int(ivec2(1, 0))), ~ (~ (0 ^ (int(ivec2(1, 0)))))))), 1)))) << ivec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-64.85)), _GLF_IDENTITY(float(injectionSwitch.x), float(mat4x2(float(injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), determinant(mat3(1.0, cos(0.0), 1.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0)), 1.0, 0.0, abs(0.0), 1.0, 0.0))), _GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((-60237 | 1593)))), 1)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) << 0)))), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), _GLF_IDENTITY(0, (0) << (0 ^ 0)) ^ (int(ivec2(1, 0))))), 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 1)), ~ (~ (int(ivec2(0, 1)))))), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), clamp(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | (int(ivec2(1, 0)))), 0 ^ (int(ivec2(1, 0))))), 1), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 0))), 1, 1))), 0)), 0 ^ (int(ivec2(1, 0))))), 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), ivec3(_GLF_IDENTITY(ivec4(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), 0), ivec4(0, 0, 0, 0) + (ivec4(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), 0))))))), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-77396))) ^ (int(ivec2(1, 0))))), int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-77396))) ^ (int(ivec2(1, 0))))), (1 | 1)))), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(95867))))) << (ivec3(0, 0, 0) & _GLF_IDENTITY(ivec3(-1639, 64650, 14316), (ivec3(-1639, 64650, 14316)) | (ivec3(_GLF_IDENTITY(-1639, min(-1639, -1639)), 64650, 14316))))), ivec3(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), (_GLF_IDENTITY((0), 1 * ((0)))) | ((0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), ivec3(_GLF_IDENTITY(0, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0)), ~ (~ (_GLF_IDENTITY((~ (0)), ((~ (0))) ^ 0)))), clamp(_GLF_IDENTITY((~ (0)), ~ (~ (_GLF_IDENTITY((~ (0)), ((~ (0))) ^ 0)))), _GLF_IDENTITY((~ (0)), ~ (~ (_GLF_IDENTITY((~ (0)), ((~ (0))) ^ 0)))), _GLF_IDENTITY((~ (0)), ~ (~ (_GLF_IDENTITY((~ (0)), ((~ (0))) ^ 0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)))) << ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-33.38), _GLF_FUZZED(-0.0)), bvec2(false, false)), max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-33.38), _GLF_FUZZED(-0.0)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-33.38), _GLF_FUZZED(-0.0)), bvec2(false, false))))).x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-64.85)), float(_GLF_IDENTITY(vec4(float(_GLF_FUZZED(-64.85)), 1.0, log(1.0), 0.0), vec4(mat4(_GLF_IDENTITY(vec4(float(_GLF_FUZZED(-64.85)), 1.0, log(1.0), 0.0), min(vec4(float(_GLF_FUZZED(-64.85)), 1.0, log(1.0), 0.0), vec4(float(_GLF_FUZZED(-64.85)), 1.0, log(1.0), 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, tan(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, abs(0.0))), dot(vec2(1.0, 1.0), vec2(0.0, abs(0.0))))), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(injectionSwitch.y, tan(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, abs(0.0))), dot(vec2(1.0, 1.0), vec2(0.0, abs(0.0))))))))))))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(97.24)), vec2(_GLF_FUZZED((87.38 * -7.4)), (injectionSwitch)[1]), bvec2(false, true))).x), _GLF_ZERO(0.0, injectionSwitch.x))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 1, 1)), clamp(int(ivec4(0, 0, 1, 1)), int(ivec4(0, 0, 1, 1)), int(ivec4(0, 0, 1, 1))))), ~ (~ (0))), 1, 1), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), min(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), _GLF_IDENTITY(0 ^ (int(ivec2(1, 0))), min(0 ^ (int(ivec2(1, 0))), _GLF_IDENTITY(0 ^ (int(ivec2(1, 0))), (0 ^ (int(ivec2(1, 0)))) >> 0))))))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), ((0)) | ((0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, _GLF_IDENTITY(0, ~ (~ (0)))))))), 1), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)) << (ivec3(0, 0, 0) & _GLF_IDENTITY(ivec3(-1639, 64650, 14316), (ivec3(-1639, 64650, 14316)) | (_GLF_IDENTITY(ivec3(-1639, 64650, 14316), clamp(_GLF_IDENTITY(ivec3(-1639, 64650, 14316), (ivec3(-1639, 64650, 14316)) << ivec3(0, 0, 0)), ivec3(-1639, 64650, 14316), ivec3(-1639, 64650, 14316))))))), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)))) << ivec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-64.85)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))))), 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), _GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0)))))) + ivec2(0, 0))), _GLF_IDENTITY(0 ^ (int(ivec2(1, 0))), (-63132 & 0) ^ (0 ^ (int(ivec2(1, 0))))))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)) << (ivec3(0, 0, 0) & _GLF_IDENTITY(ivec3(-1639, 64650, 14316), (ivec3(-1639, 64650, 14316)) | (ivec3(-1639, 64650, 14316))))), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1))), ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)) << (ivec3(0, 0, 0) & _GLF_IDENTITY(ivec3(-1639, 64650, 14316), (ivec3(-1639, 64650, 14316)) | (ivec3(_GLF_IDENTITY(-1639, min(_GLF_IDENTITY(-1639, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (-1639)), -1639)), 64650, 14316))))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (1 ^ 1) + (0)), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, max(0, 0))), (~ (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)))))))), 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (1 ^ 1) + (0)), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, max(0, 0))), (~ (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)))))))), 1)) - ivec3(0, 0, 0)), ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 | (_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, min(0, 0)))), 0 ^ (int(ivec2(1, 0))))), 1)))))) << ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), min(_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), 0.0 + (clamp(0.0, 0.0, 0.0))), clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)))), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-33.38), _GLF_FUZZED(-0.0)), bvec2(false, false))).x, mix(float(_GLF_FUZZED(-64.85)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)))).x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1), (ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) ^ 0)) ^ 0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(60410) : 1))))), 0))))), 1)) << (ivec3(0, 0, 0) & ivec3(-1639, 64650, 14316))), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(_GLF_IDENTITY(ivec2(1, 0), ~ (~ (ivec2(1, 0)))))))), 1), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))))), 1)))) << ivec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-64.85)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)), clamp(float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))))) / 1.0)), _GLF_ZERO(0.0, injectionSwitch.x))), ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 0) + (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) << 0)))), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ _GLF_IDENTITY((int(ivec2(1, 0))), ((int(ivec2(1, 0)))) + 0))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) | (1)), _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, _GLF_IDENTITY(0, clamp(0, 0, 0))))))), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(77348) : 1)), 1))), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)) << (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) * 1), 0, 0) & _GLF_IDENTITY(ivec3(-1639, 64650, 14316), (ivec3(-1639, 64650, 14316)) | (ivec3(-1639, 64650, _GLF_IDENTITY(14316, (14316) << 0)))), ~ (~ (ivec3(0, 0, 0) & _GLF_IDENTITY(_GLF_IDENTITY(ivec3(-1639, 64650, 14316), ivec3(ivec4(ivec3(-1639, 64650, 14316), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))), (ivec3(-1639, 64650, 14316)) | (ivec3(-1639, 64650, 14316)))))))), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) - ivec2(0, 0)))))), 1), ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), 0 ^ (int(ivec2(1, 0))))), 1)))) << ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-33.38), _GLF_FUZZED(-0.0)), bvec2(false, false))).x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-64.85), exp(abs(0.0)) * (_GLF_FUZZED(-64.85)))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), injectionSwitch.x)))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1), (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1)) | ivec3(0, 0, 0)), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), max(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))), (_GLF_IDENTITY(0, ~ (~ (0)))) | (_GLF_IDENTITY(0 & 41539, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0 & 41539, 1, 1, 1), ~ (~ (ivec4(0 & 41539, 1, 1, 1))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4(0 & 41539, 1, 1, 1), ~ (~ (ivec4(0 & 41539, 1, 1, 1)))))), (~ (int(_GLF_IDENTITY(ivec4(0 & 41539, 1, 1, 1), ~ (~ (ivec4(0 & 41539, 1, 1, 1))))))) | (~ (int(_GLF_IDENTITY(ivec4(0 & 41539, 1, 1, 1), ~ (~ (ivec4(0 & 41539, 1, 1, 1))))))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1)))))) << ivec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-565.944, 264.699)))), vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.3)), vec2(_GLF_FUZZED(-861.907), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), _GLF_IDENTITY(float(vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY((float(vec3(1.0, 0.0, 0.0))), min((float(vec3(1.0, 0.0, 0.0))), (float(vec3(1.0, 0.0, 0.0))))) - 0.0)), 1.0))), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), cos(0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (0.0) - log(1.0)), 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 0.0)) * mat3(1.0))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.3, 4352.8637)) : injectionSwitch)), vec2(mat2(injectionSwitch, 1.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4886.9215)), bool(false))), (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4886.9215)), bool(false)))) + 0.0), 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 0.0)) * mat3(1.0)))))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-45.51)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec2(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 1.0))))), bool(true))))), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1), ~ (~ (ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1)))), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))), 1, 1)) << ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0) * (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 | (0))))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (0 << _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(~ (~ (0)), ~ (~ (~ (~ (0)))))))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (0 << _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(~ (~ (0)), ~ (~ (~ (~ (0)))))))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (0 << _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(~ (~ (0)), ~ (~ (~ (~ (0)))))))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))))) - 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 | (0)))), (0) - 0))) ^ (_GLF_IDENTITY(0, ~ (~ (0))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), clamp((~ (0)), _GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(34055))), (~ (0))))), 0 ^ (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), 0 | ((0)))))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), clamp(~ (~ (0)), _GLF_IDENTITY(~ (~ (0)), ~ (~ (~ (~ (0))))), ~ (~ (0))))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), ~ (~ (0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))))))) + 0))) - 0))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), ~ (_GLF_IDENTITY(~ (~ (~ (0))), int(ivec4(~ (~ (~ (0))), 0, 1, 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), clamp(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))) - 0, 0 + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), clamp(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))) - 0, _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), clamp(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))) - 0, 1, 0, 0)), (int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), clamp(0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))) - 0, 1, 0, 0))) >> 0)))))))))), 1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)), (ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))) >> ivec3(0, 0, 0)), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (ivec3(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) << ivec3(0, 0, 0)))))), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), _GLF_IDENTITY(~ (0), (~ (0)) / 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) | (_GLF_IDENTITY(0, min(0, 0)))))), ~ (~ (0))))))) ^ 0)) << 0))), 1, 1)) << ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), int(_GLF_IDENTITY(ivec3(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (_GLF_IDENTITY(0, min(0, 0)))) + 0))), 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), int(ivec4(_GLF_IDENTITY(1, max(1, 1)), 1, 1, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec3(0, 0, 1)), (true ? int(ivec3(0, 0, 1)) : _GLF_FUZZED(59494))) : _GLF_FUZZED(-93783)))))))))), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)), (ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0))))), (0 << _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0)))), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), 0 | ((0) | (0)))))) << 0)))))) - 0))), 0 ^ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), ~ (~ (_GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0))))), (0 << _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (0))), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) | _GLF_IDENTITY((0), clamp((0), (0), (0)))))) << 0)))))) - 0)))))), 1, 1)) << ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x)))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 + (1)), 1, 1)), (1) | (1)), 0), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec2(! (false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, false)))))))))))), ! (! (_GLF_IDENTITY((bool(bvec2(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY((bool(bvec2(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((bool(bvec2(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)) || false)))) || false)))))) ? _GLF_FUZZED(ivec3(_GLF_IDENTITY(-24845, max(-24845, -24845)), _GLF_IDENTITY(31665, _GLF_IDENTITY((_GLF_IDENTITY(31665, (31665) * 1)) | (31665), ((_GLF_IDENTITY(31665, (31665) * 1)) | (31665)) ^ 0)), 4777)) : ivec3(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, _GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((35962 - -44756)))))))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(78524))), (false ? _GLF_FUZZED(-26985) : 1)), 1)), clamp((ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (_GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY(~ (~ (~ (~ (0)))), (~ (~ (~ (~ (0))))) / 1))))), _GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-26985), (_GLF_FUZZED(-26985)) ^ 0) : 1)), 1)), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(0, 0 + (0))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(0, 0 + (0))))))), min(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(0, 0 + (0))))))), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(0, 0 + (0))))))))))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-26985) : 1)), 1)), (ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-26985) : 1)), 1)))) << ivec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0, abs(0.0)))).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (injectionSwitch.x)) : _GLF_FUZZED(-6.4)))), _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(1, min(1, 1)), 0)))))) >> 0)), _GLF_struct_4(_GLF_struct_3(1.0, 1u, vec4(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), _GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), float(vec2(float(_GLF_FUZZED(9067.2983)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0)))))))), float(1.0), bool(true))), 1.0), clamp(clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), float(vec4(float(_GLF_FUZZED(9067.2983)), 0.0, 1.0, tan(0.0)))), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), min(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, float(mat3x4(9067.2983, tan(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0))))), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true)))) - sin(0.0)))), 1.0), clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 1.0)), (float(mat2x4(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 1.0))) - 0.0)), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), _GLF_IDENTITY(float(mat3(float(_GLF_FUZZED(9067.2983)), 0.0, 0.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (float(mat3(float(_GLF_FUZZED(9067.2983)), 0.0, 0.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) / 1.0)), float(_GLF_FUZZED(9067.2983)))), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))))), 1.0))))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)), bool(bool(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))))))) ? _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9067.2983), min(_GLF_FUZZED(9067.2983), _GLF_FUZZED(9067.2983)))), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), 1.0), clamp(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), _GLF_IDENTITY(min(float(_GLF_FUZZED(9067.2983)), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), min(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), _GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983)))))) + 0.0))), (true ? min(float(_GLF_FUZZED(9067.2983)), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), min(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), _GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983)))))) + 0.0))) : _GLF_FUZZED(-7143.4796)))), float(1.0), bool(true))), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), _GLF_IDENTITY(float(1.0), _GLF_IDENTITY(mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), max(mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(true))), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), 1.0))))), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9067.2983), min(_GLF_FUZZED(9067.2983), _GLF_FUZZED(9067.2983)))), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), 1.0), clamp(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), _GLF_IDENTITY(min(float(_GLF_FUZZED(9067.2983)), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), min(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), _GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983)))))) + 0.0))), (true ? min(float(_GLF_FUZZED(9067.2983)), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), min(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), _GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983)))))) + 0.0))) : _GLF_FUZZED(-7143.4796)))), float(1.0), bool(true))), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), _GLF_IDENTITY(float(1.0), _GLF_IDENTITY(mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), max(mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(true))), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), 1.0))))), (vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9067.2983), min(_GLF_FUZZED(9067.2983), _GLF_FUZZED(9067.2983)))), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), 1.0), clamp(clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), _GLF_IDENTITY(min(float(_GLF_FUZZED(9067.2983)), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), min(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), _GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983)))))) + 0.0))), (true ? min(float(_GLF_FUZZED(9067.2983)), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), min(_GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983))), _GLF_FUZZED(_GLF_IDENTITY(9067.2983, min(9067.2983, 9067.2983)))))) + 0.0))) : _GLF_FUZZED(-7143.4796)))), float(1.0), bool(true))), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), _GLF_IDENTITY(float(1.0), _GLF_IDENTITY(mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), max(mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(4816.2281)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(true))), 1.0), clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9067.2983)), min(float(_GLF_FUZZED(9067.2983)), float(_GLF_FUZZED(9067.2983)))), float(1.0), bool(true))), 1.0)))))) / vec2(1.0, 1.0)))) : _GLF_FUZZED(vec2(20.72, -247.378)))), _GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1))), bvec3(true)), bvec4(true)), _GLF_struct_9(_GLF_struct_5(1u, mat4x2(1.0), 1.0, mat3x4(1.0), bvec3(true)), _GLF_struct_6(uvec4(1u), vec3(1.0), mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.4)), bool(false))))), _GLF_struct_7(bvec4(true), 1), _GLF_struct_8(ivec2(1), vec3(1.0), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, 0u | (1u)), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> 0u)))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) ^ 0u)), uint(4u)))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u)), clamp((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u)), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u)), ((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u))) | ((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u)))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u)), ((uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (0u | (1u)) | (0u | (1u)))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, 0u ^ (4u))) | (4u))), uint(4u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u))) ^ uvec2(0u, 0u)))))))), clamp(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) * uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(_GLF_IDENTITY(1u, (1u) >> 0u)), uvec3(1u))), uvec4(1u)), mat3x2(1.0)));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1))), 1, 1))), (_GLF_IDENTITY(4, clamp(4, 4, 4))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (false ? _GLF_FUZZED(52790) : _GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, 0 ^ ((1) << 0)))))) >> 0)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) << 0)), int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 1, 1, 1))), _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), clamp((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY(4, clamp(4, 4, 4))))) / 1), 1))), 64, 4);
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), false || (! (false))))), bool(bvec3(! (false), false, true))), true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))))), false, true))), true, false)))) || false)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (int(5))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & _GLF_IDENTITY(32771, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))))) ? _GLF_FUZZED(-89245) : _GLF_IDENTITY(32771, max(32771, 32771)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY((false) || false, false || ((false) || false)))))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 & ((- 13987) << -82218)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(55.79, -16.89)))).y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-983.072) : injectionSwitch.y)))), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-983.072) : injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-983.072) : injectionSwitch.y)))), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-983.072) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-983.072) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-983.072) : injectionSwitch.y))))))))))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = ((0 ^ 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), 1 * (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))))), int(6)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(6), int(6)))), ~ (~ (int(int(_GLF_IDENTITY(int(6), int(6))))))))), (_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (6) << 0)))), int(6)))))), int(ivec4(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(int(_GLF_IDENTITY(int(6), int(6)))))), 0, 1, 0)))) >> 0)), ((0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec3(6, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)))))), max(int(int(_GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), int(6)))), (false ? _GLF_FUZZED(findMSB(-85848)) : int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), int(6)))))))))))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          barrier();
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(98.39, 633.403, 1595.1526, -663.034, 77.29, -132.313)) : mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0)))), clamp(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(98.39, 633.403, 1595.1526, -663.034, 77.29, -132.313)) : mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(98.39, 633.403, 1595.1526, -663.034, 77.29, -132.313)) : mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0)))), min(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(98.39, 633.403, 1595.1526, -663.034, 77.29, -132.313)) : mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0)))), float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(98.39, 633.403, 1595.1526, -663.034, 77.29, -132.313)) : mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0)))))), float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(98.39, 633.403, 1595.1526, -663.034, 77.29, -132.313)) : mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0))))))) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1)))))))) > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) && true)))))), true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true)) || false), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true), bvec2(bvec3(bvec2((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))), true), true))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), true))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-7.8), (injectionSwitch)[1]), mix(vec2((vec2(_GLF_FUZZED(-7.8), (injectionSwitch)[1]))[0], (vec2(_GLF_FUZZED(-7.8), (injectionSwitch)[1]))[1]), vec2(_GLF_FUZZED((+ 9.1)), _GLF_FUZZED(2.4)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), vec2((injectionSwitch)[0], _GLF_FUZZED((- _GLF_IDENTITY(9.6, clamp(9.6, _GLF_IDENTITY(9.6, min(_GLF_IDENTITY(9.6, min(9.6, 9.6)), 9.6)), 9.6))))), bvec2(true, false))).x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) || false)), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, determinant(mat2(length(0.0), 1.0, abs(0.0), 0.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((mat3x4(9466.0850, -90.76, -0.0, -6.0, -4.0, -3801.9291, 4.8, 7.2, -3423.6901, -4.7, 7.6, -0.0) * mat2x3(2.8, -8.3, -2.4, -5.6, -9558.9803, -9255.8458))) : mat2x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, determinant(mat2(length(0.0), 1.0, abs(0.0), 0.0))))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ -8511.7431)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-429.266)), bvec2(true, false))).y)))) || false)), false, _GLF_IDENTITY(false, bool(bvec2(false, true))), true))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 | _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1)))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 0.0, log(1.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, exp(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, exp(0.0), 0.0)))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
}
