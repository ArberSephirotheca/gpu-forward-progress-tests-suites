#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6451.3591)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), _GLF_IDENTITY((! (false)), ((! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bool(true)))))) && _GLF_IDENTITY(((false)), bool(bvec4(_GLF_IDENTITY(((false)), (((false))) || false), true, false, true)))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))), false)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((false), true && _GLF_IDENTITY(((false)), bool(bvec4(_GLF_IDENTITY(((false)), (((false))) || false), true, false, true)))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), false)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true, bool(bool(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((false), true && _GLF_IDENTITY(((false)), bool(bvec4(_GLF_IDENTITY(((false)), (((false))) || false), true, false, true)))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), false)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), mix(vec2((vec2(vec3(injectionSwitch, 1.0)))[0], _GLF_FUZZED(3403.9225)), vec2(_GLF_FUZZED(-2389.0610), (vec2(vec3(injectionSwitch, 1.0)))[1]), bvec2(false, true)))).y, true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true, true), false)))), false || (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4((false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), false)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(5.8)), _GLF_IDENTITY((vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(5.8))) * mat2(1.0), max((vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(5.8))) * mat2(1.0), (vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(5.8))) * mat2(1.0)))), bvec2(false, false))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) && true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), true))))))))))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(int(1), 0)), ~ (~ (int(ivec2(int(1), 0))))), (false ? _GLF_FUZZED(93691) : _GLF_IDENTITY(int(ivec2(int(1), 0)), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-79888) : int(ivec2(int(1), 0))), ((false ? _GLF_FUZZED(-79888) : int(ivec2(int(1), 0)))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(-79888) : int(ivec2(int(1), 0))), ((false ? _GLF_FUZZED(-79888) : int(ivec2(int(1), 0)))) | ((false ? _GLF_FUZZED(-79888) : int(ivec2(_GLF_IDENTITY(int(1), (int(1)) << (1 ^ 1)), 0))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), (true ? int(_GLF_IDENTITY(1, (1) | 0)) : _GLF_FUZZED(-21301))), clamp(_GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (int(1))), ~ (~ (_GLF_IDENTITY(~ (~ (int(1))), (~ (~ (int(1)))) >> 0)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ 0), 1, 0, 1)), _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1)) : _GLF_FUZZED(-14535)), min(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1)) : _GLF_FUZZED(-14535)), max((_GLF_IDENTITY(true, true && (true)) ? int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1)) : _GLF_FUZZED(-14535)), (_GLF_IDENTITY(true, true && (true)) ? int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1)) : _GLF_FUZZED(-14535)))), (_GLF_IDENTITY(true, true && (true)) ? int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1)) : _GLF_FUZZED(-14535)))))), 1, 1))), (int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ 0), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ 0), 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ 0))), 1, _GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1)), (_GLF_IDENTITY(true, true && (true)) ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) ^ 0) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1), (true ? ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) ^ 0) ^ 0, ((1) ^ 0) >> 0))) ^ 0), 1, 0, 1) : _GLF_FUZZED(ivec4(41427, 18510, -70595, 20087))))) : _GLF_FUZZED(-14535)))), 1, 1)))) | 0), int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, false, false)))))))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true))) && true))), ! (! (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true))) && true))), (true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) && true))) && true)))) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y, mix(float(_GLF_FUZZED((- 403.525))), float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6148.1986)), bool(false))), 0.0)), injectionSwitch)).y), bool(true)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (0 & 71318); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false)), false, false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, false, false)), (bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, false, false))) && true)) && true)), false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), (injectionSwitch.x < injectionSwitch.y)), false)), true))))) || false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             return;
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), min(int(ivec2(1, 0)), _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) * 1))))), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 | (~ (1))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))) && true))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) || false)))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)), false), bvec2(bvec4(bvec2(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)), false), false, false)))))))) || false), true && (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ((! (false))) && true)) || false)))))))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w = _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(atomicAdd(subgroup_id, (subgroup_size | 160197u))) : _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))))), ~ (~ (_GLF_IDENTITY(~ (subgroup_size), 0u + (~ (subgroup_size)))))))), 1u), (uvec2(subgroup_size, 1u)) - _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(20573u, 84931u)))), max(_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(20573u, 84931u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(20573u, 84931u)))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(20573u, 84931u))))))))))), subgroup_size)), subgroup_size), (clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) - uvec2(0u, 0u)))), subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) - uvec2(0u, 0u)))), subgroup_size))) | (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) - uvec2(0u, 0u)))), subgroup_size)))), subgroup_size)) >> 0u));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z = subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.x = num_workgroup;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true)))))) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) * vec2(1.0, 1.0)) : injectionSwitch), mat2(1.0) * ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) * vec2(1.0, 1.0)) : injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupSize, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u), 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u))))))), (uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u)))))))) | 0u))))), uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec4(gl_WorkGroupSize, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u), 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u))))))), (uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u)))))))) | 0u)))))), clamp(uvec3(uvec3(uvec4(gl_WorkGroupSize, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u), 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u))))))), (uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u)))))))) | 0u)))))), uvec3(uvec3(uvec4(gl_WorkGroupSize, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u), 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u))))))), (uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u)))))))) | 0u)))))), uvec3(uvec3(uvec4(gl_WorkGroupSize, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u), 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u))))))), (uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(112431u) : _GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(37492u) : 4u)), 4u, 4u)))))))) | 0u))))))))))), (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)).x;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(92588u, 85422u, 157583u)) : gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, (workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) << 0u)) / 1u)), 0u ^ ((_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, _GLF_IDENTITY((workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) / 1u, max((workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) / 1u, _GLF_IDENTITY((workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) / 1u, min((workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) / 1u, (workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) / 1u)))))))) | 0u) + GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(59.44)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.0) : injectionSwitch.y))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1) + 0u), clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1) >> (0u | (0u << _GLF_IDENTITY(uint(8u), uint(8u))))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size, (false ? _GLF_FUZZED((+ uvec4(122278u, 110921u, 32613u, 26376u))) : GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size)).z + 1, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u)), clamp(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u))) << 0u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u))) | (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1, (true ? GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 : _GLF_FUZZED(_GLF_IDENTITY((14518u >> workgroup_size), (_GLF_IDENTITY((14518u >> workgroup_size), ((14518u >> workgroup_size)) | 0u)) + 0u)))), 1u))))))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size, max(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size, GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size)).z + 1))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, min(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w))) << 0u)) >> 0u), max(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size, (GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size) ^ uvec4(0u, 0u, 0u, 0u)), GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size)).w)));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))) && true)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) | 0, min((1) | 0, _GLF_IDENTITY(_GLF_IDENTITY((1) | 0, 1 * ((1) | 0)), ~ (~ (_GLF_IDENTITY((1) | 0, _GLF_IDENTITY(1 * ((1) | 0), ~ (~ (_GLF_IDENTITY(1 * ((1) | 0), min(1 * ((1) | 0), 1 * ((1) | 0)))))))))))), 0 | ((1) | 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | _GLF_IDENTITY(0, (0) + 0))))))), (uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) | 0, min((1) | 0, _GLF_IDENTITY(_GLF_IDENTITY((1) | 0, 1 * ((1) | 0)), ~ (~ (_GLF_IDENTITY((1) | 0, _GLF_IDENTITY(1 * ((1) | 0), ~ (~ (_GLF_IDENTITY(1 * ((1) | 0), min(1 * ((1) | 0), 1 * ((1) | 0)))))))))))), 0 | ((1) | 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | _GLF_IDENTITY(0, (0) + 0)))))))) * ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY(4, min(4, 4)), 64, _GLF_IDENTITY(4, (4) | 0));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(workgroup_size) : virtual_gid))], (buf[virtual_gid]) >> _GLF_IDENTITY(0u, (0u) >> 0u)), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))), true && (_GLF_WRAPPED_LOOP(false))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y = read_2, _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y = read_2) ^ 0u, (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y = read_2) ^ 0u, ((GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y = read_2) ^ 0u) ^ 0u)) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z + 1 < _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w, (GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w) | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, exp(0.0), 0.0, cos(0.0)), (true ? vec4(0.0, exp(0.0), 0.0, cos(0.0)) : _GLF_FUZZED(vec4(5.1, 5778.8252, -4.3, -4357.4681))))), min(float(_GLF_IDENTITY(vec4(0.0, exp(0.0), 0.0, cos(0.0)), (true ? vec4(0.0, exp(0.0), 0.0, cos(0.0)) : _GLF_FUZZED(vec4(5.1, 5778.8252, -4.3, -4357.4681))))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), exp(0.0), 0.0, cos(0.0)), (true ? vec4(0.0, exp(_GLF_IDENTITY(0.0, (0.0) - log(1.0))), 0.0, cos(0.0)) : _GLF_FUZZED(vec4(5.1, 5778.8252, -4.3, -4357.4681)))))))), injectionSwitch.x))))
  {
   int i = 0;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         else
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u ^ (next_virtual_gid), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(0u ^ (next_virtual_gid), max(0u ^ (next_virtual_gid), 0u ^ (next_virtual_gid)))), (true ? uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(abs(vec2(0.0, 0.0)))).y)) * (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (next_virtual_gid), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u ^ (next_virtual_gid), 1u, 0u, 1u), (uvec4(0u ^ (next_virtual_gid), 1u, 0u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(0u ^ (next_virtual_gid), 1u, 0u, 1u), (uvec4(0u ^ (next_virtual_gid), 1u, 0u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)))) ^ 0u)), max(0u ^ (next_virtual_gid), 0u ^ (next_virtual_gid)))) : _GLF_FUZZED(workgroup_base)))))], uint(read_1 == GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y) + 1, 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64), min((64), (64))) | 0), 4);
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            continue;
           continue;
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false)))))));
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3246.4364)), vec2(_GLF_FUZZED((- 989.323)), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))) + 0.0)), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sign(vec2(689.697, 3.3))) : injectionSwitch)))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8259.5713)), vec2(_GLF_FUZZED(2.4), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
       if(_GLF_DEAD(false))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, max(read_1, read_1)))) == GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y) + 1, 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
