#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 60410)); _injected_loop_counter --)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) + subgroup_local_id;
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                  continue;
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
          continue;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5100.1386) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0)), (false ? _GLF_FUZZED(6.9) : float(vec3(injectionSwitch.y, determinant(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))), 0.0)), 0.0, 1.0)), 0.0)))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5100.1386) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0)), (false ? _GLF_FUZZED(6.9) : float(vec3(injectionSwitch.y, determinant(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))), 0.0)), 0.0, 1.0)), 0.0))))), mix(float(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5100.1386) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0)), (false ? _GLF_FUZZED(6.9) : float(vec3(injectionSwitch.y, determinant(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))), 0.0)), 0.0, 1.0)), 0.0)))))), float(_GLF_FUZZED((- (9166.7934)))), bool(false))))))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))), 1u), uvec2(uvec2(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))), 1u)))))) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | (_GLF_IDENTITY((subgroup_local_id + 1), (1u & 1u) * ((subgroup_local_id + 1))))), (false ? _GLF_FUZZED(virtual_gid) : (subgroup_local_id + 1)))))) << 0u) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))), 1u), uvec2(uvec2(uvec2(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))), 1u)))))) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (false ? _GLF_FUZZED(-25671) : 1)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), 1, 1, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), 1, 1, 1)))))), (subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1))) | (subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1))))) | 0u) : _GLF_FUZZED(20972u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), 1, 1, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1)), 1, 1, 1)))))), (subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1))) | (subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-25671) : 1))))) | 0u) : _GLF_FUZZED(20972u)) | 0u)))), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(virtual_gid) : (subgroup_local_id + 1)))))) << 0u) % subgroup_size)) >> (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), min(0u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(0u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u << _GLF_IDENTITY(uint(4u), uint(4u))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) | ((next_virtual_gid))) | 0u)], uint(1), 4, 64, 4);
    }
   else
    {
    }
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(68506), (true ? 0 : _GLF_FUZZED(68506)) | 0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((0 | (0 | 0)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-125.106)), bool(false)))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-125.106)), bool(false))))))))));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1]))) / vec2(1.0, 1.0)).y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(subgroup_local_id + 1 < subgroup_size)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.8)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) + (0 >> _GLF_IDENTITY(int(4), int(4))))), int(2))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) + (0 >> _GLF_IDENTITY(int(4), int(4))))), int(2))))) ^ 1), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) + (0 >> _GLF_IDENTITY(int(4), int(4))))), int(2))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) + (0 >> _GLF_IDENTITY(int(4), int(4))))), int(2))))) ^ 1))), ((~ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) + (0 >> _GLF_IDENTITY(int(4), int(4))))), int(2))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) + (0 >> _GLF_IDENTITY(int(4), int(4))))), int(2))))) ^ 1)))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             int i = 0;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(_GLF_IDENTITY(uvec4(next_virtual_gid, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), (_GLF_IDENTITY(uvec4(next_virtual_gid, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), ~ (~ (uvec4(next_virtual_gid, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))) | uvec4(0u, 0u, 0u, 0u)))), ~ (~ (next_virtual_gid)))], uint(read_1 == read_2) + 1, 4, 64, 4);
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))))) > injectionSwitch.y))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, false, true))))))))))
                          continue;
                         continue;
                        }
                       continue;
                      }
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(0.0), 1.0)), mix(vec2((vec2(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(0.0), 1.0)))[0], _GLF_FUZZED(float(84643))), vec2(_GLF_FUZZED(-2.0), (vec2(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(0.0), 1.0)))[1]), bvec2(false, true)))).x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   break;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) && true))))))
                    continue;
                   break;
                  }
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 ^ 0), true && (_injected_loop_counter != (0 ^ 0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0))))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                          }
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), false)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535))), mix(float(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535)))), float(_GLF_FUZZED(3.6)), bool(false)))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535))), mix(float(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535)))), float(_GLF_FUZZED(3.6)), bool(false)))), min((_GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535))), mix(float(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535)))), float(_GLF_FUZZED(3.6)), bool(false)))), (_GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535))), mix(float(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535)))), float(_GLF_FUZZED(3.6)), bool(false)))))), (_GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535))), mix(float(_GLF_FUZZED(determinant(mat2(-3.4, 80.95, 1.9, -717.535)))), float(_GLF_FUZZED(3.6)), bool(false)))))) / _GLF_ONE(1.0, injectionSwitch.y))))) - 0.0)))))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   break;
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), false, true, false)))))) && true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
                break;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(exp(0.0), 0.0, 0.0, cos(0.0), 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat3((0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)))))) * 1.0), (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat3((0.0), _GLF_IDENTITY(1.0, cos(0.0) * (1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(sqrt(1.0), 0.0, 0.0), (true ? vec3(sqrt(1.0), 0.0, 0.0) : _GLF_FUZZED(vec3(-930.940, 641.868, 993.914))))))))) * 1.0)) - 0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat3((0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)))))) * 1.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(mat3(5569.1497, 99.11, -2.8, 5.8, 1.8, -520.466, 575.210, 907.963, -39.49)) : mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat3((0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5205.0432) : 1.0)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0))), float(_GLF_FUZZED(vec3(6402.8991, 1.4, -7.0).b)), bool(false))), dot(vec3(1.0, 0.0, 0.0), vec3(sqrt(1.0), 0.0, 0.0)))))) * 1.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))))), 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(_GLF_IDENTITY(exp(0.0), clamp(exp(0.0), _GLF_IDENTITY(exp(0.0), mix(float(exp(0.0)), float(_GLF_FUZZED(4809.4719)), bool(false))), exp(0.0))), 0.0, 0.0, cos(0.0), 1.0, determinant(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(762.672)), bool(false))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6853.4487)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))), 1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.9)), float(0.0), bool(true))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(float(float(mat4x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.9)), float(0.0), bool(true))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.9) : _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0)))))), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6912.1664)), float(1.0), bool(true))), 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(-99.12, -8534.2835, -34.19, -8.9, -3.9, 1.2, 8231.4202, -9.0, -6.0)) : mat3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(762.672)), bool(false))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6853.4487)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))), 1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.9)), float(0.0), bool(true))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(float(float(mat4x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.9)), float(0.0), bool(true))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.9) : _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0)))))), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6912.1664)), float(1.0), bool(true))), 0.0, 0.0, 0.0)))), 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-525.662)), bool(false))))))), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0))), mix(float(_GLF_FUZZED(89.57)), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(_GLF_IDENTITY(exp(0.0), abs(1.0) * _GLF_IDENTITY((exp(0.0)), float(mat4x2(_GLF_IDENTITY((exp(0.0)), clamp((exp(0.0)), (exp(0.0)), (exp(0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) - determinant(mat3(0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0)))), 1.0)))), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), (_GLF_IDENTITY(cos(0.0), (cos(0.0)) / _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(float(cos(0.0))), float(_GLF_IDENTITY(mat2(float(float(cos(0.0))), 0.0, 0.0, 1.0), mat2(mat4x3(mat2(float(float(cos(0.0))), 0.0, 0.0, 1.0))))))))) / 1.0), 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 1.0))), 1.0)), 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0, 1.0, 1.0)))), 1.0 * (float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(_GLF_IDENTITY(exp(0.0), abs(1.0) * _GLF_IDENTITY((exp(0.0)), float(mat4x2(_GLF_IDENTITY((exp(0.0)), clamp((exp(0.0)), (exp(0.0)), (exp(0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0)))), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), (_GLF_IDENTITY(cos(0.0), (cos(0.0)) / _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(float(cos(0.0))), float(_GLF_IDENTITY(mat2(float(float(cos(0.0))), 0.0, 0.0, 1.0), mat2(mat4x3(mat2(float(float(cos(0.0))), 0.0, 0.0, 1.0))))))))) / 1.0), 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0, 1.0, 1.0)))))), abs(0.0) + (float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3.7)), bool(false))), float(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(_GLF_IDENTITY(exp(0.0), abs(1.0) * (exp(0.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), _GLF_IDENTITY((_GLF_IDENTITY(cos(0.0), (cos(0.0)) / cos(0.0))), clamp((_GLF_IDENTITY(cos(0.0), (cos(0.0)) / cos(0.0))), (_GLF_IDENTITY(cos(0.0), (cos(0.0)) / cos(0.0))), (_GLF_IDENTITY(cos(0.0), (cos(0.0)) / cos(0.0))))) / 1.0), 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0, 1.0, 1.0)))))), bool(true))) : _GLF_FUZZED(-44.72)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))), false), true)))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))), false), true)))))))))))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ (0 | 0)), ((1 ^ (0 | 0))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
                        return;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), false)))))) || false), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false))))) && true))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) && true); _injected_loop_counter ++)
                      {
                       return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                          continue;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            continue;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     break;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                       break;
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                }
               else
                {
                }
              }
             continue;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0))), (_GLF_IDENTITY((1) - (0 | _GLF_IDENTITY(0, ~ (~ (0)))), 0 | ((1) - (0 | 0)))) - 0)), min(~ (_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0)))), ~ (_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0))), (_GLF_IDENTITY((1) - (0 | _GLF_IDENTITY(0, ~ (~ (0)))), 0 | ((1) - (0 | 0)))) - 0)), min(~ (_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0)))), ~ (_GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0)))))))) / 1))) << _GLF_IDENTITY(int(2), int(2))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0)))) << _GLF_IDENTITY(int(2), int(2))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - (0 | 0), 0 | ((1) - (0 | 0)))) << _GLF_IDENTITY(int(2), int(2)))))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = (68620 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (false))))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = (1 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 0)), (int(ivec4(1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, max(1, 1)))), 1, 0))) >> 0))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 0)), (int(ivec4(1, 1, 1, 0))) >> 0))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            continue;
           return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, false, true)))))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), ! (! ((! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! ((false)))))))))))))) && true))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
