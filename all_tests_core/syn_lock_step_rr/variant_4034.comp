#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 vec4 _f0;
 bool _f1;
 mat3x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 uvec2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 bvec2 _f1;
 uvec4 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 _GLF_struct_4 _f1;
 ivec3 _f2;
 uint subgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9231.9924) : injectionSwitch.y)), injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (false ? _GLF_FUZZED(-9231.9924) : injectionSwitch.y)), injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), 0 | (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true))))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), false || (true))), _GLF_IDENTITY(true, true && (true)) && (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), false || (true))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))), true))) || false), false, false))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), mix(float(_GLF_FUZZED(-2557.6861)), float(float(mat2x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, (1.0) - determinant(mat2(0.0, 0.0, 0.0, sqrt(0.0)))), 1.0, 0.0, 1.0))), bool(true)))), injectionSwitch.y))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, cos(0.0), 0.0, 0.0))).x < injectionSwitch.y)) && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false))))))))) || false)))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), bool(bool(bool(bool(_GLF_IDENTITY(false, (false) && true)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(false, (false) && true))), false), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(false, (false) && true))), false), true, false)))), (bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(false, (false) && true))), false), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(false, (false) && true))), false), true, false))))) || false)), bool(bool(bool(bool(_GLF_IDENTITY(false, (false) && true))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, (7) / 1))), min(7, 7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) | (_GLF_IDENTITY(int(7), (int(7)) / (1 | 1))))))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false) && true, ((false) && true) || false))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(bool(bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), false, true)))))), bool(bvec3(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false, false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                  }
                 barrier();
                }
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))), false)))))))));
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))))));
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat4x3(1.0), _GLF_struct_4(uvec4(1u), bvec2(_GLF_IDENTITY(true, bool(bool(true)))), uvec4(1u), _GLF_struct_0(mat4x2(1.0), bvec2(true)), _GLF_struct_1(mat3x2(1.0), mat4x2(1.0), bvec4(_GLF_IDENTITY(true, true && (true))), uvec2(1u), uvec2(1u)), _GLF_struct_2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), (true ? _GLF_IDENTITY(1.0, 0.0 + (1.0)) : _GLF_FUZZED(72.54)))), float(_GLF_FUZZED((float(false) / -4123.1791))), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), (true ? _GLF_IDENTITY(1.0, 0.0 + (1.0)) : _GLF_FUZZED(72.54)))), _GLF_IDENTITY(float(_GLF_FUZZED((float(false) / -4123.1791))), mix(float(float(_GLF_FUZZED((float(false) / -4123.1791)))), float(_GLF_FUZZED(524.567)), bool(false))), bool(false)))) - 0.0), _GLF_IDENTITY(1.0, 0.0 + (1.0))))), mat2x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)))), _GLF_struct_3(vec4(1.0), _GLF_IDENTITY(true, (true) && true), mat3x2(1.0), uvec4(1u))), ivec3(1), gl_SubgroupSize);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-540.208)), bvec2(true, false))).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(9803.9906, (9803.9906) / 1.0), 9464.5971)))).x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))) && true)), (false) || false)) || false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), (! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))) || false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))))), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false), ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), sin(0.0), 0.0, tan(sqrt(0.0)), 1.0), (true ? mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), sin(0.0), 0.0, tan(sqrt(0.0)), 1.0) : _GLF_FUZZED(mat2x3(-700.075, -1.5, 7575.3532, -989.174, 8.1, 2944.6556)))))).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), false)))))))))))))))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))), false, false, false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), (! ((injectionSwitch.x < injectionSwitch.y))) && true)))))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-4966.9812)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), true)), true && (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(64.19), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(4397.9472)), bvec2(true, false))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(-82.78), _GLF_FUZZED(-947.639)), bvec2(false, false)))))), injectionSwitch)).y), true)))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-4966.9812)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).y), true)), true && (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)) || false)))), true))))))), bool(bvec3(((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-4966.9812)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).y), true)), true && (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)) || false)))), true))))))), true, true))), ! (! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))).x, injectionSwitch.x))), float(_GLF_FUZZED(-4966.9812)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), true)), true && (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), true)))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(597.688, float(mat2(_GLF_IDENTITY(597.688, min(597.688, 597.688)), round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0)))) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0)), _GLF_IDENTITY(float(mat2((false ? _GLF_FUZZED(597.688) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0)), 0.0, 1.0, 1.0)), (float(mat2((false ? _GLF_FUZZED(597.688) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), max(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x))))) + 0.0)), 0.0, 1.0, 1.0))) + 0.0))))) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false))), false)))))))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0))), injectionSwitch)).y), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2473.2156) : injectionSwitch.y))))), true)))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))) && true)), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), true && ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))) && true, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), true)))), true && (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), true)))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true)), bool(bvec4(bool(bvec4(bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true)), true, false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_IDENTITY(true, ! (! (true))), ((_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), true && ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, ! (! (true)))))))))) && true) || false))))))))))))) || false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! ((bool(_GLF_IDENTITY(false, ! (! (false)))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true)) || false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.x))))) - 0.0)) - 0.0) < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(708.973, 8692.8181)) : injectionSwitch)).y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))), true))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))), false, true))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))), true))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))))), true)))))))), false, true))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! (! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))))))))))), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))))), false)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true), true))))))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)))))), false))), true)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(false, true))), true), false)))), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true)), false, true)))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(true, ! (! (true))))))), true))))))), true)))), false, false))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), false))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), false))), true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), false))), true)), false))))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true)))))), false)))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true)))), true)), true))))))), true)))), false, false))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), true))), true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true))), true)))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true))), true)))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true))), true)))), true))))), false)))))))), _GLF_IDENTITY(true, (true) && true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), true)))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), false || (! ((true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), true)))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), false || (! ((true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true))))))), false, false))), false), true)))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))))))))))), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(true, bool(bool(true)))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, false || (true))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), false))), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (true))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)))), true, true), true)))))) && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, false))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true)))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(false, true)), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(false, true)), false, true)))))))))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), true))))))), true)))), false, true))), _GLF_IDENTITY(false, (false) && true), false))), false), true)))))))), true))))))), false, true))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), clamp(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(219.015)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5429.0206), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(624.760, 2.8, 678.693).g)), bvec2(true, false))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-71404 & 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))), _GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.9, 2814.1450)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(516.313), _GLF_FUZZED(9.8)), bvec2(false, false)))))).y, false), true))), true, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.9, 2814.1450)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(516.313), _GLF_FUZZED(9.8)), bvec2(false, false)))))).y, false), true))), true, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))))))))), ! (! (false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.9, 2814.1450)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(516.313), _GLF_FUZZED(9.8)), bvec2(false, false)))))).y, false), true))), true, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false))))))))))))))), false)), true && (bool(bvec2(_GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.9, 2814.1450)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(516.313), _GLF_FUZZED(9.8)), bvec2(false, false)))))).y, false), true))), true, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))))))))), ! (! (false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.9, 2814.1450)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(516.313), _GLF_FUZZED(9.8)), bvec2(false, false)))))).y, false), true))), true, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false))))))))))))))), false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), false, true)), bool(bool(bool(bvec4(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), (! (_GLF_IDENTITY(! (false), (! (false)) || false))) || false)))) && true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) | (_GLF_IDENTITY(2, ~ (~ (2)))))))), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x3(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_IDENTITY(_GLF_FUZZED(0.1), clamp(_GLF_FUZZED(0.1), _GLF_FUZZED(0.1), _GLF_FUZZED(0.1))))))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)))))))), bool(bvec3(bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))), (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1)))) / abs(1.0)))))).x > injectionSwitch.y)))))))), false, false))))))) || false), false || (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(_GLF_IDENTITY(mat4(injectionSwitch[1], sqrt(1.0), exp(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0), (false ? _GLF_FUZZED(mat4(-3.6, 8.3, 861.142, -706.819, 7454.1579, -52.42, 10.90, -26.91, 496.237, 7.4, -662.581, 98.46, -642.953, 5980.4964, 411.794, -1.1)) : mat4(injectionSwitch[1], sqrt(1.0), exp(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0))))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(0.1))))))).x > injectionSwitch.y) || false), false || (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && true))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.6)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.6)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))))), false)))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))))), false))))))))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(10.97), _GLF_FUZZED(-7449.7879)), bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))))))), false, _GLF_IDENTITY(false, true && (false)), false))))), false))).y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0) + _GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(-7634.6724)), bool(false))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
          barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0), (mat4x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0)))) / 1.0))), 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)) * mat4(1.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(log2(97.14)) : 0.0)), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0), (mat4x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0, 1.0, 1.0, 1.0)))))) / 1.0))), 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)) * mat4(1.0)))).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch, 1.0, 1.0))))), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.3) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0), (mat4x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0)))) / 1.0))), 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)) * mat4(1.0)))).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), min(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), clamp(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))), 0.0, 0.0), (mat4x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(length(vec4(1.5, 4.4, 4404.9403, -4982.9443))) : 0.0)), 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0)))) / 1.0))), 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)) * mat4(1.0)))).y))))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
          barrier();
         barrier();
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) << 0u), gl_WorkGroupID[2])).x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), ((gl_WorkGroupID.x)) | ((gl_WorkGroupID.x))), uint(uvec2((gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_IDENTITY((gl_WorkGroupID.x), 0u ^ (_GLF_IDENTITY((gl_WorkGroupID.x), 0u + ((gl_WorkGroupID.x)))))) | ((gl_WorkGroupID.x))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(6.2) : injectionSwitch[0])), injectionSwitch[1])).y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(6.2) : injectionSwitch[0])), injectionSwitch[1])).y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(6.2) : injectionSwitch[0])), injectionSwitch[1])).y)))), true && (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(6.2) : injectionSwitch[0])), injectionSwitch[1])).y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), float(mat3x4(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0 + (float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0))))))), (float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), float(mat3x4(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0 + (float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0)))))))) * 1.0))))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false))), false))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, true && (true))), false))))))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, false, false))))))))))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_5.subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * _GLF_struct_replacement_5.subgroup_size), (~ (subgroup_id * _GLF_struct_replacement_5.subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))) * _GLF_struct_replacement_5.subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), 0 ^ (_GLF_IDENTITY(max(1, 1), 0 | (_GLF_IDENTITY(max(1, 1), (true ? max(1, 1) : _GLF_FUZZED(79769))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)) + ((subgroup_local_id + 1)))))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (_GLF_IDENTITY(int(ivec2(1, 1)), (int(ivec2(1, 1))) - 0)) | 0))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) >> (107904u & 0u))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) >> (107904u & 0u)))) | 0u)))), ((0u | 0u) << _GLF_IDENTITY(uint(4u), uint(4u))) + ((~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (_GLF_IDENTITY(int(ivec2(1, 1)), (int(ivec2(1, 1))) - 0)) | 0))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) >> (107904u & 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), ~ (~ (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) >> (107904u & 0u)))) | 0u)))))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (-40925 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, 1)))), max(1, 1)), 1)))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1))))), clamp((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1))))))))))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true) ? _GLF_FUZZED(num_workgroup) : (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (~ ((subgroup_local_id + 1))) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (~ ((subgroup_local_id + 1))) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))), 0u + ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (~ ((subgroup_local_id + 1))) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))))))) - 0u)))))))))) : _GLF_FUZZED(_GLF_struct_replacement_5.subgroup_size))) % _GLF_struct_replacement_5.subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))) + 0), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))) | 0)) >> _GLF_IDENTITY(int(5), int(5))))))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) && true)) || false), _GLF_IDENTITY(bool(bool(bool(false))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), (bool(false)) || false)), (! (bool(false))) || false)))))) || false)))), true, true, false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) - 0.0)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-90.55)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) - 0.0)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y)), false, false, true))))))) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)))))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.y) + 0.0)))), bool(bool((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.y) + 0.0))))))) && true)))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, sqrt(0.0), 1.0, 0.0, 0.0, length(sin(vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), mix(float(float(mat4(injectionSwitch.y, sqrt(0.0), 1.0, 0.0, 0.0, length(sin(vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(-137.286)), bool(false))))))) || false)))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(7560.6688)), _GLF_IDENTITY(bool(false), true && (bool(false)))), 1.0 * (mix(float(injectionSwitch.y), float(_GLF_FUZZED(7560.6688)), bool(false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, min(4, 4)), 4))), _GLF_IDENTITY((4), ((4)) | ((_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) >> 0), 4))))))), ~ (~ (_GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), _GLF_IDENTITY(((4)), 0 | (((4)))) | ((4)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((4), 1 * ((4))), (_GLF_IDENTITY((4), 1 * ((4)))) | 0)) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), ((4)) | ((4))))), (_GLF_IDENTITY((4), 1 * ((4)))) + 0), (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), ((4)) | ((4))))), (_GLF_IDENTITY((4), 1 * ((4)))) + 0)) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(bitfieldReverse(-77856)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), _GLF_IDENTITY(((4)), (true ? _GLF_IDENTITY(((4)), ~ (~ (((4))))) : _GLF_FUZZED((-35836 ^ 13084)))) | ((4))))), (_GLF_IDENTITY((4), 1 * _GLF_IDENTITY(((4)), (((4))) << 0))) + 0), (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), ((4)) | ((4))))), (_GLF_IDENTITY((4), 1 * ((4)))) + 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 1 * (_GLF_IDENTITY(64, max(64, 64))))) ^ 0), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) | (4)), 64, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) * 1), 0)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (! (bool(_GLF_WRAPPED_IF_TRUE(true))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec2(true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))), ! (! (bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))))))))))), true)))) || false)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec2(true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))), ! (! (bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))))))))))), true)))) || false)), true), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec2(true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))), ! (! (bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))))))))))), true)))) || false)), true), false, false)), true))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))), true, true, true)))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false))))), ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_IDENTITY(false, false || (false)), false))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_IDENTITY(false, false || (false)), false))), true))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || false))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, _GLF_IDENTITY(4, (4) / 1), 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) * 1));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false)) && true, true && ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))))))) && true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / cos(vec2(0.0, 0.0)))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))) / vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))))), true, true), true)))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / cos(vec2(0.0, 0.0)))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))) / vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(6.2), _GLF_FUZZED(-6.8)), vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], 0.0 + ((vec2(1.0, 1.0))[1]))), bvec2(true, true))) * (injectionSwitch)).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))).y))))))), true, true), true))))))) || false)))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true))) && true))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0) & 1) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0)))))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true && (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))))), bool(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))))) && true)) && true)))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec4(bvec3((false), true, true), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec4(bvec3((false), true, true), false)))), false)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-51.22)), bool(false)), mix(float(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-51.22)), bool(false))), float(_GLF_FUZZED(424.079)), bool(false)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - sqrt(0.0), float(mat2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) - sqrt(0.0), abs(0.0), 1.0, 1.0)))))))))), bool(bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.2)))) - 0.0)))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, tan(0.0), 0.0, 1.0)))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch)) : injectionSwitch)).x)) > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (injectionSwitch.x)) > injectionSwitch.y)))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
}
