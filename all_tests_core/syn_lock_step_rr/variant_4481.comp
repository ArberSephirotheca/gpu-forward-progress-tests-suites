#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, int(ivec4(7, 1, 0, 0))), (0 | 0) | (_GLF_IDENTITY(7, int(ivec4(7, 1, 0, 0)))))), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (0 ^ 0) | (7))) / (1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec3(int(7), 0, 1), ~ (~ (ivec3(int(7), 0, 1))))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findLSB(_injected_loop_counter))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.62, -3472.5009)) : _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), max(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), min(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)))))), vec2(_GLF_FUZZED(-176.937), (injectionSwitch)[1]), bvec2(false, true))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), true)))))), true))))) || false)))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(-4895.5948) : injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec2(1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 1 * (0))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 1 * (0))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(0, 1 * (0))), 1 * (int(_GLF_IDENTITY(0, 1 * (0)))))))), int(_GLF_IDENTITY(0, 1 * (0))))), int(0))))))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), true && ((false))), true, false)))), _GLF_IDENTITY(bool(bool(! (! (false)))), ! (! (_GLF_IDENTITY(bool(bool(! (! (false)))), (bool(bool(! (! (false))))) && true))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)) || false)) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED(-460.802), _GLF_FUZZED(7.2)), vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), min(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * vec2(1.0, 1.0))))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))))))[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), ! (! (_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), ! (_GLF_IDENTITY(! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))), true && (! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))))))))))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), bool(bvec2(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), false))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))) << uvec3(0u, 0u, 0u)).x, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))) << uvec3(0u, 0u, 0u)).x) >> 0u), clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) + 0)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, ((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true) || false), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, ((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true) || false), false, false))))))), (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bool(! ((_GLF_DEAD(false)))))), _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((_GLF_DEAD(false)))), false || (! (! ((_GLF_DEAD(false))))))), (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(false)))), false || (! _GLF_IDENTITY((! ((_GLF_DEAD(false)))), ((! ((_GLF_DEAD(false))))) && true))))) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(false)))), false || (! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), (! ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, true, true)), true, true, true)))) && true))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))))))))))) || false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) - 0u)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) * 1u) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) - 0u) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, false)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, false))))))), (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, false)))))))) && true))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_DEAD(false))))))) && true, ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))) && true) && true)), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))) && true)) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))) || false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))))), false, true, false))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       do
        {
         barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, ! (! (false)))) && true)));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true, true))))) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(bool(false), (bool(false)) && true)), false), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(bool(false), (bool(false)) && true)), false), true)))))))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, round(_GLF_IDENTITY(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (true ? normalize(vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(vec4(0.8, 8.2, -9948.1073, -1.5)), min(_GLF_FUZZED(vec4(0.8, 8.2, -9948.1073, -1.5)), _GLF_FUZZED(vec4(0.8, 8.2, -9948.1073, -1.5))))))), mix(float(_GLF_FUZZED(-76.55)), float(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (true ? normalize(vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(vec4(0.8, 8.2, -9948.1073, -1.5)), min(_GLF_FUZZED(vec4(0.8, 8.2, -9948.1073, -1.5)), _GLF_FUZZED(vec4(0.8, 8.2, -9948.1073, -1.5)))))))), bool(true)))) * (injectionSwitch.x)) < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch)), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch)), injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-848.570, 564.283)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), (true ? max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch) : _GLF_FUZZED(vec2(-7.2, -76.16))))))).y, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))), false || (! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), false || _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY(true, ! (! (true)))))), false || ((! (! (_GLF_IDENTITY(true, ! (! (true))))))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).y)) && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(_GLF_IDENTITY(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), max(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), float(_GLF_FUZZED((_GLF_IDENTITY(630.988 / 96.48, clamp(630.988 / 96.48, 630.988 / 96.48, 630.988 / 96.48))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(vec3(_GLF_IDENTITY(vec2(0.0, 1.0), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-760.671)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))), 0.0))), bool(true))), 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-760.671)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))), 0.0))), bool(true))), 1.0)), (mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-760.671)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))), 0.0))), bool(true))), 1.0))) - vec2(0.0, 0.0))), vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), mix(vec2((vec2(0.0, 1.0))[0], (vec2(0.0, 1.0))[1]), vec2(_GLF_FUZZED(-403.732), _GLF_FUZZED(-18.45)), bvec2(false, false))))), 1.0))), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0)))))), (_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.7)), bool(false))), 1.0))))), vec2(0.0, 1.0)), mix(_GLF_IDENTITY(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), max(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), float(_GLF_FUZZED((_GLF_IDENTITY(630.988 / 96.48, clamp(_GLF_IDENTITY(630.988 / 96.48, mix(float(_GLF_FUZZED(3.4)), float(630.988 / 96.48), bool(true))), 630.988 / 96.48, 630.988 / 96.48))))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-69.70, -30.28)) : injectionSwitch)).x > injectionSwitch.y)))))))), dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(vec3(_GLF_IDENTITY(vec2(0.0, 1.0), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-760.671)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(86.49)), bool(false))), mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))), 0.0))), bool(true))), 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-760.671)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))), (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))) : _GLF_FUZZED(8188.1488))), 0.0))), bool(true))), 1.0)), (mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-760.671, (false ? _GLF_FUZZED(-67.64) : -760.671)))), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.424)), float(0.0), bool(true))), 0.0))), bool(true))), 1.0))) - vec2(0.0, 0.0))), vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), mix(vec2((vec2(0.0, 1.0))[0], (vec2(0.0, 1.0))[1]), vec2(_GLF_FUZZED(-403.732), _GLF_FUZZED(-18.45)), bvec2(false, false))))), 1.0))), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0))))))) - 0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0), 1.0)), max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY((1.0) / 1.0, (false ? _GLF_FUZZED(ldexp(-50.42, -28462)) : (1.0) / 1.0)))) / 1.0), 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), mix(float((1.0)), float(_GLF_FUZZED((+ -4512.7015))), bool(false)))), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0), 1.0)))), 0.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-5.2)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-5.2)), (true ? float(_GLF_IDENTITY(_GLF_FUZZED(-5.2), mix(float(_GLF_FUZZED(-5.2)), float(_GLF_FUZZED(-3.6)), bool(false)))) : _GLF_FUZZED((_GLF_IDENTITY(-4.9, (false ? _GLF_FUZZED(9.8) : -4.9)))))), mix(float(_GLF_FUZZED((+ (-6.7 - 3722.3820)))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-5.2)), (true ? float(_GLF_IDENTITY(_GLF_FUZZED(-5.2), mix(float(_GLF_FUZZED(-5.2)), float(_GLF_FUZZED(-3.6)), bool(false)))) : _GLF_FUZZED((_GLF_IDENTITY(-4.9, (false ? _GLF_FUZZED(9.8) : -4.9)))))), (false ? _GLF_FUZZED(-93.75) : _GLF_IDENTITY(float(_GLF_FUZZED(-5.2)), (true ? float(_GLF_IDENTITY(_GLF_FUZZED(-5.2), mix(float(_GLF_FUZZED(-5.2)), float(_GLF_FUZZED(-3.6)), bool(false)))) : _GLF_FUZZED((_GLF_IDENTITY(-4.9, (false ? _GLF_FUZZED(9.8) : -4.9))))))))), bool(true)))), float(_GLF_FUZZED(-632.580)), bool(false))), _GLF_IDENTITY(float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1316.8142))), float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1316.8142))), 1.0, 0.0, 1.0, round(length(normalize(1.0))), sqrt(1.0), abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0)))), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(845.703)))))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(74.76, 2.3)) : dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))))))))), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0))), (float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1316.8142))), float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1316.8142))), 1.0, 0.0, 1.0, round(length(normalize(1.0))), sqrt(1.0), abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0)))), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(845.703)))))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(74.76, 2.3)) : dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))))))))), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0)))) + tan(0.0)), bool(true)))) < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, bool(bvec2((true) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED((+ -4.0))), (_GLF_IDENTITY(float(_GLF_FUZZED((+ -4.0))), float(vec4(float(_GLF_FUZZED((+ -4.0))), 1.0, 0.0, 1.0)))) - 0.0), bool(false))) < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-217.163), mix(float(_GLF_FUZZED(-217.163)), float(_GLF_FUZZED(_GLF_IDENTITY(float(20280), clamp(float(20280), float(20280), float(20280))))), bool(false)))), _GLF_IDENTITY(bool(false), bool(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))).y), float(_GLF_IDENTITY(_GLF_FUZZED(-217.163), mix(float(_GLF_FUZZED(-217.163)), float(_GLF_FUZZED(_GLF_IDENTITY(float(20280), clamp(float(20280), float(20280), float(20280))))), bool(false)))), _GLF_IDENTITY(bool(false), bool(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.8))), mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-217.163), mix(float(_GLF_FUZZED(-217.163)), float(_GLF_FUZZED(_GLF_IDENTITY(float(20280), clamp(float(20280), float(20280), float(20280))))), bool(false)))), _GLF_IDENTITY(bool(false), bool(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false, false, true)))) || _GLF_IDENTITY(false, (false) && true)))))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) || false) && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), false || (! (false)))))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < _GLF_IDENTITY(_GLF_IDENTITY((1 | 1), ((1 | 1)) ^ 0), _GLF_IDENTITY(min((1 | 1), (1 | 1)), (_GLF_IDENTITY(min((1 | 1), (1 | 1)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : min((1 | 1), (1 | 1))))) | (min((1 | 1), (1 | 1)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), ((0 | 0)) + (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(7, 7))))) & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) * 1.0) < injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(! (! ((true))), true && (! (! _GLF_IDENTITY(((true)), _GLF_IDENTITY((((true))), ! (! ((((true)))))) || false)))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, bool(bvec2(true, true))))), _GLF_IDENTITY((bool(bvec3(false, true, true))) && true, ! (_GLF_IDENTITY(! ((bool(bvec3(false, true, true))) && true), bool(_GLF_IDENTITY(bool(! ((bool(bvec3(false, true, true))) && true)), (bool(! ((bool(bvec3(false, true, true))) && true))) && true)))))))), ! (! (bool(bvec3(false, true, true)))))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3(false, true, true)), _GLF_IDENTITY(! (! (bool(bvec3(false, true, true)))), true && (_GLF_IDENTITY(! (! (bool(bvec3(false, true, true)))), false || (! (! (bool(bvec3(false, true, true)))))))))), true))))))) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.8, -15.76)))).y))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                          {
                                           barrier();
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mat2(1.0) * (injectionSwitch)).y)), true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))))))), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))))))), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-419.589) : injectionSwitch[1])))), injectionSwitch)).y))))))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                      }
                     else
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, _GLF_IDENTITY(64, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (64), (~ (64)) * 1)), ~ (~ ((_GLF_IDENTITY(~ (64), (~ (64)) * 1)))))), 4);
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, true)))))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), bool(bvec3(bool(bvec3(true, _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), true, _GLF_IDENTITY(false, true && (false)))))), (true) && true)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((false))), (_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))) && true), ! (! (bool(bool(_GLF_IDENTITY((false), bool(bvec4((false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true, true))))))))) && true)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid]))) << 0u))), 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))));
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))))))), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))).y)))))) || false), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))) || false))))))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, length(0.0), 1.0))))).x < injectionSwitch.y)))))) || false))))))))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))))))), false, false), false))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), false || (true))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u), (next_virtual_gid) - 0u)], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1))))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1))))))))), _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(_GLF_IDENTITY(max(read_1, read_1), clamp(max(read_1, read_1), max(read_1, read_1), max(read_1, read_1))), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, _GLF_IDENTITY(read_1, (read_1) | (read_1))))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | (read_1))) >> 0u)) | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))), _GLF_IDENTITY(max(_GLF_IDENTITY(read_1, max(read_1, read_1)), read_1), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, _GLF_IDENTITY(read_1, max(read_1, read_1))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, _GLF_IDENTITY(read_1, max(read_1, read_1))), 1u, 1u, 1u), (false ? _GLF_FUZZED(uvec4(191187u, 181975u, 33577u, 167302u)) : uvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, _GLF_IDENTITY(read_1, max(read_1, read_1))), 1u, 1u, 1u)))))))))))) == read_2) + _GLF_IDENTITY(1, (1) | 0), max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, clamp(3u, 3u, 3u))) | (3u)))) ^ 0u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), 0u, 0u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), clamp(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (max(read_1, read_1)) | (_GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(subgroup_size) : max(read_1, read_1))))), _GLF_IDENTITY(max(read_1, read_1), min(_GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_1) : max(read_1, read_1))), _GLF_IDENTITY(max(read_1, read_1), (max(read_1, read_1)) | 0u))))), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(max(read_1, read_1), (max(read_1, read_1)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))) == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, 0u ^ (read_1)) == read_2) + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) / 1u) == read_2), (true ? uint(_GLF_IDENTITY(read_1, (read_1) / 1u) == read_2) : _GLF_FUZZED(subgroup_local_id))) + 1)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u ^ (uint(3u))), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), 0u, 0u))), min(_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))) == _GLF_IDENTITY(read_2, ~ (~ (read_2)))) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), 0u, 0u))), min(~ (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))), 1u, (1u | 1u))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))), 1u, (1u | 1u))), 1u)))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), (_GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | (3u))), clamp(uint(3u), uint(3u), uint(3u))))), 0u, 0u))), ~ (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))), 0u ^ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))))), _GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), 0u, 0u))))), ~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1))) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (false ? _GLF_FUZZED(read_2) : max(read_1, read_1))))), (false ? _GLF_FUZZED(137501u) : _GLF_IDENTITY(max(read_1, read_1), max(max(read_1, read_1), _GLF_IDENTITY(max(read_1, read_1), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(read_2) : max(read_1, read_1)))))))) == read_2) + 1, max(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)))), (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))), (_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))) - (0u << _GLF_IDENTITY(uint(2u), uint(2u)))))))), 0u, 0u)))))))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 + (64))) << 0), 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
              }
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 & 1, int(_GLF_IDENTITY(int(1 & 1), _GLF_IDENTITY((_GLF_IDENTITY(int(1 & 1), max(int(1 & 1), int(1 & 1)))) - 0, clamp((_GLF_IDENTITY(int(1 & 1), max(int(1 & 1), int(1 & 1)))) - 0, (_GLF_IDENTITY(int(1 & 1), max(int(1 & 1), int(1 & 1)))) - 0, (_GLF_IDENTITY(int(1 & 1), max(int(1 & 1), int(1 & 1)))) - 0)))))) & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y))) && true))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), ! (! ((true)))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), false || (_GLF_IDENTITY(false || (! (false)), false || (false || (! (false))))))))), true))), bool(bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || (! (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || (! (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || (! (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true)))))))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((false) && _GLF_IDENTITY(true, false || (true)))), false || (bool(bool((false) && true))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))), ! (! (bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))))))), false || (! (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))) && true))))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (75442 & (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.5)), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
}
