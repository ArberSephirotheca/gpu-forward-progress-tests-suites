#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.w + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) / 1u))), uint(uvec3(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) / 1u))), 1u, 1u))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.w, 0u ^ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.w)) + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)))) | (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))))), subgroup_local_id)) + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.x], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])), 4, 64, 0);
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.z = read_1;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base.x], uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base, clamp(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base, uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base)), GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_14next_virtual_gidnum_workgroupread_1workgroup_base)).z == read_2) + 1, _GLF_IDENTITY(4, 0 ^ (4)), 64, 4);
}
