#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat4x3 _f0;
 vec4 _f1;
 ivec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 uint _f1;
 _GLF_struct_0 _f2;
 bool _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_2 {
 uint virtual_gid;
 _GLF_struct_1 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.z = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.w;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.z * subgroup_size + subgroup_local_id, _GLF_struct_1(vec4(1.0), 1u, _GLF_struct_0(mat4x3(1.0), vec4(1.0), ivec4(1), 1u), true, mat4x2(1.0)));
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.z * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.x = next_virtual_gid;
 do
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.x], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_2.virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.y = read_1;
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_2.virtual_gid], 4, 64, 0);
 atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1subgroup_idworkgroup_id.y == read_2) + 1, 4, 64, 4);
}
