#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 mat2x4 _f0;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 vec3 _f1;
 mat4x3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 bool _f1;
 uvec4 _f2;
 vec4 _f3;
 uvec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_3 {
 int _f0;
 uint _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 vec2 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 ivec3 _f1;
 _GLF_struct_4 _f2;
 bvec4 _f3;
 mat2 _f4;
 uint workgroup_base;
 _GLF_struct_6 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_3(1, 1u, _GLF_struct_0(mat3x2(1.0), true, uvec4(1u), vec4(1.0), uvec3(1u), ivec2(1)), _GLF_struct_1(ivec4(1), true), vec2(1.0), _GLF_struct_2(uvec3(1u), vec3(1.0), mat4x3(1.0), ivec4(1))), ivec3(1), _GLF_struct_4(bvec2(true)), bvec4(true), mat2(1.0), workgroup_size * workgroup_id, _GLF_struct_6(mat4x3(1.0), _GLF_struct_5(mat2x4(1.0))));
 uint virtual_gid = _GLF_struct_replacement_7.workgroup_base + subgroup_id * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_7.workgroup_base + subgroup_id * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + ((subgroup_local_id + 1) % GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y);
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x = next_virtual_gid;
 atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x], uint(read_1 == read_2) + 1, 4, 64, 4);
}
