#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    return;
   do
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), 1, 1)), (true ? 1 : _GLF_FUZZED(25907))), false || (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), 1, 1)), (true ? 1 : _GLF_FUZZED(25907)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true)))) && true))) || false)));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))), ((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))) | ((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), max(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), (_GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(1u, 0u | (1u))))) | (_GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(uvec3(1u), uvec3(1u)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), (_GLF_IDENTITY(uvec3(1u), uvec3(1u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(uvec3(1u), uvec3(1u))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), min(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(1u), uvec3(1u)))))), (_GLF_IDENTITY(uvec3(1u), uvec3(1u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(uvec3(1u), uvec3(1u)))))))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), (_GLF_IDENTITY(uvec3(1u), uvec3(1u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), min(uvec4(1u, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), max(uvec4(1u, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 0u)))))))), uvec3(1u)))))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u)), (_GLF_IDENTITY(uvec3(1u), uvec3(1u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), min(uvec4(1u, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), max(uvec4(1u, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 0u)))))))), uvec3(1u))))))))) / uvec3(1u, 1u, 1u))))).x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), int(_GLF_IDENTITY(ivec3((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), (-66805 & 0) + (_GLF_IDENTITY(int(7), 0 ^ (int(7))))), int(7))))), 0, 1), (ivec3((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), (ivec3(1, 0, 0)) >> ivec3(0, 0, 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))), _GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)) - ivec3(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9945))) | ((1 << _GLF_IDENTITY(int(7), int(7))))))))) >> _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, 0 | (7)))) | 0), (_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, 0 | (7)))) | 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, 0 | (7)))) | 0), (_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, 0 | (7)))) | 0)) / 1))), int(7))), 0 | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) ^ 0))), min(1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) ^ 0))), 1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) ^ 0)))))))) >> _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(0), int(0))), clamp(((_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(7), int(7))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, ~ (~ (7))), clamp(_GLF_IDENTITY(7, (7) | (7)), _GLF_IDENTITY(7, (7) - 0), 7))))) << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter)))), (0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter)))))) | 0))), int(7))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter)))), (0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter)))))) | 0))), int(7))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (1 ^ 1) | (7)), _GLF_IDENTITY(7, min(7, 7))))))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))), int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (1 ^ 1) | (7)), _GLF_IDENTITY(7, min(7, 7))))))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))), ((1 ^ 1) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY((((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (1 ^ 1) | (7)), _GLF_IDENTITY(7, min(7, 7))))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (1 ^ 1) | (7)), _GLF_IDENTITY(7, min(7, 7))))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0)))))) | (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (1 ^ 1) | (7)), _GLF_IDENTITY(7, min(7, 7))))))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))))), 0 | (((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), int(7))), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))), (26719 & 0), 0, 0), (ivec4(int(_GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(_GLF_IDENTITY(26719, min(26719, 26719)) & 0, (_GLF_IDENTITY(_GLF_IDENTITY(26719, min(26719, 26719)) & 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(26719, min(26719, 26719)) & 0), (~ (_GLF_IDENTITY(26719, min(26719, 26719)) & 0)) + 0)))) + _GLF_IDENTITY(0, (0) | 0))), 0, 0)) | (_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(int(7), int(7))), (26719 & 0), 0, 0), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bvec4(! (! (_GLF_IDENTITY(true, bool(bool(true))))), true, false, false))))))) ? ivec4(int(_GLF_IDENTITY(int(7), int(7))), (26719 & 0), 0, 0) : _GLF_FUZZED(ivec4(-43533, 91933, 38118, 91461))))))))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), int(7))), int(ivec4(int(_GLF_IDENTITY(int(7), int(7))), (26719 & 0), 0, 0)))))))), 0 | _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7)))), ~ (~ (((1 << _GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (0))))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(8.4), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(1564.4793)), bvec2(true, false))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (workgroup_id) : _GLF_FUZZED(9804u))) >> 0u)))) | (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_id)), workgroup_id, workgroup_id)))))), (workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (workgroup_id) : _GLF_FUZZED(9804u))) >> 0u)))) | (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_id)), workgroup_id, workgroup_id))))))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(6u), uint(6u))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(619.561)))), float(_GLF_FUZZED(333.849)), bool(false))) < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(_GLF_IDENTITY(-2.3, min(_GLF_IDENTITY(-2.3, (false ? _GLF_FUZZED(-77.62) : _GLF_IDENTITY(-2.3, max(-2.3, -2.3)))), _GLF_IDENTITY(-2.3, mix(float(-2.3), float(_GLF_FUZZED(-7.3)), bool(false))))), mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), min(false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-14.36)), (float(_GLF_FUZZED(-14.36))) + 0.0), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), 0.0, 1.0, sqrt(0.0)), min(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), 0.0, 1.0, sqrt(0.0)), min(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), 0.0, 1.0, sqrt(0.0)), vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), 0.0, 1.0, sqrt(0.0)))), vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), 0.0, 1.0, sqrt(0.0)))))), 0.0, 1.0))))).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-9.6, (false ? _GLF_FUZZED(583.432) : -9.6)), _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), _GLF_IDENTITY(bool(true), bool(bvec2(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), true))))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0))))).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(-2.3, mix(float(_GLF_FUZZED(-14.36)), float(-2.3), bool(true))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y))))))) && true)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, -2.3)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, -2.3)) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(-87.98), clamp(_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(-87.98), max(true ? 0.0 : _GLF_FUZZED(-87.98), true ? 0.0 : _GLF_FUZZED(-87.98))), _GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(-87.98), float(_GLF_IDENTITY(float(true ? 0.0 : _GLF_FUZZED(-87.98)), (true ? float(true ? 0.0 : _GLF_FUZZED(-87.98)) : _GLF_FUZZED(-41.30))))), true ? 0.0 : _GLF_FUZZED(-87.98)))))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-28.29 + -866.031))), bool(false))), max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))))).y)))), false || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, -2.3)) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-87.98)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-28.29 + -866.031))), bool(false))), max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, -2.3)) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-87.98)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-28.29 + -866.031))), bool(false))), max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))))).y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.6, -2.3)) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-87.98)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-28.29 + -866.031))), bool(false))), max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))))).y)))) && true)) || false)))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true && (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2422.9634) : injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) + 0.0), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), (false ? _GLF_FUZZED(6.1) : injectionSwitch[0])), injectionSwitch[1])).y)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-863.681) : injectionSwitch[1])))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), (false ? _GLF_FUZZED(vec2(-3.0, -22.69)) : (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))))), (false ? _GLF_FUZZED(vec2(-4267.2250, 7.7)) : vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), (false ? _GLF_FUZZED(vec2(-3.0, -22.69)) : (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))) : _GLF_FUZZED(injectionSwitch))))))))) : _GLF_FUZZED(injectionSwitch), (true ? true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))) : _GLF_FUZZED(injectionSwitch))))) : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-8.5, 1.3)))))).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-6.5), clamp(_GLF_IDENTITY(_GLF_FUZZED(-6.5), mix(float(_GLF_FUZZED(-6.5)), float(_GLF_FUZZED(-8502.1281)), bool(false))), _GLF_IDENTITY(_GLF_FUZZED(-6.5), min(_GLF_FUZZED(-6.5), _GLF_IDENTITY(_GLF_FUZZED(-6.5), mix(float(_GLF_FUZZED(-927.603)), float(_GLF_FUZZED(-6.5)), bool(true))))), _GLF_FUZZED(-6.5))), _GLF_FUZZED(_GLF_IDENTITY(4.1, (4.1) + _GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) + (0.0))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat2x4((injectionSwitch), sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4((injectionSwitch), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))))[0], min(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat2x4((injectionSwitch), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4((injectionSwitch), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))))[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat2x4((injectionSwitch), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4((injectionSwitch), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))))[0])), (injectionSwitch)[1]), bvec2(true, true))).y, (false ? _GLF_FUZZED(774.360) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.5), _GLF_FUZZED(4.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) || false, false || (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) || false), ((false) || _GLF_IDENTITY(false, (false) || false)) && true))))))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (true)), bool(bvec3(! (! (true)), true, true))))), true)), (bool(bvec2(_GLF_IDENTITY(! (! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (true)), bool(bvec3(! (! (true)), true, true))))), true))) || false))))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))) && true)))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6))), bool(bvec4(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(((+ _injected_loop_counter) / _injected_loop_counter)))), clamp(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(int(int(6))), (int(int(int(6)))) | (int(int(int(6))))))) * 1), int(6)))), (1 ^ 0))))), false, true, false)))); _injected_loop_counter --)
            {
             return;
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) ^ 0u))), 0u))) : _GLF_FUZZED(workgroup_base))), subgroup_id * subgroup_size), (clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, 0u, 0u))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size)) ^ (0u & 37086u))), ((((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_id * subgroup_size, 0u)), (uint(uvec2(subgroup_id * subgroup_size, 0u))) | 0u))) - 0u), _GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) ^ 0u))), 0u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u))), min(_GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) ^ 0u))), 0u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u))), 0u ^ (_GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) ^ 0u))), 0u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u))), ((true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) ^ 0u))), 0u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)))) * 1u))), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) ^ 0u))), 0u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)))))), subgroup_id * subgroup_size), (clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), bool(bvec3(! (bool(_GLF_IDENTITY(true, false || (true)))), false, false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), bool(bvec3(! (bool(_GLF_IDENTITY(true, false || (true)))), false, false)))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), bool(bvec3(! (bool(_GLF_IDENTITY(true, false || (true)))), false, false))))))) && true))), bool(bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), bool(bvec3(! (bool(_GLF_IDENTITY(true, false || (true)))), false, false)))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), bool(bvec3(! (bool(_GLF_IDENTITY(true, false || (true)))), false, false))))))) && true)))))))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, 0u, 0u))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size)) ^ (0u & 37086u))))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), ~ (~ (subgroup_size))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))
    barrier();
  }
 else
  {
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.9)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), bool(true))), true, false, true)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-5936.5534), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(3.6)), bvec2(true, false))) * (injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-5936.5534), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(3.6)), bvec2(true, false))) * (injectionSwitch)).y))))) && true)))
            break;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
      }
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.5), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) << _GLF_IDENTITY(0, (0) | 0))], _GLF_FUZZED(-9.0)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), false))))))))), bvec2(bvec3(bvec2(true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))).y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(9.5), (injectionSwitch)[1]), mat2(1.0) * (vec2(_GLF_FUZZED(_GLF_IDENTITY(9.5, (_GLF_IDENTITY(9.5, float(mat4x3(9.5, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, 1.0)))) - 0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.0)), bvec2(true, false))))).y, true, true, true)), bool(bool(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.0)), bvec2(true, false))))).y, true, true, true))))))))));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec4(_injected_loop_counter < 1, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.6), clamp(_GLF_FUZZED(8.6), _GLF_IDENTITY(_GLF_FUZZED(8.6), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_FUZZED(8.6), 1.0, 0.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_FUZZED(8.6), 1.0, 0.0, 1.0, 0.0, 0.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat2x3(_GLF_FUZZED(8.6), 1.0, 0.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_FUZZED(8.6), 1.0, 0.0, 1.0, 0.0, 0.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) * 1.0)), _GLF_FUZZED(8.6))), _GLF_FUZZED(-0.2)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mat2(1.0) * (mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(8.6), _GLF_FUZZED(-0.2)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) | 1), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), int(3)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), int(3))))))) | 1)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 & -2398, clamp(0 & -2398, 0 & -2398, 0 & -2398))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[1])).y) - 0.0), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), (false ? _GLF_FUZZED((mat2(7.4, -9497.3304, -7784.1175, 6785.9565) * injectionSwitch)) : vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], injectionSwitch[1]))), vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[1])), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[1])))).y) - 0.0))))))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) || false)) && true)))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), bool(bool(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))) || false)); _injected_loop_counter ++)
          {
           atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), (_GLF_IDENTITY(4, 0 | (4))) ^ 0), 64, 4);
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          return;
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
