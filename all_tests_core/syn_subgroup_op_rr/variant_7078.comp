#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uvec4 GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size;
 uvec4 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2;
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup;
 uvec3 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_id;
 GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz = GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_id;
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base;
 uvec4 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id) * uvec2(1u, 1u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy = _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy, clamp(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy, GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy, GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.y = subgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bool(_GLF_IDENTITY(true, bool(bool(true))))))))
      {
       return;
      }
     else
      {
      }
    }
   GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.y = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.y;
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x = GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.w;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.z = subgroup_local_id;
 GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.z;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.w = num_workgroup;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.xy.x = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.w;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))) && true)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec2((injectionSwitch)[0], 0.0))), _GLF_FUZZED(-739.195)), vec2(_GLF_FUZZED(-0.8), (injectionSwitch)[1]), bvec2(false, true))), max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) | 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(~ ((gl_WorkGroupSize.x)), ~ ((gl_WorkGroupSize.x)))))) / 1u);
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z = workgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-71.51), (false ? _GLF_FUZZED(-6.6) : _GLF_FUZZED(-71.51))))) > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true))))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y = workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.y = GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y, 1u * (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.y = GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y));
  }
 else
  {
  }
 uint workgroup_base = GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z * _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy, (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid, uvec4(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid[0], (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid[0]) | (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid[0])), GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid[1], GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid[2], GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid[3])).xy)))) ^ uvec2(0u, 0u)).y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.xy.y = workgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5679.8839), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0))), log(1.0), cos(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 1.0, 0.0), mat2(mat3(mat2(0.0, 1.0, 1.0, 0.0))))))), determinant(mat4(determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0))), log(1.0), cos(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 1.0, 0.0), mat2(mat3(mat2(0.0, 1.0, 1.0, 0.0))))))), determinant(mat4(determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0))))).y))));
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.x = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.xy.y;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true, true))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true))), true)))))))
  return;
 uint virtual_gid = GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.x + GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.y * GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size, max(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size, GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size)))).xyz.z;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.w = virtual_gid;
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.w = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.w;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.x, _GLF_IDENTITY((GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.x), (false ? _GLF_FUZZED(workgroup_id) : (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.xy.x))) ^ 0u) + GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.y * GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x + ((GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z + 1) % GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x);
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.z = next_virtual_gid;
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.z = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.z;
 atomicStore(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.z], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.w], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) - 0) | (0)));
 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z = read_1;
 _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.x = GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z, (GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2, (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2, (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2) | (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2))) >> uvec4(0u, 0u, 0u, 0u)).z) >> 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
  return;
 uint read_2 = atomicLoad(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.w], 4, 64, 0);
 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.w = read_2;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x = GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.w;
 if(_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z + 1, _GLF_IDENTITY((GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z + 1) | 0u, min((GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z + 1) | 0u, _GLF_IDENTITY((GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z + 1) | _GLF_IDENTITY(0u, min(0u, 0u)), ((GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.z + 1) | 0u) - 0u)))) < GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     switch(_GLF_SWITCH(0))
      {
       case 99:
       ;
       case 0:
       case 12:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.z, (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.z) * 1u)], uint(_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz, uvec3(uvec4(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz, 0u))).x == _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x, (GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x) + 0u)) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))) + 1, 4, 64, 4);
       case 97:
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              break;
             subgroupAll(false);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-54.77)))))));
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       default:
       if(_GLF_DEAD(false))
        return;
       1;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.4), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED((false ? -923.883 : vec4(865.874, -2399.1006, 90.44, -14.13).x))), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, true))))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
    return;
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 22:
     while(((mat3x4(-19.21, -1869.6611, -4.4, 1.7, 2.1, 3021.5760, _GLF_IDENTITY(-0.6, clamp(-0.6, -0.6, -0.6)), -353.527, 52.54, -8.5, -347.401, -3237.4649) / (- mat3x4(8.8, -712.257, 2.6, 255.877, 201.013, -5.9, -6894.1781, 40.32, -7457.4627, 9.4, -6922.2375, -3.3))) != mat3x4(569.486, 0.9, -89.33, -1764.2666, -6.0, 9.4, 573.661, 5.4, -86.02, 27.46, -250.627, 9.8)))
      {
       if((ivec4(-13849, 19962, -60499, -71866) == ivec4(60590, -21741, 26158, 91718)))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false)))) && true))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))), 1.0))))) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-323.005)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             ;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), false, true, true))), false, true, false))), false, true)))))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(377.963, -3.3)) : injectionSwitch)).x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (0 & 63234); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) ^ 0)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
         mat3x2 _GLF_SWITCH_1_0v[8], _GLF_SWITCH_1_1v;
         mat3x4 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
         mat2 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v[16];
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)) | 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
            return;
           do
            {
            }
           while(true);
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if((ivec3(-5577, _GLF_IDENTITY(-73454, (_GLF_IDENTITY(-73454, ~ _GLF_IDENTITY((~ (-73454)), int(int(_GLF_IDENTITY((~ (-73454)), (_GLF_IDENTITY((~ (-73454)), clamp((~ (-73454)), _GLF_IDENTITY((~ (-73454)), ~ (~ ((~ (-73454))))), _GLF_IDENTITY((~ (-73454)), (false ? _GLF_FUZZED(72978) : (~ (-73454))))))) ^ 0)))))) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, log(1.0)))), injectionSwitch.x, injectionSwitch.x))))), 39260) != sign(ivec3(_GLF_IDENTITY(17714, (17714) / 1), 25882, _GLF_IDENTITY(91110, min(91110, 91110))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), (! (_injected_loop_counter > 0)) || false)))); _injected_loop_counter --)
              {
               mat4(mat3(-2138.0102, -6.4, 0.2, -2.6, 8414.7032, -45.43, 8213.6717, 6.5, -2451.3654));
              }
            }
           mat3x4 _GLF_SWITCH_1_6v, _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v[81];
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           float _GLF_SWITCH_1_9v[85], _GLF_SWITCH_1_10v;
           bvec2 _GLF_SWITCH_1_11v[64], _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v[94];
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           int _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v;
           mat2x4 _GLF_SWITCH_1_16v;
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if((_GLF_SWITCH_1_1v != (+ mat3x2(-2.6, -90.29, -167.607, 230.191, _GLF_IDENTITY(2216.4196, mix(float(_GLF_FUZZED(_GLF_IDENTITY((8.6 / vec4(_GLF_IDENTITY(89.81, (true ? 89.81 : _GLF_FUZZED(7.4))), -64.37, -0.5, -5.5).b), min(_GLF_IDENTITY((8.6 / vec4(_GLF_IDENTITY(89.81, _GLF_IDENTITY((true ? 89.81 : _GLF_FUZZED(7.4)), min((true ? 89.81 : _GLF_FUZZED(7.4)), _GLF_IDENTITY((true ? 89.81 : _GLF_FUZZED(7.4)), clamp((true ? 89.81 : _GLF_FUZZED(7.4)), (true ? 89.81 : _GLF_FUZZED(7.4)), _GLF_IDENTITY((true ? 89.81 : _GLF_FUZZED(7.4)), float(float((true ? 89.81 : _GLF_FUZZED(7.4)))))))))), -64.37, -0.5, -5.5).b), _GLF_IDENTITY(sqrt(0.0), float(vec3(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) / 1.0), 0.0, 0.0))) + ((8.6 / vec4(_GLF_IDENTITY(89.81, (true ? 89.81 : _GLF_IDENTITY(_GLF_FUZZED(7.4), (true ? _GLF_FUZZED(7.4) : _GLF_FUZZED(3941.1636))))), -64.37, _GLF_IDENTITY(-0.5, clamp(-0.5, -0.5, -0.5)), -5.5).b))), (8.6 / vec4(_GLF_IDENTITY(89.81, (true ? 89.81 : _GLF_FUZZED(7.4))), -64.37, -0.5, -5.5).b))))), float(_GLF_IDENTITY(2216.4196, clamp(2216.4196, 2216.4196, 2216.4196))), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))))))), _GLF_IDENTITY(8899.3136, min(8899.3136, _GLF_IDENTITY(8899.3136, _GLF_IDENTITY(mix(float(8899.3136), float(_GLF_FUZZED(1.4)), bool(false)), max(mix(float(8899.3136), float(_GLF_FUZZED(1.4)), bool(false)), mix(float(8899.3136), float(_GLF_FUZZED(1.4)), bool(false)))))))))))
              {
               true;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0), (_injected_loop_counter --) - 0)) | 0))), (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) | 0)))) << (0 & -29471))))
                    {
                     _GLF_SWITCH_1_2v;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), bool(bvec3(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter ++)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(0, 0, 1, _GLF_IDENTITY(1, (1) / 1)), clamp(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1))), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, min(0, 0)), 0, 1, _GLF_IDENTITY(1, (1) / 1)), clamp(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1), ivec4(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(ivec2(0, 0))), 0)), 0, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1)), 1)), 1)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(0, 0, 1, _GLF_IDENTITY(1, (1) / 1)), clamp(ivec4(0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) * 1))), 1, 1), _GLF_IDENTITY(ivec4(0, 0, 1, 1), (_GLF_IDENTITY(ivec4(0, 0, 1, 1), max(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1)))) * ivec4(1, 1, 1, 1)), ivec4(0, 0, 1, 1))), ivec4(0, 0, _GLF_IDENTITY(0, (0) / 1), 0) | (_GLF_IDENTITY(ivec4(0, 0, 1, _GLF_IDENTITY(1, (1) / 1)), clamp(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1)))))), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(0, 0, 1, _GLF_IDENTITY(1, (1) / 1)), clamp(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, _GLF_IDENTITY(1, (1) << 0)), ivec4(0, 0, 1, 1))), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(0, 0, 1, _GLF_IDENTITY(1, (1) / 1)), clamp(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1)))))))))) + 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 1)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       ;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - sqrt(0.0)) + (injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 & 1) & 1), 0 ^ (((1 & 1) & 1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
               ;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               ;
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, (2) / 1), 2))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 ;
                }
               for(int _injected_loop_counter = _GLF_IDENTITY((0 & (61296 / 36109)), (false ? _GLF_FUZZED(29617) : (0 & (61296 / 36109)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, int(ivec3((int(7)) - 0, 0, 1)))))), (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, int(ivec3((int(7)) - 0, 0, 1)))))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, int(ivec3((int(7)) - 0, 0, 1))))))) || false)) && true)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.6)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
                    return;
                   (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(62991u, 0u | (62991u)), 155479u, 8698u) >> uvec3(18071u, 161208u, 29676u), (true ? uvec3(_GLF_IDENTITY(_GLF_IDENTITY(62991u, 0u | (62991u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id[1]) : _GLF_IDENTITY(62991u, 0u | (62991u)))), 155479u, 8698u) >> uvec3(18071u, 161208u, 29676u) : _GLF_FUZZED(GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basenext_virtual_gidnum_workgroup.arb))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
                    return;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, exp(0.0), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y))));
        }
       else
        {
         uvec4 _GLF_SWITCH_1_17v[73];
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           mat4(5378.0258, -4.9, 644.344, _GLF_IDENTITY(-4.3, clamp(-4.3, _GLF_IDENTITY(-4.3, (-4.3) - tan(0.0)), _GLF_IDENTITY(-4.3, _GLF_IDENTITY(float(mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0)), clamp(float(mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(-9996.1095, -4220.4164, -8.6, -59.12, 4.9, -310.219, -9706.2483, -65.93, 0.4)) : mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(-9996.1095, -4220.4164, -8.6, -59.12, 4.9, -310.219, -9706.2483, -65.93, 0.4)) : mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)))))), (_GLF_IDENTITY(mat3(-4.3, 0.0, 0.0, _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(2.4)), float(determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), bool(true))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)), (true ? mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)) : _GLF_FUZZED(-242.228))), mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(-9996.1095, -4220.4164, -8.6, -59.12, 4.9, -310.219, -9706.2483, -65.93, 0.4)) : mat3(-4.3, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-153.802)), float(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2202.8315)))), bool(true))))))) * mat3(1.0))) / mat3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), float(mat3(-4.3, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0))))))), -6.8, -44.16, -6.4, 213.730, -56.61, 8.0, 0.9, 0.1, -878.321, -209.012, 7817.1337, 3.7);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
            continue;
          }
         ;
         mat2x4(29.20, 8.4, 89.83, -533.744, -19.46, 43.80, _GLF_IDENTITY(-38.34, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), min(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), min(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), max(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))))))))) + (-38.34)), 776.403);
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), _GLF_IDENTITY(false, (false) || false), false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), false, false)), true)))))))
          return;
        }
       float _GLF_SWITCH_1_18v;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       mat2x3(20.35, _GLF_IDENTITY(-464.642, mix(float(_GLF_IDENTITY(-464.642, max(_GLF_IDENTITY(-464.642, max(-464.642, -464.642)), -464.642))), float(_GLF_FUZZED(-6509.8202)), bool(false))), 6319.3913, 2331.1522, 3.4, -3.1);
       ivec4 _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v[23], _GLF_SWITCH_1_21v;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         mat4x2(-8.2, _GLF_IDENTITY(_GLF_SWITCH_1_18v, max(_GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v)), pow(_GLF_SWITCH_1_18v, _GLF_IDENTITY(6.9, max(6.9, 6.9))), -9009.4218, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v);
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     case 8:
     uvec3 _GLF_SWITCH_1_22v;
     case 0:
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     case 12:
     case 93:
     if(_GLF_DEAD(false))
      return;
     case 74:
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
      {
       atomicStore(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idnext_virtual_gidvirtual_gid.z], uint(GLF_merged2_0_3_65_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_17read_1subgroup_idsubgroup_local_idsubgroup_size.xyz.x == GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x) + 1, 4, 64, 4);
      }
     subgroupAll(true);
     break;
     case 84:
     for(     mat2x3(7793.7003, 9.4, 74.40, -577.071, 8.7, _GLF_IDENTITY(_GLF_IDENTITY(-5.5, (false ? _GLF_FUZZED(-832.082) : -5.5)), 0.0 + (_GLF_IDENTITY(-5.5, _GLF_IDENTITY(mix(float(-5.5), float(_GLF_FUZZED(755.191)), bool(false)), float(mat4x2(mix(float(-5.5), float(_GLF_FUZZED(755.191)), bool(false)), 0.0, 0.0, 0.0, 1.0, exp(0.0), 1.0, determinant(mat3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0)))))))));
 (vec4(6.4, -25.21, _GLF_IDENTITY(-27.58, max(-27.58, -27.58)), _GLF_IDENTITY(6.1, min(6.1, 6.1))) == vec4(693.046, 961.515, -9.2, _GLF_IDENTITY(_GLF_IDENTITY(-650.093, 0.0 + _GLF_IDENTITY((-650.093), (true ? (-650.093) : _GLF_FUZZED(7.6)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-650.093, 0.0 + _GLF_IDENTITY((-650.093), (_GLF_IDENTITY(true, true && (true)) ? (-650.093) : _GLF_FUZZED(7.6)))) : _GLF_FUZZED(log2(-8.9)))))); ivec3(-53759, -4373, -51414))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       mat4(3.9, -924.572, -6.3, 7.1, 73.30, 8.0, _GLF_IDENTITY(-7509.8634, clamp(-7509.8634, -7509.8634, -7509.8634)), -4.2, -1905.6622, -545.367, 6.9, 6917.4168, -6898.9764, -629.186, 1005.2102, 6.9);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       ;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ 4.5))), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.4)))), bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))))) > injectionSwitch.y))), false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(true, (true) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false)))))))), false, true))))))))), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(true, (true) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))))))))), true)), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(true, (true) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))))))))), true)), false, true)))))))))))))
      return;
     case 83:
     {
      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-13229) : 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-13229) : 1))))); _injected_loop_counter ++)
       {
        if(_GLF_DEAD(false))
         {
          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
           {
            return;
           }
          else
           {
            if(_GLF_DEAD(false))
             continue;
           }
         }
       }
      do
       {
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             continue;
            return;
           }
          for(          bvec2(true, true);
 (mat4x2(-69.74, 3.3, -8.7, -147.196, 4.2, -331.407, 0.9, -9.3) != mat4x2(_GLF_IDENTITY(-63.49, (-63.49) - 0.0), -3408.0133, 3.9, 672.334, 436.577, _GLF_IDENTITY(73.73, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(73.73, mix(float(_GLF_FUZZED(945.782)), float(73.73), bool(true))), 1.0, 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(73.73, mix(float(_GLF_FUZZED(945.782)), float(73.73), bool(true))), 1.0, 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0))))), min(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(73.73, mix(float(_GLF_FUZZED(945.782)), float(73.73), bool(true))), 1.0, 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(73.73, mix(float(_GLF_FUZZED(945.782)), float(73.73), bool(true))), 1.0, 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(73.73, mix(float(_GLF_FUZZED(945.782)), float(73.73), bool(true))), 1.0, 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(73.73, mix(float(_GLF_FUZZED(945.782)), float(73.73), bool(true))), 1.0, 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0)))))))), -3578.5113, -9.4)); log2(vec4(6.1, 6076.7212, -958.267, -4.1)))
           {
            ivec4 _GLF_SWITCH_1_23v, _GLF_SWITCH_1_24v;
            if(_GLF_DEAD(false))
             return;
            for(bvec2 _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v, _GLF_SWITCH_1_27v; _GLF_IDENTITY((mat3x4(6673.2135, 1.2, -98.91, -86.33, -4472.8013, 19.58, 5.9, 147.766, -6.2, 8563.0187, 124.722, -15.77) == mat3x4(-1.0, -8.4, 445.946, 3.3, -630.836, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2))) * 1.0)) - 0.0), clamp(1.2, 1.2, 1.2)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2))) * 1.0)) - 0.0), clamp(1.2, 1.2, 1.2)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2))) * 1.0)) - 0.0), clamp(1.2, 1.2, 1.2)), (false ? _GLF_FUZZED(-1327.2177) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), (_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2))) * 1.0)) - 0.0), clamp(1.2, 1.2, 1.2)))))), _GLF_IDENTITY(-31.83, (true ? -31.83 : _GLF_FUZZED(84.58))), -652.344, 6.6, 8783.6599, _GLF_IDENTITY(9.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(9.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.2) : _GLF_IDENTITY(9.0, clamp(9.0, 9.0, 9.0)))), max(_GLF_IDENTITY(9.0, float(mat2(9.0, 0.0, 1.0, 1.0))), 9.0)), 9.0, 9.0)), -1713.2458)), bool(bvec3(_GLF_IDENTITY((mat3x4(6673.2135, 1.2, -98.91, -86.33, -4472.8013, 19.58, 5.9, 147.766, -6.2, 8563.0187, _GLF_IDENTITY(124.722, (124.722) * 1.0), -15.77) == mat3x4(-1.0, -8.4, 445.946, 3.3, -630.836, _GLF_IDENTITY(_GLF_IDENTITY(1.2, (false ? _GLF_FUZZED(9.0) : 1.2)), clamp(1.2, 1.2, 1.2)), -31.83, -652.344, 6.6, 8783.6599, _GLF_IDENTITY(_GLF_IDENTITY(9.0, clamp(_GLF_IDENTITY(9.0, max(9.0, 9.0)), 9.0, 9.0)), (_GLF_IDENTITY(9.0, clamp(_GLF_IDENTITY(9.0, max(9.0, 9.0)), 9.0, 9.0))) / 1.0), -1713.2458)), ((mat3x4(6673.2135, 1.2, -98.91, -86.33, -4472.8013, 19.58, 5.9, 147.766, -6.2, 8563.0187, 124.722, -15.77) == mat3x4(-1.0, -8.4, 445.946, 3.3, -630.836, _GLF_IDENTITY(_GLF_IDENTITY(1.2, (_GLF_IDENTITY(false ? _GLF_FUZZED(9.0) : 1.2, min(false ? _GLF_FUZZED(9.0) : 1.2, false ? _GLF_FUZZED(9.0) : 1.2)))), clamp(1.2, 1.2, 1.2)), -31.83, -652.344, 6.6, 8783.6599, _GLF_IDENTITY(9.0, clamp(_GLF_IDENTITY(9.0, max(9.0, 9.0)), _GLF_IDENTITY(9.0, mix(float(_GLF_FUZZED(7.2)), float(_GLF_IDENTITY(9.0, min(9.0, 9.0))), bool(true))), 9.0)), -1713.2458))) || false), true, _GLF_IDENTITY(true, (true) || false)))); bvec3(false, true, false))
             {
              ivec3(35741, _GLF_IDENTITY(84452, max(84452, 84452)), -99452);
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                return;
               }
              mat4x2(1.1, -7839.7341, -9760.0193, -5.5, 21.40, 452.006, -857.544, 6262.7307);
              for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
               {
                notEqual(uvec4(60127u, 182545u, 177285u, 40606u), uvec4(168130u, 103367u, _GLF_IDENTITY(_GLF_IDENTITY(100665u, clamp(100665u, 100665u, 100665u)), _GLF_IDENTITY((_GLF_IDENTITY(100665u, clamp(100665u, 100665u, 100665u))) << 0u, ((_GLF_IDENTITY(100665u, clamp(100665u, 100665u, 100665u))) << 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 42627u));
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                 }
                else
                 {
                  return;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))))))))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))) || _GLF_IDENTITY(false, (false) && true))))
                   break;
                  break;
                 }
                break;
               }
              mat4x2 _GLF_SWITCH_1_28v[63];
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
                if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                 return;
               }
              else
               {
                vec4(5.4, 73.47, _GLF_IDENTITY(-5.5, max(-5.5, -5.5)), 233.604);
               }
              uint(-67077);
              true;
              vec4 _GLF_SWITCH_1_29v[98], _GLF_SWITCH_1_30v;
             }
            if(_GLF_DEAD(false))
             {
              do
               {
                return;
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            uint _GLF_SWITCH_1_31v, _GLF_SWITCH_1_32v, _GLF_SWITCH_1_33v[93];
            (_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))))), ! (! (_GLF_IDENTITY((vec3(-0.8, _GLF_IDENTITY(8.1, clamp(8.1, 8.1, 8.1)), -81.80) == vec3(-0.5, 9.3, -6.1)) || true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true, ! (! ((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true)))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true, ! (! ((_GLF_IDENTITY(vec3(-0.8, 8.1, -81.80), (false ? _GLF_FUZZED(vec3(-5035.0457, -0.4, 788.774)) : vec3(-0.8, 8.1, -81.80))) == vec3(-0.5, 9.3, -6.1)) || true)))))), false || (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true, ! (! ((_GLF_IDENTITY(vec3(_GLF_IDENTITY(-0.8, mix(float(_GLF_IDENTITY(-0.8, min(-0.8, -0.8))), float(_GLF_FUZZED((float(-5756) / -79.96))), bool(false))), 8.1, -81.80), vec3(mat4x2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-0.8, mix(float(_GLF_IDENTITY(-0.8, min(-0.8, -0.8))), float(_GLF_FUZZED((float(-5756) / -79.96))), bool(false))), 8.1, -81.80), mat3(1.0) * (vec3(_GLF_IDENTITY(-0.8, mix(float(_GLF_IDENTITY(-0.8, min(-0.8, -0.8))), float(_GLF_FUZZED((float(-5756) / -79.96))), bool(false))), 8.1, -81.80))), tan(0.0), cos(0.0), log(1.0), 0.0, 1.0))) == vec3(-0.5, 9.3, -6.1)) || true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1), _GLF_IDENTITY(bool(bvec4(vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec4(bool(bvec4(vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, false, true))))) || true, ! (! ((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, _GLF_IDENTITY(-6.1, (-6.1) / 1.0))) || true))), (_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true, ! (! ((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true)))) || false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true, ! (! ((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true))), (_GLF_IDENTITY(_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, _GLF_IDENTITY(9.3, max(9.3, 9.3)), -6.1)), (_GLF_IDENTITY((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, _GLF_IDENTITY(9.3, max(9.3, 9.3)), -6.1)), ! (! ((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, _GLF_IDENTITY(9.3, max(9.3, 9.3)), -6.1)))))) && true) || true, ! (! ((vec3(-0.8, 8.1, -81.80) == _GLF_IDENTITY(vec3(_GLF_IDENTITY(-0.5, (-0.5) * 1.0), 9.3, -6.1), (vec3(_GLF_IDENTITY(-0.5, (-0.5) * 1.0), 9.3, -6.1)) * mat3(1.0))) || true)))) || false))))))))))))))))));
            vec4 _GLF_SWITCH_1_34v, _GLF_SWITCH_1_35v[50], _GLF_SWITCH_1_36v;
            isnan(_GLF_SWITCH_1_36v);
            if(_GLF_DEAD(false))
             {
              do
               {
                for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(500.714)), bool(false))))); _injected_loop_counter ++)
                 {
                  return;
                  if(_GLF_DEAD(false))
                   return;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            float _GLF_SWITCH_1_37v, _GLF_SWITCH_1_38v, _GLF_SWITCH_1_39v;
            GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x;
           }
         }
        else
         {
          for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int(0 | (_GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) & 1)); _injected_loop_counter ++)
           {
            if(_GLF_DEAD(false))
             return;
           }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           break;
         }
       }
      while(_GLF_WRAPPED_LOOP(false));
      if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
       return;
      for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
       {
        if(_GLF_DEAD(false))
         break;
        if(_GLF_DEAD(false))
         return;
       }
      mat3x2 _GLF_SWITCH_1_40v, _GLF_SWITCH_1_41v[1], _GLF_SWITCH_1_42v;
      for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
       {
        if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
         return;
       }
      if(_GLF_DEAD(false))
       return;
      do
       {
        if(_GLF_DEAD(false))
         return;
        if(_GLF_WRAPPED_IF_FALSE(false))
         {
         }
        else
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
         }
        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
         {
          if((mat4(-597.747, 8.9, -5.1, 7767.2062, _GLF_IDENTITY(-3230.4366, (-3230.4366) + 0.0), 9.4, -7527.2501, 7.1, 450.205, _GLF_IDENTITY(6298.9828, (_GLF_IDENTITY(6298.9828, min(6298.9828, 6298.9828))) / 1.0), -671.286, 103.146, _GLF_IDENTITY(_GLF_IDENTITY(3.3, clamp(3.3, _GLF_IDENTITY(3.3, 0.0 + (3.3)), _GLF_IDENTITY(3.3, clamp(3.3, 3.3, 3.3)))), max(_GLF_IDENTITY(3.3, (3.3) + 0.0), 3.3)), -83.80, -794.874, 2217.0476) != mat4(788.304, -46.64, -2041.8600, _GLF_IDENTITY(_GLF_IDENTITY(-8.6, min(-8.6, -8.6)), min(-8.6, _GLF_IDENTITY(-8.6, 1.0 * (-8.6)))), -581.057, 0.6, 9025.5622, 5154.6243, -62.03, 1202.4860, -688.126, -62.41, -9.5, 5387.7031, _GLF_IDENTITY(-8.6, max(-8.6, _GLF_IDENTITY(-8.6, min(-8.6, -8.6)))), 9284.5271)))
           {
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             break;
            vec3 _GLF_SWITCH_1_43v[18];
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
            all(greaterThanEqual(uvec4(130794u, 37937u, 98607u, _GLF_IDENTITY(32003u, clamp(32003u, 32003u, _GLF_IDENTITY(32003u, uint(uint(32003u)))))), uvec4(155079u, 147467u, 14377u, 18188u)));
            if(_GLF_DEAD(false))
             return;
           }
         }
        bvec4 _GLF_SWITCH_1_44v, _GLF_SWITCH_1_45v[92], _GLF_SWITCH_1_46v;
        mat4x3 _GLF_SWITCH_1_47v, _GLF_SWITCH_1_48v, _GLF_SWITCH_1_49v;
        if(_GLF_DEAD(false))
         continue;
        bool _GLF_SWITCH_1_50v;
        for(mat2 _GLF_SWITCH_1_51v; true; bvec3(false, false, true))
         {
          mat2x4 _GLF_SWITCH_1_52v[81];
          if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, false, false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, false, false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, false, false))))), bool(bvec2(bool((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, false, false))))), false)))), bool(bvec3(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, false, false))))), bool(bvec2(bool((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, false, false))))), false)))), false, true))))))))))
           break;
          float _GLF_SWITCH_1_53v;
         }
        vec3 _GLF_SWITCH_1_54v, _GLF_SWITCH_1_55v, _GLF_SWITCH_1_56v;
        sinh(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)));
       }
      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
       {
        if(_GLF_DEAD(false))
         return;
        return;
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
       }
     }
     default:
     if(_GLF_DEAD(false))
      return;
     1;
    }
   if(_GLF_DEAD(false))
    return;
  }
}
