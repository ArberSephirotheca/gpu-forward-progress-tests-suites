#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 uint next_virtual_gid;
 vec2 _f0;
 vec3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
} ;

struct _GLF_struct_1 {
 uint subgroup_local_id;
 bvec3 _f0;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 uint _f1;
 uvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 bvec2 _f1;
 _GLF_struct_1 _f2;
 mat2x4 _f3;
 _GLF_struct_2 _f4;
 mat3x4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_0(uvec2(1u), 1u, uvec3(1u), 1u), bvec2(true), _GLF_struct_1(gl_SubgroupInvocationID, bvec3(true)), mat2x4(1.0), _GLF_struct_2(ivec3(1)), mat3x4(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_3._f2.subgroup_local_id;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_3._f2.subgroup_local_id + 1) % subgroup_size), vec2(1.0), vec3(1.0), vec4(1.0));
 atomicStore(buf[_GLF_struct_replacement_4.next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_struct_replacement_3._f2.subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[_GLF_struct_replacement_4.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[_GLF_struct_replacement_4.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     subgroupAll(true);
    }
   else
    {
    }
  }
}
