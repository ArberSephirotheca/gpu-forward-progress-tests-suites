#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       return;
      }
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) && true, ((bool(false)) && true) && true))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))) && true)), bool(bool(false)))))
          return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec3 GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.y = _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y = subgroup_size;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))) || false)))) && true)))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x = subgroup_local_id;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.z = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x, (GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x) ^ 0u);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) | (1)) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(72440, ~ (~ (_GLF_IDENTITY(72440, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(72440, ~ (~ (72440))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(72440, ~ (~ (72440))), 0, 1, 1))) * 1))))) & _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), max((0 >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(atomicMax(_injected_loop_counter, 49617))))), int(6))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (72440 & _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), max((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), int(ivec2(0 >> _GLF_IDENTITY(int(6), int(6)), 1)))), (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(atomicMax(_injected_loop_counter, 49617))))), int(6)))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), false || (! (! (_GLF_DEAD(false)))))))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u), _GLF_IDENTITY(gl_WorkGroupSize.x, 0u + (gl_WorkGroupSize.x)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_FUZZED(subgroup_id))) : _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.w = workgroup_size;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.z = GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.w;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(false, false || (false))))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))) || false)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(0u, 0u, 0u)), gl_WorkGroupID)).x, (_GLF_IDENTITY(true ? gl_WorkGroupID.x : _GLF_FUZZED(subgroup_size), (true ? true ? gl_WorkGroupID.x : _GLF_FUZZED(subgroup_size) : _GLF_FUZZED((_GLF_IDENTITY(~ subgroup_size, ~ (~ (~ subgroup_size)))))))));
 GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.z = workgroup_id;
 GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.z = GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.z, ~ (~ (GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.z)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.6, 4470.9338)) : injectionSwitch)).y))))
      return;
    }
  }
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.y * _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y, _GLF_IDENTITY((GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y) >> 0u, ((GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y) >> 0u) >> 0u)) + GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.z;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y = virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.w = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, uvec2(uvec4(GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, 1u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))) | _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))), (clamp(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)))) | (clamp(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))).y;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(86115))) != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), false, false)))))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.y * GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y + ((GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.z + _GLF_IDENTITY(1, 0 | (1))) % GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y);
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.x = next_virtual_gid;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) >> 0, clamp((int(6)) >> 0, (int(6)) >> 0, (int(6)) >> 0))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((_GLF_IDENTITY(6, max(6, 6))), ((_GLF_IDENTITY(6, max(6, 6)))) * 1))), max(int(6), int(6)))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((_GLF_IDENTITY(6, max(6, 6))), _GLF_IDENTITY(((_GLF_IDENTITY(6, max(6, 6)))) * 1, (true ? ((_GLF_IDENTITY(6, max(6, 6)))) * 1 : _GLF_FUZZED(_injected_loop_counter)))))), max(int(6), int(6))))) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | 0)) | (int(6))), int(_GLF_IDENTITY(6, _GLF_IDENTITY(max(6, 6), min(_GLF_IDENTITY(max(6, 6), clamp(max(6, 6), max(6, 6), _GLF_IDENTITY(max(6, 6), 0 ^ (max(6, 6))))), _GLF_IDENTITY(max(6, 6), max(max(6, 6), _GLF_IDENTITY(max(6, 6), (max(6, 6)) | (max(6, 6)))))))))))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))), ~ (~ ((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6))))))), 1))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), ((6)) - 0))), max(int(6), int(6))))), (min(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(_GLF_IDENTITY(6, (6) << (0 & 95380))), int(6)))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), min(_GLF_IDENTITY((6), int(ivec3((6), 1, (0 >> _GLF_IDENTITY(int(1), int(1)))))), (6)))), (true ? _GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), min(_GLF_IDENTITY((6), int(ivec3((6), 1, (0 >> _GLF_IDENTITY(int(1), int(1)))))), (6)))) : _GLF_FUZZED(16992)))), max(int(6), int(6))), _GLF_IDENTITY((false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))), max((false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))), (false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))))))), 1))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))))) | (min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), (true ? 0 + (6) : _GLF_FUZZED(12634))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, 0 + (6)), _GLF_IDENTITY(6, 0 + (6))))) - 0)), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1), (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY((int(_GLF_IDENTITY(6, 0 + (6)))), min((int(_GLF_IDENTITY(6, 0 + (6)))), (int(_GLF_IDENTITY(6, 0 + (6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) + 0) + (_GLF_IDENTITY(6, ~ (~ (6)))))))))), 1, 1)) | (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(6, 0 + (6))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), 1 * (_GLF_IDENTITY(6, 0 + (6))))))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1))))), max(int(6), int(_GLF_IDENTITY(6, (6) | (6)))))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 + (6), (true ? 0 + (6) : _GLF_FUZZED(_injected_loop_counter))), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0)) >> ivec2(0, _GLF_IDENTITY(0, (0) >> 0)))))), (_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 + (6), (_GLF_IDENTITY(true, false || (true)) ? 0 + (6) : _GLF_FUZZED(_injected_loop_counter))), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0)) >> ivec2(0, 0)))))) / 1)), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0 + (6), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))) + (6), (0 + (6)) / 1), 0)) >> ivec2(0, 0))))))) - 0), max(int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec4(6, 1, 0, 1)))))))), int(6)))), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | 0)) | (int(6))), int(_GLF_IDENTITY(6, _GLF_IDENTITY(max(6, 6), min(_GLF_IDENTITY(max(6, 6), clamp(max(6, 6), max(6, 6), _GLF_IDENTITY(max(6, 6), 0 ^ (max(6, 6))))), _GLF_IDENTITY(max(6, 6), max(max(6, 6), _GLF_IDENTITY(max(6, 6), (max(6, 6)) | (max(6, 6)))))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((49222)) : (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | 0)) | (int(6))), int(_GLF_IDENTITY(6, _GLF_IDENTITY(max(6, 6), min(_GLF_IDENTITY(max(6, 6), clamp(max(6, 6), max(6, 6), _GLF_IDENTITY(max(6, 6), 0 ^ (max(6, 6))))), _GLF_IDENTITY(max(6, 6), max(max(6, 6), _GLF_IDENTITY(max(6, 6), (max(6, 6)) | (max(6, 6)))))))))))))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))), ~ (~ ((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6))))))), 1))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), ((6)) - 0))), max(int(6), int(6))))), (min(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(_GLF_IDENTITY(6, (6) << (0 & 95380))), int(6)))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), min(_GLF_IDENTITY((6), int(ivec3((6), 1, (0 >> _GLF_IDENTITY(int(1), int(1)))))), (6))))), max(int(6), int(6))), _GLF_IDENTITY((false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))), max((false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))), (false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))))))), 1))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))))) | (min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), (true ? 0 + (6) : _GLF_FUZZED(12634))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, 0 + (6)), _GLF_IDENTITY(6, 0 + (6))))) - 0)), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1), (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1)) | (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(6, 0 + (6))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), 1 * (_GLF_IDENTITY(6, 0 + (6))))))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1))), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, 0 + (6)), _GLF_IDENTITY(6, 0 + (6))))) - 0)), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1), (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1)) | (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(6, 0 + (6))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), 1 * (_GLF_IDENTITY(6, 0 + (6))))))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1)))) ^ ivec3(0, 0, 0)))), max(int(6), int(_GLF_IDENTITY(6, (6) | (6)))))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 + (6), (0 + _GLF_IDENTITY((6), ((6)) * 1)) / 1), (true ? 0 + (6) : _GLF_FUZZED(_injected_loop_counter))), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0)) >> ivec2(0, 0))))), (_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 + (6), (true ? 0 + (6) : _GLF_FUZZED(_injected_loop_counter))), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0)) >> ivec2(0, 0)))))) / 1)), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0 + (6), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))) + (6), (0 + (6)) / 1), 0)) >> ivec2(0, 0))))))) - 0), max(int(6), int(6)))), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | 0)) | _GLF_IDENTITY((int(6)), ((int(6))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_IDENTITY(6, _GLF_IDENTITY(max(6, 6), min(_GLF_IDENTITY(max(6, 6), clamp(max(6, 6), max(6, 6), _GLF_IDENTITY(max(6, 6), 0 ^ (max(6, 6))))), _GLF_IDENTITY(max(6, 6), max(max(6, 6), _GLF_IDENTITY(max(6, 6), (max(6, 6)) | (max(6, 6)))))))))))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))), ~ (~ ((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6))))))), 1))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), ((6)) - 0))), max(int(6), int(6))))), (min(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(_GLF_IDENTITY(6, (6) << (0 & 95380))), int(6)))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + _GLF_IDENTITY((6), min(_GLF_IDENTITY((6), int(ivec3((6), 1, (0 >> _GLF_IDENTITY(int(1), int(1)))))), (6))))), max(int(6), int(6))), _GLF_IDENTITY((false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), 1 * (~ (int(6))))))), max(int(6), int(6)))))), max((false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))), (false ? _GLF_FUZZED(-40309) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), _GLF_IDENTITY(max(int(6), int(6)), min(max(int(6), int(6)), max(int(6), int(6)))))))))), 1))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))))) | (min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), _GLF_IDENTITY((true ? 0 + (6) : _GLF_FUZZED(12634)), (false ? _GLF_FUZZED(_injected_loop_counter) : (true ? 0 + (6) : _GLF_FUZZED(12634))))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, 0 + (6)), _GLF_IDENTITY(6, 0 + (6))))) - 0)), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1), (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1)) | (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), (_GLF_IDENTITY(6, 0 + (6))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), 1 * (_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0 + (6), (0 + (6)) ^ 0))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), max(_GLF_IDENTITY(6, 0 + (6)), _GLF_IDENTITY(6, 0 + (6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), (int(_GLF_IDENTITY(6, 0 + (6)))) | (int(_GLF_IDENTITY(6, 0 + (6))))))), 1, 1))))), max(int(6), int(_GLF_IDENTITY(6, (6) | (6)))))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 + (6), (true ? 0 + (6) : _GLF_FUZZED(_injected_loop_counter))), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0)) >> ivec2(0, 0))))), (_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 + (6), (true ? 0 + (6) : _GLF_FUZZED(_injected_loop_counter))), (0 + (6)) / 1), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0), (false ? _GLF_FUZZED(ivec2(-6432, 51163)) : ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(0, 0)), 0))) + (6), (0 + _GLF_IDENTITY((6), ((6)) ^ 0)) / 1), 0)))) >> ivec2(0, 0)))))) / 1)), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 + (6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0 + (6), (0 + (6)) / 1), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))) + (6), (0 + (6)) / 1), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))) + (6), (0 + (6)) / 1), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))) + (6), (0 + (6)) / 1))))), 0)) >> ivec2(0, 0))))))) - 0), max(int(6), int(6)))), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6)))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-24377) : 6)), _GLF_IDENTITY(0, (0) << 0) + (6))), max(int(6), int(6)))))) - 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.x = GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.x, (GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.x = GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.x) + 0u);
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)), injectionSwitch.x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(865.278)), _GLF_IDENTITY(float(mat4x3(float(_GLF_FUZZED(865.278)), sqrt(0.0), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), mix(float(float(mat4x3(float(_GLF_FUZZED(865.278)), sqrt(0.0), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), float(_GLF_FUZZED(-113.915)), bool(false)))), float(injectionSwitch.y), bool(true)))) / 1.0)))))))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))))
              continue;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, false || (true))))));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), ! (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))))))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)), bool(bvec2(bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)), true))))))))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(0.9)), bool(false))))).y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), ~ _GLF_IDENTITY((~ (int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / cos(0.0)), injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), min((~ (int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / cos(0.0)), injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), (~ (int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / cos(0.0)), injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))) / exp(vec2(0.0, 0.0))), (true ? injectionSwitch : _GLF_FUZZED(max(vec2(-1.5, 3800.0782), injectionSwitch)))))).y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                  break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size, (GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size) >> uvec3(0u, 0u, 0u)).x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.w], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
              return;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y = read_1;
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.w], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (11546 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0))) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.y = read_2;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.x = GLF_merged3_0_1_16_1_1_6_2_1_12next_virtual_gidread_2workgroup_id.y;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7)))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, int(ivec2(7, 0))), _GLF_IDENTITY(7, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (7))))), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) ^ 0))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-59.82) : _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(67.06))))) > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 return;
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x = GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.x;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.z + 1 < GLF_merged4_0_1_6_1_1_13_2_1_12_3_1_14read_2subgroup_sizeworkgroup_idworkgroup_size.y)
        {
         do
          {
           atomicStore(buf[GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.x], uint(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y == _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x, clamp(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid, GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid)).x, GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid) | uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(float(0.0))), injectionSwitch.x))).x, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x, 0u ^ (GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x))) << 0u)))) + 1, 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) | (_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) ^ 0), 64))), int(_GLF_IDENTITY(ivec3((64) | (64), 1, 1), (ivec3((64) | (64), 1, 1)) + ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) | 0), 0, 0))))), 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(650.812))), max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.3))), injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (true ? max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-84.26)), bool(false)))))) / 1.0)) : _GLF_FUZZED(588.340))))), 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0))), 1.0, 1.0, cos(0.0), determinant(mat4(1.0, _GLF_IDENTITY(sin(0.0), 1.0 * (sin(0.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), (vec4(1.0, 0.0, 0.0, 1.0)) * mat4(1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(16.18)), vec2(_GLF_FUZZED(-380.568), _GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.3) : 0.0)), 0.0)), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(-6539.3723), (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))[1]), vec2((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(260.908)), bvec2(true, false)))), 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0))).y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), max(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4838.2583)), float(1.0), bool(true))), 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))))), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.8)), float(injectionSwitch.y), bool(true)))) + 0.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), true, false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) / abs(1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7230.1717)), float(1.0), bool(true))), 1.0, 0.0), vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- -2.4))), bool(_GLF_IDENTITY(false, (false) && true)))), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), true, false))))), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0))))))), true), false))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.3) : 0.0)), 0.0)), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(-6539.3723), (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))[1]), vec2((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(260.908)), bvec2(true, false)))), 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0))).y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), max(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4838.2583)), float(1.0), bool(true))), 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))))), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.8)), float(injectionSwitch.y), bool(true)))) + 0.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), true, false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) / abs(1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7230.1717)), float(1.0), bool(true))), 1.0, 0.0), vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- -2.4))), bool(_GLF_IDENTITY(false, (false) && true)))), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))).y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true)))), true, false))))), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0))))))), true), false))), true, true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6036.4025, 802.683)))).y))), 0.0, 0.0, 1.0, 1.0)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-76.06)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-662.660))), 1.0, 1.0)))), true), false))), true, true)))), true, true)), ! (! (bool(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(max(injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-453.983)), bool(false)))) * _GLF_IDENTITY(1.0, (1.0) / 1.0)), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.0) : injectionSwitch.y)), injectionSwitch.y))), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6036.4025, 802.683)))).y))), 0.0, 0.0, 1.0, 1.0)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-662.660))), 1.0, 1.0)))), true), false))), true, true)))), true, true))))), bool(bvec4(bool(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) - 0.0))), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))), (mat3(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0, 1.0, 0.0, 1.0))))), 1.0)), 1.0)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(max(injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-8.7)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), (true ? _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-7.9))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 0.0, sqrt(0.0), exp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))), 1.0, 1.0, determinant(mat4(0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0), (true ? mat2x4(0.0, 0.0, sqrt(0.0), exp(0.0), 1.0, 1.0, determinant(mat4(0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0) : _GLF_FUZZED(mat2x4(3.4, 175.674, -1470.7011, 81.18, -94.80, -2.6, 94.14, 95.98)))))), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0)))), true), false))), true, true)))), true, true)), true, true, true))))))) && true))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) / _GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))))), int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), int(0)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) / _GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))))), int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), int(0)), 0 | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) / _GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 1)))))), int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), int(0)))) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            break;
          }
         subgroupAll(false);
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             atomicStore(buf[GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.x], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y, max(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y, GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y)) == GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x) + 1, max(uint(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y == GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid.x) + 1, uint(GLF_merged3_0_1_16_1_1_6_2_1_14next_virtual_gidread_1workgroup_size.y == _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid, uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid, min(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid, GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_2subgroup_idsubgroup_local_idvirtual_gid)))).x) + 1)), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(0, (0) << 0) | (64)), 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 subgroupAll(true);
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(-61876))), bool(false)))))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                break;
               return;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2928.0516) : injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(0 & -52781, 1 * (0 & -52781))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, min(6, 6))))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), min((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), (0 & -52781) << _GLF_IDENTITY(int(6), int(6)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), min((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), (0 & -52781) << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY((_GLF_IDENTITY((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), min((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), (0 & -52781) << _GLF_IDENTITY(int(6), int(6))))) * 1, clamp((_GLF_IDENTITY((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), min((0 & -52781) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), (0 & -52781) << _GLF_IDENTITY(int(6), int(6))))) * 1, (_GLF_IDENTITY((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), min((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), (0 & -52781) << _GLF_IDENTITY(int(6), int(6))))) * 1, (_GLF_IDENTITY((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), min((0 & -52781) << _GLF_IDENTITY(int(6), int(6)), (0 & -52781) << _GLF_IDENTITY(int(6), int(6))))) * 1)))))) + 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(0 + (1), max(0 + (1), 0 + (1))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 + (1)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), min(_GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) + 0)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2514.2260))))) ? injectionSwitch : _GLF_FUZZED(mod(vec2(483.673, _GLF_IDENTITY(-170.961, max(-170.961, -170.961))), 350.252)))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(mod(vec2(483.673, -170.961), 350.252)), vec2(1.0, 1.0) * (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(mod(vec2(483.673, _GLF_IDENTITY(-170.961, (false ? _GLF_FUZZED(exp2(70.97)) : _GLF_IDENTITY(-170.961, mix(float(-170.961), float(_GLF_FUZZED(3.6)), bool(false)))))), 350.252)))))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(mod(vec2(483.673, -170.961), 350.252)), vec2(1.0, 1.0) * (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(mod(vec2(483.673, _GLF_IDENTITY(-170.961, (false ? _GLF_FUZZED(exp2(70.97)) : _GLF_IDENTITY(-170.961, mix(float(-170.961), float(_GLF_FUZZED(3.6)), bool(false)))))), 350.252)))))).x > injectionSwitch.y))) && true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
}
