#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-0.4) : _GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(2.8) : injectionSwitch[0])))), injectionSwitch[1]))[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(66.05)))))) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) * 1), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) | (7))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-60.28)) : injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-60.28)) : injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-60.28)) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))) ? _GLF_FUZZED(log2(-60.28)) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-60.28)) : injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(false)), true), bvec2(bvec2(bvec2(! (_GLF_DEAD(false)), true)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(true, true && (true)))))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4905.6802)), bool(false))) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4905.6802)), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))) > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), cos(0.0), 1.0, abs(1.0), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), cos(0.0), _GLF_ONE(1.0, injectionSwitch.y)))) < injectionSwitch.y)), false))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))) && _GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))) && _GLF_IDENTITY(true, true && (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))) && _GLF_IDENTITY(true, true && (true))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))) && _GLF_IDENTITY(true, true && (true)))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))) && _GLF_IDENTITY(true, true && (true))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), false, false)))))) && _GLF_IDENTITY(true, true && (true))))))))))))), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), true && (true && (true))))), true, true, true))))))))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-32.83)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0)), max((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), max(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, 0))), int(0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 + (0))), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0)), int(int((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0)))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 1, 0, 0), (ivec4(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(75330) : int(0))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) << 0), int(0))))), 1, 0, 0)) | (ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(4), ivec4(4)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 1, 0, 0), (ivec4(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(75330) : int(0))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) << 0), int(0))))), 1, 0, 0)) | (ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(4), ivec4(4))))), (~ (_GLF_IDENTITY(ivec4(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 1, 0, 0), (ivec4(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(75330) : int(0))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) << 0), int(0))))), 1, 0, 0)) | (ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(4), ivec4(4)))))) << ivec4(0, 0, 0, 0)))))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false))))
              barrier();
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1), (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)) | (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1), (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)) | (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)))), (int(_GLF_IDENTITY(ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1), (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)) | (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1))))) >> 0), int(_GLF_IDENTITY(ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1), (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)) | (ivec4(((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) * 1)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(int(_GLF_IDENTITY(2, (2) | (2))), 1))))), 0, 1, 1)))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.2)), vec2(_GLF_FUZZED(840.128), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))).y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) && true)))))))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.0)), bool(false))) > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))) - 0)) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.0)), vec2(_GLF_FUZZED(-596.464), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x, float(mat4(injectionSwitch.x, log(1.0), abs(1.0), 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), exp(0.0), 0.0, 1.0, 0.0))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, log(1.0), _GLF_IDENTITY(exp(0.0), 0.0 + (exp(0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.5)), bool(false)))), 0.0), vec2(0.0, 1.0)), dot(vec2(exp(0.0), 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0))).x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), bool(bvec4(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, false, false)))))))), false || ((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, log(1.0), _GLF_IDENTITY(exp(0.0), 0.0 + (exp(0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.5)), bool(false)))), 0.0), vec2(0.0, 1.0)), dot(vec2(exp(0.0), 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0))).x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), bool(bvec4(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, false, false)))))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, log(1.0), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(0.0, 1.0)), dot(vec2(exp(0.0), 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0))).x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), false))))))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), _GLF_IDENTITY(bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), true, false, true)), ! (! (bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), true, false, true))))))))))), _GLF_IDENTITY(false, true && (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(18.73), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.5)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))).x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), (! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true))))))))) || false)) && true)) || false)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(18.73), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.5)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))).x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(45.00)), bool(false))) : _GLF_FUZZED(2.2))))))) && true)) || false))), (bool(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(18.73), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], _GLF_FUZZED(4.5)), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x < injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec3(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))))))).x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false, ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false) && true))))) && true))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))))), (false ? _GLF_FUZZED(uvec3(119686u, 40766u, 28520u)) : _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))), uvec3(uvec4(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))), 1u))), uvec3(uvec3(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))), uvec3(uvec4(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))), 1u))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) | (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups))) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))))), clamp(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))) >> uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), clamp(0u, 0u, 0u)), 0u)))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) + (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))))))))))))), ~ (~ (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) | (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups))) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))))), clamp(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))) >> uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), clamp(0u, 0u, 0u)), 0u)))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) + (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))))))))))))))))))).x));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), clamp(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), clamp(uvec3(gl_WorkGroupSize), uvec3(gl_WorkGroupSize), _GLF_IDENTITY(uvec3(gl_WorkGroupSize), (uvec3(gl_WorkGroupSize)) / uvec3(1u, 1u, 1u)))), uvec3(gl_WorkGroupSize), uvec3(gl_WorkGroupSize))))).x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) * _GLF_IDENTITY(1, (1) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)) || (_GLF_DEAD(false)))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(57.42), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch))[1], (true ? (_GLF_FUZZED(injectionSwitch))[1] : _GLF_FUZZED(cosh(-4.2))))), vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(7.0)), bvec2(true, false))), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(57.42), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch))[1], (true ? (_GLF_FUZZED(injectionSwitch))[1] : _GLF_FUZZED(cosh(-4.2))))), vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(7.0)), bvec2(true, false))), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), ((_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(57.42), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch))[1], (true ? (_GLF_FUZZED(injectionSwitch))[1] : _GLF_FUZZED(cosh(-4.2))))), vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(7.0)), bvec2(true, false))), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))) * vec2(1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(57.42), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch))[1], (true ? (_GLF_FUZZED(injectionSwitch))[1] : _GLF_FUZZED(cosh(-4.2))))), vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(7.0)), bvec2(true, false))), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), ((_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(57.42), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch))[1], (true ? (_GLF_FUZZED(injectionSwitch))[1] : _GLF_FUZZED(cosh(-4.2))))), vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(7.0)), bvec2(true, false))), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))) - vec2(0.0, 0.0)), (_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2(_GLF_FUZZED(57.42), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch))[1], (true ? (_GLF_FUZZED(injectionSwitch))[1] : _GLF_FUZZED(cosh(-4.2))))), vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(7.0)), bvec2(true, false))), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))))).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))), bool(bvec4(bool(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))), bool(bvec4(bool(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true && (_GLF_IDENTITY(bool(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))), bool(bvec4(bool(_GLF_IDENTITY(bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), (mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)))) * mat3(1.0)))))))).x, float(mat3x4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), (mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)))) * mat3(1.0)))))))).x, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, cos(sqrt(0.0)), 1.0, exp(0.0), 1.0, 1.0, 1.0))) > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false))), false || (bool(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), (mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)))) * mat3(1.0)))))))).x, float(mat3x4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), (mat3(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)))) * mat3(1.0)))))))).x, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, cos(sqrt(0.0)), 1.0, exp(0.0), 1.0, 1.0, 1.0))) > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(1.8)), bvec2(false, false))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(1.8)), bvec2(false, false))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(1.8)), bvec2(false, false))), injectionSwitch)))).y), false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y)))))))), ! (! (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) || false))) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))))))
      {
       for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) ^ 0u)) | (subgroup_size), min((subgroup_size) | (subgroup_size), (subgroup_size) | (subgroup_size)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (false ? _GLF_FUZZED((any(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)) ? uint(true) : workgroup_size)) : _GLF_FUZZED(workgroup_base)))))), ~ (~ (_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ((! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))) || false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(0u)))), ((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1u), 0u)) : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, 0u ^ (num_workgroup))))))))))))) * 1u) + _GLF_IDENTITY(0u, 0u | (0u))) | ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(max(_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_size))), (subgroup_size)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u)))))) - 0u)) ^ 0u) | (max(_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(workgroup_base) : (subgroup_size))), (subgroup_size))))) | _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), 0u ^ _GLF_IDENTITY(((subgroup_size)), ~ (~ (((subgroup_size))))))) | ((subgroup_size)))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))) : _GLF_FUZZED(workgroup_base)))), (uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)))) : _GLF_FUZZED(workgroup_base))))) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY(true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) / 1)))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))) : _GLF_FUZZED(subgroup_id)))) / 1u)) : _GLF_FUZZED(workgroup_base), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) / 1)))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))) : _GLF_FUZZED(subgroup_id)))) / 1u)) : _GLF_FUZZED(workgroup_base) : _GLF_FUZZED(workgroup_size)))), ((true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-88123) : 1))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)))))), (uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) | (workgroup_base))))))))))))) / 1u)) : _GLF_FUZZED(workgroup_base))) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(max(_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_size))), (subgroup_size)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u)))))) - 0u)) ^ 0u) | (max(_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(workgroup_base) : (subgroup_size))), (subgroup_size))))) | _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), 0u ^ _GLF_IDENTITY(((subgroup_size)), ~ (~ (((subgroup_size))))))) | ((subgroup_size)))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))) : _GLF_FUZZED(workgroup_base)))), (uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)))) : _GLF_FUZZED(workgroup_base))))) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY(true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) / 1)))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))) : _GLF_FUZZED(subgroup_id)))) / 1u)) : _GLF_FUZZED(workgroup_base), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) / 1)))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))) : _GLF_FUZZED(subgroup_id)))) / 1u)) : _GLF_FUZZED(workgroup_base) : _GLF_FUZZED(workgroup_size)))), ((true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-88123) : 1))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)))))), (uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) | (workgroup_base))))))))))))) / 1u)) : _GLF_FUZZED(workgroup_base))) >> 0u))), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(max(_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_size))), (subgroup_size)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u)))))) - 0u)) ^ 0u) | (max(_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(workgroup_base) : (subgroup_size))), (subgroup_size))))) | _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), 0u ^ _GLF_IDENTITY(((subgroup_size)), ~ (~ (((subgroup_size))))))) | ((subgroup_size)))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))) : _GLF_FUZZED(workgroup_base)))), (uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)))) : _GLF_FUZZED(workgroup_base))))) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY(true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) / 1)))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))) : _GLF_FUZZED(subgroup_id)))) / 1u)) : _GLF_FUZZED(workgroup_base), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) / 1)))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(workgroup_base)))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))))))) : _GLF_FUZZED(subgroup_id)))) / 1u)) : _GLF_FUZZED(workgroup_base) : _GLF_FUZZED(workgroup_size)))), ((true ? uint(_GLF_IDENTITY(uint((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-88123) : 1))) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)))))), (uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) | (workgroup_base))))))))))))) / 1u)) : _GLF_FUZZED(workgroup_base))) >> 0u))), 1u, 1u)))) - (0u << _GLF_IDENTITY(uint(2u), uint(2u))))))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(! (! (false)), true, false, false)), true && (bool(bvec4(! (! (false)), true, false, false))))))))), (injectionSwitch.x > injectionSwitch.y))))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))) * 1)) / 1))), clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))) * 1)) / 1)), max(_GLF_IDENTITY((0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))) * 1)) / 1)), (false ? _GLF_FUZZED(-57573) : (0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))) * 1)) / 1)))), (0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))) * 1)) / 1))))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))) * 1)) / 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), max(int(8), int(8))), int(8))) * 1)) / 1))))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) ^ 0), 64, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (true ? 0 << _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(11941)))), 1, 0)), int(_GLF_IDENTITY(ivec4(int(ivec4(0, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (true ? 0 << _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(11941)))), 1, 0)), 1, 0, (1 ^ 1)), ivec4(0, 0, 0, 0) | (ivec4(int(ivec4(0, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (true ? 0 << _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(11941)))), 1, 0)), 1, 0, (1 ^ 1))))))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(false || (! (! (false))), bool(bool(false || (! (! (false)))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false))))), true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), true, true), bvec3(bvec4(bvec3(! (! (false)), true, true), true))))), true && (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), true, true), bvec3(bvec4(bvec3(! (! (false)), true, true), true))))))))))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > (1 ^ 1)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(18.91), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(10.81)), bvec2(true, false))).x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || false))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)))).x > injectionSwitch.y))));
      }
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - (0u | 0u)), uint(uvec2(subgroup_size, (0u | 0u)))), _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, (0u | 0u), 0u), (uvec4(subgroup_size, 1u, (0u | 0u), 0u)) / uvec4(1u, 1u, 1u, 1u)))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(read_1) : 0u)), max(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), min(_GLF_IDENTITY(0u, (0u) | 0u), _GLF_IDENTITY(0u, (0u) | 0u)))), (clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))) - 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), clamp(0u, 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), 0u)))))), (~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))) / 1u))) - 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, _GLF_IDENTITY(min(_GLF_IDENTITY(read_2, (read_2) / 1u), read_2), _GLF_IDENTITY(min(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, 0u | (read_2)), (read_2) / 1u), read_2), ~ (~ _GLF_IDENTITY((min(_GLF_IDENTITY(read_2, (read_2) / 1u), read_2)), max((min(_GLF_IDENTITY(read_2, (read_2) / 1u), read_2)), (min(_GLF_IDENTITY(read_2, (read_2) / 1u), read_2)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read_2)), (read_2) / 1u), read_2), min(min(_GLF_IDENTITY(read_2, _GLF_IDENTITY(_GLF_IDENTITY((read_2), (_GLF_IDENTITY((read_2), max((read_2), (read_2)))) / 1u), 0u ^ (_GLF_IDENTITY((read_2), (_GLF_IDENTITY((read_2), max((read_2), (read_2)))) / 1u))) / 1u), read_2), min(_GLF_IDENTITY(read_2, (read_2) / _GLF_IDENTITY(1u, ~ (~ (1u)))), read_2)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(162551u) : min(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) - 0u), (read_2) / _GLF_IDENTITY(1u, (1u) << 0u)), read_2), ~ (~ (min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) / 1u), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, min(read_2, _GLF_IDENTITY(read_2, ~ (~ (read_2))))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((read_2), 0u ^ (_GLF_IDENTITY((read_2), uint(uvec4((read_2), 1u, 1u, 1u)))))), (false ? _GLF_FUZZED((74371u * workgroup_base)) : (~ (read_2))))), (read_2) / _GLF_IDENTITY(1u, (1u) | (1u))), 0u))), read_2)))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, clamp(read_2, _GLF_IDENTITY(read_2, (read_2) / 1u), read_2)), _GLF_IDENTITY((read_2), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(_GLF_IDENTITY(num_workgroup, (num_workgroup) | 0u), num_workgroup))) : _GLF_IDENTITY((read_2), ((read_2)) / 1u))) / 1u), read_2), _GLF_IDENTITY(min(min(_GLF_IDENTITY(read_2, (read_2) / 1u), read_2), min(_GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2), ((_GLF_IDENTITY(read_2, max(read_2, read_2)))) | (_GLF_IDENTITY((read_2), ((read_2)) ^ 0u))) / 1u), read_2)), (min(min(_GLF_IDENTITY(read_2, (read_2) / 1u), read_2), min(_GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2), ((_GLF_IDENTITY(read_2, max(read_2, read_2)))) | (_GLF_IDENTITY((read_2), ((read_2)) ^ 0u))) / 1u), read_2))) | 0u)))))))) + 1, 4, 64, 4);
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true)))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 1)))) << 0))) >> _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(3), int(3))) ^ (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 1)))) << 0))) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      barrier();
    }
   else
    {
     subgroupAll(false);
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true), false || (bool(injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2), clamp(_GLF_IDENTITY(uint(read_1 == read_2), (uint(read_1 == read_2)) | 0u), _GLF_IDENTITY(uint(read_1 == read_2), (true ? uint(read_1 == read_2) : _GLF_FUZZED(workgroup_id))), _GLF_IDENTITY(uint(read_1 == read_2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(read_1 == read_2) : _GLF_FUZZED(workgroup_id))))) + 1, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))))))) || false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), bool(bvec2(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))))))) || false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))) && true) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (_GLF_IDENTITY(bool(bvec4(false, true, true, true)), false || (bool(bvec4(false, true, true, true)))))))), ! (! (_GLF_DEAD(false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
