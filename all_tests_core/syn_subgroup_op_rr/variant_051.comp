#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), true && ((_GLF_DEAD(false)))), bool(bool((_GLF_DEAD(false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       barrier();
      }
    }
   else
    {
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u, min(0u, 0u)) ^ (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), 0 | ((1 & 1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_FUZZED(10.05) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), float(_GLF_FUZZED(-1976.3567)), bool(false))))) > injectionSwitch.y))))
              barrier();
             return;
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y))))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)))), true && (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)))), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true))))))))), bvec2(_GLF_IDENTITY(bvec2(bvec2((_GLF_IDENTITY(false, (false) || false)), true)), bvec2(bvec4(bvec2(bvec2((_GLF_IDENTITY(false, (false) || false)), true)), false, true))))))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (false) || false)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), true && (bool(bvec2(! (_GLF_IDENTITY(false, (false) || false)), true))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) < injectionSwitch.y))))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1])), injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) && (true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 0.0), vec3(mat3x4(vec3(injectionSwitch.y, 1.0, 0.0), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false)))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))))) && true))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (true ? _GLF_IDENTITY(gl_WorkGroupID.x, 0u | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? gl_WorkGroupID : _GLF_FUZZED(uvec3(109399u, 26367u, 152206u)))).x)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u)))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), clamp(_GLF_IDENTITY((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), ((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)))))) - 0u), (gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), min((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, 0u ^ (4u))))), uint(4u)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), ~ (~ (uint(4u)))))), uint(4u))))))))))) >> 0u, (true ? (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), clamp(_GLF_IDENTITY((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), ((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)))))) - 0u), (gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY((gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), min((gl_WorkGroupID.x) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))), ((0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) | ((0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), (gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, 0u ^ (4u))))), uint(4u)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), ~ (~ (uint(4u)))))), uint(4u))))))))))) >> 0u : _GLF_FUZZED(57016u)))) : _GLF_FUZZED(subgroup_local_id)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1)))), (0 << _GLF_IDENTITY(int(1), int(1))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(6), 1, 1, 0), (ivec4(int(6), 1, 1, 0)) ^ ivec4(0, 0, 0, 0))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(6), 1, 1, 0), (ivec4(int(6), 1, 1, 0)) ^ ivec4(0, 0, 0, 0))), min(int(_GLF_IDENTITY(ivec4(int(6), 1, 1, 0), (ivec4(int(6), 1, 1, 0)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(int(6), 1, 1, 0), (ivec4(int(6), 1, 1, 0)) ^ ivec4(0, 0, 0, 0))))), 0)))), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          barrier();
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) && true))))) || (false)), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       break;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), true && (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (! (false))) || (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), float(_GLF_FUZZED(533.639)), bool(false))), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), float(_GLF_FUZZED(533.639)), bool(false))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            break;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))) && true)))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))), injectionSwitch.y), min(_GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))), injectionSwitch.y), max(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))), injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))), injectionSwitch.y))), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))), injectionSwitch.y))))) * exp(0.0)))), _GLF_IDENTITY(false, false || (false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9220.8685), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x < injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true && (bool(bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false || _GLF_IDENTITY((true), ! (! ((true))))), (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, true && (false)))))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6509.2139) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-78.34, -4116.5841)) : injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(sqrt(1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(43.91))))))), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0)), mat4(1.0) * (mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0))))), mix(float(_GLF_FUZZED(4.7)), float(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0)), mat4(1.0) * (mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0)), mat4(1.0) * (mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0))))), mix(float(_GLF_FUZZED(4.7)), float(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0)), mat4(1.0) * (mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), true))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec3((false) || false, true, true)))))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), false, true, false)))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))) && true) || (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, (false) && true))))))), false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), bool(bool((false)))))), false, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), bool(bool((false)))))), false, true, true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(bool(bvec4(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), bool(bool((false)))))), false, true, true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), ((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), bool(bool((false)))))), false, true, true)), bool(bvec4(bool(bvec4(! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4(! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))))))), false, true, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 | (int(6))), (int(6)) >> 0)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | _GLF_IDENTITY(1, int(ivec2(1, 0))))); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-7496)))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.5) : injectionSwitch.y)))), cos(0.0), log(1.0), 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0)))), 0.0, abs(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)))))))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sin(0.0))) / 1.0)))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), float(_GLF_FUZZED(-38.97)), bool(false))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> (0u | 0u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(uint(1u), uint(1u)))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(uint(1u), uint(1u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(uint(1u), uint(1u)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(uint(1u), uint(1u)))))) : _GLF_FUZZED(subgroup_id)))))) | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(56.71), _GLF_FUZZED(55.53)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) && true)), bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid))) - 0u), next_virtual_gid))], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)));
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1))) | (4)), 64, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(ivec2(-16203, 19181).g)), ((true ? 0 : _GLF_FUZZED(ivec2(-16203, 19181).g))) / 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), min(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, (0) / 1))) : _GLF_FUZZED(-92457)))) | (0))) + (_GLF_IDENTITY(0, ~ (~ (0))) | 0)), (true ? 0 : _GLF_FUZZED(ivec2(-16203, 19181).g))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec2(-16203, 19181).g))), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), clamp(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), clamp(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_FUZZED(ivec2(-16203, 19181).g))), _GLF_FUZZED(ivec2(-16203, 19181).g)))), int(ivec3((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), clamp(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), clamp(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_FUZZED(ivec2(-16203, 19181).g))), _GLF_FUZZED(ivec2(-16203, 19181).g)))), 1, (0 >> _GLF_IDENTITY(int(7), int(7))))))), (false ? _GLF_FUZZED(-34333) : _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), (_GLF_FUZZED(ivec2(-16203, 19181).g)) / 1)))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & _GLF_IDENTITY(0, min(0, 0))), 0, 1))), min(true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), (_GLF_FUZZED(ivec2(-16203, 19181).g)) / 1)))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & _GLF_IDENTITY(0, min(0, 0))), 0, 1))), _GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), (_GLF_FUZZED(ivec2(-16203, 19181).g)) / 1)))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & _GLF_IDENTITY(0, min(0, 0))), 0, 1))), int(ivec2(true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), (_GLF_FUZZED(ivec2(-16203, 19181).g)) / 1)))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & _GLF_IDENTITY(0, min(0, 0))), 0, 1))), 1)))))), min((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, _GLF_IDENTITY(19181, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))) ? 19181 : _GLF_FUZZED(66790)))).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, int(ivec2(0, 0))))), 1)))), _GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), (_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(_GLF_IDENTITY(-16203, max(-16203, -16203)), 19181).g), (-82467 & 0), 0, 1), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))) | ivec4(0, 0, 0, 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), (_GLF_FUZZED(ivec2(-16203, 19181).g)) | (_GLF_FUZZED(ivec2(-16203, 19181).g))), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181).g, ~ (_GLF_IDENTITY(~ (ivec2(-16203, 19181).g), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (~ (ivec2(-16203, 19181).g)))))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))), max(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181).g, ~ (_GLF_IDENTITY(~ (ivec2(-16203, 19181).g), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (~ (ivec2(-16203, 19181).g)))))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))), true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181).g, ~ (_GLF_IDENTITY(~ (ivec2(-16203, 19181).g), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (~ (ivec2(-16203, 19181).g)))))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))))), int(ivec2(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(-16203, 19181), (false ? _GLF_FUZZED(ivec2(-50369, -53577)) : ivec2(-16203, 19181))).g, min(_GLF_IDENTITY(ivec2(-16203, 19181), (false ? _GLF_FUZZED(ivec2(-50369, -53577)) : ivec2(-16203, 19181))).g, _GLF_IDENTITY(ivec2(-16203, 19181), (false ? _GLF_FUZZED(ivec2(-50369, -53577)) : ivec2(-16203, 19181))).g))), (_GLF_IDENTITY(-82467, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), min(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), min(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1)))))), clamp(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), min(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1)))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), min(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1)))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), min(ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1), ivec3(_GLF_IDENTITY(-82467, 0 ^ (-82467)), 1, 1))))))))))) & 0), 0, 1)))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181).g, (_GLF_IDENTITY(ivec2(-16203, 19181).g, (ivec2(-16203, 19181).g) + 0)) / 1)), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))))), 0)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) + (ivec2(-16203, 19181))).g), (-82467 & 0), 0, 1)))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))), min(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))), true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))))))))), int(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), ~ (~ (_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(_GLF_IDENTITY(-16203, (-16203) / 1), 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))), 1, (1 & 1))), ivec2(ivec2(ivec2(ivec4(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))), 1, (1 & 1))))))).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), (_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ~ (~ (ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))) ^ ivec4(0, 0, 0, 0))))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))))))) : _GLF_FUZZED(70991)))), 0)))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) + (ivec2(-16203, 19181))).g), (-82467 & 0), 0, 1)))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))), min(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))), true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))))))))), int(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), ~ (~ (_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(_GLF_IDENTITY(-16203, (-16203) / 1), 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))), 1, (1 & 1))), ivec2(ivec2(ivec2(ivec4(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))), 1, (1 & 1))))))).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), (_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ~ (~ (ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))) ^ ivec4(0, 0, 0, 0))))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))))))) : _GLF_FUZZED(70991)))), 0))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) + (ivec2(-16203, 19181))).g), (-82467 & 0), 0, 1)))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))), min(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))), true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_IDENTITY((-82467 & 0), (true ? (-82467 & 0) : _GLF_FUZZED(-75696))), 0, 1))))))))), int(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), ~ (~ (_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(_GLF_IDENTITY(-16203, (-16203) / 1), 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), min(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))), 1, (1 & 1))), ivec2(ivec2(ivec2(ivec4(_GLF_IDENTITY(ivec2(-16203, 19181), ivec2(0, 0) | (ivec2(-16203, 19181))), 1, (1 & 1))))))).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), (_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), ~ (~ (ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))) ^ ivec4(0, 0, 0, 0))))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))))))) : _GLF_FUZZED(70991)))), 0)))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(_GLF_IDENTITY(-16203, 0 ^ (-16203)), 19181).g), (-82467 & 0), 0, 1)))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1), max(ivec4(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), min(_GLF_FUZZED(ivec2(-16203, 19181).g), _GLF_FUZZED(ivec2(-16203, 19181).g))), (-82467 & 0), 0, 1), ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181).g, (ivec2(-16203, 19181).g) | (_GLF_IDENTITY(ivec2(-16203, 19181).g, (false ? _GLF_FUZZED(-71812) : ivec2(-16203, 19181).g))))), int(ivec4(_GLF_FUZZED(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(-16203, (_GLF_IDENTITY(-16203, int(ivec4(-16203, 1, 1, 1)))) | (-16203)), clamp(-16203, _GLF_IDENTITY(-16203, clamp(-16203, -16203, -16203)), _GLF_IDENTITY(-16203, 1 * (-16203)))), 19181), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(-16203, (_GLF_IDENTITY(-16203, int(ivec4(-16203, 1, 1, 1)))) | (-16203)), clamp(-16203, _GLF_IDENTITY(-16203, clamp(-16203, -16203, -16203)), _GLF_IDENTITY(-16203, 1 * (-16203)))), 19181)) << ivec2(0, 0)).g), (-82467 & 0), 0, 1))))))), int(ivec2(int(_GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(-16203, 19181).g, (false ? _GLF_FUZZED(-52908) : ivec2(-16203, 19181).g))), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (_GLF_IDENTITY(-82467, (-82467) | (-82467)) & 0), 0, 1)))), clamp((true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))) * 1)) ^ 0)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1)))), (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-16203, 19181).g), int(ivec4(_GLF_FUZZED(ivec2(-16203, 19181).g), (-82467 & 0), 0, 1))))))), 0)))))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0))), (_GLF_IDENTITY((0) | (0), 1 * ((0) | (0)))) << 0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)) && (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(0, _GLF_IDENTITY((0), (false ? _GLF_FUZZED(-46921) : _GLF_IDENTITY((0), (false ? _GLF_FUZZED(mix(_injected_loop_counter, -93284, false)) : _GLF_IDENTITY((0), clamp((0), (0), (0))))))) / 1) | 0), ! (! (_injected_loop_counter > (_GLF_IDENTITY(0, _GLF_IDENTITY((0), (false ? _GLF_FUZZED(-46921) : _GLF_IDENTITY((0), (false ? _GLF_FUZZED(mix(_injected_loop_counter, -93284, false)) : _GLF_IDENTITY((0), clamp((0), (0), (0))))))) / 1) | 0))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! (bool(_GLF_DEAD(false))))), false, true, false))))))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))) || false)))))
    {
     if(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))) || false, ! (_GLF_IDENTITY(! ((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))) || false), bool(bvec2(! ((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))) || false), false))))))))
        {
        }
       else
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(workgroup_size) : next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false))) ? _GLF_FUZZED(subgroup_id) : next_virtual_gid))))], _GLF_IDENTITY(uint(read_1 == read_2) + 1, _GLF_IDENTITY((_GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) + 0u)) | (uint(read_1 == read_2) + 1), 1u * ((_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (read_1) | 0u))) == _GLF_IDENTITY(read_2, (read_2) >> 0u)) + 1, _GLF_IDENTITY((uint(read_1 == read_2) + 1) + 0u, min((uint(read_1 == read_2) + 1) + 0u, _GLF_IDENTITY((uint(read_1 == read_2) + 1) + 0u, max((uint(read_1 == read_2) + 1) + 0u, (uint(read_1 == read_2) + 1) + 0u)))))) | (uint(read_1 == read_2) + 1)))), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) / 1.0) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY(false, true && (false))))) || (false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)), false || ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))), false || ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false)))))))))), false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && _GLF_IDENTITY((_GLF_IDENTITY((true), bool(bvec2((true), true)))), ! (! ((_GLF_IDENTITY((true), bool(bvec2((true), true))))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false)))))))))), false))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && _GLF_IDENTITY((_GLF_IDENTITY((true), bool(bvec2((true), true)))), ! (! ((_GLF_IDENTITY((true), bool(bvec2((true), true))))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false)))))))))), false)))))) || false)))) || (false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))) || (false))))))) || false)), (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY(false, true && (false))))) || (false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))) || false)))), false || ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (injectionSwitch.x < injectionSwitch.y)) && (true), (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), true && ((true))), false || (! (true))))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false)))), (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false))))) && true))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false)))), (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false))))) && true))), false, true, false)), ! (! (bool(bvec4(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false), true))), false)))), (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, bool(bool(false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), false))))) && true))), false, true, false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec4(bvec3(true, false, false), true))), false)))))))))), false))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), _GLF_IDENTITY((false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2((true), _GLF_IDENTITY(true, (true) || false))))))), _GLF_IDENTITY(bool(bvec3((false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2((true), _GLF_IDENTITY(true, (true) || false))))))), false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec3((false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2((true), _GLF_IDENTITY(true, (true) || false))))))), false, false)), ! (! (bool(bvec3((false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2((true), _GLF_IDENTITY(true, (true) || false))))))), false, false))))), false, false)))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true)))))))))))), false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true, false, false), false)), true)))))), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), false)))))), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true, false, false), false)), true)))))), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), false)))))), true))), true))), false))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true))))), _GLF_IDENTITY(true, (true) || false))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true)))))), true))))))), _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true))))), _GLF_IDENTITY(true, (true) || false))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true)))))), true))))))), _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false))))))))))))))))))), false)))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2((true), _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(true, ! (! (true))) && ((true))) || false))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false)))))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), false)))))), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false)))))))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), false)))))), true))), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), false)))))), true))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), false)))))), true))), true)))), false))))), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec4(bvec3(true, false, false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), float(mat3x4(float(vec2(injectionSwitch.y, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))))), true))))))), _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(true, false, false), true))), false))))))))))))))))))), false))))))))))) || (false)))))), _GLF_IDENTITY(((_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true)))))))))))), (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ((_GLF_IDENTITY(true, true && (true)))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))))))), bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))), false, true, false))))) && true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), ! _GLF_IDENTITY((! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)))), ((! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))) || false)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))))) || (false))))))), bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true)))))))))))), (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ((_GLF_IDENTITY(true, true && (true)))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))))))), bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))), false, true, false))))) && true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), ! _GLF_IDENTITY((! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)))), ((! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))) || false)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))))) || (false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(((_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true)))))))))))), (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ((_GLF_IDENTITY(true, true && (true)))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))))))), bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (_GLF_IDENTITY(true, true && (true))))))))))), false, true, false))))) && true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)), ! _GLF_IDENTITY((! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)))), ((! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))) || false)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))))) || (false)))))))))))) || false)), (false) || false)) && true)))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true, false))), false || ((false) || false))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         subgroupAll(false);
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), true))))) || false), false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (false))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
          barrier();
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2), ~ (~ (uint(read_1 == read_2)))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY((~ (4)), clamp((~ (4)), (~ (4)), (~ (4)))) / 1))), (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ _GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))), 1 * (_GLF_IDENTITY(4, (4) ^ (1 ^ 1)))))), 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-83853) : _GLF_IDENTITY(1, max(1, 1)))), 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       subgroupAll(true);
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(37.77)), bool(false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), ((! (false))) || false)) && true))))
  return;
}
