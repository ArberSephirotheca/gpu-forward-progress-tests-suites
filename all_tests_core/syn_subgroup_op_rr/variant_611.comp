#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_38 {
 mat4x2 _f0;
 vec2 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_37 {
 uvec2 _f0;
 ivec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_39 {
 mat2x3 _f0;
 _GLF_struct_37 _f1;
 uint read_2;
 _GLF_struct_38 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_40 {
 _GLF_struct_39 _f0;
 mat2x4 _f1;
 mat3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_35 {
 mat4x3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_36 {
 _GLF_struct_35 _f0;
 bool _f1;
 uint workgroup_size;
 ivec4 _f2;
} ;

struct _GLF_struct_32 {
 uint _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 mat3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_31 {
 bvec4 _f0;
 vec3 _f1;
 mat3x2 _f2;
 vec3 _f3;
 bvec2 _f4;
 mat2x4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_33 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
} ;

struct _GLF_struct_34 {
 uint workgroup_id;
 _GLF_struct_33 _f0;
} ;

struct _GLF_struct_28 {
 mat2 _f0;
} ;

struct _GLF_struct_27 {
 mat2x4 _f0;
 vec2 _f1;
 bvec3 _f2;
 float _f3;
} ;

struct _GLF_struct_26 {
 uvec2 _f0;
 vec4 _f1;
 mat4x3 _f2;
 int _f3;
} ;

struct _GLF_struct_29 {
 mat4x3 _f0;
 _GLF_struct_26 _f1;
 mat2 _f2;
 mat2x4 _f3;
 _GLF_struct_27 _f4;
 _GLF_struct_28 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_24 {
 bvec4 _f0;
 float _f1;
 uvec2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_25 {
 _GLF_struct_24 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_22 {
 vec2 _f0;
 ivec2 _f1;
 mat3x2 _f2;
 bool _f3;
} ;

struct _GLF_struct_23 {
 uvec4 _f0;
 mat3x4 _f1;
 uint _f2;
 bvec4 _f3;
 bvec3 _f4;
 bool _f5;
 _GLF_struct_22 _f6;
 uint next_virtual_gid;
} ;

struct _GLF_struct_30 {
 mat3x2 _f0;
 uvec4 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_25 _f3;
 _GLF_struct_29 _f4;
} ;

struct _GLF_struct_19 {
 uvec2 _f0;
 float _f1;
 bvec4 _f2;
 mat2x4 _f3;
 float _f4;
 vec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
 uvec3 _f1;
 uint _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
 mat4x2 _f1;
 mat3 _f2;
 ivec3 _f3;
 mat3x2 _f4;
 float _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 vec3 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_19 _f3;
} ;

struct _GLF_struct_16 {
 mat4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_14 {
 ivec4 _f0;
 bvec4 _f1;
 int _f2;
 vec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_13 {
 mat3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
} ;

struct _GLF_struct_11 {
 float _f0;
 vec4 _f1;
 bool _f2;
} ;

struct _GLF_struct_15 {
 mat2x4 _f0;
 uvec3 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 uvec3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 mat4 _f1;
 mat3 _f2;
 bvec2 _f3;
 bvec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 ivec3 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_21 {
 _GLF_struct_10 _f0;
 mat3 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 vec4 _f4;
 uint subgroup_local_id;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 uint num_workgroup;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 ivec4 _f1;
 ivec3 _f2;
 uvec4 _f3;
 bvec2 _f4;
 bvec4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 float _f1;
 uvec3 _f2;
 uvec2 _f3;
 mat3 _f4;
 mat3 _f5;
 float _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_2 {
 uint subgroup_size;
 bool _f0;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 mat4x2 _f1;
 bool _f2;
 vec4 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat4 _f1;
 vec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 mat3x4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 bool _f4;
 mat4 _f5;
 _GLF_struct_5 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat2(1.0), mat3x4(1.0), _GLF_struct_1(_GLF_struct_0(mat4(1.0), mat4x2(1.0), true, vec4(1.0)), mat4(1.0), vec2(1.0), ivec2(1)), _GLF_struct_2(gl_SubgroupSize, true), true, mat4(1.0), _GLF_struct_5(_GLF_struct_3(ivec2(1), 1.0, uvec3(1u), uvec2(1u), mat3(1.0), mat3(1.0), 1.0), _GLF_struct_4(vec2(1.0), ivec4(1), ivec3(1), uvec4(1u), bvec2(true), bvec4(true), mat4x3(1.0)), uvec2(1u), vec3(1.0)));
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_10(_GLF_struct_8(mat3x2(1.0), mat4(1.0), mat3(1.0), bvec2(true), bvec3(true), bvec4(true)), ivec3(1), _GLF_struct_9(ivec3(1), uvec3(1u), mat2x3(1.0))), mat3(1.0), _GLF_struct_15(mat2x4(1.0), uvec3(1u), _GLF_struct_11(1.0, vec4(1.0), true), _GLF_struct_12(ivec4(1)), _GLF_struct_13(mat3(1.0), mat4x3(1.0)), _GLF_struct_14(ivec4(1), bvec4(true), 1, vec3(1.0), vec2(1.0))), _GLF_struct_16(mat4(1.0), mat2(1.0)), vec4(1.0), gl_SubgroupInvocationID, _GLF_struct_20(_GLF_struct_17(ivec3(1), mat4x2(1.0), mat3(1.0), ivec3(1), mat3x2(1.0), 1.0), vec3(1.0), _GLF_struct_18(mat4x3(1.0), uvec3(1u), 1u, ivec2(1)), _GLF_struct_19(uvec2(1u), 1.0, bvec4(true), mat2x4(1.0), 1.0, vec2(1.0), bvec2(true))));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(uvec4(1u), gl_NumWorkGroups.x);
 _GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(_GLF_struct_35(mat4x3(1.0), mat4(1.0)), true, gl_WorkGroupSize.x, ivec4(1));
 _GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(gl_WorkGroupID.x, _GLF_struct_33(_GLF_struct_31(bvec4(true), vec3(1.0), mat3x2(1.0), vec3(1.0), bvec2(true), mat2x4(1.0), mat3(1.0)), _GLF_struct_32(1u, mat4x2(1.0), mat3x2(1.0), mat3(1.0), mat3x4(1.0))));
 uint workgroup_base = _GLF_struct_replacement_36.workgroup_size * _GLF_struct_replacement_34.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_6._f3.subgroup_size + _GLF_struct_replacement_21.subgroup_local_id;
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(mat3x2(1.0), uvec4(1u), _GLF_struct_23(uvec4(1u), mat3x4(1.0), 1u, bvec4(true), bvec3(true), true, _GLF_struct_22(vec2(1.0), ivec2(1), mat3x2(1.0), true), workgroup_base + subgroup_id * _GLF_struct_replacement_6._f3.subgroup_size + ((_GLF_struct_replacement_21.subgroup_local_id + 1) % _GLF_struct_replacement_6._f3.subgroup_size)), _GLF_struct_25(_GLF_struct_24(bvec4(true), 1.0, uvec2(1u), mat3x2(1.0)), mat4(1.0)), _GLF_struct_29(mat4x3(1.0), _GLF_struct_26(uvec2(1u), vec4(1.0), mat4x3(1.0), 1), mat2(1.0), mat2x4(1.0), _GLF_struct_27(mat2x4(1.0), vec2(1.0), bvec3(true), 1.0), _GLF_struct_28(mat2(1.0)), mat2x4(1.0)));
 atomicStore(buf[_GLF_struct_replacement_30._f2.next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 _GLF_struct_40 _GLF_struct_replacement_40 = _GLF_struct_40(_GLF_struct_39(mat2x3(1.0), _GLF_struct_37(uvec2(1u), ivec4(1), mat4(1.0)), atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_struct_38(mat4x2(1.0), vec2(1.0), mat4(1.0)), bvec3(true)), mat2x4(1.0), mat3(1.0), vec2(1.0));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
  {
   if(_GLF_struct_replacement_21.subgroup_local_id + 1 < _GLF_struct_replacement_6._f3.subgroup_size)
    {
     atomicStore(buf[_GLF_struct_replacement_30._f2.next_virtual_gid], uint(read_1 == _GLF_struct_replacement_40._f0.read_2) + 1, 4, 64, 4);
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         subgroupAll(false);
        }
      }
    }
   else
    {
     atomicStore(buf[_GLF_struct_replacement_30._f2.next_virtual_gid], uint(read_1 == _GLF_struct_replacement_40._f0.read_2) + 1, 4, 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(true);
      }
    }
  }
}
