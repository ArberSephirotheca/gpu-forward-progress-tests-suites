#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-33.20)), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3332.7276))))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-33.20)), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3332.7276))))))), ! (! (bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-33.20)), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3332.7276))))))))))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0))).y) * 1.0)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(acosh(vec2(9.6, -0.0))) : injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(refract(26.88, -6.8, -2.5)))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y, injectionSwitch.y))))) && true), (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.7)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) || false))), true, true))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), false, false, false))) && (_GLF_IDENTITY(false, (false) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0)), 1.0 * (float(_GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0))))), 1.0))), 0.0, 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(-6.1)), bvec2(false, false))))).y)) ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(42.60, -7.4))))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0))) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) || false, false || (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(bvec3(false, true, false), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), true)))))), bool(bvec3(bool(bvec3(false, true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)).y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(6.4, -2.7)))).y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))))))))) || false, ! (! ((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), true && ((! (false))))))))))), ! (! ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), true && ((! (false)))))))))))))) || false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), bvec3(bvec4(bvec3(false, true, false), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), true)))))), bool(bvec3(bool(bvec3(false, true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))), mat3x2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))), (true ? mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat3x2(6.5, 491.707, 5.1, -254.041, -391.932, -2.9))))), transpose(transpose(mat4(_GLF_IDENTITY(mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))), (true ? mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat3x2(6.5, 491.707, 5.1, -254.041, -391.932, -2.9))))))))))), (vec2(_GLF_IDENTITY(mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))), mat3x2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))), (true ? mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat3x2(6.5, 491.707, 5.1, -254.041, -391.932, -2.9))))), transpose(transpose(mat4(_GLF_IDENTITY(mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))), (true ? mat3x2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat3x2(6.5, 491.707, 5.1, -254.041, -391.932, -2.9)))))))))))) * vec2(1.0, 1.0))))).y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)).y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, tan(0.0), 1.0))).y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), min(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(vec2(6.4, -2.7)))).y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(unpackSnorm2x16(subgroup_size)) : injectionSwitch)))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, true))))))))))) || false))))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))) || false)), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), bool(bool(! (false)))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false), ! (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false)))))), bool(bool(! (false))))))) || false), false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) - uvec3(0u, 0u, 0u), ((gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))).x), 0u ^ ((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) - uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((gl_WorkGroupSize) - uvec3(0u, 0u, 0u), ((gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u)), (gl_WorkGroupSize) - uvec3(0u, 0u, 0u), (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)))).x))) * (1u & 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u)), max(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)).x) * (1u & 1u)), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u))))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x), 0u ^ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x))) * (1u & 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u)), max(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))) - uvec3(0u, 0u, 0u)).x) * (_GLF_IDENTITY(1u & 1u, clamp(_GLF_IDENTITY(1u & 1u, 0u | (1u & 1u)), 1u & 1u, _GLF_IDENTITY(1u & 1u, max(1u & 1u, 1u & 1u)))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u))))), 1u, 1u)), (uint(uvec3((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x), 0u ^ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x), 0u ^ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * (1u & 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u)), max(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u))) - uvec3(0u, 0u, 0u)).x) * (1u & 1u)), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) * (1u & 1u))))), 1u, 1u))) << 0u)))) >> 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false || (false), true), bvec2(bvec3(bvec2(false || (false), true), true)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec2(false || (false), true), bvec2(bvec3(bvec2(false || (false), true), true)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec2(false || (false), true), bvec2(bvec3(bvec2(false || (false), true), true)))), true, false), true))))))), (! (_GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec2(false || (false), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false || (false), true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(false || (false), true), true), bvec3(bvec3(bvec3(bvec2(false || (false), true), true)))), true))))))))) || false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true && (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), mix(float(float(mat4x2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(32.14)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))))).y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))), ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), true && (bool(bvec3(_GLF_DEAD(false), true, false))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) << 0u), (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) : _GLF_FUZZED(workgroup_size))) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(atomicExchange(subgroup_size, 195228u)) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), max(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), ~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))), ~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), 0u ^ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) : _GLF_FUZZED(workgroup_size))) * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))))))) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size), 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), 0u ^ (_GLF_IDENTITY(0u, (0u) >> 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), 0u ^ (_GLF_IDENTITY(0u, (0u) >> 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))))) >> 0u)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), uint(uvec4(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | ((137956u << 115328u) & 0u))), (false ? _GLF_FUZZED(packSnorm2x16(vec2(-126.225, 5.3))) : ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | ((137956u << 115328u) & 0u))))), clamp(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u + (((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), 1u, 0u, 0u), (uvec4(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), 1u, 0u, 0u)) * uvec4(1u, 1u, 1u, 1u))))) % subgroup_size))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) : _GLF_FUZZED(106855u))))) * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size))), (true ? _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)), _GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) : _GLF_FUZZED(106855u))))) * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(num_workgroup))), ~ (~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, ~ (~ (0u))) ^ (subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) + 0u, _GLF_IDENTITY(uint(uvec2((subgroup_id * subgroup_size) + 0u, 1u)), (uint(uvec2((subgroup_id * subgroup_size) + 0u, 1u))) ^ 0u))), _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size)))))))) + ((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(num_workgroup))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u), ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY((subgroup_id * subgroup_size) + 0u, max((subgroup_id * subgroup_size) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, 0u | (0u))))) | (0u)), (subgroup_id * subgroup_size) + 0u))), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), (uint(subgroup_id * subgroup_size)) << 0u)))) << 0u, 0u ^ ((subgroup_id * subgroup_size) << 0u)))))))) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(-66959)))) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0u, 0u, 0u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bool(bool(_GLF_IDENTITY(false, (false) && true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bool(bool(_GLF_IDENTITY(false, (false) && true)))))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bool(bool(_GLF_IDENTITY(false, (false) && true))))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) && true)))))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, true, false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y)) || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), true && ((false)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(566.396)), vec2(_GLF_FUZZED(-71.29), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat4x2((injectionSwitch), sin(0.0), 0.0, 0.0, cos(0.0), 1.0, 1.0)), mix(vec2((vec2(mat4x2((injectionSwitch), sin(0.0), 0.0, 0.0, cos(0.0), 1.0, 1.0)))[0], _GLF_FUZZED(-55.31)), vec2(_GLF_FUZZED(510.745), (vec2(mat4x2((injectionSwitch), sin(0.0), 0.0, 0.0, cos(0.0), 1.0, 1.0)))[1]), bvec2(false, true)))) * mat2(1.0)))[1]), bvec2(false, true))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, ~ (~ (1))))), 1)) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true))), true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? -4096.0228 : 52.42)), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-8436.6034)), bvec2(true, false))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY((read_1 == read_2) && true, ((read_1 == read_2) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))))))), (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY((read_1 == read_2) && true, ((read_1 == read_2) && true) || false)))))) && true)) + 1, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) ^ 0)) / 1), 64), (_GLF_IDENTITY(clamp(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) - 0)) | 0)) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-14844))))) / 1), 64), _GLF_IDENTITY((clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? (_GLF_IDENTITY(64, (64) ^ 0)) / 1 : _GLF_FUZZED(-24776)))), 64)), max(_GLF_IDENTITY((clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? (_GLF_IDENTITY(64, (64) ^ 0)) / 1 : _GLF_FUZZED(-24776)))), 64)), ~ (~ ((clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (_GLF_IDENTITY(64, (64) ^ 0)))) / 1 : _GLF_FUZZED(-24776)))), 64))))), _GLF_IDENTITY((clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? (_GLF_IDENTITY(64, (64) ^ 0)) / 1 : _GLF_FUZZED(-24776)))), 64)), clamp((clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)), (false ? _GLF_FUZZED(-25177) : _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)), clamp((_GLF_IDENTITY(64, (64) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)), ((_GLF_IDENTITY(64, (64) ^ 0))) ^ 0), (_GLF_IDENTITY(64, (64) ^ 0)))))) / 1 : _GLF_FUZZED(-24776)))), 64)), (clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? (_GLF_IDENTITY(64, (64) ^ 0)) / 1 : _GLF_FUZZED(-24776)))), 64)), (clamp(64, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) ^ 0)) / 1, (true ? (_GLF_IDENTITY(64, (64) ^ _GLF_IDENTITY(0, (0) >> 0))) / 1 : _GLF_FUZZED(-24776)))), 64)))))) ^ 0)) + 0)), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == read_2), ! (_GLF_IDENTITY(! ((read_1 == read_2)), (! ((read_1 == read_2))) && true))), ! (_GLF_IDENTITY(! (! (read_1 == read_2)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((read_1 == read_2), ((read_1 == read_2)) && true))))))))))), 1u * _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true))))))))))))))) | ((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true))))))))))))))), (uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (read_1 == read_2)))))))) / 1u))) + 1, (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == read_2), ! (_GLF_IDENTITY(! ((read_1 == read_2)), (! ((read_1 == read_2))) && true))), ! (_GLF_IDENTITY(! (! (read_1 == read_2)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((read_1 == read_2), ((read_1 == read_2)) && true))))))))))), 1u * _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true))))))))))))))) | ((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true))))))))))))))), (uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (read_1 == read_2)))))))) / 1u))) + 1) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == read_2), ! (_GLF_IDENTITY(! ((read_1 == read_2)), (! ((read_1 == read_2))) && true))), ! (_GLF_IDENTITY(! (! (read_1 == read_2)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(! (! (read_1 == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((read_1 == read_2), ((read_1 == read_2)) && true))))))))))), 1u * _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true)))))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true))))))))))))))) | ((uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, true && (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_local_id) : read_2)), true && (read_1 == read_2)))), ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! _GLF_IDENTITY((read_1 == read_2), false || (_GLF_IDENTITY((read_1 == read_2), true && (_GLF_IDENTITY((_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(uint(-0.6)) : read_1)) == read_2), (_GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))) && true))))))))))))))), (uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (read_1 == read_2)))))))) / 1u))) + 1)), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7021.0106), _GLF_FUZZED(-43.07)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec3(true, true, true)))))).x < injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), false)), false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, ! (! (false))), false)), true && (bool(bvec4(false, false, false, false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bvec3(false, true, false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true && (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))))))))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false)))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))) || false)) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true, false))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true, false))))))) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0), transpose(transpose(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0), (false ? _GLF_FUZZED(mat3x4(-7.8, -83.90, 904.787, -3828.0779, 761.555, 338.277, 2.9, -4453.6108, 1730.7169, -7229.9570, -84.59, -5.7)) : mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0), transpose(transpose(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0), (false ? _GLF_FUZZED(mat3x4(-7.8, -83.90, 904.787, -3828.0779, 761.555, 338.277, 2.9, -4453.6108, 1730.7169, -7229.9570, -84.59, -5.7)) : mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0))))))) : _GLF_FUZZED(vec2(81.87, 3.7))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, ! (! (true))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), ((! (false))) && true)))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, ! (! (false)))), false), bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(false, ! (! (false)))), false), false, true)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((42.71 + injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0) : _GLF_FUZZED(-7411.0273))))), injectionSwitch, injectionSwitch)), injectionSwitch)).y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), float(_GLF_FUZZED(-2.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) < injectionSwitch.y))))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)) && true))))) || false)))), bool(bvec3(false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((42.71 + injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0) : _GLF_FUZZED(-7411.0273))))), injectionSwitch, injectionSwitch)), injectionSwitch)).y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), float(_GLF_FUZZED(-2.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) < injectionSwitch.y))))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)) && true))))) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
}
