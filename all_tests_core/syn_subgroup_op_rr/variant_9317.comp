#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 int _f0;
 ivec3 _f1;
 mat4x2 _f2;
 uint subgroup_size;
} ;

struct _GLF_struct_1 {
 uint _f0;
 mat3x4 _f1;
 ivec2 _f2;
 _GLF_struct_0 _f3;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 vec2 _f1;
 _GLF_struct_1 _f2;
 int _f3;
 mat3 _f4;
 mat4x2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(vec3(1.0), vec2(1.0), _GLF_struct_1(1u, mat3x4(1.0), ivec2(1), _GLF_struct_0(1, ivec3(1), mat4x2(1.0), gl_SubgroupSize)), 1, mat3(1.0), mat4x2(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * _GLF_struct_replacement_2._f2._f3.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * _GLF_struct_replacement_2._f2._f3.subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_struct_replacement_2._f2._f3.subgroup_size, (true ? _GLF_IDENTITY(_GLF_struct_replacement_2._f2._f3.subgroup_size, (_GLF_struct_replacement_2._f2._f3.subgroup_size) ^ 0u) : _GLF_FUZZED(virtual_gid))));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_2._f2._f3.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) - 0u), (false ? _GLF_FUZZED(workgroup_id) : read_1)) == read_2)))) + 1, 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(true, (true) && true));
  }
}
