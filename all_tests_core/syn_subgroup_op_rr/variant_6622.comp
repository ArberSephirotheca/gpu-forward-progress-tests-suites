#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2x3 _f0;
 mat2x3 _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, abs(1.0)))).x > injectionSwitch.y))))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), ! (! (! ((_GLF_IDENTITY(false, ! (! (false)))))))))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), ! (! (! ((_GLF_IDENTITY(false, ! (! (false)))))))))), false)), true, true)))) || false)))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! ((false)))), false || (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! ((false)))), false || (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! ((false)))), false || (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! ((false)))), false || (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), false || (! ((false)))), false || (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                  {
                   do
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), ~ (~ (int(6))))) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter))) - 0, max((_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter))) - 0, (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter))) - 0))) + 0)) != 1)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))), (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false))))))))))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false))))))))))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), false, false))))));
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(abs(log(1.0)), (abs(log(1.0))) / 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)))))), 1.0, 1.0))), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(abs(0.0), 1.0), vec2(0.0, 1.0))), determinant(mat2(1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0, abs(log(1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), mix(float(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_FUZZED(-3884.3912)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(abs(0.0), 1.0), min(vec2(abs(0.0), 1.0), _GLF_IDENTITY(vec2(abs(0.0), 1.0), clamp(vec2(abs(0.0), 1.0), _GLF_IDENTITY(vec2(abs(0.0), 1.0), min(vec2(abs(0.0), 1.0), vec2(abs(0.0), 1.0))), _GLF_IDENTITY(vec2(abs(0.0), 1.0), min(vec2(abs(0.0), 1.0), vec2(abs(0.0), 1.0))))))), vec2(0.0, 1.0))), determinant(mat2(1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(determinant(mat2(77.51, 0.3, -27.60, 58.01))))), injectionSwitch.y), clamp(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(determinant(mat2(77.51, 0.3, -27.60, 58.01))))), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(determinant(mat2(77.51, 0.3, -27.60, 58.01))))), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(determinant(mat2(77.51, 0.3, -27.60, 58.01))))), injectionSwitch.y))))), 0.0, 0.0, 1.0, 1.0)))))).x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 ^ 1) ^ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))), true && (_GLF_IDENTITY(_injected_loop_counter < ((1 ^ 1) ^ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))), ! (! (_injected_loop_counter < ((1 ^ _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) + 0))), 1))) ^ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))))))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           continue;
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(int(0)))), int(0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, true))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false))))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))), (true ? transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))) : _GLF_FUZZED(mat4x2(5.2, 75.98, 7.1, -0.5, 15.61, -9454.0936, 6358.1230, -36.93)))))))).y)))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))), (true ? transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))) : _GLF_FUZZED(mat4x2(5.2, 75.98, 7.1, -0.5, 15.61, -9454.0936, 6358.1230, -36.93)))))))).y)))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false))))))), bool(bvec2(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))), (true ? transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))) : _GLF_FUZZED(mat4x2(5.2, 75.98, 7.1, -0.5, 15.61, -9454.0936, 6358.1230, -36.93)))))))).y)))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false))))))), false)))), ! (! (! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))), (true ? transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))) : _GLF_FUZZED(mat4x2(5.2, 75.98, 7.1, -0.5, 15.61, -9454.0936, 6358.1230, -36.93)))))))).y)))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false))))))), bool(bvec2(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))), (true ? transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat2(1.0))) : _GLF_FUZZED(mat4x2(5.2, 75.98, 7.1, -0.5, 15.61, -9454.0936, 6358.1230, -36.93)))))))).y)))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false))))))), false)))))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-45.58), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-45.58), max(_GLF_FUZZED(-45.58), _GLF_FUZZED(-45.58))), (_GLF_FUZZED(-45.58)) / 1.0), _GLF_FUZZED(-45.58), _GLF_FUZZED(-45.58)), (clamp(_GLF_IDENTITY(_GLF_FUZZED(-45.58), (_GLF_FUZZED(-45.58)) / 1.0), _GLF_FUZZED(-45.58), _GLF_FUZZED(-45.58))) / 1.0)))), injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-45.58))), injectionSwitch.y, injectionSwitch.y))))) || false)), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-39808))), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 0))))))), int(4)))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-39808))), int(4))), int(4))))) * (1 | 1)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u))))) ^ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))), (false ? _GLF_FUZZED(max(uvec3(15461u, 136519u, 192574u), uvec3(74540u, 39744u, 30009u))) : (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))))).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(7777)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))) ^ uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(51019u, 85968u, _GLF_IDENTITY(20444u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u | 0u)), (_GLF_IDENTITY(uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(0u | 0u, 0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u)))))), (uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(_GLF_IDENTITY(2u, min(2u, 2u)), min(_GLF_IDENTITY(2u, min(2u, 2u)), _GLF_IDENTITY(2u, min(2u, 2u))))))), (0u | _GLF_IDENTITY(0u, uint(uint(0u)))))) >> uvec4(0u, 0u, 0u, 0u))) ^ uvec4(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u, 0u, 0u)), max(_GLF_IDENTITY(uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u | 0u)), (_GLF_IDENTITY(uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(0u | 0u, 0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u)))))), (uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(_GLF_IDENTITY(2u, (2u) << 0u), _GLF_IDENTITY(min(2u, 2u), ~ (_GLF_IDENTITY(~ (min(2u, 2u)), (true ? ~ (min(2u, 2u)) : _GLF_FUZZED(74345u))))))))), (0u | 0u))) >> uvec4(0u, 0u, 0u, 0u))) ^ uvec4(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) << 0u)) ^ 0u))), _GLF_IDENTITY(uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (2u) * 1u)), uint(2u))), (0u | 0u)), (_GLF_IDENTITY(uvec4(20444u, 0u, ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(0u | 0u, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u))), clamp(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u))), (false ? _GLF_FUZZED(workgroup_size) : 0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u))))), 0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u))), 0u ^ (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u)))))))), (uvec4(20444u, 0u, (_GLF_IDENTITY((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, min(2u, 2u)))), ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, min(2u, 2u))))) | ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, min(2u, _GLF_IDENTITY(2u, max(_GLF_IDENTITY(2u, (false ? _GLF_FUZZED(subgroup_id) : 2u)), 2u))))))))), (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packUnorm2x16(injectionSwitch)))) | 0u))) >> uvec4(0u, 0u, 0u, 0u))) ^ uvec4(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u, 0u, 0u)))))))) : _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(8), int(8)))), true && (bool(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(8), int(8))))))), true && (bool(_GLF_IDENTITY(bool(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(8), int(8)))), true && (bool(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(8), int(8))))))))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true)))))))) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (int(4)) | _GLF_IDENTITY((int(4)), 0 ^ ((int(4))))), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))))))) || false)), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - sin(vec2(0.0, 0.0))).x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y))))))))) || false), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y))))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true))))))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-72080 & 0)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false)))) || false)))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && true));
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(workgroup_size * workgroup_id, 0u, 1u))), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u)));
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(mat2x3(1.0), mat2x3(1.0), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))) + subgroup_local_id), mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)))), mat4x2(1.0));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y))))) && true)), (bool(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y))))) && true))) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-796.629, -5.6)))).y)))))))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64) | _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(((64) | 0), (((64) | 0)) ^ 0) - 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), max(_GLF_IDENTITY(64, (64) | 0), _GLF_IDENTITY(64, (64) | 0))), (_GLF_IDENTITY(64, _GLF_IDENTITY((64), clamp((64), (64), _GLF_IDENTITY((64), (_GLF_IDENTITY((64), ((64)) | ((64)))) - 0))) | 0)) - 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, clamp(64, 64, 64)), 1, 1, 0)))) | (64)), (64) | 0)) - 0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(59818))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((64) | 0, (0 << _GLF_IDENTITY(int(0), int(0))) + ((64) | 0)), ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY((64) | 0, int(ivec3((64) | 0, 0, ((0 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(3), int(3))))))))))), 1)), (true ? int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((64) | 0, ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | 0, (64) | 0))))), 1), (ivec2(_GLF_IDENTITY((64) | 0, ~ (~ (_GLF_IDENTITY((64) | 0, min(_GLF_IDENTITY((64), min((64), (64))) | 0, (64) | 0))))), 1)) / ivec2(1, 1))) : _GLF_FUZZED(3188))))), (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | 0, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((64), 0 ^ ((64))) | 0, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), clamp((0 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), ((0 << _GLF_IDENTITY(int(0), int(0)))) - 0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), _GLF_IDENTITY(~ (0), 0 | (~ (0)))))))))), ~ (~ ((0 << _GLF_IDENTITY(int(0), int(0)))))))) + ((64) | 0)), ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0)))))) << 0), (64) | 0))))), 1)), (true ? int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((64) | 0, ((64) | _GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec3(-34644, -19242, 87185)[0]))), clamp(0, 0, 0)))), (64) | 0))))), 1), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ ((64)))) | 0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ ((64)))) | 0, min((64) | 0, (64) | 0))))), 1)) / ivec2(1, 1))) : _GLF_FUZZED(3188)))))) | (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((64) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(22719))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))) + ((64) | 0), 1 * ((0 << _GLF_IDENTITY(int(0), int(0))) + ((64) | 0)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(42896)))) | 0, min((64) | _GLF_IDENTITY(0, ~ (~ (0))), (64) | 0))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((64) | 0, (0 << _GLF_IDENTITY(int(0), int(0))) + ((64) | 0)), ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | _GLF_IDENTITY(0, ~ (~ (0))), (64) | 0))))), max(_GLF_IDENTITY(_GLF_IDENTITY((64) | 0, (0 << _GLF_IDENTITY(int(0), int(0))) + ((64) | 0)), ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | _GLF_IDENTITY(0, ~ (~ (0))), (64) | 0))))), _GLF_IDENTITY(_GLF_IDENTITY((64) | 0, (0 << _GLF_IDENTITY(int(0), int(0))) + ((64) | 0)), ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) | (0))))), (64) | 0)))))))))), 1)), (true ? int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((64) | 0, ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | 0, (64) | 0))))), 1), (ivec2(_GLF_IDENTITY((64) | 0, ~ (~ (_GLF_IDENTITY((64) | 0, min((64) | 0, (64) | 0))))), 1)) / ivec2(1, 1))) : _GLF_FUZZED(3188))))))), clamp(_GLF_IDENTITY(64, (64) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) << 0), max(64, 64)), (64) | 0), _GLF_IDENTITY(64, (64) | 0))), _GLF_IDENTITY(64, (64) | 0))), 4);
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_1._f0.virtual_gid], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) << 0), 64)), 0);
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_1._f0.virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) * _GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), (_GLF_IDENTITY(64, int(int(64)))) | (64))), (false ? _GLF_FUZZED(-93185) : (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), (_GLF_IDENTITY(64, int(int(64)))) | (64))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))), _GLF_IDENTITY((_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))), min((_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))), (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))), (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))), (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), min((64) | (64), (64) | (64))))))))) | (0 >> _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))), (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (64)))))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) * 1), (64) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64), clamp((64), (64), _GLF_IDENTITY((64), 0 | ((64))))) | (64)))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239), max(_GLF_IDENTITY(true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239), int(ivec3(_GLF_IDENTITY(true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239), (true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239)) - 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239), (true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239)) | (true ? _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(64, (64) | (64)))) : _GLF_FUZZED(-96239))))))), (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), max(_GLF_IDENTITY(64, (64) | (64)), _GLF_IDENTITY(64, (64) | (64))))))) | (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(64, (64) / 1), 0, 1, 1)), clamp(int(ivec4(_GLF_IDENTITY(64, (64) / 1), 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5177) : 1))) >> 0), 1)), int(ivec4(_GLF_IDENTITY(64, (64) / 1), 0, 1, 1)), int(ivec4(_GLF_IDENTITY(64, _GLF_IDENTITY((64), ~ (~ ((64)))) / 1), 0, 1, 1)))))) | (64)), _GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(64, (64) | (64)))), (int(int(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 | (64))) | (64))))) | (_GLF_IDENTITY(int(int(_GLF_IDENTITY(64, (64) | (64)))), ~ (~ (int(int(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 | (64))) | (_GLF_IDENTITY(64, ~ (~ (64)))))))))))), (int(int(_GLF_IDENTITY(64, (64) | (64))))) ^ 0)), _GLF_IDENTITY(64, (64) | (64)), _GLF_IDENTITY(64, (64) | (64))))))))))))), 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(_GLF_IDENTITY(bvec2(subgroup_local_id + 1 < subgroup_size, false), bvec2(bvec4(bvec2(subgroup_local_id + 1 < subgroup_size, false), true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(_GLF_IDENTITY(bvec2(subgroup_local_id + 1 < subgroup_size, false), bvec2(bvec4(bvec2(subgroup_local_id + 1 < subgroup_size, false), true, true))))), true && (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(_GLF_IDENTITY(bvec2(subgroup_local_id + 1 < subgroup_size, false), bvec2(bvec4(bvec2(subgroup_local_id + 1 < subgroup_size, false), true, true)))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), bool(bvec2(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), ((! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), bool(bvec2(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) && true)))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false))))) || false)) && true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.6))))) || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))) || false)) || false))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(95976) : 0)))) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false))))) && true))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             return;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), ! (! (_GLF_IDENTITY(false, true && (false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, (true) || false)))), true && (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, (true) || false))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))) && true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), true && (bool(_GLF_IDENTITY(false, (false) && true))))), bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), true && (bool(_GLF_IDENTITY(false, (false) && true))))), false, false, true)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false, false)))))), false)))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec3(! (! (_GLF_DEAD(false))), false, false)))))) || false) && true))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true)))))))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true)))))) || false, ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), true && (! (_GLF_IDENTITY(true, false || (true)))))))) || false) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec4(_GLF_IDENTITY(int(7), int(ivec4(int(7), 1, 1, 1))), 0, 1, 1))), (int(7)) >> 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true, false))))))) && true, _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true, false))))))) && true, false, false)), ! (! (bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true, false))))))) && true, false, false)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(-32.95, 498.538)))), injectionSwitch)).y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))))))), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, (0.0) * exp(0.0)), 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))))) - 0.0), 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true, false))))))) && true, true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false), false))))), true, false))))))) && true, ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, exp(0.0), 1.0, 1.0), (vec4(1.0, exp(0.0), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 1.0)))), 1.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), min(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), (vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0)) * mat4(1.0)))))))))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, exp(0.0), 1.0, 1.0), (vec4(1.0, exp(0.0), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 1.0)))), 1.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), min(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), (vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0)) * mat4(1.0)))))))))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, exp(0.0), 1.0, 1.0), (vec4(1.0, exp(0.0), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 1.0)))), 1.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), min(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0), (vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0)) * mat4(1.0)))))))))).x > injectionSwitch.y))))) && true)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(45.21)), float(injectionSwitch.y), bool(true))), max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))) || false))), true), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2364.1100), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.0)), bvec2(true, false))).x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true, false))))))) && true) || false)))) && true))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), true)))), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))) || false))))), bvec2(bvec3(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))), false, false)))))), false, true)))))))))
                    break;
                   continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (0 & 94291); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(4694.5913)), float(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))), bool(true))))).x > injectionSwitch.y) && true)))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ! (! (true)))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        continue;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))) : _GLF_FUZZED(20.98))), injectionSwitch.x))) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-834.835), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.6)), bvec2(true, false))).x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), float(mat3((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), 1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))), abs(1.0), 1.0, 0.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(20.98))), injectionSwitch.x))) + 0.0) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-834.835), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(6.6), (_GLF_IDENTITY(_GLF_FUZZED(6.6), (_GLF_FUZZED(6.6)) - 0.0)) / 1.0)), bvec2(true, false))).x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), float(mat3((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), 1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))), abs(1.0), 1.0, 0.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(20.98))), injectionSwitch.x))) + 0.0) > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-834.835), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.6)), bvec2(true, false))).x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), float(mat3((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), 1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))), abs(1.0), 1.0, 0.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(20.98))), injectionSwitch.x))) + 0.0) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-834.835), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(6.6), (_GLF_IDENTITY(_GLF_FUZZED(6.6), (_GLF_FUZZED(6.6)) - 0.0)) / 1.0)), bvec2(true, false))).x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), float(mat3((true ? injectionSwitch.x : _GLF_FUZZED(-24.01)), 1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))), abs(1.0), 1.0, 0.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(20.98))), injectionSwitch.x))) + 0.0) > injectionSwitch.y)))), false))))), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-24.01, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -24.01 : _GLF_FUZZED(-839.681)))))) : _GLF_FUZZED(20.98))), injectionSwitch.x))) + 0.0) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), clamp(vec4(injectionSwitch, 1.0, 0.0), vec4(injectionSwitch, 1.0, 0.0), vec4(injectionSwitch, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0))))).y)), false))), bool(bvec4(! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))) : _GLF_FUZZED(20.98))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) + _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(0.3)))), clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))) : _GLF_FUZZED(20.98))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) + _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(0.3)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))) : _GLF_FUZZED(20.98))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) + _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(0.3)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-24.01))) : _GLF_FUZZED(20.98))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) + _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(0.3)))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), false))), false, true, true))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), true && ((false))))))))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), true && ((false)))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_DEAD(false)))))))
                return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
        {
         do
          {
           do
            {
             subgroupAll(false);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter)) : _injected_loop_counter)) != ((0 | 0) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
          return;
        }
       atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
       do
        {
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(false, true, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
  }
}
