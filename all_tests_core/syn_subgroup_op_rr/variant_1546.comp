#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id;
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.x = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.z = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.x;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.w;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.z * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid;
  }
 else
  {
  }
 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.w = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.z;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.z * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.w], 4, 64, 0);
 do
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x = read_1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.w], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y = read_2;
  }
 else
  {
  }
 do
  {
   if(subgroup_local_id + 1 < GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y)
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1, 4, 64, 4);
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     subgroupAll(false);
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1, 4, 64, 4);
      }
     else
      {
      }
     do
      {
       do
        {
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
