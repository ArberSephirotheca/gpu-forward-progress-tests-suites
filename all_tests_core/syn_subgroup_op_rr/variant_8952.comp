#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 vec4 _f0;
 vec3 _f1;
 mat4x3 _f2;
 float _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 vec3 _f1;
 mat3x2 _f2;
 bvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uint subgroup_id;
 uvec2 _f1;
 float _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 _GLF_struct_2 _f1;
 ivec4 _f2;
 vec2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 uvec2 GLF_merged2_0_1_6_1_1_11read_2virtual_gid;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat3x2(1.0), _GLF_struct_2(_GLF_struct_0(uvec2(1u), vec3(1.0), mat3x2(1.0), bvec4(true), mat3(1.0)), gl_SubgroupID, uvec2(1u), 1.0, _GLF_struct_1(vec4(1.0), vec3(1.0), mat4x3(1.0), 1.0, mat2x3(1.0))), ivec4(1), vec2(1.0));
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size.z * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_3._f1.subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size.y = virtual_gid;
 GLF_merged2_0_1_6_1_1_11read_2virtual_gid.y = GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size.y;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_3._f1.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid;
 atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_6_1_1_11read_2virtual_gid.y], 4, 64, 0);
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_6_1_1_11read_2virtual_gid.y], 4, 64, 0);
 GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size.x = read_2;
 do
  {
   GLF_merged2_0_1_6_1_1_11read_2virtual_gid.x = GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_size.x;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(read_1 == GLF_merged2_0_1_6_1_1_11read_2virtual_gid.x) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(read_1 == GLF_merged2_0_1_6_1_1_11read_2virtual_gid.x) + 1, 4, 64, 4);
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
    {
     subgroupAll(true);
    }
  }
}
