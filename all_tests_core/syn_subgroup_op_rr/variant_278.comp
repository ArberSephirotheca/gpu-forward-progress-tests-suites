#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y = workgroup_id;
 uint workgroup_base = GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.w * GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y;
 GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.z = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.z + GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + subgroup_local_id;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.z + GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.x = read_1;
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.y = read_2;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(subgroup_local_id + 1 < GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)
    {
     atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.x == GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.y) + 1, 4, 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               subgroupAll(false);
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.x == GLF_merged4_0_1_6_1_1_6_2_1_14_3_1_14read_1read_2workgroup_baseworkgroup_size.y) + 1, 4, 64, 4);
     do
      {
       subgroupAll(true);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
}
