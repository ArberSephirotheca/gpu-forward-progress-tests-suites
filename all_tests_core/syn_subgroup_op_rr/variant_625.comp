#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, cos(0.0)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.3))) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z = subgroup_id;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(bool(bvec4(true && (true), true, true, true)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true && (true), true, true, true)), ! (! (bool(bvec4(true && (true), true, true, true))))), bool(bvec3(bool(bvec4(true && (true), true, true, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, true && (false))))), true, false))), true, true)))))) || false), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 + (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / int(_GLF_ONE(1.0, injectionSwitch.y))))))), true))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.1)), float(injectionSwitch.y), bool(true)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))), 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))))) ^ 0)))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w = _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | 0u, clamp((subgroup_size) | 0u, (subgroup_size) | 0u, (subgroup_size) | 0u))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))) || false)), bool(bvec4(! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))) || false)), true, false, false))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      barrier();
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) >> 0) != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y)))) && true))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8243.9781)), bool(false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(885.160), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), length(vec4(0.0, 0.0, 0.0, 0.0)), sin(0.0))))[0], _GLF_FUZZED(float(false))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (-70489 - -90554))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(8760.4026)), bvec2(false, false))) / cos(vec2(0.0, 0.0))), injectionSwitch)).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id) / (1u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id) / (1u ^ 0u)), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id) / (1u ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id) / (1u ^ 0u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id) / (1u ^ 0u))), 0u ^ (uint(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size : _GLF_FUZZED((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w)) + subgroup_local_id) / (1u ^ 0u)))))))));
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w) - 0u) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-26789) : 1))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (subgroup_local_id)), min(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (~ (subgroup_local_id)), min(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)))), 0u), uvec2(uvec4(uvec2(_GLF_IDENTITY(~ (~ (subgroup_local_id)), min(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)))), 0u), 1u, 1u)))), (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (~ (subgroup_local_id)), min(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)))), 0u), uvec2(uvec4(uvec2(_GLF_IDENTITY(~ (~ (subgroup_local_id)), min(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)))), 0u), 1u, 1u))))) * 1u)))))) + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) * 1u)))))) + 1) : _GLF_FUZZED(183135u)))) << _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) << 0u)), max((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) << 0u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) << 0u)))), _GLF_IDENTITY(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) << 0u))), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(0u, (0u) | 0u) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (((0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))))))))) | 0u) : _GLF_FUZZED(subgroup_local_id))) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) % GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w);
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x = next_virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x = next_virtual_gid));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)))), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0))))).x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)))), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0))))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)))), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0))))).x)) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, uvec4(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).x, 0u)), clamp(uint(uvec2(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x, _GLF_IDENTITY(0u, (0u) >> 0u))), uint(uvec2(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x, 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (false ? _GLF_FUZZED((+ uvec4(82312u, 47460u, 124578u, 25060u))) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)).x, 0u), (uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (false ? _GLF_FUZZED((+ uvec4(82312u, 47460u, 124578u, 25060u))) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)).x, 0u)) | uvec2(0u, 0u))))), (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) + 0u)) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, min(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)), uvec4(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)))).x, 0u)), clamp(uint(uvec2(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x, _GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, ~ (~ (0u)))))), uint(uvec2(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x, 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (false ? _GLF_FUZZED((+ uvec4(82312u, 47460u, 124578u, 25060u))) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)).x, 0u), (uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, (false ? _GLF_FUZZED((+ uvec4(82312u, 47460u, 124578u, 25060u))) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size)).x, 0u)) | uvec2(0u, 0u)))))) + 0u))], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ~ (~ (ivec2(1, _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) / 1) | _GLF_IDENTITY((0), max(_GLF_IDENTITY((0), ((0)) | ((0))), _GLF_IDENTITY((0), 0 | ((0))))))))))))) * (1 & 1))), 4, _GLF_IDENTITY(64, (64) ^ 0), 4);
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((719.103 / 96.99))), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(42.58) : injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))), bool(bvec2(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4322.6296), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-545.017)), bvec2(true, false))).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4322.6296), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-545.017)), bvec2(true, false))).x > injectionSwitch.y)), true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(75889) : _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(2915.3422))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), log(vec2(1.0, 1.0)) + ((injectionSwitch))) / vec2(1.0, 1.0)))).y)))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), ((int(1))) | ((int(1)))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (true ? _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])) : _GLF_FUZZED(num_workgroup))), 4, 64, 0);
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.y = read_2;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w, 0u | (false ? _GLF_FUZZED(workgroup_base) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.w))) ^ 0u)) | 0u)))) >> 0u))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x2(injectionSwitch[1], tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec3(bool(bvec4(false, true, true, false)), false, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec3(bool(bvec4(false, true, true, false)), false, true)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec3(bool(bvec4(false, true, true, false)), false, true)))))))) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(dot(vec2(32.47, -9.9), injectionSwitch)) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((injectionSwitch.x > injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))) + int(_GLF_ZERO(0.0, injectionSwitch.x))) != (1 ^ (1 & 1))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(7), int(7)), 1, 0), max(ivec3(_GLF_IDENTITY(int(7), int(7)), 1, 0), ivec3(_GLF_IDENTITY(int(7), int(7)), 1, 0)))))) - 0)) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-37.97) : injectionSwitch.x)) : _GLF_FUZZED(4.7))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-37.97) : injectionSwitch.x)) : _GLF_FUZZED(4.7))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-37.97) : injectionSwitch.x)) : _GLF_FUZZED(4.7))) > injectionSwitch.y))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-37.97) : injectionSwitch.x)) : _GLF_FUZZED(4.7))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-37.97) : injectionSwitch.x)) : _GLF_FUZZED(4.7))) > injectionSwitch.y)))))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x, ~ (~ (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x)))], _GLF_IDENTITY(uint(read_1 == GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.y), (uint(read_1 == GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.y)) + (0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), ~ (~ (uint(8u))))))) + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)), 4, 64, 4);
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), false, true, false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(bvec3(bvec2(true, true), true), true))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(bvec3(bvec2(true, true), true), true))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(bvec3(bvec2(true, true), true), true))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(bvec3(bvec2(true, true), true), true))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(bvec3(bvec2(true, true), true), true))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))))) && true)));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (~ (2)) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-98088, (-98088) - 0)) : 0)))) | (_GLF_IDENTITY(~ (2), (~ (2)) + 0))), 0 ^ (~ (2))))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) * 1), 2)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (2), (~ (2)) | (_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0 ^ (~ (2)), (true ? _GLF_IDENTITY(0 ^ (~ (2)), (false ? _GLF_FUZZED(-27614) : 0 ^ (~ (2)))) : _GLF_FUZZED((42751)))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(~ (2), (~ (2)) | (_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0 ^ (~ (2)), (true ? _GLF_IDENTITY(0 ^ (~ (2)), (false ? _GLF_FUZZED(-27614) : 0 ^ (~ (2)))) : _GLF_FUZZED((42751))))))))), (false ? _GLF_FUZZED(32883) : (~ (_GLF_IDENTITY(~ (2), (~ (2)) | (_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0 ^ (~ (2)), (true ? _GLF_IDENTITY(0 ^ (~ (2)), (false ? _GLF_FUZZED(-27614) : 0 ^ (~ (2)))) : _GLF_FUZZED((42751))))))))))) | 0))))), (int(2)) >> 0))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(80214))), int(ivec4(int(2), 0, 1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))) && true))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), 0.0, log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))).y), float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y)))) * _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(mat2((injectionSwitch), 0.0, 0.0))), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-12.42), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-4.6)), bvec2(true, false)))))).y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.x], uint(read_1 == _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size, ~ (~ (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_13next_virtual_gidread_2subgroup_idsubgroup_size))).y)))) + 1, 4, 64, 4);
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(-5958.3311, 2.8) + 94.50)) : injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       barrier();
      }
    }
   else
    {
    }
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat3(0.0, 0.0, 1.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.8)), float(injectionSwitch.y), bool(true))), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(80.66)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(80.66)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), clamp(mix(float(_GLF_FUZZED(80.66)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), mix(float(_GLF_FUZZED(80.66)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), mix(float(_GLF_FUZZED(80.66)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))))), mix(float(_GLF_FUZZED(80.66)), _GLF_IDENTITY(float(injectionSwitch.y), (true ? float(injectionSwitch.y) : _GLF_FUZZED(54.64))), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))))), injectionSwitch.y))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(3.3), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(-117.673, 160.473, -7324.5001).p)), bool(false))), ! (! (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true), false, true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true), false, true))))) && true)))), true))).y), bool(true))), injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(3.3), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(3.3), (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), _GLF_IDENTITY(bool(true), (bool(true)) || false))), injectionSwitch.y))) && true)) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)))))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)))))), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)))))), (_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))) * 1.0), 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, abs(0.0)))), abs(0.0), 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y)))) && true))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0)), 1.0, 0.0)), clamp(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0)), 1.0, 0.0)), float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0)), 1.0, 0.0)), mix(float(_GLF_FUZZED(5.3)), float(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0)), 1.0, 0.0))), bool(true))))), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0)))), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(80.66)), (_GLF_IDENTITY(float(_GLF_FUZZED(80.66)), min(float(_GLF_FUZZED(80.66)), float(_GLF_FUZZED(80.66))))) - 0.0), float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(uintBitsToFloat(read_1)))), _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, exp(0.0), 0.0))), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)))))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)))))), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY((true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)), clamp((true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)), _GLF_IDENTITY((true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)), max((true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5)))))))))), (_GLF_IDENTITY(3.3, _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), max(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(log(1.0)), 1.0, 0.0)), (true ? float(mat4x2(3.3, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0)), 1.0, 0.0)) : _GLF_FUZZED(7.5))))))) * 1.0), 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(86.37)))))), abs(0.0), 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), bool(true))), injectionSwitch.y)))) && true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(80.66)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8169.4636)), vec2(_GLF_FUZZED(3.3), (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y), _GLF_IDENTITY(bool(true), (bool(true)) || false))), injectionSwitch.y))) && true)) && true) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))))))))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), false || _GLF_IDENTITY((true && (false)), ! (! (_GLF_IDENTITY((true && (false)), true && (_GLF_IDENTITY((true && (false)), ((true && (false))) && true))))))))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))), ! _GLF_IDENTITY((! (bool(bool(false)))), (_GLF_IDENTITY((! (bool(bool(false)))), ((! (bool(bool(false))))) && true)) && true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), true))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), max(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), 1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))) - 0)) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
}
