#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
      barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0], max(_GLF_IDENTITY(false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0], (false ? _GLF_FUZZED(-38.89) : false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0])), false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(5637.7879), _GLF_IDENTITY(_GLF_FUZZED((false ? vec3(27.28, -6.7, -859.412).t : -176.421)), (_GLF_FUZZED((false ? vec3(27.28, -6.7, -859.412).t : -176.421))) + 0.0)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0], max(_GLF_IDENTITY(false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0], (false ? _GLF_FUZZED(-38.89) : false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0])), false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(5637.7879), _GLF_IDENTITY(_GLF_FUZZED((false ? vec3(27.28, -6.7, -859.412).t : -176.421)), (_GLF_FUZZED((false ? vec3(27.28, -6.7, -859.412).t : -176.421))) + 0.0)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))) && true)) || false)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0], max(_GLF_IDENTITY(false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0], (false ? _GLF_FUZZED(-38.89) : false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0])), false ? _GLF_FUZZED(0.8) : (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(5637.7879), _GLF_IDENTITY(_GLF_FUZZED((false ? vec3(27.28, -6.7, -859.412).t : -176.421)), (_GLF_FUZZED((false ? vec3(_GLF_IDENTITY(27.28, max(_GLF_IDENTITY(27.28, mix(float(_GLF_FUZZED(197.126)), float(27.28), bool(true))), _GLF_IDENTITY(27.28, mix(float(_GLF_FUZZED(7.9)), float(27.28), bool(true))))), -6.7, -859.412).t : -176.421))) + 0.0)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y)))))))) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], 1u, 0u), clamp(uvec3(gl_WorkGroupSize[0], 1u, 0u), uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(1u, max(1u, 1u)), 0u), uvec3(gl_WorkGroupSize[0], 1u, 0u)))), uint(uvec3(uint(_GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], 1u, 0u), clamp(uvec3(gl_WorkGroupSize[0], 1u, 0u), uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(1u, max(1u, 1u)), 0u), uvec3(gl_WorkGroupSize[0], 1u, 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID))) * uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY((gl_WorkGroupID.x) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), gl_WorkGroupID.x))), min((_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), (_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x))) | 0u), gl_WorkGroupID.x))), (_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), gl_WorkGroupID.x))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_IDENTITY((gl_WorkGroupID.x), ((gl_WorkGroupID.x)) | ((gl_WorkGroupID.x)))) | ((gl_WorkGroupID.x))) | (_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID)).x))), ((gl_WorkGroupID.x) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), gl_WorkGroupID.x))), uint(uvec2((_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), gl_WorkGroupID.x))), 1u)))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec3(0.0, log(1.0), 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec3(0.0, log(1.0), 1.0)))), (mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(float(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), min(float(float(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), float(float(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))))), vec3(0.0, log(1.0), 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec3(0.0, log(1.0), 1.0))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (1 | int(_GLF_ONE(1.0, injectionSwitch.y))) * (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (1))), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), (1) - 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), max((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, min(1, 1)))))))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), min(int(1), int(1)))))))), ((_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), max((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, min(1, 1)))))))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0)), 0 + ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(17103) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), (int(int(int(1)))) ^ 0))) | 0), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(-89245) : int(1))))) >> 0))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), min(int(1), int(1))))))))) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) | (_GLF_IDENTITY(0, min(0, 0)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))) : _GLF_FUZZED((33943 | _injected_loop_counter))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, 0 | (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y))) || false), true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), bool(bvec3(! (_GLF_IDENTITY(true, (true) && true)), false, false))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) / 1u))))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) ^ 0u)))) / 1u) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1) % subgroup_size), min(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1) % subgroup_size)) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1) % subgroup_size), (true ? ((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1) % subgroup_size) : _GLF_FUZZED(workgroup_size))))), ((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false), (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1677.9081)), vec2(_GLF_FUZZED(0.2), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), vec2(mat3((injectionSwitch), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, cos(0.0)), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(899.395))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, cos(0.0)), vec4(1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))[1], mix(_GLF_IDENTITY(float((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], sqrt(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) * (injectionSwitch[0])), injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])))[_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) + 0)]), max(_GLF_IDENTITY(float((injectionSwitch)[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), min(ivec2(1, 0), ivec2(1, 0)))))]), (false ? _GLF_FUZZED(-5.8) : _GLF_IDENTITY(float((injectionSwitch)[1]), clamp(float((injectionSwitch)[1]), float((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), float((injectionSwitch)[1]))))), _GLF_IDENTITY(float((injectionSwitch)[1]), float(_GLF_IDENTITY(float(float((injectionSwitch)[1])), clamp(float(float((injectionSwitch)[1])), float(float((injectionSwitch)[1])), _GLF_IDENTITY(float(float((injectionSwitch)[1])), (float(float((injectionSwitch)[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) ^ 0)))]))) - length(0.0)))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))))))), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))))))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))))))) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)), clamp(_GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))))))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))))))) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)), (true ? float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))))))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))))))) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)) : _GLF_FUZZED(404.592))), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))))))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))))))) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))))))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))))))) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-32.95, min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))), (false ? _GLF_FUZZED(42.72) : _GLF_IDENTITY(_GLF_IDENTITY(-32.95, clamp(_GLF_IDENTITY(-32.95, clamp(-32.95, -32.95, -32.95)), -32.95, -32.95)), _GLF_IDENTITY(min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95)))), (min(_GLF_IDENTITY(-32.95, (_GLF_IDENTITY(-32.95, min(-32.95, -32.95))) - 0.0), _GLF_IDENTITY(-32.95, float(float(-32.95))))) - 0.0)))))), float(_GLF_FUZZED(2.6)), bool(false)))), bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571))))), vec2(mat3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571))))), (vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571)))))) * mat2(1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0))))).x, injectionSwitch.x)) < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571))))), vec2(mat3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571))))), (vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571)))))) * mat2(1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0))))).x, injectionSwitch.x)) < injectionSwitch.y))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571))))), vec2(mat3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571))))), (vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(log(1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat3x4(0.6, -160.622, -48.71, -231.482, -7492.7540, -5.8, -2.1, -6426.1598, -48.33, -617.364, -5917.8318, 3341.6571)))))) * mat2(1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0))))).x, injectionSwitch.x)) < injectionSwitch.y))), false, false)))))))).y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, false), true)))))))), bool(bvec2(false, true))), _GLF_IDENTITY((false) || false, false || ((false) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))) || _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3((false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (bool(bvec3((false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-985.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-985.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-985.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y)))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) && true), true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y))))) && true), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(_GLF_IDENTITY(mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))))))) * (injectionSwitch)).y)), true)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(_GLF_IDENTITY(mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))))))) * (injectionSwitch)).y)), true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(_GLF_IDENTITY(mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))))))) * (injectionSwitch)).y)), true))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(_GLF_IDENTITY(mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y))))))) * (injectionSwitch)).y)), true))))), true)), true)))))))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(44.71)))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), float(_GLF_FUZZED(-9.0)), bool(false))))), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), float(_GLF_FUZZED(-9.0)), bool(false))))), true, true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, 0 | (1)) ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, min((0) | 0, (0) | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) + (0u << _GLF_IDENTITY(uint(7u), uint(7u))))], max(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), max(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) - 0u)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), max(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) - 0u)) >> 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), max(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)), 0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) - 0u)) >> 0u)))])), _GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), ((4) | (4)) - 0)), 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(! (bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true))))))))
      barrier();
     for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch))), min(_GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(5.7, 6.3)))))), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch))))), _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch))), vec2(0.0, 0.0) + (vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))))))) / vec2(1.0, 1.0))))).y))));
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 & 74612); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | _GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))), ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(ivec4(5, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec4(6, 1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), max(_GLF_IDENTITY(int(6), (int(6)) ^ 0), _GLF_IDENTITY(int(6), (int(6)) ^ 0))))), (0 >> _GLF_IDENTITY(int(6), int(6))), 1))))))) / 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), 0 | (int(5)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5), int(5))), 0 + (_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (1 ^ 0) * (0))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))).y)))) && true), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), mix(vec2(_GLF_FUZZED(-60.77), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))[0], _GLF_FUZZED(1516.4451)), bvec2(true, false))))).y)))) && true))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(mat2x3(mat2(1.0, 1.0, 1.0, 1.0))))) * (injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(mat2x3(mat2(1.0, 1.0, 1.0, 1.0))))) * (injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x))), (mat2(1.0)) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(mat2x3(mat2(1.0, 1.0, 1.0, 1.0))))) * (injectionSwitch)).x), float(_GLF_FUZZED(9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(102510u) >> -17565) & 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) / 1)))) ^ 1)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1))), 64, _GLF_IDENTITY(0, 0 ^ (0)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 0, true), bvec2(bvec3(bvec2(_injected_loop_counter != 0, true), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 0, true), bvec2(bvec3(bvec2(_injected_loop_counter != 0, true), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(subgroup_local_id + 1 < subgroup_size)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(4), int(ivec4(int(4), 0, 0, 1))) : _GLF_FUZZED(max(_injected_loop_counter, -11045)))))))) | (int(4))), int(4))))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - (0 | 0)), min(int(4), int(4))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))) << (_GLF_IDENTITY((0 | 0) | 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 | 0) | 0, ((0 | 0) | 0) ^ 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 | 0) | 0, ((0 | 0) | 0) ^ 0)), int(ivec3(~ (_GLF_IDENTITY((0 | 0) | 0, ((0 | 0) | 0) ^ 0)), 0, 1)))) + 0)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_2) : read_1)) == _GLF_IDENTITY(read_2, ~ (~ (read_2)))) + _GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY((true ? uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(_GLF_IDENTITY(read_2, 0u | (read_2))) : read_1)) == _GLF_IDENTITY(read_2, ~ (~ _GLF_IDENTITY((read_2), ((read_2)) | 0u)))) + 1 : _GLF_FUZZED(virtual_gid)), min(_GLF_IDENTITY((true ? uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(_GLF_IDENTITY(read_2, 0u | (read_2))) : read_1)) == _GLF_IDENTITY(read_2, ~ (~ _GLF_IDENTITY((read_2), ((read_2)) | 0u)))) + 1 : _GLF_FUZZED(virtual_gid)), ((true ? uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(_GLF_IDENTITY(read_2, 0u | (read_2))) : read_1)) == _GLF_IDENTITY(read_2, ~ (~ _GLF_IDENTITY((read_2), ((read_2)) | 0u)))) + 1 : _GLF_FUZZED(virtual_gid))) + 0u), _GLF_IDENTITY((true ? uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(_GLF_IDENTITY(read_2, 0u | (read_2))) : read_1)) == _GLF_IDENTITY(read_2, ~ (~ _GLF_IDENTITY((read_2), ((read_2)) | 0u)))) + 1 : _GLF_FUZZED(virtual_gid)), ((true ? uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(_GLF_IDENTITY(read_2, 0u | (read_2))) : read_1)) == _GLF_IDENTITY(read_2, ~ (~ _GLF_IDENTITY((read_2), ((read_2)) | 0u)))) + 1 : _GLF_FUZZED(virtual_gid))) * 1u)))), 4, 64, 4);
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) ^ 0)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-0.1), max(_GLF_IDENTITY(_GLF_FUZZED(-0.1), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-0.1), min(_GLF_FUZZED(-0.1), _GLF_FUZZED(-0.1))))), _GLF_FUZZED(-0.1)))), bvec2(true, false))), 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) && true))))))))) && true))))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))), false || (_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 | 1), ((1 | 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       subgroupAll(false);
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (read_1) << 0u) == _GLF_IDENTITY(read_2, uint(uint(read_2)))) + 1, 4, 64, 4);
       subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), bool(bvec2(! (_GLF_IDENTITY(true, (true) && true)), true)))))) && true), true && (_GLF_IDENTITY(true, (true) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), (true) && true), true && (_GLF_IDENTITY(true, (true) && true)))))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
