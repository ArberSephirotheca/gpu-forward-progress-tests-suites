#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 bvec2 _f0;
 float _f1;
} ;

struct _GLF_struct_24 {
 bvec2 _f0;
 mat4 _f1;
 float _f2;
 int _f3;
} ;

struct _GLF_struct_26 {
 bvec3 _f0;
 bvec2 _f1;
 _GLF_struct_24 _f2;
 _GLF_struct_25 _f3;
} ;

struct _GLF_struct_22 {
 bvec3 _f0;
} ;

struct _GLF_struct_21 {
 mat2 _f0;
 uvec2 _f1;
 bvec3 _f2;
 int _f3;
} ;

struct _GLF_struct_23 {
 uvec2 _f0;
 mat3x4 _f1;
 mat4x2 _f2;
 _GLF_struct_21 _f3;
 _GLF_struct_22 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_19 {
 uvec3 _f0;
 vec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_18 {
 mat2x4 _f0;
 uvec3 _f1;
 uvec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_17 {
 vec4 _f0;
 uvec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_19 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 bvec4 _f1;
 ivec4 _f2;
 mat3x2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_14 {
 mat4x3 _f0;
 mat2 _f1;
 uvec3 _f2;
 bvec2 _f3;
 mat2x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_13 {
 ivec3 _f0;
 mat4x2 _f1;
 mat4x3 _f2;
 ivec2 _f3;
 mat2x4 _f4;
 uint _f5;
 float _f6;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 _GLF_struct_13 _f1;
 vec4 _f2;
 bool _f3;
 mat4x3 _f4;
 _GLF_struct_14 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_27 {
 _GLF_struct_16 _f0;
 uint workgroup_id;
 _GLF_struct_20 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_26 _f3;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 mat2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_9 {
 bool _f0;
 ivec3 _f1;
 mat2 _f2;
 bool _f3;
 bvec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 _GLF_struct_9 _f1;
 ivec3 _f2;
 int _f3;
 uint read_1;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 bvec2 _f1;
 bool _f2;
 ivec3 _f3;
 bvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 mat3x4 _f1;
 vec3 _f2;
 mat4x3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 mat2x3 _f1;
 bool _f2;
 mat2x4 _f3;
 uint _f4;
 vec4 _f5;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 mat3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 mat4x2 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 _GLF_struct_11 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 mat2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 ivec3 _f1;
 ivec4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 uint _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat2x4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 bvec2 _f1;
 _GLF_struct_3 _f2;
 uint virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_16(mat3(1.0), _GLF_struct_13(ivec3(1), mat4x2(1.0), mat4x3(1.0), ivec2(1), mat2x4(1.0), 1u, 1.0), vec4(1.0), true, mat4x3(1.0), _GLF_struct_14(mat4x3(1.0), mat2(1.0), uvec3(1u), bvec2(true), mat2x3(1.0), mat3x4(1.0)), _GLF_struct_15(mat2x3(1.0), bvec4(true), ivec4(1), mat3x2(1.0), vec4(1.0))), gl_WorkGroupID.x, _GLF_struct_20(_GLF_struct_17(vec4(1.0), uvec3(1u), bvec3(true)), _GLF_struct_18(mat2x4(1.0), uvec3(1u), uvec4(1u), mat4(1.0)), _GLF_struct_19(uvec3(1u), vec2(1.0), uvec2(1u)), ivec3(1)), _GLF_struct_23(uvec2(1u), mat3x4(1.0), mat4x2(1.0), _GLF_struct_21(mat2(1.0), uvec2(1u), bvec3(true), 1), _GLF_struct_22(bvec3(true)), bvec2(true)), _GLF_struct_26(bvec3(true), bvec2(true), _GLF_struct_24(bvec2(true), mat4(1.0), 1.0, 1), _GLF_struct_25(bvec2(true), 1.0)));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_27.workgroup_id;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat3x4(1.0), bvec2(true), _GLF_struct_3(_GLF_struct_0(ivec2(1)), 1u, _GLF_struct_1(uvec2(1u), ivec3(1), ivec4(1), vec3(1.0)), _GLF_struct_2(mat2x4(1.0), mat2(1.0), vec4(1.0)), mat2x4(1.0), vec3(1.0)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id);
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_8(mat2x4(1.0), mat3(1.0), _GLF_struct_5(ivec4(1), mat2x3(1.0), true, mat2x4(1.0), 1u, vec4(1.0)), _GLF_struct_6(mat4x3(1.0), mat3x4(1.0), vec3(1.0), mat4x3(1.0), ivec2(1)), mat4x2(1.0), _GLF_struct_7(ivec4(1), bvec2(true), true, ivec3(1), bvec3(true), vec2(1.0))), _GLF_struct_11(bvec4(true), _GLF_struct_9(true, ivec3(1), mat2(1.0), true, bvec3(true), bvec4(true)), ivec3(1), 1, atomicLoad(buf[_GLF_struct_replacement_4.virtual_gid], 4, 64, 0), _GLF_struct_10(mat4x2(1.0), ivec3(1), mat3x2(1.0), mat2(1.0), bvec2(true))), mat3(1.0));
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_4.virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(read_2))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_12._f1.read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_12._f1.read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
  }
}
