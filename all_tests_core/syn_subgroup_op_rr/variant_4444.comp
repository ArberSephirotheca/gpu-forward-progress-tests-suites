#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base;
 uvec4 GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2;
 uvec4 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid;
 uvec3 GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
 do
  {
   GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2;
 uvec4 GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid;
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_size;
 GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2.xyz = GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0)))); _injected_loop_counter ++)
    {
     return;
    }
  }
 GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2.xyz;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (_GLF_IDENTITY(0, 0 | (0)) << _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (_GLF_IDENTITY(0, 0 | (0)) << _GLF_IDENTITY(int(6), int(6))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (_GLF_IDENTITY(0, 0 | (0)) << _GLF_IDENTITY(int(6), int(6))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0)), (mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0))) * mat3(1.0)))) > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0)), (mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0))) * mat3(1.0)))) > injectionSwitch.y))))))), (! ((! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0)), (mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0))) * mat3(1.0)))) > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)), false)))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)), false))))))))))));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (-57124 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    continue;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     _GLF_IDENTITY(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz.y = subgroup_id, (GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz.y = subgroup_id) - 0u);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(30.68)), float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(392.262, 3803.7297)) : injectionSwitch)).y), bool(true)))))));
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.z = _GLF_IDENTITY(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid, (_GLF_IDENTITY(true ? GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid : _GLF_FUZZED(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid), clamp(true ? GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid : _GLF_FUZZED(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid), true ? GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid : _GLF_FUZZED(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid), _GLF_IDENTITY(true ? GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid : _GLF_FUZZED(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid), (true ? _GLF_IDENTITY(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid)) : _GLF_FUZZED(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid)) - uvec4(0u, 0u, 0u, 0u)))))).xyz.y;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.w = subgroup_local_id;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), injectionSwitch)).y)))) || false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), true)), ! (! (bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), true)))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(false || (bool(bool(true))), (false || (bool(bool(true)))) && true)))))))
                    {
                     return;
                     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   break;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false))))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4) / _GLF_IDENTITY(1, (0 ^ 0) | (_GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(int(ivec2((4) / _GLF_IDENTITY(1, (_GLF_IDENTITY(0, (0 | 0) ^ (_GLF_IDENTITY(0, min(0, 0)))) ^ 0) | (_GLF_IDENTITY(1, (1) / 1))), (0 ^ 1))), ~ _GLF_IDENTITY((~ (int(ivec2((4) / _GLF_IDENTITY(1, (0 ^ 0) | (_GLF_IDENTITY(1, (1) / 1))), (0 ^ 1))))), ((~ (int(ivec2((4) / _GLF_IDENTITY(1, (0 ^ 0) | (_GLF_IDENTITY(1, (1) / 1))), (0 ^ 1)))))) ^ 0))))), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)))))) && true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)) | (gl_NumWorkGroups.x))));
 GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.x = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.y = GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((-35655 ^ (-51613))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (3)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-64413) : _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (_GLF_IDENTITY(true, ! (! (true))) ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, max((0) << 0, _GLF_IDENTITY((0) << 0, (false ? _GLF_FUZZED(-57789) : (0) << 0)))))) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, _GLF_IDENTITY((343) | 0, ((343) | 0) | ((343) | 0)))), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(2), int(2))) | (0))) ^ (0 << _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), (_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))) << 0)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), ((~ (1))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(_GLF_IDENTITY(0, (0) >> 0), 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) << 0)) ^ 0))))), (_GLF_IDENTITY(int(ivec4(0, 1, _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(_GLF_IDENTITY(0, (0) >> 0), 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ ((0)), (~ ((0))) >> 0))) ^ 0), (0) << 0)) ^ 0)))))) + 0) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1))), (false ? _GLF_FUZZED(-64413) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(_GLF_IDENTITY(45537, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 45537 : _GLF_FUZZED(16958))))))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) ^ 0))))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0), max(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))), _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))) ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (int(1)) - 0))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, _GLF_IDENTITY((343) | 0, 1 * (_GLF_IDENTITY((343) | 0, max(_GLF_IDENTITY((343) | 0, ((343) | 0) + 0), (343) | 0)))))), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0)) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0))), 1, _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) << 0)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, (0) << 0))), 0 ^ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, (0) << 0))), (~ ((_GLF_IDENTITY(0, (0) << 0)))) | (~ ((_GLF_IDENTITY(0, (0) << 0))))))))) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(_GLF_IDENTITY(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)), clamp(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)), ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)), _GLF_IDENTITY(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)), (false ? _GLF_FUZZED(ivec4(76282, -81956, 84138, -94821)) : ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), (_GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))) / 1)))))), 0, 1, 1))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0)), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0))) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0))))), (true ? int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(343, (343) | 0), clamp(_GLF_IDENTITY(343, (343) | 0), _GLF_IDENTITY(343, (343) | 0), _GLF_IDENTITY(343, (343) | 0)))), ~ (~ (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), min(_GLF_IDENTITY((~ (1)), ((~ (1))) * 1), (~ (1)))))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ _GLF_IDENTITY(0, (0) >> 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), int(ivec3(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0)), 0, 0)))) ^ 0)) * 1))))) ^ 0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), (true ? _GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), max(int(ivec4(0, 1, 1, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), min(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)))))))), int(ivec4(0, 1, 1, _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) << 0)), ((_GLF_IDENTITY(0, (0) << 0))) >> 0) ^ 0))))) : _GLF_FUZZED(45537)))) : _GLF_FUZZED(_GLF_IDENTITY(343, (343) | 0))))))), 0, 1, 1)))))))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(53588, (53588) | (53588)) & 0)); _injected_loop_counter --)
      {
       GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.x = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) << uvec4(0u, 0u, 0u, 0u)))), (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) << uvec4(0u, 0u, 0u, 0u)).y;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.z = workgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), false))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz.z = _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.z, ~ (~ (GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.z)));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.y = workgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  return;
 uint workgroup_base = GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz.z * _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid, (GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid) ^ uvec4(0u, 0u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u)).xyz.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.z = workgroup_base;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (false))));
 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.x = GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5646.1441 / 1.5)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), (mat2(1.0) * ((injectionSwitch))) * mat2(1.0)))[0], _GLF_FUZZED((37.49 * 342.866))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        continue;
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, 0 + (0)) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.x + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id) / uvec4(1u, 1u, 1u, 1u)), GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id)).z * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << (0u | 0u), ((subgroup_size) << (0u | 0u)) | ((subgroup_size) << (0u | 0u)))) + GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.w;
 uint next_virtual_gid = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.x + GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.z * subgroup_size + ((GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.w + 1) % subgroup_size);
 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(false)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.w;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.w = GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false, ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false) || false))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false, ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false) || false)))) && true) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, max(0, 0))), (_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, max(0, 0))), ((0) | (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)) | (_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, max(0, 0))), int(ivec3(_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, max(0, 0))), ((0) | (_GLF_IDENTITY(0, max(0, 0)))) - 0), 1, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9605.0424)))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false))))), false))))), (false) || _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))), (bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))) && true))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(26.21) : injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(26.21) : injectionSwitch.y)))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(26.21) : injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(26.21) : injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))))
                break;
              }
             break;
            }
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
    {
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) >> 0))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true), true, false))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1)))))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 << _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0), 1 << _GLF_IDENTITY(int(1), int(1)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) >> 0)))); _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 | 1), int(int((1 | 1))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(buf[GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.w], uint(1), 4, 64, 4);
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.y = read_1;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 & int(163898u)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1) + (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z = GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.y, (true ? GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z = GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_base.y : _GLF_FUZZED(subgroup_local_id)));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      return;
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))), bool(bvec4((false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec4((false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), true, false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1957.7388)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), false, true, _GLF_IDENTITY(true, false || (true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), true, false)))), false, false, false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ((true) && true) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz.x = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) | uvec4(0u, 0u, 0u, 0u)).z, GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z));
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2.w = read_2;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
  }
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w = _GLF_IDENTITY(GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2, uvec4(GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2[0], GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2[1], GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2[2], _GLF_IDENTITY(GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2[3], 0u + (GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizeread_2[3])))).w;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), min((0 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), int(ivec2((0 << _GLF_IDENTITY(int(1), int(1))), 0))))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), min((0 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), int(ivec2((0 << _GLF_IDENTITY(int(1), int(1))), 0)))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))) & -28317); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-58.47)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), mix(float(_GLF_FUZZED((false ? -0.1 : -533.819))), float(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), bool(true))), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), bool(bvec4(true, false, true, false))), (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-92.91) : _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(faceforward(654.194, -5.9, -9738.3621)) : 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0), (true ? mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(faceforward(654.194, -5.9, -9738.3621)) : 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0) : _GLF_FUZZED(mat4(-5680.0629, 9.0, 4.0, 0.0, 9995.0842, 1500.4245, 898.310, -6.7, 0.3, 149.998, 55.56, 74.14, 3127.7008, -7420.4873, 7291.4220, -7.9)))))))) > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (false)) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false || (false)) && true, true, false), bvec3(bvec4(bvec3((false || (false)) && true, true, false), false)))), false || (bool(_GLF_IDENTITY(bvec3((false || (false)) && true, true, false), bvec3(bvec4(bvec3((false || (false)) && true, true, false), false))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (false)) && true))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (false)) && true))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (false)) && true)))))))) || false)))))))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) || (_GLF_IDENTITY(false, false || (false))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))))) && true), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) || (_GLF_IDENTITY(false, false || (false))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))))) && true), false, false))))))) || _GLF_IDENTITY(false, (false) && true)))) || false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false))))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))))) && true)))))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (false))))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) && true)) && true))), false, false)))) || false))) || false)))), true, false, false)), true && (bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (false)) && true)))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false || (false), (false || (false)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false || (false), (false || (false)) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(false || (false), (false || (false)) && true))), true, true, false))))))))))))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), false))))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))), false, true)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6413.0044, -7896.6515)))))).x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))))))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))) && true))), false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, false || (false)))))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(false, false || (false))))))) && true))), false, false)))))))))) || false))) || false)))), true, false, false))))) && true))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter))))) : _GLF_FUZZED(_injected_loop_counter))) != 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)), true, true, true)))); _injected_loop_counter --)
        {
         GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.y = GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.w + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.w], uint(_GLF_IDENTITY(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid, (true ? GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(uvec4(111792u, 191093u, 118632u, 11082u)), (_GLF_FUZZED(uvec4(111792u, 191093u, _GLF_IDENTITY(118632u, 0u + (118632u)), 11082u))) / uvec4(1u, 1u, 1u, 1u)))).xyz.x == GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id.y) + 1, 4, 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (67703 & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.w], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz, uvec3(_GLF_IDENTITY(uvec3(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz), (uvec3(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz)) + uvec3(0u, 0u, 0u)))).x == _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id) << uvec4(0u, 0u, 0u, 0u)).y, uint(uint(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id) << uvec4(0u, 0u, 0u, 0u)).y)))), (uint(_GLF_IDENTITY(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz, uvec3(_GLF_IDENTITY(uvec3(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz), (uvec3(GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_1subgroup_idworkgroup_sizenext_virtual_gid.xyz)) + uvec3(0u, 0u, 0u)))).x == _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id) << uvec4(0u, 0u, 0u, 0u)).y, uint(uint(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_17num_workgroupread_2subgroup_idsubgroup_local_id) << uvec4(0u, 0u, 0u, 0u)).y))))) / 1u) + 1, 4, 64, 4);
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))), false))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     do
      {
       do
        {
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
}
