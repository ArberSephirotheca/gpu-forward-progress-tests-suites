#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), false || (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), ! (! ((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, cos(0.0)), vec3(1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, cos(0.0)), vec3(1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), min(dot(vec3(0.0, 1.0, cos(0.0)), vec3(1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(0.0, 1.0, cos(0.0)), vec3(1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))))))))))))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-176.053, -79.92)) : injectionSwitch))) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))) || false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        return;
       return;
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.8))) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false))))))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), max(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), max(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u + (workgroup_size), (0u + (workgroup_size)) >> 0u)), (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)))))))), (_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), max(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))), ((_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)))) / 1u))))))) | (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), max(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))))))), max(clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), max(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))))))), clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), max(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))))))))))))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x4(_GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))) * 1u) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max((subgroup_id), (subgroup_id))), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(num_workgroup)))))))) * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true, false, true), false)), false)))))) ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)))))) * 1u), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))))))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(uint(uint((subgroup_id))), _GLF_IDENTITY(uint(uvec3(uint(uint((subgroup_id))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), 0u ^ (uint(uvec3(uint(uint((subgroup_id))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> 0u)) ^ 0u), clamp(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)), ~ (subgroup_id), ~ (subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id)))) >> 0u)) / 1u, 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id)))) >> 0u)) / 1u))))), (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), min(uvec2(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (subgroup_id)))) >> 0u)), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (subgroup_id)))) >> 0u)), 1u))) / 1u))), (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), uvec2(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id), (uint(subgroup_id)) / 1u)), ~ (~ (uint(_GLF_IDENTITY(uint(subgroup_id), (uint(subgroup_id)) / 1u))))))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))), (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id)))) >> 0u)) / 1u))), (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), (true ? 0u | (subgroup_size) : _GLF_FUZZED(atomicMin(workgroup_size, subgroup_id))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(clamp(subgroup_id, subgroup_id, subgroup_id), max(clamp(subgroup_id, subgroup_id, subgroup_id), _GLF_IDENTITY(clamp(subgroup_id, subgroup_id, subgroup_id), (clamp(subgroup_id, subgroup_id, subgroup_id)) - 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))) * subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), max(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(4u), uint(4u))), max((0u << _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(4u), uint(4u))), clamp((0u << _GLF_IDENTITY(uint(4u), uint(4u))), (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(atomicMin(num_workgroup, workgroup_size))))), _GLF_IDENTITY(uint(4u), (uint(4u)) | 0u))), (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), min(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u))))))))))) ^ (subgroup_id)))) * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id), (false ? _GLF_FUZZED(num_workgroup) : uint(subgroup_id)))), 0u ^ (uint(_GLF_IDENTITY(uint(subgroup_id), (false ? _GLF_FUZZED(num_workgroup) : uint(subgroup_id))))))) * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size))) << 0u), (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) | (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), clamp(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), max(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(4u, (4u) ^ 0u))), _GLF_IDENTITY(4u, (4u) ^ 0u)))))))))), uint(_GLF_IDENTITY(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) | (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), clamp(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), max(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(4u, (4u) ^ 0u))), _GLF_IDENTITY(4u, (4u) ^ 0u))))))))))), max(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) | (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), clamp(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), max(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(4u, (4u) ^ 0u))), _GLF_IDENTITY(4u, (4u) ^ 0u))))))))))), _GLF_IDENTITY(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) | (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), clamp(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), max(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(4u, (4u) ^ 0u))), _GLF_IDENTITY(4u, (4u) ^ 0u))))))))))), (uint(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) | (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), clamp(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) ^ 0u), max(_GLF_IDENTITY(4u, (4u) ^ 0u), _GLF_IDENTITY(4u, (4u) ^ 0u))), _GLF_IDENTITY(4u, (4u) ^ 0u)))))))))))) ^ 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(subgroup_id * subgroup_size, 1u))))), subgroup_id * subgroup_size)), min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) ^ (0u ^ 0u)) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (0u ^ 1u) * (subgroup_id))))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u))))) - 0u))) * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), 1u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) : _GLF_FUZZED(subgroup_local_id))))))) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), _GLF_IDENTITY(~ (subgroup_id), ~ (~ (~ (subgroup_id)))))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u, uint(uvec3((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u, 1u, 1u))))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), min(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(subgroup_id, 1u, 1u), uvec3(_GLF_IDENTITY(uvec3(uvec3(subgroup_id, 1u, 1u)), max(uvec3(uvec3(subgroup_id, 1u, 1u)), uvec3(uvec3(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u, 1u)))))))) * subgroup_size, subgroup_id * subgroup_size))) ^ 0u)), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (subgroup_id))))) * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u, clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size)))))) ^ 0u, max((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size)))))) ^ 0u, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size)))))) ^ 0u)), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) * 1u)))))) ^ 0u)))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id)))), ((_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) | ((_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size)) : _GLF_FUZZED(subgroup_id), uint(uvec4(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) * 1u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))) * subgroup_size : _GLF_FUZZED(subgroup_id), min(true ? _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_base)))) << (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id), true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id), min(true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u)))), true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))) ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id), true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id)))))))))), 0u, 0u, 1u))))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), _GLF_IDENTITY(~ (subgroup_id), 0u | (~ (subgroup_id))))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), _GLF_IDENTITY(~ (subgroup_id), 0u | (~ (subgroup_id))))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) - 0u))), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u)) / 1u))))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u)), 0u), min(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), (subgroup_local_id) | (subgroup_local_id)), 0u))), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))) >> 0u), _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ (150005u & 0u)), 0u, 0u, 0u)), (false ? _GLF_FUZZED(subgroup_local_id) : uint(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ (150005u & 0u)), 0u, 0u, 0u)))))), 0u)) | uvec2(0u, 0u))));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) | 0u), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, true))))))), (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, true)))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, true))))))) || false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(vec2(-4183.2179, 1.4).r), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(3399.7263)), bvec2(true, false))) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (max(injectionSwitch.x, injectionSwitch.x)) / 1.0)))), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false))))) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) ^ 0u) + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) ^ 0u) + 1) << 0u), subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)), subgroup_local_id + 1)))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) * 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, false || (false))) && ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false))))))))) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec3(true, false, false))) && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) || false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))), bool(bvec3(false, true, false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, (read_2) | (read_2)), read_2, _GLF_IDENTITY(read_2, 0u ^ (read_2))))) + 1, 4, _GLF_IDENTITY(64, (64) << 0), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), true)), (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2), min((read_2), (read_2))) ^ _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(! (! (read_1 == read_2)), bool(bool(_GLF_IDENTITY(! (! (read_1 == _GLF_IDENTITY(read_2, min(read_2, read_2)))), true && (! (! (read_1 == read_2))))))))) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! _GLF_IDENTITY(((false)), true && (((false)))))) && true)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
