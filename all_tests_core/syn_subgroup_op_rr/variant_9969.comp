#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(5.0, 2.6, 7.4, 4.2, -6.7, -5.0, 942.948, 994.927, -7.4, -2.8, 727.418, 4062.4460)))))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.7)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))))))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u), min(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u), uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u))) | (uvec3(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u))))), min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u))))), (gl_NumWorkGroups) >> _GLF_IDENTITY((uvec3(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u))))))), 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))), (false ? _GLF_FUZZED(uvec3(36935u, 113320u, 58281u)) : (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u))))))))).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0 | (_injected_loop_counter), (0 | (_injected_loop_counter)) | 0)) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> (29038 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 >> _GLF_IDENTITY(int(8), int(8))))) | (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(3), int(3))) | 0)); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))))))
              {
               barrier();
              }
            }
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (true ? _GLF_IDENTITY(int(1), (int(1)) * 1) : _GLF_FUZZED(_injected_loop_counter))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true), bvec3(bvec4(bvec3(bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true), false))))))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2485.4650)), bool(false))) > injectionSwitch.y))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))))) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(uvec4(((subgroup_local_id + 1) % subgroup_size), 1u, 1u, 1u)))) >> 0u)), uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))) | (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u))) % subgroup_size)))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), bool(bvec4(_GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), ! (! (bool(bool(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))))))), true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) && true), true))), (injectionSwitch.x > injectionSwitch.y)), false))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), max((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > injectionSwitch.y))) || false)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7)))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))))) < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), true)))))))))), (bool(bvec4(false, true, false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) || false)))))) && true))) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec4(false, true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y))))))), ((bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y))))))), ((bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY((bool(bvec4(false, true, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y))))))), ((bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6707.4512)), bool(false))) + (injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)), false, true))))))))
      barrier();
    }
   else
    {
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
   barrier();
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) ^ _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY((true ? int(_GLF_IDENTITY(7, (7) ^ 0)) : _GLF_FUZZED(58776)), clamp((true ? int(_GLF_IDENTITY(7, _GLF_IDENTITY((7) ^ 0, ((7) ^ 0) >> 0))) : _GLF_FUZZED(58776)), (true ? int(_GLF_IDENTITY(7, (7) ^ 0)) : _GLF_FUZZED(_GLF_IDENTITY(58776, ~ (~ (58776))))), (true ? int(_GLF_IDENTITY(7, (7) ^ 0)) : _GLF_FUZZED(58776))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false || (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), true, _GLF_IDENTITY(false, bool(bvec2(false, false)))))))), true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)), false || (bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true))))))))), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, abs(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, round(length(normalize(1.0))), 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sinh(-340.496)) : 1.0)), 1.0, 0.0))), 1.0)), 1.0)))))).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false))), true, _GLF_IDENTITY(false, bool(bvec2(false, false)))))))), true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(inversesqrt(vec2(3005.4082, -78.63))) : injectionSwitch)).x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec4(8, 1, 0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(1))), (int(_GLF_IDENTITY(int(1), int(1)))) / 1)), max(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(1))), (int(_GLF_IDENTITY(int(1), int(1)))) / 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(1))), (int(_GLF_IDENTITY(int(1), int(1)))) / 1)), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(1))), (int(_GLF_IDENTITY(int(1), int(1)))) / 1))) - 0))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))))))))) >> 0) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> 0)), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 & 63469); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0) < subgroup_size, bool(bvec2(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! (! (subgroup_local_id + 1 < subgroup_size))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), (true) || false), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) || false), true))) && true))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, true)))), (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(read_1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, min(0, 0))), 1, 0, 0))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), max(_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 >> _GLF_IDENTITY(int(5), int(5))))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter)))))))))) >> _GLF_IDENTITY(int(1), int(1))), 0)), clamp(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0))))) >> 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(0, ~ (~ (0))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) << 0, ((1) << 0) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))), clamp((_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))))) << 0) << 0)) - 0)))), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), clamp(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)))) : _GLF_FUZZED(findLSB(48768))))))), 0)))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | 0))), _GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, (1) << 0))), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 | ((1))) << 0), 1, 0, 0))), _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) + 0))))) >> _GLF_IDENTITY(int(1), int(1))), ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0))) ^ (((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))))), 0)), clamp(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, (1) << 0))), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, max(5, 5))) | (5))), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0))) >> 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) << 0) << 0)) - 0)))), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), ~ (~ (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0))))), clamp(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0)), 0))), ((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(1), int(1))), 0))) >> 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))), max(int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))), ((_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) - 0)))) - 0), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) << 0) << 0)) - 0))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (_GLF_IDENTITY(1, clamp(1, 1, 1))) : _GLF_FUZZED(2153)))) << 0) << 0, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153))), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) ^ _GLF_IDENTITY(0, (0) * 1))) << 0) << 0), (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, 21911)) : (_GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153))), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) ^ 0)) << 0) << 0)))))) - 0)))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) << 0) << 0, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_IDENTITY((1), (true ? _GLF_IDENTITY((1), max((1), (1))) : _GLF_FUZZED(2153))), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) ^ 0)) << 0) << 0), (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, 21911)) : (_GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153))), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(2153)))) ^ 0)) << 0) << 0)))))) - 0))))) | 0))), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0))))) >> 0) : _GLF_FUZZED(71922))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0))) | (int(_GLF_IDENTITY(1, (1) << 0))), int(ivec2(_GLF_IDENTITY((int(_GLF_IDENTITY(1, (1) << 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(1, (1) << 0))))), int(int((int(_GLF_IDENTITY(1, (1) << 0))) | (int(_GLF_IDENTITY(1, (1) << 0)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0))))))), 0))))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), clamp(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(_injected_loop_counter))), int(1))) * (_GLF_IDENTITY(1, (1) << 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) ^ 0), ((_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), int(_GLF_IDENTITY(ivec4((~ (0)), 1, 0, (0 ^ 1)), clamp(ivec4((~ (0)), 1, _GLF_IDENTITY(0, ~ (~ (0))), (0 ^ 1)), ivec4((~ (0)), 1, 0, (0 ^ 1)), ivec4((~ (0)), 1, 0, _GLF_IDENTITY((0 ^ 1), clamp((0 ^ 1), (0 ^ 1), (0 ^ 1))))))))) >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), ((1)) / _GLF_IDENTITY(1, (1) - 0)), _GLF_IDENTITY((1), ((1)) | ((1))))) << 0), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0))))) | 0)), 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) / 1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((5) / 1, 0, 0), ~ (~ (ivec3((5) / 1, 0, 0))))), clamp(int(_GLF_IDENTITY(ivec3((5) / 1, 0, 0), ~ (~ (ivec3((5) / 1, 0, 0))))), int(_GLF_IDENTITY(ivec3((5) / 1, 0, 0), ~ (~ (ivec3((5) / 1, 0, 0))))), int(_GLF_IDENTITY(ivec3((5) / 1, 0, 0), ~ (~ (ivec3((5) / 1, 0, 0)))))))))))) >> _GLF_IDENTITY(int(1), int(1))), 0), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (1) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(565.849)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(true)))))), (1) << 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (1) << 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (1) << 0))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1) << 0, ((1) << 0) / 1)), (~ (_GLF_IDENTITY((1) << 0, ((1) << 0) / 1))) >> (1 ^ 1))))), max(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 1 * (_GLF_IDENTITY(1, (1) << 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), 0 ^ (~ (~ (1))))), 0, 0))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), 0 | (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))))) >> _GLF_IDENTITY(int(1), int(1))), 0)) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)))), clamp(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, _GLF_IDENTITY(((1) << 0) << (_GLF_IDENTITY(0 & 32957, (_GLF_IDENTITY(0 & 32957, (_GLF_IDENTITY(0 & 32957, int(ivec2(0 & 32957, 1)))) - 0)) ^ 0)), _GLF_IDENTITY((((1) << 0) << (0 & 32957)) >> 0, 0 | ((((1) << 0) << (0 & 32957)) >> 0))))), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / int(_GLF_ONE(1.0, injectionSwitch.y))) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(0, min(0, 0)) ^ (_GLF_IDENTITY(5, min(5, 5))))), (int(5)) | (int(5))), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), _GLF_IDENTITY((int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), 0, 0))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))) ^ 0)), 0))) >> 0, ((int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), 0, 0))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), min(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))), int(1)), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), int(1))) ^ 0)), 0))) >> 0) + 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), min((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), 0 + (~ (_GLF_IDENTITY(int(5), int(5)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 >> _GLF_IDENTITY(int(5), int(5)))), 0 >> _GLF_IDENTITY(int(5), int(5)))), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)))))))) >> 0), clamp(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), min((0 >> _GLF_IDENTITY(int(5), int(5))), (0 >> _GLF_IDENTITY(int(5), int(5)))))) >> 0), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), min((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) ^ 0)) / 1)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), int(5)))))) >> 0, ((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), min((0 >> _GLF_IDENTITY(int(5), int(5))), (0 >> _GLF_IDENTITY(int(5), int(5)))))) >> 0) ^ 0)), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), min((0 >> _GLF_IDENTITY(int(5), int(5))), (0 >> _GLF_IDENTITY(int(5), int(5)))))) >> 0))) >> _GLF_IDENTITY(int(1), int(1))), 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(50401)))) << 0), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(_GLF_IDENTITY(1, (1) - 0)))))), 0)))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, (1) << 0), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, ((1) << 0) >> 0)))), ((_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59389) : 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(5))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))))))))), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)) / 1, clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)) / 1, ((_GLF_IDENTITY(0, (0) >> 0)) / 1) - 0), (_GLF_IDENTITY(0, (0) >> 0)) / 1, (_GLF_IDENTITY(0, (0) >> 0)) / 1)))), (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(1), ivec3(1))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(1, (1) << 0))), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(5)), (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, 0))))))) + (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(5))))) >> _GLF_IDENTITY(int(1), int(1))), 0)))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(1, (1) << 0))), ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))) ^ 0, 0 | ((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, (1 | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))) : 5))) ^ 0)))), int(5))) >> _GLF_IDENTITY(int(1), int(1))), 0), (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(1), ivec3(1))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, (0) / 1)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) | ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), max((int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(15296) : (int(1)))))) | (int(1))), int(1)))) << 0))))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(1, (1) << 0))), ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ _GLF_IDENTITY(0, min(0, 0)))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec4(_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(38470) : _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) ^ 0)) ^ 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0))), int(1))), 0))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) >> 0), (1))) << 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) >> 0), (1))) << 0 : _GLF_FUZZED(ivec3(-3958, -31781, 61691).s)))), ((0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5))))) >> _GLF_IDENTITY(int(1), int(1))), 0)), int(ivec3(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec2(0, 0)))), ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), int(1))), 0))))) | 0)))), 4, 64, 4);
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   subgroupAll(false);
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                      barrier();
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, true)), ! _GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, true)))), false || ((! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, true))))))))));
                    }
                  }
                 barrier();
                }
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), mix(vec2(_GLF_FUZZED(0.0), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))[0], _GLF_FUZZED(834.967)), bvec2(true, false))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), mix(vec2(_GLF_FUZZED(0.0), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))[0], _GLF_FUZZED(834.967)), bvec2(true, false))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), mix(vec2(_GLF_FUZZED(0.0), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))[0], _GLF_FUZZED(834.967)), bvec2(true, false))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y : _GLF_FUZZED(-20.06))))), (injectionSwitch.y) * 1.0)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (4118 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = ((1 ^ 1) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ ((7377 & -29135) & 0))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, _GLF_IDENTITY(4, 1 * (4)), _GLF_IDENTITY(64, (64) | (64)), 4);
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 subgroupAll(true);
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-31.35)), float(injectionSwitch[1]), bool(true))))).y))))
                      {
                       do
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (94498 & 0)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))), ! (! ((! _GLF_IDENTITY((false), ((false)) && true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 if(_GLF_DEAD(false))
  barrier();
}
