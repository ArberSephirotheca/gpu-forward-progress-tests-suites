#version 460
struct _GLF_struct_1 {
 mat4x3 _f0;
} ;

struct _GLF_struct_0 {
 uint _f0;
 mat4 _f1;
 mat2 _f2;
 int _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 vec3 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 uint workgroup_size;
 _GLF_struct_2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec2(1.0), gl_WorkGroupSize.x, _GLF_struct_2(_GLF_struct_0(1u, mat4(1.0), mat2(1.0), 1), mat4x3(1.0), mat2x4(1.0), vec3(1.0), _GLF_struct_1(mat4x3(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z = workgroup_id;
 uint workgroup_base = _GLF_struct_replacement_3.workgroup_size * GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z;
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y = workgroup_base;
 uint subgroup_base = subgroup_id * subgroup_size;
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x = subgroup_base;
 uint virtual_gid = GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x + subgroup_local_id;
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
