#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 uvec3 _f0;
 uvec3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 ivec4 _f1;
 float _f2;
 float _f3;
 ivec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 bvec3 _f1;
 ivec4 _f2;
 uint subgroup_local_id;
 ivec4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 mat2x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 mat4 _f1;
 mat4 _f2;
 vec3 _f3;
 uvec2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 vec3 _f1;
 mat4x2 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 mat2x3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_11 {
 _GLF_struct_4 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_8 _f2;
 bool _f3;
 bool _f4;
 _GLF_struct_10 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_0 {
 uint workgroup_base;
 mat2x4 _f0;
 bvec4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_4(mat3x2(1.0), _GLF_struct_1(mat3x2(1.0), vec3(1.0), mat4x2(1.0), mat3x2(1.0), mat2x3(1.0), mat2x3(1.0), bvec4(true)), _GLF_struct_2(bvec4(true), mat4(1.0), mat4(1.0), vec3(_GLF_IDENTITY(1.0, (1.0) + 0.0)), uvec2(1u), bvec4(true)), _GLF_struct_3(uvec2(1u), mat2x4(1.0), ivec4(1))), _GLF_struct_6(_GLF_struct_5(mat4(1.0), bvec3(true), ivec4(1), gl_SubgroupInvocationID, ivec4(1), mat4(1.0)), ivec4(1)), _GLF_struct_8(_GLF_struct_7(mat2x4(1.0), ivec4(1), 1.0, 1.0, ivec2(1), uvec3(1u))), true, true, _GLF_struct_10(_GLF_struct_9(uvec3(_GLF_IDENTITY(1u, (1u) | (1u))), uvec3(1u), vec4(1.0)), mat4(1.0)), mat3(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(workgroup_size * workgroup_id, mat2x4(1.0), bvec4(true));
 uint virtual_gid = _GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_11._f1._f0.subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_11._f1._f0.subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
