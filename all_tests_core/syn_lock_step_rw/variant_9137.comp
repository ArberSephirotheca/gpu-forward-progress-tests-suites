#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)))))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), false))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (51255 & 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), ((false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 1.0, 0.0, 1.0))), (injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(7.4), float(mat4x3(_GLF_FUZZED(7.4), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)), (false ? _GLF_FUZZED((-948.281)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(7.4), float(mat4x3(_GLF_FUZZED(7.4), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(_GLF_FUZZED(7.4), float(mat4x3(_GLF_FUZZED(7.4), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_FUZZED(7.4), float(mat4x3(_GLF_FUZZED(7.4), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_FUZZED(7.4), float(mat4x3(_GLF_FUZZED(7.4), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))), injectionSwitch.x)))) > injectionSwitch.y)))) && true))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || _GLF_IDENTITY(false, true && (false)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), ! (! (bool(bvec3(bool(false), false, true)))))))), _GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false), false || ((false))) || false))))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) && true), true, false)))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_4_1_1_13readsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
  barrier();
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(12985)))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), clamp((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), 0 | ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | (0))) | (0)), (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))) + 0), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), 0 | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) << 0)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | (0))) | (0)) : _GLF_FUZZED(_injected_loop_counter)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), clamp((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), 0 | ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | (0))) | (0)), (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))) + 0), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), 0 | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) << 0)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | (0))) | (0)) : _GLF_FUZZED(_injected_loop_counter)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), clamp((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter)))))), 0 | ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | (0))) | (0)), (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), min((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), int(ivec4((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), 1, 0, 1))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), 0 | (_GLF_FUZZED(_injected_loop_counter))))))) + 0), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), 0 | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) << 0)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | (0))) | (0)) : _GLF_FUZZED(_injected_loop_counter))))))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true), true, false, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(6603.6345)), float(injectionSwitch[1]), bool(true))))).y))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x < injectionSwitch.y))))
  {
   do
    {
     GLF_merged2_0_1_4_1_1_13readsubgroup_size.y = subgroup_size;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))) && true))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))) && true)))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))) && true)))), bool(bvec2((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))) && true)))), true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) * 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat4(1.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), abs(1.0), 0.0, 0.0), (mat4x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat4(1.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), abs(1.0), 0.0, 0.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat4(1.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), abs(1.0), 0.0, 0.0), (mat4x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat4(1.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), abs(1.0), 0.0, 0.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), true && (! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat4(1.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0), (mat4x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat4(1.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), abs(1.0), 0.0, 0.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(bool(bool(injectionSwitch.x < injectionSwitch.y))))))))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uint(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) * 1u))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, 0u | (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, clamp(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, min(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y)))))), _GLF_IDENTITY(0u ^ (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y), max(0u ^ (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y), 0u ^ (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y)))), 1u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y)), 1u))))), uint(uvec3(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, max(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, clamp(GLF_merged2_0_1_4_1_1_13readsubgroup_size, GLF_merged2_0_1_4_1_1_13readsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, uvec2(GLF_merged2_0_1_4_1_1_13readsubgroup_size[0], GLF_merged2_0_1_4_1_1_13readsubgroup_size[1])))), _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (GLF_merged2_0_1_4_1_1_13readsubgroup_size) + uvec2(0u, 0u)))).y, 1u))))), ((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, 1u)))))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, ~ (~ (GLF_merged2_0_1_4_1_1_13readsubgroup_size))).y, 1u))))), max((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, ~ (~ (GLF_merged2_0_1_4_1_1_13readsubgroup_size))).y, 1u))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, ~ (~ (GLF_merged2_0_1_4_1_1_13readsubgroup_size))).y, 1u))))), ((uint(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, uint(uvec2(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, ~ (~ (GLF_merged2_0_1_4_1_1_13readsubgroup_size))).y, 1u)))))) ^ 0u))))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) >> 0u)) | (_GLF_IDENTITY(4u, min(4u, 4u))))))), 1u))) ^ _GLF_IDENTITY(0u, ~ (~ (0u)))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), (false ? _GLF_FUZZED(-27442) : 1))) % GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_4_1_1_13readsubgroup_size.y), min(_GLF_FUZZED(GLF_merged2_0_1_4_1_1_13readsubgroup_size.y), _GLF_FUZZED(GLF_merged2_0_1_4_1_1_13readsubgroup_size.y))) : (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (1))))), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) >> 0)), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (1))))), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) >> 0)), max((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (1))))), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) >> 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (1))))), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) >> 0))))))), (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), int(ivec4((1), 1, _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0))))))) | (_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), int(ivec4((1), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))))) % GLF_merged2_0_1_4_1_1_13readsubgroup_size.y))) / 1u));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)], _GLF_IDENTITY(4, (false ? _GLF_FUZZED(22307) : _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)) >> 0, ((_GLF_IDENTITY(4, (4) + 0)) >> 0) / 1)))))), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-2178.9359))), _GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (bool(false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((! (bool(false))), false || ((! (bool(false)))))), bool(bvec3(bool(_GLF_IDENTITY((! (bool(false))), false || ((! (bool(false)))))), true, false))))))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-2178.9359))), bool(false))))) || false))))
    return;
   GLF_merged2_0_1_4_1_1_13readsubgroup_size.x = read;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false)))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(exp(vec2(-80.68, -483.624)))) : injectionSwitch)).y))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))))));
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, ~ (~ (GLF_merged2_0_1_4_1_1_13readsubgroup_size))).x, 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-699.783)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))) < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))) | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
}
