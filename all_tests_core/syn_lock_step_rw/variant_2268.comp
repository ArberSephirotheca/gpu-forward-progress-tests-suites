#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), sqrt(0.0), 1.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), mix(float(_GLF_FUZZED((-5.1 + -6.6))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), sqrt(0.0), 1.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))), bool(true)))), bool(bvec3((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), true, true))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-14.99) : injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, 1.0, abs(sqrt(1.0)), 0.0, 1.0)), max(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0))))), 1.0, 1.0, 1.0, abs(sqrt(1.0)), 0.0, 1.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, float(float(1.0))))), abs(sqrt(1.0)), 0.0, 1.0))))).y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) * 1u);
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)), min(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))))), (uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)))) << _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (uvec4(0u, 0u, 0u, 0u))))))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) << 0u), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))) << 0u), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size) / 1u) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) + 0u) : _GLF_FUZZED(workgroup_id)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) + 0u) : _GLF_FUZZED(workgroup_id))))) ^ 0u) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-709.053))), injectionSwitch[1])))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))), false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0))))))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (0 & -46076); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) | (~ (virtual_gid))))), (_GLF_IDENTITY(virtual_gid, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) | (~ (virtual_gid)))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, uint(uvec2(_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (~ (virtual_gid)) | (~ (virtual_gid))))) | 0u))) / 1u)) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_id) : uint(0u))), uint(0u)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_id) : uint(0u))), uint(0u)), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))), _GLF_IDENTITY(0u | ((0u << _GLF_IDENTITY(uint(5u), uint(5u)))), max(0u | ((0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u | ((0u << _GLF_IDENTITY(uint(5u), uint(5u))))))))))) << 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))))], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))))))))], _GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, max(0u, 0u))), uint(0u))), ~ (~ ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), clamp(max(0u, 0u), max(0u, 0u), max(0u, 0u))))), uint(0u)), (1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), clamp(max(0u, 0u), max(0u, 0u), max(0u, 0u))))), uint(0u))) | (1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), clamp(max(0u, 0u), max(0u, 0u), max(0u, 0u))))), uint(0u)))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))))], uint(uint(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, (0u) << 0u))))))])))), ((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (1u & 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(uint(0u), uint(0u)))), 0u ^ (_GLF_IDENTITY(uint(0u), uint(0u)))))), min((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) ^ 0u), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), 0u | ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))) * (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u))))) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))], uint(uint(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), min(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))) : (virtual_gid) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), 1u, 1u)), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), 1u, 1u)))))), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) ? _GLF_FUZZED(workgroup_id) : ((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), 1u, 1u)), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))), 1u, 1u)))))))))))], (buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), (false ? _GLF_FUZZED(subgroup_local_id) : (virtual_gid) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), 0u | (_GLF_IDENTITY(uint(0u), max(uint(_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) | 0u)))), uint(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u))))))))))))), clamp(~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u))), ~ (_GLF_IDENTITY(uint(0u), uint(0u)))))))))))]) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) << 0u))) | _GLF_IDENTITY((buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ~ (~ (((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))]), ((buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), max(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u)))), (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), max(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u))))) + uvec4(0u, 0u, 0u, 0u))))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), max(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u)))), (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), max(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u), uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u), (uvec4(virtual_gid, 1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u)) - uvec4(0u, 0u, 0u, 0u))))), 0u, 1u, 0u))))) + uvec4(0u, 0u, 0u, 0u)))))) / 1u))), (virtual_gid) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) + 0u)) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) ^ 0u)), uint(0u))), ~ _GLF_IDENTITY((~ (((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), clamp((~ (((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), (~ (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), _GLF_IDENTITY((~ _GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u)), (_GLF_IDENTITY((~ _GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u)), max((~ _GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u)), (~ _GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ((((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u))))) | 0u)))))])) ^ 0u)), 4, 64, 0);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), injectionSwitch.x))) | (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), injectionSwitch.x)))))))), 1), (ivec3(0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)) * _GLF_IDENTITY(ivec3(1, 1, 1), max(_GLF_IDENTITY(ivec3(1, 1, 1), min(ivec3(1, 1, 1), ivec3(1, 1, 1))), ivec3(1, 1, 1))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.2) : injectionSwitch.x)) > injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (1 & (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))) & 1)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false))))));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (4) ^ 0), _GLF_IDENTITY(4, (4) ^ 0)))), 0 ^ (clamp(4, 4, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (4) ^ 0), _GLF_IDENTITY(4, (4) ^ 0))))))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), ! (! (_GLF_IDENTITY(! (false || (false)), (! (false || (false))) && true)))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(-54132))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, float(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, 1.0, 0.0, 0.0, 0.0, 1.0))))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))), false || (injectionSwitch.x > injectionSwitch.y))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false))), false || (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))))
                    barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false, false, false))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(-9.2, -7.1, 1.6, -4.8).g)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-105.428) : _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-63.13) : 0.0)))), 0.0, 1.0, 1.0)))))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))) > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 & 93463))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))), bool(bvec4(bool(bvec3(false, false, false)), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true))), true, false))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(false), false))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(false), false))) || false)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))) || false))) && true)) || false)), bool(bvec3(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(false), false))) || false))), false, true))))));
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0)))))))), _GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4))))), (int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))))) >> 0), (false ? _GLF_FUZZED(-91300) : _GLF_IDENTITY(int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - (0 >> _GLF_IDENTITY(int(7), int(7))))))), _GLF_IDENTITY((int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))))) >> 0, min(_GLF_IDENTITY((int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))))) >> 0, ((int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))))) >> 0) | ((int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))))) >> 0)), (int(ivec4(7, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))))) >> 0)))))))) / _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), ((1)) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))))))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))), (bool(bool(false))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))), ! (! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))))))), ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))), false || ((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-49.62)), bool(false))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-49.62)), bool(false))) > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-49.62)), bool(false))) > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y)))).y, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x2(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0)))), 0.0, 0.0, 0.0)))))) < injectionSwitch.y) || false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false || (_injected_loop_counter < 1), bool(bvec3(false || (_injected_loop_counter < 1), false, false))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(int(1), int(1))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(86.77), _GLF_FUZZED(-1.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2691.5797)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), bool(bvec3(false, true, false)))) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bvec2(true, true)))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), true)))), false, true))))))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true)))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (_GLF_IDENTITY(! (! (true)), true && (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(true, false || (true))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (_GLF_IDENTITY(! (! (true)), true && (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(true, false || (true))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (_GLF_IDENTITY(! (! (true)), true && (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(true, false || (true))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (_GLF_IDENTITY(! (! (true)), true && (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true))))), _GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(true, false || (true))))))))), true, false, false))))), false, false, true)))), (injectionSwitch.x > injectionSwitch.y)))))));
}
