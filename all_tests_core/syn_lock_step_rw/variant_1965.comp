#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 vec4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_13 {
 mat3x2 _f0;
 ivec4 _f1;
 float _f2;
 float _f3;
 uint _f4;
 ivec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_12 {
 float _f0;
 uint workgroup_size;
 bvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_16 {
 _GLF_struct_12 _f0;
 float _f1;
 _GLF_struct_15 _f2;
 mat4x2 _f3;
 bvec2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 uvec4 _f1;
 uvec4 _f2;
 mat2x3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_6 {
 int _f0;
 mat2 _f1;
 bvec3 _f2;
 uint subgroup_id;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 ivec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 ivec3 _f1;
 int _f2;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 mat2x3 _f1;
 mat3x4 _f2;
 int _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 uvec2 _f1;
 uvec4 _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_1 {
 float _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat3x2 _f1;
 bool _f2;
 uvec3 _f3;
 mat3 _f4;
 uint _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_2 _f0;
 mat3x2 _f1;
 _GLF_struct_5 _f2;
 int _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_10 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_2(_GLF_struct_0(mat3x4(1.0), mat3x2(1.0), true, uvec3(1u), mat3(1.0), 1u, mat3x4(1.0)), _GLF_struct_1(1.0, uvec2(1u))), mat3x2(1.0), _GLF_struct_5(_GLF_struct_3(vec2(1.0), mat2x3(1.0), mat3x4(1.0), 1, uvec3(1u)), uvec2(1u), uvec4(1u), _GLF_struct_4(ivec2(1), ivec3(1), 1)), 1, _GLF_struct_7(_GLF_struct_6(1, mat2(1.0), bvec3(true), gl_SubgroupID), ivec2(1), bvec4(true)), _GLF_struct_10(_GLF_struct_8(bvec3(true), uvec4(1u)), _GLF_struct_9(ivec4(1), uvec4(1u), uvec4(1u), mat2x3(1.0), vec3(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_12(1.0, gl_WorkGroupSize.x, bvec3(true), uvec3(1u)), 1.0, _GLF_struct_15(_GLF_struct_13(mat3x2(1.0), ivec4(1), 1.0, 1.0, 1u, ivec4(1), bvec2(true)), _GLF_struct_14(vec4(1.0), mat2(1.0))), mat4x2(1.0), bvec2(true), ivec3(1));
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.z = workgroup_id;
 uint workgroup_base = _GLF_struct_replacement_16._f0.workgroup_size * GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.z;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_11._f4._f0.subgroup_id * subgroup_size + GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.y;
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.z = virtual_gid;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_11._f4._f0.subgroup_id * subgroup_size + ((GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.y + 1) % subgroup_size);
 GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.x = next_virtual_gid;
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.x = GLF_merged3_0_1_16_1_1_17_2_1_12next_virtual_gidsubgroup_local_idworkgroup_id.x;
 uint read = atomicLoad(buf[GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.z], 4, 64, 0);
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.y = read;
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.x], uint(1), 4, 64, 4);
 atomicStore(checker[GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.z], GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.y, 4, 64, 4);
}
