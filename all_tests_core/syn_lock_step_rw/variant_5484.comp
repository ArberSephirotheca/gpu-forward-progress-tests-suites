#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uint read;
 vec2 _f0;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 uvec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 mat2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 ivec4 _f1;
 bvec2 _f2;
 bvec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 mat2 _f1;
 uvec2 _f2;
 vec3 _f3;
 uvec2 _f4;
 mat2 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 ivec4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
} ;

struct _GLF_struct_6 {
 uint num_workgroup;
 _GLF_struct_0 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_NumWorkGroups.x, _GLF_struct_0(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0)), 0.0 + (float(vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0)))))), float(_GLF_FUZZED(-708.874)), bool(false))), 1.0)), clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), _GLF_struct_5(uvec4(1u), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, ~ (~ (1)))))))) ^ 0)), _GLF_struct_1(bvec3(true), mat2(1.0), uvec2(1u), vec3(1.0), uvec2(1u), mat2(1.0), bvec4(true)), _GLF_struct_2(mat3(1.0), ivec4(1), bvec2(true), bvec3(_GLF_IDENTITY(true, true && (true))), mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), _GLF_struct_3(mat4x2(1.0), mat2(1.0), bvec4(true)), _GLF_struct_4(mat4x3(1.0), mat4x3(1.0), mat3x2(1.0), uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), bvec2(true))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(ivec3(int(8), _GLF_IDENTITY(1, (1) | (1)), 0)), (int(ivec3(int(8), _GLF_IDENTITY(1, (1) ^ 0), 0))) | (int(ivec3(int(8), 1, 0)))))) | 0)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, 0 | (8))) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), max(_GLF_IDENTITY(int(8), (int(8)) | 0), _GLF_IDENTITY(int(8), (int(8)) | 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, max(8, 8))), (int(8)) | 0), (_GLF_IDENTITY(int(8), _GLF_IDENTITY((int(8)) | 0, 1 * ((int(8)) | 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, min(0, 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), (_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) - 0)) ^ 0)) | 0), (_GLF_IDENTITY(int(8), (int(8)) | _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) / 1))) ^ int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), mix(float(_GLF_FUZZED((557.762 + 4.3))), float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0)), bool(true))), injectionSwitch.x)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), (_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) - 0)) ^ 0)) | 0), (_GLF_IDENTITY(int(8), (int(8)) | _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) / 1))) ^ int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), mix(float(_GLF_FUZZED((557.762 + 4.3))), float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0)), bool(true))), injectionSwitch.x))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), (_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) - 0)) ^ 0)) | 0), (_GLF_IDENTITY(int(8), (int(8)) | _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) / 1))) ^ int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), mix(float(_GLF_FUZZED((557.762 + 4.3))), float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0)), bool(true))), injectionSwitch.x)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), (_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) - 0)) ^ 0)) | 0), (_GLF_IDENTITY(int(8), (int(8)) | _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) / 1))) ^ int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), mix(float(_GLF_FUZZED((557.762 + 4.3))), float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0)), bool(true))), injectionSwitch.x))))))) | 0)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)))), ~ (~ (_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), (_GLF_IDENTITY(int(8), (int(8)) | 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))) ^ 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9.8), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(length(vec4(-782.136, -1.0, 7.6, -9.1))) : _GLF_FUZZED(-9.8)))), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.3, 5.8)))))).x, injectionSwitch.x)), float(mat2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x, injectionSwitch.x)), 0.0, 1.0, abs(1.0)))))), (injectionSwitch.x) * abs(1.0)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bool((_GLF_DEAD(false)) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))))));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (((injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(! (! (((injectionSwitch.x < injectionSwitch.y)))), true)))))))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))).y)), false, false)), bool(bvec4(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true, true, false)))), true, false, true)))) || false)))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))) || false))
                barrier();
              }
             barrier();
            }
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(2942.7728), _GLF_FUZZED(-94.18)), vec2((vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, true))))) - vec2(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))), 0.0)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))) || false), true), true, false))))), (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), false)), true, false))))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(true, true, false)))), true, true)), false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), true, false))))))))))), true, false)))), true, true)), false))))), true, true, true)))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), true))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(true, true, false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), true, false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))))), true)))))))))))) && true)), true, true)), false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true))), false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (_GLF_IDENTITY(! (true), (! (true)) && true)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))))))))))))), true, false)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (_GLF_IDENTITY(! (true), (! (true)) && true)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))))))))))))), true, false))))), bvec2(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (_GLF_IDENTITY(! (true), (! (true)) && true)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))))))))))))), true, false)))))))))), _GLF_IDENTITY(true, ! (! (true))), true)), false))))), _GLF_IDENTITY(true, true && (true)), true, true))))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bool((false)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))))))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))))))))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) || false)))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y) / 1.0)) - log(1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y) / 1.0)) - log(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y) / 1.0)) - log(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(abs(vec2(-6.5, -7134.6823))))).y) / 1.0)) - log(1.0))))))))
        barrier();
      }
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0 | (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), 0 | ((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), max(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), min(injectionSwitch, injectionSwitch)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8961.8584), _GLF_FUZZED(-72.95)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), injectionSwitch)), injectionSwitch)), mix(vec2(_GLF_FUZZED(-56.57), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-53.91)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) - 0.0) : _GLF_FUZZED(6.0))) > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? vec2(461.358, 9.8).x : -2.5)), _GLF_FUZZED(612.178)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.7, 1.4)))), mix(vec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.7, 1.4)))))[0], (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.7, 1.4)))))[1]), vec2(_GLF_FUZZED(152.944), _GLF_FUZZED(87.29)), bvec2(false, false))), (injectionSwitch) * mat2(1.0)).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))).y), false, false, true))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false)))) && true), bool(bvec3(! ((_GLF_IDENTITY(false, ! (! (false)))) && true), false, true))))))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))), true && (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) || false))), _GLF_IDENTITY((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))))) && true, _GLF_IDENTITY(false, ! (! (false))) || ((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && ((injectionSwitch.x > injectionSwitch.y)))))) && true)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))))));
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))))).x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))))[1]), vec2(_GLF_FUZZED(-97.55), _GLF_FUZZED(-3625.0038)), bvec2(false, false))), injectionSwitch)).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-81.47)), vec2(_GLF_IDENTITY(_GLF_FUZZED(-8.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-8.2), float(mat4(_GLF_FUZZED(-8.2), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), _GLF_FUZZED(-8.2), _GLF_FUZZED(-8.2))), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, ! (! (true)))))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))))), 1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch)).x > injectionSwitch.y)))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 0u, 1u), min(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 0u, 1u), uvec4(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), 0u, 0u, 1u)))), (uint(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 0u, 1u), min(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 0u, 1u), uvec4(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), 0u, 0u, 1u))))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 1u), min(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 0u, 1u), uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_local_id))) + subgroup_base + subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / 1u, ((1u) / 1u) | ((1u) / 1u)))) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))))))))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec4(_injected_loop_counter < 1, _GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, false)), (_GLF_IDENTITY(bool(bvec3((false), false, false)), ! (! (bool(bvec3((false), false, false)))))) && true))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
        }
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (94213 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _injected_loop_counter)) < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, 0 ^ (3)), 3, _GLF_IDENTITY(3, (3) - 0)))))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(subgroup_size))), subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(uvec4(subgroup_base, 0u, 0u, 0u)), (_GLF_IDENTITY(uint(uvec4(subgroup_base, 0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(subgroup_base, 0u, 0u, 0u)), uint(uvec4(uint(uvec4(subgroup_base, 0u, 0u, 0u)), 0u, 0u, 0u)))) - 0u, ((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(subgroup_id))), 0u, 0u, 0u)), uint(uvec4(uint(uvec4(subgroup_base, 0u, 0u, 0u)), 0u, 0u, 0u)))) - 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))) << 0u))) >> 0u))))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), clamp(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))))) : _GLF_FUZZED(subgroup_base))))), ~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)))))), max((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) - (0u | 0u)))))), clamp(clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)), clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base))) >> 0u)), clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) >> 0u, 0u | (_GLF_IDENTITY((subgroup_base) >> 0u, ((subgroup_base) >> 0u) ^ 0u))))))))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u))))))))))), (0u ^ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), clamp(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))))) : _GLF_FUZZED(subgroup_base))))), ~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)))))), max((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) - (0u | 0u)))))), clamp(clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)), clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base))) >> 0u)), clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) >> 0u, 0u | (_GLF_IDENTITY((subgroup_base) >> 0u, ((subgroup_base) >> 0u) ^ 0u))))))))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)))))))))))) | 0u)) + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY((1), ((1)) ^ 0), ((1) | (1)) | ((1) | (1))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ _GLF_IDENTITY(0u, (0u) << 0u))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((true ? subgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (true ? _GLF_FUZZED(subgroup_size) : _GLF_FUZZED(subgroup_local_id)))), (_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u)) + 0u))), 0u ^ (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), clamp((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), _GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (true ? _GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (((true ? subgroup_base : _GLF_FUZZED(subgroup_size)))) / 1u) : _GLF_FUZZED(subgroup_base))), 1u, 0u), min(uvec3(_GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (true ? _GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (((true ? subgroup_base : _GLF_FUZZED(subgroup_size)))) / 1u) : _GLF_FUZZED(subgroup_base))), 1u, 0u), uvec3(_GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (true ? _GLF_IDENTITY(((true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (((true ? subgroup_base : _GLF_FUZZED(subgroup_size)))) / 1u) : _GLF_FUZZED(subgroup_base))), 1u, 0u))))) - 0u), clamp(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u)))) | 0u)) + 0u))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ (true ? subgroup_base : _GLF_FUZZED(subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), clamp(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u)))) | 0u)) + 0u), (_GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ (true ? subgroup_base : _GLF_FUZZED(subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), clamp(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u)))) | 0u)) + 0u)) ^ 0u))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ (true ? subgroup_base : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ (true ? subgroup_base : _GLF_FUZZED(subgroup_size)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), clamp(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u)))) | 0u)) + 0u))), max(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ (true ? subgroup_base : _GLF_FUZZED(subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true) ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), clamp(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (true ? subgroup_base : _GLF_FUZZED(subgroup_size))))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) << 0u))) - 0u)))) | 0u)) + 0u))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), (true ? subgroup_base : _GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(subgroup_size), 0u ^ (true ? subgroup_base : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), clamp(_GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u), _GLF_IDENTITY((true ? subgroup_base : _GLF_FUZZED(subgroup_size)), ((true ? subgroup_base : _GLF_FUZZED(subgroup_size))) - 0u)))) | 0u)) + _GLF_IDENTITY(0u, min(0u, 0u))))))))))))), subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_base, 0u | _GLF_IDENTITY((subgroup_base), uint(uvec2((subgroup_base), 0u)))), subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), uint(uvec4(subgroup_base, _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), 0u ^ (_GLF_IDENTITY(~ (~ (0u)), (~ (~ (0u))) << 0u)))), 0u, 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), uint(uvec4(subgroup_base, _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), 0u ^ (_GLF_IDENTITY(~ (~ (0u)), (~ (~ (0u))) << 0u)))), 0u, 0u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 0u, 0u, 0u)))) >> 0u)), (clamp(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 0u), clamp(uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u)))), max(uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 0u), clamp(uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u)))), uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 0u), clamp(uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u)))))))) >> 0u))) + (0u ^ 0u))), 0u ^ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 0u, 0u, 0u)))) >> 0u)), (clamp(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 0u), clamp(uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u)))), max(uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 0u), clamp(uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u)))), uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 0u), clamp(uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u), uvec4(subgroup_base, 0u, 0u, 0u)))))))) >> 0u))) + (0u ^ 0u)))))))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u)), _GLF_IDENTITY(uint(uvec3(clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u)), 1u, 0u)), (uint(uvec3(clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u)), 1u, 0u))) >> 0u))))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY((0u ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) + 0u)), 0u ^ ((_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) + 0u)))) | 0u)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), ((subgroup_base)) * 1u) >> 0u)))))), ((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY((0u ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) + 0u)), 0u ^ ((_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) + 0u)))) | 0u)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), ((subgroup_base)) * 1u) >> 0u))))))) | ((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY((0u ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) + 0u)), 0u ^ ((_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) + 0u)))) | 0u)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), ((subgroup_base)) * 1u) >> 0u)))))))), max((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u))))), min(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u))))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | 0u), 0u)) ^ 0u)), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), (_GLF_IDENTITY((subgroup_base), max((subgroup_base), (subgroup_base)))) ^ 0u) >> 0u)))))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY((~ (subgroup_base)), ((~ (subgroup_base))) << 0u)), clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u))), (subgroup_base) >> 0u))), 0u))))))), ~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)))))), max((_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) : _GLF_FUZZED(workgroup_size))) + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) ^ 0u)) | 0u) ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u)))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)))))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (0u ^ 0u)), _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) | 0u))))))))))), 1u, 1u))))) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) | _GLF_IDENTITY(_GLF_IDENTITY((1), int(_GLF_IDENTITY(int((1)), (int((1))) * (1 & 1)))), ((1)) ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-56795) : (1) | _GLF_IDENTITY(_GLF_IDENTITY((1), int(_GLF_IDENTITY(int((1)), (int((1))) * (1 & 1)))), ((1)) ^ 0))), ((1) | (1)) | _GLF_IDENTITY(((1) | (1)), ~ (~ (((1) | (1)))))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), clamp((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0)) | _GLF_IDENTITY(_GLF_IDENTITY((1), int(_GLF_IDENTITY(int((1)), (int((1))) * _GLF_IDENTITY((1 & 1), ((1 & 1)) ^ (0 & -76241))))), _GLF_IDENTITY(((1)), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-34245) : ((1)))) ^ 0), ((1) | (1)) | _GLF_IDENTITY(((1) | (1)), ~ (~ (((1) | (1)))))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(_GLF_IDENTITY((1), int(_GLF_IDENTITY(int((_GLF_IDENTITY(1, (1) - 0))), (int((_GLF_IDENTITY(1, clamp(1, 1, 1))))) * (1 & 1)))), ((1)) ^ 0), (_GLF_IDENTITY((1), ((1)) | ((1))) | (1)) | _GLF_IDENTITY(((1) | (1)), ~ (~ (((1) | (1)))))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(_GLF_IDENTITY((1), int(_GLF_IDENTITY(int((1)), (int((1))) * (1 & 1)))), ((1)) ^ 0), ((1) | (1)) | _GLF_IDENTITY(((1) | (1)), ~ (~ ((_GLF_IDENTITY((1) | (1), max((1) | (1), (1) | (1)))))))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))))) << 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 7.9))), vec2(_GLF_FUZZED(9.0), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(7631.3918, -29.30)))).y))) || false))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, max(_GLF_IDENTITY((_injected_loop_counter) | 0, int(ivec2((_injected_loop_counter) | 0, 0))), (_injected_loop_counter) | 0))) != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 0, (false ? _GLF_FUZZED(_injected_loop_counter) : 1 | 0)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (0 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, bool(bool(false)))))) ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))), (_GLF_IDENTITY(true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), max(true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))))), min(_GLF_IDENTITY(min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), 0u | (_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), max(_GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))))))), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))), (_GLF_IDENTITY(min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))), min(min(_GLF_IDENTITY(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), ((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))) ^ 0u), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))), _GLF_IDENTITY(min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))), 0u ^ (min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))))))) | 0u), min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)))), (true ? buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), min(uint(virtual_gid), uint(virtual_gid))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), min(uint(virtual_gid), uint(virtual_gid))))), max(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), min(uint(virtual_gid), uint(virtual_gid))))), _GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), min(uint(virtual_gid), uint(virtual_gid))))))), _GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), min(uint(virtual_gid), uint(virtual_gid))))), _GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), min(uint(virtual_gid), uint(virtual_gid)))))))] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup))))), 0u | (min(_GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), max((true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)), (_GLF_IDENTITY(true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)) + 0u)))), (_GLF_IDENTITY(true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup), (true ? buf[virtual_gid] : _GLF_FUZZED(_GLF_struct_replacement_6.num_workgroup)) ^ 0u))))))))), 4, 64, 2), vec2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) ^ (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), min(_GLF_IDENTITY(int(2), (int(2)) >> 0), _GLF_IDENTITY(int(2), (int(2)) >> 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)))], uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1)) | (_GLF_IDENTITY(1, int(int(1))))), 1))), (_GLF_IDENTITY((1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1)) | (_GLF_IDENTITY(1, int(int(1))))), 1))), int(ivec2((1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1)) | (_GLF_IDENTITY(1, int(int(1))))), 1))), 0)))) | (_GLF_IDENTITY((1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1)) | (_GLF_IDENTITY(1, int(int(1))))), 1))), (_GLF_IDENTITY((1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1)) | (_GLF_IDENTITY(1, int(int(1))))), 1))), 0 ^ ((1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1)) | (_GLF_IDENTITY(1, int(int(1))))), 1)))))) - 0))))), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) * 1)) | 0), 1, 0, 1), (false ? _GLF_FUZZED(ivec4(_GLF_IDENTITY(-91145, clamp(_GLF_IDENTITY(-91145, (-91145) << 0), -91145, -91145)), 25284, -88226, -54105)) : ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (! (_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bool(bvec3(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))), true, true, true)))))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, 0), (true ? ivec4(1, 0, 1, 0) : _GLF_FUZZED(ivec4(-30369, 67469, -14452, _GLF_IDENTITY(-4633, (_GLF_IDENTITY(-4633, (0 >> _GLF_IDENTITY(int(8), int(8))) ^ (-4633))) | (-4633)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), true, false, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), true, false, false)), true, true)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || false)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, sqrt(sqrt(1.0)), 0.0, 1.0, 0.0))).x > injectionSwitch.y)))))))))))))))))) && true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     barrier();
    }
   else
    {
    }
  }
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_7.read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
}
