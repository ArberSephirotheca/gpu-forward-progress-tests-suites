#version 460
struct _GLF_struct_6 {
 mat3x4 _f0;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 mat4x2 _f1;
 ivec2 _f2;
 uvec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 float _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 mat4x3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 mat2x4 _f1;
 mat2 _f2;
 uvec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_0 {
 int _f0;
 bvec3 _f1;
 uvec3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 uvec4 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 uint virtual_gid;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 vec3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_3(uvec4(1u), uvec4(1u), _GLF_struct_0(1, bvec3(true), uvec3(1u), vec2(1.0)), _GLF_struct_1(mat4(1.0), mat2x4(1.0), mat2(1.0), uvec2(1u), mat2x3(1.0)), _GLF_struct_2(mat2(1.0), mat4x3(1.0), bvec3(true)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), vec3(1.0), _GLF_struct_5(_GLF_struct_4(uvec2(1u), mat4x2(1.0), ivec2(1), uvec3(1u), 1u), 1.0, ivec2(1)), _GLF_struct_6(mat3x4(1.0)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[_GLF_struct_replacement_7._f0.virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 atomicStore(checker[_GLF_struct_replacement_7._f0.virtual_gid], read, 4, 64, 4);
}
