#version 460
struct _GLF_struct_2 {
 ivec4 _f0;
 mat3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat2x4 _f1;
 bool _f2;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 int _f1;
 vec3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 float _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 int _f4;
 mat2 _f5;
 uint workgroup_id;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(_GLF_struct_0(bvec3(true), 1, vec3(1.0), ivec4(1)), 1.0, _GLF_struct_1(1, mat2x4(1.0), true), _GLF_struct_2(ivec4(1), mat3(1.0), bvec2(true)), 1, mat2(1.0), gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_4._f0.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
