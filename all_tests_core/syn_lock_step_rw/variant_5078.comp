#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat3x2 _f0;
 mat2x4 _f1;
 mat3 _f2;
 ivec3 _f3;
 ivec3 _f4;
 int _f5;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 vec3 _f1;
 bvec3 _f2;
 bvec3 _f3;
 bvec3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 uint next_virtual_gid;
 mat2x3 _f1;
 _GLF_struct_7 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_5 {
 uint _f0;
 uint subgroup_base;
 ivec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 mat3 _f1;
 mat2x4 _f2;
 mat3 _f3;
 bool _f4;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 vec4 _f1;
 uvec2 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_0 {
 uint _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_4 {
 int _f0;
 _GLF_struct_0 _f1;
 mat3 _f2;
 vec4 _f3;
 _GLF_struct_3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(1u, subgroup_id * subgroup_size, ivec3(1), vec3(1.0));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(1, _GLF_struct_0(1u, bvec3(true)), mat3(1.0), vec4(1.0), _GLF_struct_3(_GLF_struct_1(mat2(1.0), workgroup_base + _GLF_struct_replacement_5.subgroup_base + subgroup_local_id), vec4(1.0), uvec2(1u), _GLF_struct_2(mat3(1.0), mat3(1.0), mat2x4(1.0), mat3(1.0), true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_8(_GLF_struct_6(uvec3(1u), vec3(1.0), bvec3(true), bvec3(true), bvec3(true), mat3(1.0)), workgroup_base + _GLF_struct_replacement_5.subgroup_base + ((subgroup_local_id + 1) % subgroup_size), mat2x3(1.0), _GLF_struct_7(mat3x2(1.0), mat2x4(1.0), mat3(1.0), ivec3(1), ivec3(1), 1), vec4(1.0)));
 uint read = atomicLoad(buf[_GLF_struct_replacement_4._f4._f0.virtual_gid], 4, 64, 2);
 atomicStore(buf[_GLF_struct_replacement_9._f0.next_virtual_gid], uint(1), 4, 64, 4);
 subgroupBarrier();
 atomicStore(checker[_GLF_struct_replacement_4._f4._f0.virtual_gid], read, 4, 64, 4);
}
