#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 uvec3 _f0;
 mat2x3 _f1;
 mat2x3 _f2;
 bool _f3;
} ;

struct _GLF_struct_18 {
 uint _f0;
 mat4x2 _f1;
 uvec3 _f2;
 bvec4 _f3;
 mat4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 _GLF_struct_19 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 mat4x3 _f1;
 vec4 _f2;
 uint _f3;
 ivec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_15 {
 int _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_14 {
 vec3 _f0;
 mat4 _f1;
 mat3x4 _f2;
 ivec4 _f3;
 mat4x2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_14 _f0;
 vec4 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
 mat4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_10 {
 uint _f0;
 mat3x4 _f1;
 mat2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 bvec3 _f2;
 mat4x3 _f3;
 bvec4 _f4;
 _GLF_struct_12 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_21 {
 _GLF_struct_13 _f0;
 mat4x2 _f1;
 mat4 _f2;
 vec2 _f3;
 uint num_workgroup;
 _GLF_struct_17 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 float _f1;
 mat4 _f2;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 _GLF_struct_7 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 bvec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_3 {
 int _f0;
 uvec3 _f1;
 uint _f2;
 mat3 _f3;
 mat4x3 _f4;
 vec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 float _f1;
 uvec4 _f2;
 vec2 _f3;
 mat4 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 float _f1;
 mat3x2 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_0 {
 int _f0;
 ivec3 _f1;
 int _f2;
 mat2 _f3;
 ivec3 _f4;
 bool _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_9 {
 uint subgroup_local_id;
 mat3 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_8 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.7) : injectionSwitch.x)))), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat3x2(float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-51.15) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(554.180) : injectionSwitch.y))))))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))), false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))))), false)))) || false)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(920.659)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec2(! (! (_GLF_IDENTITY(false, false || (false)))), false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6)))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y))))))))) && true))))))), true, true, true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, true)))) || false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(32135 & 0, (false ? _GLF_FUZZED(-50819) : 32135 & 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(67436) : 6))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)) << 0), _GLF_IDENTITY(int(6), int(6))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(cos(-6.3), clamp(cos(-6.3), _GLF_IDENTITY(cos(-6.3), (false ? _GLF_FUZZED(-72.95) : cos(-6.3))), cos(-6.3)))) : injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true, _GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true, _GLF_IDENTITY(true, (true) || false), true)), (bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true, _GLF_IDENTITY(true, (true) || false), true))) || false)))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(gl_SubgroupInvocationID, _GLF_IDENTITY(mat3(1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))) + (mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), _GLF_struct_1(_GLF_struct_0(1, ivec3(1), 1, mat2(1.0), ivec3(1), true, _GLF_IDENTITY(ivec4(1), (ivec4(1)) >> ivec4(0, 0, 0, 0))), mat2x4(1.0), vec3(1.0)), _GLF_struct_4(mat4x3(1.0), _GLF_IDENTITY(1.0, tan(0.0) + (_GLF_IDENTITY(1.0, sqrt(1.0) * _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(-8857.4137)), float((1.0)), bool(true)))))), mat3x2(1.0), _GLF_struct_2(mat2x3(1.0), 1.0, _GLF_IDENTITY(uvec4(1u), min(_GLF_IDENTITY(uvec4(1u), clamp(_GLF_IDENTITY(uvec4(1u), clamp(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(126013u, 104192u, 62912u, 13435u) & uvec4(0u, 0u, 0u, 0u))), uvec4(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), min(uint(uint(1u)), uint(uint(1u))))), 1u))), uvec4(1u))), uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, min(1u, 1u))))), uvec4(_GLF_IDENTITY(1u, (1u) ^ 0u)))), uvec4(1u))), vec2(1.0), _GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (transpose(mat4(1.0)))))), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true), false)))))), false)))), _GLF_struct_3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1)))), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))), 0u), _GLF_IDENTITY(_GLF_IDENTITY((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u)), ((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u))) * uvec4(1u, 1u, 1u, 1u)), clamp(_GLF_IDENTITY((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u)), ((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u))) * uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u)), ((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u))) * uvec4(1u, 1u, 1u, 1u)), (true ? _GLF_IDENTITY((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u)), ((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u))) * uvec4(1u, 1u, 1u, 1u)) : _GLF_FUZZED(uvec4(14491u, 140675u, 141752u, 14081u)))), _GLF_IDENTITY((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u)), ((uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), (_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), 0u))) * uvec4(1u, 1u, 1u, 1u)))) | (uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + (uvec3(1u))), 0u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(20821u, 66924u, 161628u)) : uvec3(0u, 0u, 0u)))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))))) + (uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((uvec3(1u)), max((uvec3(1u)), (uvec3(1u))))), _GLF_IDENTITY(0u, 0u + (0u))), (uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + (uvec3(1u))), 0u)) | (uvec4(_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) + (uvec3(1u))), 0u)))))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(0u ^ (1u), min(_GLF_IDENTITY(0u ^ (1u), (0u | 0u) ^ (0u ^ (1u))), _GLF_IDENTITY(0u ^ (1u), (0u ^ (1u)) | (0u ^ (1u)))))))), 1u, mat3(1.0), mat4x3(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), mix(vec2(_GLF_FUZZED(434.752), (vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))))[1]), vec2((vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))))[0], _GLF_FUZZED(64.00)), bvec2(true, false))), ivec4(1)), vec4(1.0)), _GLF_struct_6(_GLF_struct_5(vec2(1.0), bvec2(true), mat3x4(1.0)), mat3x4(1.0)), _GLF_struct_8(mat4(1.0), _GLF_struct_7(_GLF_IDENTITY(vec3(1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_FUZZED(-381.566), _GLF_FUZZED(0.0), (vec3(1.0))[2]), vec3(_GLF_IDENTITY((vec3(1.0)), (_GLF_IDENTITY((vec3(1.0)), (false ? _GLF_FUZZED(vec3(8661.9088, -9.1, 4774.3943)) : (vec3(1.0))))) - sin(abs(vec3(0.0, 0.0, 0.0))))[0], (_GLF_IDENTITY(vec3(1.0), vec3(mat2(_GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(1.0))))), 1.0))))[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91568) : _GLF_IDENTITY(1, min(1, 1))))], _GLF_FUZZED(9.0)), bvec3(true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))) && true)))))), min(_GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_FUZZED(_GLF_IDENTITY(-381.566, clamp(-381.566, -381.566, -381.566))), _GLF_FUZZED(0.0), _GLF_IDENTITY((vec3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * ((vec3(1.0))))[2]), vec3((_GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(vec3(6.4, -14.68, 2507.2086)) : vec3(1.0))))[0], (vec3(1.0))[1], _GLF_FUZZED(9.0)), bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_FUZZED(-381.566), _GLF_FUZZED(0.0), (vec3(1.0))[2]), vec3((vec3(1.0))[0], (vec3(1.0))[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1))], _GLF_FUZZED(9.0)), bvec3(true, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mix(vec3(_GLF_FUZZED(_GLF_IDENTITY(-381.566, _GLF_IDENTITY(min(-381.566, _GLF_IDENTITY(-381.566, (-381.566) / 1.0)), (min(-381.566, _GLF_IDENTITY(_GLF_IDENTITY(-381.566, (-381.566) / 1.0), (_GLF_IDENTITY(-381.566, (-381.566) / 1.0)) * sqrt(1.0)))) / 1.0))), _GLF_FUZZED(0.0), _GLF_IDENTITY((vec3(1.0)), max((vec3(1.0)), _GLF_IDENTITY((vec3(1.0)), ((vec3(1.0))) * mat3(1.0))))[2]), vec3((vec3(1.0))[0], (vec3(1.0))[1], _GLF_FUZZED(9.0)), bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_FUZZED(-381.566), _GLF_FUZZED(0.0), (vec3(1.0))[2]), vec3((vec3(1.0))[_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-18686)))), (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-18686))))) ^ 0)))], (vec3(1.0))[1], _GLF_FUZZED(9.0)), bvec3(true, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-327.755)), bool(false))))) > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), ! (! (false || (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))))))), _GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_FUZZED(-381.566), _GLF_IDENTITY(_GLF_FUZZED(0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-271.311) : _GLF_FUZZED(0.0))), (vec3(1.0))[2]), vec3((vec3(1.0))[0], (vec3(1.0))[1], _GLF_FUZZED(9.0)), bvec3(true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(cos(vec3(-6250.6633, -654.698, 250.863)), (true ? cos(vec3(-6250.6633, -654.698, 250.863)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))), vec3(0.0, 0.0, 0.0) + (_GLF_FUZZED((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))))), clamp(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33), (vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)) - vec3(0.0, 0.0, 0.0))), mix(vec3(((_GLF_IDENTITY(vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33), (vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)) - vec3(0.0, 0.0, 0.0))))[0], ((_GLF_IDENTITY(vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33), (vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)) - vec3(0.0, 0.0, 0.0))))[1], ((_GLF_IDENTITY(vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33), (vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)) - vec3(0.0, 0.0, 0.0))))[2]), vec3(_GLF_FUZZED(4922.6495), _GLF_FUZZED(-1.7), _GLF_FUZZED(73.95)), bvec3(false, false, false)))), clamp(_GLF_FUZZED((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))), _GLF_FUZZED((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))), _GLF_FUZZED((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))))), _GLF_FUZZED(_GLF_IDENTITY((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)), vec3(0.0, 0.0, 0.0) + ((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))))), _GLF_FUZZED(_GLF_IDENTITY((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)), (_GLF_IDENTITY((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)), clamp((vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)), (vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33)), (vec3(-3.4, -7.7, 8880.0295) / vec3(-9425.5445, -3.0, 43.33))))) - vec3(0.0, 0.0, 0.0))))))), max(cos(vec3(_GLF_IDENTITY(-6250.6633, (true ? -6250.6633 : _GLF_FUZZED(280.885))), -654.698, 250.863)), cos(vec3(-6250.6633, -654.698, 250.863))))))), 1.0, mat4(1.0)), ivec3(1)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(abs(1.0), (false ? _GLF_FUZZED(floor(-465.200)) : abs(1.0))), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(abs(1.0), float(_GLF_IDENTITY(mat3x4(abs(1.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0), mat4(1.0) * (mat3x4(abs(1.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0))))), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8274.8964)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(-564.723) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(abs(1.0), (false ? _GLF_FUZZED(floor(-465.200)) : abs(1.0))), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(abs(1.0), float(_GLF_IDENTITY(mat3x4(abs(1.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0), mat4(1.0) * (mat3x4(abs(1.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0))))), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8274.8964)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(abs(1.0), (false ? _GLF_FUZZED(floor(-465.200)) : abs(1.0))), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(abs(1.0), float(_GLF_IDENTITY(mat3x4(abs(1.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0), mat4(1.0) * (mat3x4(abs(1.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0))))), sqrt(0.0)), vec2(1.0, 0.0)), dot(vec2(abs(1.0), sqrt(0.0)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8274.8964)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-5.4)), bool(false))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(-78.98), (injectionSwitch)[1]), bvec2(false, true)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_13(_GLF_struct_10(1u, mat3x4(1.0), mat2(1.0), mat2x4(1.0)), _GLF_struct_11(mat3(1.0), mat4(1.0), bvec3(true)), bvec3(true), mat4x3(1.0), bvec4(true), _GLF_struct_12(ivec3(1), uvec3(1u)), bvec4(true)), mat4x2(1.0), mat4(1.0), vec2(1.0), _GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(160853u, 8568u, 194209u), (_GLF_IDENTITY(uvec3(160853u, 8568u, 194209u), clamp(_GLF_IDENTITY(uvec3(160853u, 8568u, 194209u), uvec3(0u, 0u, 0u) | (uvec3(160853u, 8568u, 194209u))), uvec3(160853u, 8568u, 194209u), uvec3(160853u, 8568u, 194209u)))) << uvec3(0u, 0u, 0u))) : gl_NumWorkGroups)).x, _GLF_struct_17(_GLF_struct_14(vec3(1.0), mat4(1.0), mat3x4(1.0), ivec4(1), mat4x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(abs(7405.6948))))) * 1.0)), mat4x2(1.0)), vec4(1.0), _GLF_struct_15(1, uvec4(1u)), _GLF_struct_16(ivec3(1), mat4x3(1.0), vec4(1.0), 1u, ivec3(1), true)), _GLF_struct_20(_GLF_struct_18(1u, mat4x2(1.0), uvec3(1u), bvec4(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))), mat4(1.0), uvec4(1u)), _GLF_struct_19(uvec3(1u), mat2x3(1.0), mat2x3(1.0), true), mat4x2(1.0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.8)), bvec2(true, false))).y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 0))) >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED(-41028)))) * 1)))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(~ (~ (workgroup_id)), (~ (_GLF_IDENTITY(~ (workgroup_id), 0u | (~ (workgroup_id))))) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))) | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), max((workgroup_id), _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))) ^ 0u));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_9.subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), clamp(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), (false ? _GLF_FUZZED(8843.6145) : float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0))))))), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), clamp(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), (false ? _GLF_FUZZED(8843.6145) : float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0))))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), clamp(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), (false ? _GLF_FUZZED(8843.6145) : float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0))))))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), clamp(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), (false ? _GLF_FUZZED(8843.6145) : float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0))))))), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), clamp(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), (false ? _GLF_FUZZED(8843.6145) : float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0))))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), clamp(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0)), (false ? _GLF_FUZZED(8843.6145) : float(mat2x4(injectionSwitch.x, cos(0.0), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0))))))))) > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bvec2(bool(bool(false)), false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, sin(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, sin(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))) > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, sin(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))) > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(bvec3(bool(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y), false, false))))))) ? injectionSwitch.x : _GLF_FUZZED(75.74))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) || false) ? injectionSwitch.y : _GLF_FUZZED(-5654.2762))))) && true)), true, true, true)))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4845.7721)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), (vec3(0.0, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0))))), mat3(1.0) * (mat2x3(injectionSwitch, log(1.0), 0.0, 0.0, 0.0))))).y)), false), true))))), ! (! ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.9), _GLF_FUZZED(-44.45)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x < injectionSwitch.y)))) && true)))), true, true, true)))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, log(1.0), 0.0, 0.0, 0.0), mat3(1.0) * (mat2x3(injectionSwitch, log(1.0), 0.0, 0.0, 0.0))))).y)), false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.9), _GLF_FUZZED(-44.45)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x < injectionSwitch.y)))) && true)))), true, true, true)))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, log(1.0), 0.0, 0.0, 0.0), mat3(1.0) * (mat2x3(injectionSwitch, log(1.0), 0.0, 0.0, 0.0))))).y)), false), true))))))))))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))) && true)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((99.83 * 1634.5609))), bool(false))) > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), sin(0.0), 1.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0)), dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0)))), (mat4(injectionSwitch, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), sin(0.0), 1.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0)), dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(vec2(vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), sin(0.0), 1.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0)), dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0)))), (mat4(injectionSwitch, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), sin(0.0), 1.0, length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0)), dot(vec2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))), vec2(0.0, 1.0))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))).y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_struct_replacement_9.subgroup_local_id + 1), min((_GLF_struct_replacement_9.subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_local_id, max(_GLF_struct_replacement_9.subgroup_local_id, _GLF_struct_replacement_9.subgroup_local_id)) + 1, min(_GLF_struct_replacement_9.subgroup_local_id + 1, _GLF_struct_replacement_9.subgroup_local_id + 1))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(mat2(vec2(vec2(injectionSwitch)), 1.0, 1.0)))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (1 ^ _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(_GLF_IDENTITY(int(int(~ (1))), (int(_GLF_IDENTITY(int(~ (1)), 1 * (int(~ (1)))))) - 0), clamp(_GLF_IDENTITY(int(int(~ (1))), (int(_GLF_IDENTITY(int(~ (1)), 1 * (int(~ (1)))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(int(int(~ (1))), (int(_GLF_IDENTITY(int(~ (1)), 1 * (int(~ (1)))))) - 0), int(ivec3(_GLF_IDENTITY(int(int(~ (1))), (int(_GLF_IDENTITY(int(~ (1)), 1 * (int(~ (1)))))) - 0), 1, 0))), _GLF_IDENTITY(int(int(~ (1))), (int(_GLF_IDENTITY(int(~ (1)), 1 * (int(~ (1)))))) - 0))))))))); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))) && true))))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false))))))))
      return;
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    return;
  }
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, uint(uvec3(_GLF_IDENTITY(read, _GLF_IDENTITY((true ? _GLF_IDENTITY(read, (read) | 0u) : _GLF_FUZZED(workgroup_size)), min((true ? _GLF_IDENTITY(read, (read) | 0u) : _GLF_FUZZED(workgroup_size)), (true ? _GLF_IDENTITY(read, (read) | 0u) : _GLF_FUZZED(workgroup_size))))), 0u, 0u))), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
}
