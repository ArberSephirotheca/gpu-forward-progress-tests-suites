#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false)))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false))))))))) || false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)), clamp((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED((- -4246.1232))), float((injectionSwitch)[0]), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-1.4), max(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.4)))), vec2(_GLF_FUZZED(_GLF_IDENTITY(87.68, float(mat2x4(_GLF_IDENTITY(87.68, (false ? _GLF_FUZZED(4.2) : 87.68)), 0.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), abs(1.0), 1.0)))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), injectionSwitch)).y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).y) / 1.0)))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))) || false), true, false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(mat2x4(vec2(injectionSwitch[0], injectionSwitch[1]), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), injectionSwitch)).y, true, true, false))), true, false))))))) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED((1.3 / 6566.7181))), bool(false))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED((true ? -570.091 : 2.7))), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) / 1.0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3x2((injectionSwitch)[0], 1.0, 0.0, 0.0, 1.0, 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(39259)), _GLF_FUZZED(3414.2254)), bvec2(false, false))).y))))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.6))), injectionSwitch.x)))) < injectionSwitch.y))))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false, true)))))))), true))), true)))))) && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-89.38) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), max(_GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), float(mat3(float(vec2(injectionSwitch.y, 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.7))))), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat3(0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(73.19) : 0.0)), 0.0)), 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat3(0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) + 0.0), 0.0, 0.0)), 1.0))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), abs(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), exp(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0))), 1.0))))))), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))), true)))))) && (false)))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.2)), bool(false))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u ^ (gl_NumWorkGroups.x), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)) ^ _GLF_IDENTITY((gl_NumWorkGroups.x), uint(_GLF_IDENTITY(uvec2((gl_NumWorkGroups.x), 0u), min(uvec2((gl_NumWorkGroups.x), 0u), uvec2((gl_NumWorkGroups.x), 0u))))), (0u ^ (gl_NumWorkGroups.x)) - 0u))))) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u), 0u ^ (((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u))), _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u), max(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u), ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u))), ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x))) << 0u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), false, false))), false, true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u))) / uvec3(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0)))) - 0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 1.0)), (float(vec3(1.0, 0.0, 1.0))) - 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.5)))))))) && true))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
      {
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> (1 ^ 1))), (int(1)) * 1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           barrier();
          }
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
        }
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))) + ((subgroup_local_id + 1) % subgroup_size), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << 0u), workgroup_base + subgroup_id * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), min((~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), (~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))) | (~ (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) ^ 0u) >> 0u) % subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size)), uint(uvec3(~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), min(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u))) % subgroup_size)), 0u, 1u))))))), ((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), (~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))) | (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), (~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (~ (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) + (1u ^ 1u))))) % subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size)), uint(uvec3(~ ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size)), 0u, 1u)))))))) | 0u))) | 0u)), 0u | ((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1))))))))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), min(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)))) + 1) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_size))) * 1u), (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), 1 * ((1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 + (_GLF_IDENTITY(int(2), int(2))))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(58117))), 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1, (0 & 54513) | (_GLF_IDENTITY(1, 1 * (1)))), ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) ^ (1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u) : _GLF_FUZZED(virtual_gid))))), 0u ^ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), 1, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), clamp(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (1) + 0)))), ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 1 * (1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(2))) | 1), (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(2))) | 1), (((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)) ^ 0)) ^ (0 | 0)))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), ((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)), 0, 1), ivec3(ivec4(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)), 0, 1), 1)))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)), 0, 1), ivec3(ivec4(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)), 0, 1), 1))))) ^ 0))) % subgroup_size : _GLF_FUZZED(virtual_gid)))))) | 0u), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | _GLF_IDENTITY(1, (1) | (1))))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0), mat4x2(mat4x3(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), max(int(ivec2(1, 1)), int(ivec2(1, 1))))), ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) >> 0)))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), (0 ^ (1)) >> 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) - 0)) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), (true ? _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | _GLF_IDENTITY(1, (1) | (1))))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0), mat4x2(mat4x3(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), max(int(ivec2(1, 1)), int(ivec2(1, 1))))), ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) >> 0)))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), (0 ^ (1)) >> 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) - 0)) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), ((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | _GLF_IDENTITY(1, (1) | (1))))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0), mat4x2(mat4x3(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), max(int(ivec2(1, 1)), int(ivec2(1, 1))))), ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) >> 0)))) | 1)))))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), (0 ^ (1)) >> 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) - 0)) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid)))))) / 1u) : _GLF_FUZZED(num_workgroup))), (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), ~ (_GLF_IDENTITY(~ ((0 >> _GLF_IDENTITY(int(2), int(2)))), ~ (~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))))))))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(2))) | 1), (((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)) | (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(2))) | 1), (((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)) << 0))))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2))) | 1)))))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 0), (ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 0)) / ivec2(1, 1))))) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) | 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid)))))))))) * 1u), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY(false, bool(bvec3(false, true, false))) ? _GLF_FUZZED(78292) : (1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), (true ? _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), ~ (~ (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))))) : _GLF_FUZZED(86847)))) | 1), (false ? _GLF_FUZZED(-95042) : ((0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) | 1))))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(1), int(1)))), int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, 0 + (2)))))), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2))))))) | 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))), (true ? (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY(false, bool(bvec3(false, true, false))) ? _GLF_FUZZED(78292) : (1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY(_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) | 1), (((0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) | 1)) | (((0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) | 1))), (false ? _GLF_FUZZED(-95042) : ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), clamp(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))))) | 1))))), max(int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1))), int(ivec4(_GLF_IDENTITY(1, 0 ^ (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2))))))) | 1)))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ (1))) % subgroup_size : _GLF_FUZZED(virtual_gid))))) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size))), ~ (~ ((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size)), ~ (~ (~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size)))))))))), (uint(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size)), ~ (~ (~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size))))))))))) | 0u), (uint(_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) + 1) % subgroup_size))), (_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) + 1) % subgroup_size))), ((~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) + 1) % subgroup_size)))) + 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY((~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1))))) % subgroup_size))), uint(_GLF_IDENTITY(uint((~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1))))) % subgroup_size)))), min(uint((~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1))))) % subgroup_size)))), uint((~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id))) | (subgroup_local_id)) + 1))))) % subgroup_size))))))))))))) - 0u)) + 0u))) | (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> _GLF_IDENTITY(0u, (0u) | (0u))) + ((subgroup_local_id + 1) % subgroup_size))))) | 0u)))));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(31484) : _GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, min(64, 64)))), int(ivec4(false ? _GLF_FUZZED(31484) : _GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, min(64, 64)))), 0, 1, 1))))), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true, false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (76353 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(5), int(5))) & -74168)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))) | 0u)], read, 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0), vec2(0.0, 0.0)), 0.0 + (dot(vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0), vec2(0.0, 0.0))))), tan(abs(0.0)), 1.0, 1.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0)))))) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- -43.05))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || false))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))), false, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- -43.05))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || false))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))), false, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- -43.05))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- -43.05))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || false))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED((- -43.05))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || false)))))) || false), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), max(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))))), false, true, false)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
}
