#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(0), int(0))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (_GLF_IDENTITY(1, (1) | (1))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec2(int(1), (0 | 0)))), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, 89.10))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, 89.10))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, 89.10))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(3966.3558, 89.10)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(vec2(3966.3558, 89.10)), (_GLF_FUZZED(vec2(3966.3558, 89.10))) * vec2(1.0, 1.0))))))) * vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, 89.10))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, _GLF_IDENTITY(89.10, min(89.10, _GLF_IDENTITY(89.10, max(89.10, 89.10))))))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, _GLF_IDENTITY(89.10, min(89.10, _GLF_IDENTITY(89.10, max(89.10, 89.10))))))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, 89.10))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, _GLF_IDENTITY(89.10, min(89.10, _GLF_IDENTITY(89.10, max(89.10, 89.10))))))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3966.3558, _GLF_IDENTITY(89.10, min(89.10, _GLF_IDENTITY(89.10, max(89.10, 89.10))))))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))) || false))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! (! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(! (! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false))))) || false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), true && (! (! (! (injectionSwitch.x > injectionSwitch.y))))))), true, false))))) || false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), cos(0.0)))).x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false))))) || false))))) || false), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))), true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.7))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.7))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.7))) > injectionSwitch.y))))) || false))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false))))) || false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)) || false), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(8.2, -44.72)))).y), ! (! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false))))) || false))))) || false), true))) || false)))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(false, true && (false))) && true)))))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))) || _GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8.4, -6.1)) : injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8.4, -6.1)) : injectionSwitch)).x) + 0.0) > injectionSwitch.y)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))), max(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(187752u, 92315u, 111393u), (false ? _GLF_FUZZED((uvec3(14000u, 100818u, 112337u) * uvec3(993u, 53533u, 142446u))) : uvec3(187752u, 92315u, 111393u)))) : gl_NumWorkGroups)).x))), max(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uint(gl_NumWorkGroups.x)), (uint(uint(gl_NumWorkGroups.x))) >> 0u)))))))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))))), _GLF_IDENTITY(0u, ~ (~ (0u))) ^ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x)))))), ((~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))))))) ^ 0u))) >> 0u)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), clamp(_GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), (~ (~ (gl_NumWorkGroups))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (true ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(15411u, 19591u, 195440u))))), _GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), (false ? _GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(uvec3(135152u, 12662u, 188384u), (_GLF_IDENTITY(uvec3(135152u, 12662u, 188384u), min(uvec3(135152u, 12662u, 188384u), uvec3(135152u, 12662u, 188384u)))) ^ uvec3(0u, 0u, 0u)) - _GLF_IDENTITY(uvec3(124731u, 142404u, 45892u), min(uvec3(124731u, 142404u, 45892u), _GLF_IDENTITY(uvec3(124731u, 142404u, 45892u), uvec3(0u, 0u, 0u) ^ (uvec3(124731u, 142404u, 45892u))))))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED((uvec3(135152u, 12662u, 188384u) - uvec3(124731u, 142404u, 45892u)))), min(~ (_GLF_FUZZED((uvec3(135152u, 12662u, 188384u) - uvec3(124731u, 142404u, 45892u)))), ~ (_GLF_FUZZED((uvec3(135152u, 12662u, 188384u) - uvec3(124731u, 142404u, 45892u)))))))) : ~ (~ (gl_NumWorkGroups)))), ~ (~ (gl_NumWorkGroups))))), 1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u)), clamp(uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u)), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u)), uvec3(uvec4(uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(1u, min(1u, 1u))) >> 0u)) + 0u))))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u), (uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), 1u), ~ (~ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, _GLF_IDENTITY(0u, (0u) / 1u)), uvec4(gl_NumWorkGroups, 0u))))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups))))) + uvec3(0u, 0u, 0u))), uvec3(1u, 1u, 1u) * ((~ _GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups))))) + uvec3(0u, 0u, 0u)))))), 1u)))))))))).x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), (uint(gl_WorkGroupSize.x)) << 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, 0u + (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)))), max(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u), _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)) * workgroup_id))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.3) : injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-78118 & 0)); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true))))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(73.94)), bool(false))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && ((! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (! (false)), false, false, false)), false || (bool(bvec4(! (! (false)), false, false, false)))), false || (bool(bvec4(! (! (false)), false, false, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))) && true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, (false) && true))), ! (! (bool(! (_GLF_IDENTITY(false, (false) && true)))))))))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4244.9704) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, (false) && true))), ! (! (bool(! (_GLF_IDENTITY(false, (false) && true)))))))))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4244.9704) : injectionSwitch.x)) > injectionSwitch.y))) && true)))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, false))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), true && ((_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), true && ((_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), true && ((_GLF_IDENTITY(false, (false) && true))))))), true)), (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), true && ((_GLF_IDENTITY(false, (false) && true))))))), true))) || false))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-19933) : _GLF_IDENTITY(int(3), (int(3)) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) & (_GLF_IDENTITY(-47262, (-47262) | (_GLF_IDENTITY(-47262, (-47262) ^ 0))) / _GLF_IDENTITY(-43307, (false ? _GLF_FUZZED(-33135) : -43307))))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (! _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), bool(bvec4(_GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), ! (! (((_GLF_IDENTITY(false, false || (false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (! ((_GLF_IDENTITY(false, false || (false))))))), ! (! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), false || (true)) && (! _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), (((_GLF_IDENTITY(false, false || (false))))) && true)))))))) || false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (false))))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (false)))))))))))), true, true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true)), _GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true)), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true)), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true)), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true)), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), false)))))))))), false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec4(bool(bvec3(false, false, false)), true, false, false))))) && true)))))) || false))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (! ((_GLF_IDENTITY(false, false || (false))))))), ((_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (! ((_GLF_IDENTITY(false, false || (false)))))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) || (false))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (false))), true)))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))), false, false)), false || (bool(bvec3(! ((_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(false, true, false, true)), false), bvec2(bvec3(bvec2(bool(bvec4(false, true, false, true)), false), true)))))), false)))))))), ! (! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false)))))), false || (false || _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), true && ((false))), true))), true && (_GLF_IDENTITY((false), ! (! ((false))))))))))), _GLF_IDENTITY(true, false || (true)) && (! ((_GLF_IDENTITY(false, false || (false))))))))))) || false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(false, false || (false))))), bool(bvec2(! (! ((_GLF_IDENTITY(false, false || (false))))), true)))))), (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), bool(bool(! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))))))))) && true)))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), ! (! (bool((false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), ! (! (bool((false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), false, true)))))), bvec3(bvec4(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true))), false))))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (! ((_GLF_IDENTITY(false, false || (false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (! ((_GLF_IDENTITY(false, false || (false))))))), ! (! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false))))))))), _GLF_IDENTITY(true, false || (true)) && (! ((_GLF_IDENTITY(false, false || (false))))))))))) || false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false)))), false || (((_GLF_IDENTITY(false, false || (false))))))))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))), ! (! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))))), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (false))))), bool(bvec2((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true))), false)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true)))))) || (_GLF_IDENTITY(false, ! (! (false))))))), true && (! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bool(false || (false)), true && (bool(false || (false)))))))) && true), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))))), (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bool((false)))))) && true), false, false, true)))))))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))))))) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, false || (true)) && (! ((_GLF_IDENTITY(false, false || (false)))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), false || (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))))))))) || false)), _GLF_IDENTITY(true, false || (true)) && (! ((_GLF_IDENTITY(false, false || (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))))), false || (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))), bool(bool(_GLF_IDENTITY(false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))), bool(bool(false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))))))))))))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) || false))) && (! ((_GLF_IDENTITY(false, false || (false))))))))) || false)) && true)))) || false))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) && true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), bvec3(bvec4(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true))), false))))))), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) && true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), bvec3(bvec4(bvec3(bvec3(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))), ! (! ((_GLF_IDENTITY(false, false || (false))))))), true, true))), false))))))))))))))))) || false)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))) || (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || (false)))), bool(bvec2(! ((_GLF_IDENTITY(false, false || (false)))), true)))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || (false)))), bool(bvec2(! ((_GLF_IDENTITY(false, false || (false)))), true))))))))), (! ((_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || (false)))), bool(bvec2(! ((_GLF_IDENTITY(false, false || (false)))), true)))))))))) && true))), false || _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), ! (! ((! ((_GLF_IDENTITY(false, false || (false))))))))))), bool(bool((! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), ! (! ((! ((_GLF_IDENTITY(false, false || (false))))))))))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false)))), (! ((_GLF_IDENTITY(false, false || (false))))) && true), bool(bvec2(! ((_GLF_IDENTITY(false, false || (false)))), true)))))))), false || _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), (_GLF_IDENTITY((false), ((false)) || false)) && true)))))))), bool(bool((! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), ! (! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) && true)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (true && (_GLF_IDENTITY(false, true && (false)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (true && (_GLF_IDENTITY(false, true && (false)))))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (true && (_GLF_IDENTITY(false, true && (false)))))))), false), true)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (true && (_GLF_IDENTITY(false, true && (false)))))))), false), true)), false)))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true && (false), bool(bvec2(_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bool(true && (false))), ! (! (bool(bool(true && (false))))))), false))), ! (! (true && (false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(true && (false), bool(bvec2(_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bool(true && (false))), ! (! (bool(bool(true && (false))))))), false))), ! (! (true && (false)))))) && true))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-9855, ~ (~ (-9855))))))) - 0)), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-9855)))) - 0), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-9855)))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-9855)))) - 0)))), ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) * 1.0) < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-9855, clamp(-9855, -9855, _GLF_IDENTITY(-9855, (0 << _GLF_IDENTITY(int(8), int(8))) + (-9855)))))))) - 0), (false ? _GLF_FUZZED(102704u) : subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(-697.020, -989.231)) : _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) * 1.0) < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-9855, clamp(-9855, -9855, _GLF_IDENTITY(_GLF_IDENTITY(-9855, (-9855) | (1 ^ 1)), (0 << _GLF_IDENTITY(int(8), int(8))) + (-9855)))))))) - 0))))) << (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), (_GLF_IDENTITY(uint(8u), uint(8u))) | (30068u & 0u))))) / 1u) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))));
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), false, true), bvec3(bvec3(bvec3((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), false, true)))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) || false))))))))), (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false, _GLF_IDENTITY(false, (false) || false)))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false, _GLF_IDENTITY(false, (false) || false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) || false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) : _GLF_FUZZED(48.81))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), max(int(8), int(8)))), ~ (~ (_GLF_IDENTITY(int(8), int(8)))))), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, (read) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), mix(vec2(_GLF_FUZZED(94.21), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))[0], _GLF_FUZZED(-192.213)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), injectionSwitch)))), injectionSwitch)), 0.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), min(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(determinant(mat3(34.97, -7.2, 4549.7619, -2323.6696, 545.528, -2854.1686, -281.998, -5.4, 90.93)))))) / 1.0))), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec4(injectionSwitch[1], 0.0, 1.0, 0.0))))), injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.2) : injectionSwitch.x)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true)), float(mat4x2(mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true)), cos(abs(0.0)), 1.0, 1.0, 1.0, determinant(mat4(0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-49.15)), float(injectionSwitch.x), bool(true)))))), float(_GLF_FUZZED((float(20686u) - 242.566))), bool(false))))) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
}
