#version 460
struct _GLF_struct_8 {
 mat4x3 _f0;
 float _f1;
 uint subgroup_size;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
 int _f1;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 uint subgroup_base;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 uvec3 _f1;
 bvec2 _f2;
 int _f3;
 bool _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_2 {
 bool _f0;
 uvec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 int _f1;
 vec4 _f2;
 vec3 _f3;
 bvec2 _f4;
 bvec3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 int _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 float _f1;
 _GLF_struct_4 _f2;
 ivec3 _f3;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat4x3(1.0), 1.0, gl_SubgroupSize);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_0(mat4x2(1.0), mat4x3(1.0)), 1.0, _GLF_struct_4(_GLF_struct_1(vec2(1.0), 1, vec4(1.0), vec3(1.0), bvec2(true), bvec3(true), vec4(1.0)), 1, _GLF_struct_2(true, uvec4(1u), mat4(1.0)), _GLF_struct_3(mat3x2(1.0), uvec3(1u), bvec2(true), 1, true, mat3x4(1.0))), ivec3(1), gl_WorkGroupID.x);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_5.workgroup_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(bvec3(true), subgroup_id * _GLF_struct_replacement_8.subgroup_size, _GLF_struct_6(uvec4(1u), 1));
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_7.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_7.subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_8.subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
