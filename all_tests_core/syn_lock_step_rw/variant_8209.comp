#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_23 {
 ivec3 _f0;
 mat4x2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_22 {
 uint _f0;
 ivec4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_24 {
 mat3 _f0;
 _GLF_struct_22 _f1;
 vec3 _f2;
 _GLF_struct_23 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_20 {
 mat4x3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 vec3 _f1;
 uvec4 _f2;
 bool _f3;
 bvec2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 bvec2 _f1;
 bool _f2;
 mat4x3 _f3;
 bool _f4;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 bvec2 _f1;
 uint read;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
} ;

struct _GLF_struct_25 {
 vec4 _f0;
 _GLF_struct_21 _f1;
 float _f2;
 mat4x2 _f3;
 _GLF_struct_24 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
 vec3 _f1;
 float _f2;
 ivec4 _f3;
 mat3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 vec4 _f1;
 mat2x4 _f2;
 uint workgroup_base;
} ;

struct _GLF_struct_11 {
 float _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
 mat2x4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_9 {
 float _f0;
 bvec3 _f1;
 vec3 _f2;
 ivec2 _f3;
 ivec4 _f4;
 mat3x4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_8 {
 uint _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 mat2x3 _f1;
 _GLF_struct_9 _f2;
 mat3x2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 ivec2 _f1;
 int _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 uvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 bool _f1;
 uint _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 uvec4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 vec2 _f1;
 uvec2 _f2;
 uvec4 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 ivec4 _f4;
 _GLF_struct_5 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_7 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_16 _f2;
} ;

struct _GLF_struct_0 {
 int _f0;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1767.2458)), vec2(_GLF_FUZZED(-8.2), (injectionSwitch)[1]), bvec2(false, true))))).y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1767.2458)), vec2(_GLF_FUZZED(-8.2), (injectionSwitch)[1]), bvec2(false, true))))).y) / 1.0), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, sin(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-843.661))))))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), max(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))))), sqrt(1.0), 0.0, 1.0))), (injectionSwitch.x > injectionSwitch.y) && true)) || false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (0) - 0), 1)))], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)), (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bvec2(true, true))))) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(8.0))))), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(0.0 + (injectionSwitch[0]), (false ? _GLF_FUZZED(exp2(-6.0)) : 0.0 + (injectionSwitch[0])))), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])) / vec2(1.0, 1.0))))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false)))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(0.0 + (injectionSwitch[0]), (false ? _GLF_FUZZED(exp2(-6.0)) : 0.0 + (injectionSwitch[0])))), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])) / vec2(1.0, 1.0))))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false)))) || false))), (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(0.0 + _GLF_IDENTITY((injectionSwitch[0]), float(mat2((injectionSwitch[0]), abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), (false ? _GLF_FUZZED(exp2(-6.0)) : 0.0 + (injectionSwitch[0])))), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0))))])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false, _GLF_IDENTITY(true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))) && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false)) || false))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0 | 0) ^ (_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0))))) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), clamp(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], 0.0 + (injectionSwitch[0])))), injectionSwitch[1])) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))))))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false)))) || false)))) || false))))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6837.4267))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(329.828)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3342.0709))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))))));
              }
             else
              {
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(_GLF_IDENTITY(1, ~ (~ (1))))) | _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (0) | 0)), clamp((0 | _GLF_IDENTITY(0, (0) | 0)), (0 | _GLF_IDENTITY(0, (0) | 0)), (0 | _GLF_IDENTITY(0, (0) | 0)))), max((int(_GLF_IDENTITY(1, ~ (~ (1))))) | (0 | _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(1, ~ (~ (1))))) | (0 | _GLF_IDENTITY(0, (0) | 0)), ((int(_GLF_IDENTITY(1, ~ (~ (1))))) | (0 | _GLF_IDENTITY(0, (0) | 0))) | ((int(_GLF_IDENTITY(1, ~ (~ (1))))) | (0 | _GLF_IDENTITY(0, (0) | 0))))))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((true ? _injected_loop_counter ++ : _GLF_FUZZED(-53802)), 0 ^ (_GLF_IDENTITY((true ? _injected_loop_counter ++ : _GLF_FUZZED(-53802)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(-53802), ~ (~ (true ? _injected_loop_counter ++ : _GLF_FUZZED(-53802))))), 0 + ((_GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(-53802), ~ (~ (true ? _injected_loop_counter ++ : _GLF_FUZZED(-53802))))))), ((true ? _injected_loop_counter ++ : _GLF_IDENTITY(_GLF_FUZZED(-53802), max(_GLF_IDENTITY(_GLF_FUZZED(-53802), (_GLF_FUZZED(-53802)) - 0), _GLF_FUZZED(-53802))))) * 1)))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(0.2, -2.0)), mix(vec2(_GLF_IDENTITY((_GLF_FUZZED(vec2(0.2, -2.0)))[0], mix(float(_GLF_IDENTITY((_GLF_FUZZED(vec2(0.2, -2.0)))[0], (true ? (_GLF_FUZZED(vec2(0.2, -2.0)))[0] : _GLF_FUZZED(-4.5)))), float(_GLF_FUZZED(6088.3855)), bool(false))), _GLF_IDENTITY((_GLF_FUZZED(vec2(0.2, -2.0)))[1], min((_GLF_FUZZED(vec2(0.2, -2.0)))[1], (_GLF_FUZZED(vec2(0.2, -2.0)))[1]))), vec2(_GLF_FUZZED((vec3(-5.4, 2.4, -90.85) * 6504.2925).g), _GLF_FUZZED(-7.5)), bvec2(false, false))) : _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(69.56, 4537.7808)))))).y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           do
            {
             for(int _injected_loop_counter = ((0 & 80115) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))))
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x)))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-7492.5840, 815.330))), vec2(mat2x3(_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-7492.5840, 815.330))), mix(vec2(((true ? injectionSwitch : _GLF_FUZZED(vec2(-7492.5840, 815.330))))[0], _GLF_FUZZED(-7652.6993)), vec2(_GLF_FUZZED(18.18), ((true ? injectionSwitch : _GLF_FUZZED(vec2(-7492.5840, 815.330))))[1]), bvec2(false, true))), 0.0, 1.0, 1.0, 1.0)))), (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7492.5840, 815.330)))), (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y)))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 1, 1)))))); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), false || (_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, (false) && true)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, (false) && true))))), true && (false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, (false) && true)))))))))), false, true))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) >> 0)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 return;
                }
              }
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           return;
          }
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(0.3)), float(injectionSwitch.y), bool(true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
          }
        }
       else
        {
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_7(_GLF_struct_1(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0)))), vec2(1.0), uvec2(1u), uvec4(1u), vec3(1.0)), _GLF_struct_2(uvec4(1u), uvec4(1u), bvec3(true)), _GLF_struct_3(_GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0))), true, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), ivec4(1)), _GLF_struct_4(uvec2(1u), uvec3(1u), uvec3(1u)), ivec4(1), _GLF_struct_5(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_IDENTITY(true, (true) && true)))), ivec2(1), 1, uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u)))))), _GLF_struct_6(mat4x2(1.0), ivec3(1))), _GLF_struct_10(_GLF_struct_8(1u), mat2x3(1.0), _GLF_struct_9(1.0, bvec3(true), vec3(1.0), ivec2(1), ivec4(1), mat3x4(1.0), mat2x3(1.0)), mat3x2(1.0), uvec2(1u)), _GLF_struct_16(_GLF_struct_11(1.0), _GLF_struct_12(ivec4(1), vec4(1.0), mat2x4(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0)))), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(~ (~ (workgroup_size)), ~ (~ _GLF_IDENTITY((~ (~ (workgroup_size))), max((~ (~ (workgroup_size))), (~ (~ (workgroup_size)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)), max(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) >> 0u, (true ? (workgroup_size) >> 0u : _GLF_FUZZED((num_workgroup * subgroup_local_id)))))), uint(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))))))) - 0u), uint(uvec2(workgroup_size, 1u))), workgroup_size))) / 1u) * workgroup_id), _GLF_struct_13(bvec2(true)), _GLF_struct_14(mat4x2(1.0), vec3(1.0), 1.0, ivec4(1), mat3(1.0), vec4(1.0)), _GLF_struct_15(mat4x3(1.0), ivec3(1)), mat2x4(1.0), mat2(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_struct_replacement_17._f2._f1.workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size)), clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)) + subgroup_local_id;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(1, _GLF_struct_replacement_17._f2._f1.workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, (1u) / 1u))) + 0u)))));
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(vec4(1.0), _GLF_struct_21(_GLF_struct_18(mat4x2(1.0), bvec2(true), true, mat4x3(1.0), true), bvec2(true), atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_struct_19(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), vec3(1.0), uvec4(1u), true, bvec2(true), mat2(1.0)), _GLF_struct_20(mat4x3(1.0), mat4(1.0))), 1.0, mat4x2(1.0), _GLF_struct_24(mat3(1.0), _GLF_struct_22(1u, ivec4(1), mat4x2(1.0)), vec3(1.0), _GLF_struct_23(ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-72929) : _GLF_IDENTITY(1, max(1, 1))))), mat4x2(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-55.85)), bool(false))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(1u)), mat4x3(1.0)), mat3(1.0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(1), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((-19.74 / vec2(949.013, 3.2))) : injectionSwitch)), injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))), false), true))))))))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        break;
       continue;
      }
    }
  }
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_25._f1.read, _GLF_IDENTITY(4, ((0 ^ _GLF_IDENTITY(0, clamp(0, 0, 0))) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) - 0)))))) | (4)), _GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 | (_GLF_IDENTITY(64, min(64, 64))))) ^ 0))), 4);
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (0 & int(-7.7)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) - 0) & 1))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) << 0)))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))), bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec2(false, false))))))), false)))))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0) + (_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), (injectionSwitch))))) / vec2(1.0, 1.0)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(62.46)), vec2(_GLF_FUZZED(47.03), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, min(0, 0)))), 0))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0), max(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)) >> 0), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                              {
                              }
                             else
                              {
                               return;
                              }
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 return;
                                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED((- mat2x4(-3.7, -3972.6481, 708.183, -8541.6871, -3.8, 3.9, -79.17, 5957.0649))) : mat2x4(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       continue;
                      }
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0) << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) << (0 << _GLF_IDENTITY(int(1), int(1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             return;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(_GLF_IDENTITY(vec2((injectionSwitch) * mat2(1.0)), mat2(1.0) * (vec2((injectionSwitch) * mat2(1.0))))))).x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true))) && ((false))) && true)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             return;
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -40455)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, sqrt(0.0), 1.0, sin(0.0), cos(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), exp(length(vec3(0.0, 0.0, 0.0))), 0.0))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (int(ivec2(1, 1))) ^ 0))) | (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0), ((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)) / 1), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))))); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                break;
               if(_GLF_DEAD(false))
                continue;
               break;
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), bool(bvec2(_injected_loop_counter < (1 | 1), false))), false, false)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(6.6)), bvec2(true, false))).x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, bool(bool(true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, true))))))), true, false)))))), ! (! (bool(bvec2(false, true)))))) && true)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(false, true, false))))), true)))))) && true))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) - 0), (true ? (0 | 0) : _GLF_FUZZED(-60910)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(32.56, -26.49)))).y)), ! (! (_GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(32.56, -26.49)))).y)), ! (_GLF_IDENTITY(! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(32.56, -26.49)))).y))), ! (! (! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(32.56, -26.49)))).y))))))))))), ! (! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
}
