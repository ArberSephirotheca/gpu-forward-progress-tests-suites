#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat4x2 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_4 {
 float _f0;
 mat3x2 _f1;
 vec2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 bvec3 _f1;
 mat4x3 _f2;
 bvec4 _f3;
 int _f4;
 vec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 mat2 _f3;
 ivec3 _f4;
 mat3x2 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 bvec4 _f1;
 bool _f2;
} ;

struct _GLF_struct_3 {
 uint num_workgroup;
 _GLF_struct_0 _f0;
 uint _f1;
 mat3 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 mat4x3 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_6 _f3;
 mat4x2 _f4;
 _GLF_struct_7 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false), false, false))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (_GLF_IDENTITY(1, ~ (~ (1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))) || false), true && (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec3(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true))))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x > injectionSwitch.y)))))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat2(_GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, round(length(normalize(vec2(1.0, 1.0))))), min(_GLF_IDENTITY(vec2(0.0, round(length(normalize(vec2(1.0, 1.0))))), vec2(0.0, 0.0) + (vec2(0.0, round(length(normalize(vec2(1.0, 1.0))))))), vec2(0.0, round(length(normalize(vec2(1.0, 1.0))))))), vec2(0.0, 1.0)), dot(vec2(0.0, round(length(normalize(vec2(1.0, 1.0))))), vec2(0.0, 1.0))))), (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))) ? float(mat3x2(injectionSwitch.x, 0.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, round(_GLF_IDENTITY(length(normalize(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), 1.0))), min(length(normalize(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_ONE(1.0, injectionSwitch.y)), 1.0))), length(normalize(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_ONE(1.0, injectionSwitch.y)), 1.0))))))), vec2(0.0, 1.0)), dot(vec2(0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))))), vec2(0.0, 1.0))))) : _GLF_FUZZED(cosh(8.7))))) > injectionSwitch.y) && true))) ? _GLF_FUZZED(-400.677) : 1.0))), mat4x3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_3(gl_NumWorkGroups.x, _GLF_struct_0(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(pow(_GLF_IDENTITY(-22.36, _GLF_IDENTITY(mix(float(_GLF_FUZZED(vec3(-577.291, -8.7, _GLF_IDENTITY(_GLF_IDENTITY(-6065.8676, clamp(-6065.8676, _GLF_IDENTITY(-6065.8676, (true ? -6065.8676 : _GLF_FUZZED(730.416))), _GLF_IDENTITY(-6065.8676, (false ? _GLF_FUZZED(-9.2) : -6065.8676)))), mix(float(-6065.8676), float(_GLF_FUZZED((-19.38 / -6.1))), bool(false)))).p)), float(_GLF_IDENTITY(_GLF_IDENTITY(-22.36, clamp(_GLF_IDENTITY(-22.36, clamp(_GLF_IDENTITY(-22.36, clamp(-22.36, -22.36, -22.36)), -22.36, -22.36)), -22.36, _GLF_IDENTITY(-22.36, (-22.36) / abs(1.0)))), min(-22.36, -22.36))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), max(mix(float(_GLF_FUZZED(vec3(-577.291, -8.7, _GLF_IDENTITY(-6065.8676, mix(float(-6065.8676), float(_GLF_FUZZED((-19.38 / -6.1))), bool(false)))).p)), float(_GLF_IDENTITY(_GLF_IDENTITY(-22.36, clamp(_GLF_IDENTITY(-22.36, (true ? -22.36 : _GLF_FUZZED(-6.7))), -22.36, _GLF_IDENTITY(-22.36, (-22.36) / abs(1.0)))), min(-22.36, -22.36))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(vec3(-577.291, -8.7, _GLF_IDENTITY(-6065.8676, mix(float(-6065.8676), float(_GLF_FUZZED((-19.38 / -6.1))), bool(false)))).p)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-22.36, min(_GLF_IDENTITY(-22.36, max(_GLF_IDENTITY(-22.36, clamp(-22.36, -22.36, -22.36)), -22.36)), -22.36)), clamp(-22.36, -22.36, _GLF_IDENTITY(-22.36, _GLF_IDENTITY((-22.36) / abs(1.0), min(_GLF_IDENTITY((-22.36) / abs(1.0), max((-22.36) / abs(1.0), (-22.36) / abs(1.0))), (-22.36) / abs(1.0)))))), min(-22.36, -22.36))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), asinh(_GLF_IDENTITY(-9.2, (-9.2) / 1.0))))))), (mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), (_GLF_IDENTITY(max(1.0, 1.0), (max(1.0, 1.0)) / 1.0)) - 0.0)), 1.0, 1.0)))) * mat2(1.0)), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(857.599, -2.7, 8.9, -3.3, 421.107, 78.24, 813.277, -1.3, -11.86))))), (mat2(1.0)) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), (false ? _GLF_FUZZED(mat2(37.93, 7.5, -83.96, 10.08)) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(857.599, -2.7, 8.9, _GLF_IDENTITY(-3.3, mix(float(-3.3), float(_GLF_FUZZED(-60.52)), bool(false))), 421.107, 78.24, 813.277, -1.3, _GLF_IDENTITY(-11.86, max(-11.86, -11.86))))))), (mat2(1.0)) * mat2(1.0)))), (true ? _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-81.73)), float(1.0), bool(_GLF_IDENTITY(true, false || (true))))))) * mat2(1.0)) : _GLF_FUZZED(mat2(40.73, 9.9, -4028.7446, 9.7)))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(857.599, -2.7, 8.9, -3.3, 421.107, 78.24, 813.277, -1.3, -11.86))))), (mat2(1.0)) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), (false ? _GLF_FUZZED(mat2(37.93, 7.5, -83.96, 10.08)) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(857.599, -2.7, 8.9, _GLF_IDENTITY(-3.3, mix(float(-3.3), float(_GLF_FUZZED(-60.52)), bool(false))), 421.107, 78.24, 813.277, -1.3, _GLF_IDENTITY(-11.86, max(-11.86, -11.86))))))), (mat2(1.0)) * mat2(1.0)))), (true ? _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-81.73)), float(1.0), bool(_GLF_IDENTITY(true, false || (true))))))) * mat2(1.0)) : _GLF_FUZZED(mat2(40.73, 9.9, -4028.7446, 9.7))))), transpose(transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(857.599, -2.7, 8.9, -3.3, 421.107, 78.24, 813.277, -1.3, -11.86))))), (mat2(1.0)) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), (false ? _GLF_FUZZED(mat2(37.93, 7.5, -83.96, 10.08)) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(857.599, -2.7, 8.9, _GLF_IDENTITY(-3.3, mix(float(-3.3), float(_GLF_FUZZED(-60.52)), bool(false))), 421.107, 78.24, 813.277, -1.3, _GLF_IDENTITY(-11.86, max(-11.86, -11.86))))))), (mat2(1.0)) * mat2(1.0)))), (true ? _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-81.73)), float(1.0), bool(_GLF_IDENTITY(true, false || (true))))))) * mat2(1.0)) : _GLF_FUZZED(mat2(40.73, 9.9, -4028.7446, 9.7))))))))))))), bvec4(true), true), 1u, mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.7)), bool(false))), (1.0) - 0.0)), _GLF_struct_1(mat4x2(1.0), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(max(1.0, 1.0), float(_GLF_IDENTITY(mat4(max(1.0, 1.0), 0.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(42.18) : 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-952.556)), bool(false))))), transpose(_GLF_IDENTITY(transpose(mat4(max(1.0, 1.0), 0.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(1.0))), (true ? transpose(mat4(max(1.0, 1.0), 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-261.692) : 0.0)), log(1.0), 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(1.0))) : _GLF_FUZZED(mat4(-1.3, -6.2, 3.5, 44.50, 703.181, 7.4, -6.3, 3.8, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-404.599)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 7.3, 38.34, -64.38, _GLF_IDENTITY(3.4, float(_GLF_IDENTITY(mat2x4(3.4, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(873.720)), float(1.0), bool(_GLF_IDENTITY(true, ! (! (true)))))), exp(0.0), 0.0, sin(0.0), 0.0), mat2x4(mat2x4(mat2x4(3.4, 0.0, 0.0, 1.0, exp(0.0), 0.0, sin(0.0), 0.0)))))), -8.4, 9251.4970, -13.66)))))))))), mat3x2(1.0), _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0))))), (true ? transpose(_GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0))))) : _GLF_FUZZED(mat2(8.6, -0.5, -4.2, 0.6))))))))), ivec3(1), mat3x2(1.0), uvec2(1u)), _GLF_struct_2(mat4x3(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(true))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(true))))), true)), true))))), true))))))), mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(pow(981.298, 1.5)), mix(float(_GLF_FUZZED(vec3(7.9, -6094.1458, 67.81).s)), float(_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(vec3(38.59, -922.801, -5.8)) : _GLF_IDENTITY(mat3(1.0) * (vec3(1.0, 0.0, 1.0)), clamp(mat3(1.0) * (vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(mat3(1.0) * (vec3(1.0, 0.0, 1.0)), min(mat3(1.0) * (vec3(1.0, 0.0, 1.0)), mat3(1.0) * (vec3(1.0, 0.0, 1.0)))), mat3(1.0) * (vec3(1.0, 0.0, 1.0))))))))) : _GLF_FUZZED(pow(981.298, _GLF_IDENTITY(1.5, clamp(1.5, 1.5, 1.5)))), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), mat3(1.0) * (vec3(1.0, 0.0, 1.0))))) : _GLF_FUZZED(pow(981.298, _GLF_IDENTITY(1.5, clamp(1.5, 1.5, 1.5)))), (true ? _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), mat3(1.0) * (vec3(1.0, 0.0, 1.0))))) : _GLF_FUZZED(pow(981.298, _GLF_IDENTITY(1.5, clamp(1.5, 1.5, 1.5))))) + 0.0) : _GLF_FUZZED(1253.6984))), mix(float(true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(pow(981.298, 1.5))), float(_GLF_FUZZED(-1874.4392)), bool(false)))), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bool(bool(true))))) && true)))))), bvec4(true), 1, vec3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.9) : 1.0))), ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) + 0), 1, 1))))), _GLF_struct_6(_GLF_struct_4(1.0, mat3x2(1.0), vec2(1.0), bvec4(true)), _GLF_struct_5(mat4(1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, (true ? _GLF_IDENTITY((1.0) / 1.0, min((1.0) / 1.0, _GLF_IDENTITY((1.0) / 1.0, clamp((1.0) / 1.0, (1.0) / 1.0, (1.0) / 1.0)))) : _GLF_FUZZED(-3.8))))))), mix(vec3((vec3(1.0))[0], (vec3(1.0))[1], _GLF_IDENTITY((vec3(1.0))[2], ((vec3(1.0))[2]) / 1.0)), _GLF_IDENTITY(vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))), clamp(_GLF_IDENTITY(vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))), (true ? vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))) : _GLF_FUZZED(vec3(9093.4815, 626.886, 9.0)))), _GLF_IDENTITY(vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))), mix(vec3(_GLF_FUZZED(97.69), (vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))))[1], (vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))))[2]), vec3((vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))))[0], _GLF_FUZZED(5.8), _GLF_FUZZED(-1877.4767)), bvec3(true, false, false))))), _GLF_IDENTITY(vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))), vec3(0.0, 0.0, 0.0) + (vec3(_GLF_FUZZED(4.2), _GLF_FUZZED(-89.49), _GLF_FUZZED((2477.8488 * 5.6))))))), bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false))))), mat4x2(1.0), _GLF_struct_7(mat4x2(1.0)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y))) || false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, log(1.0), 0.0, 0.0))).x > injectionSwitch.y))) && true))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(381.290), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.4)), bvec2(true, false))).y))))), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), true, false)))), false))) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)), false, true)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-61.66)))), float(_GLF_FUZZED((296.649 * 550.729))), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9768.2970)), bvec2(true, false))), injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-19.70), _GLF_FUZZED(float(69312u))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, abs(1.0), 0.0, 1.0))), 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))))))) || false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(-13293, (-13293) - 0) & 0), min((_GLF_IDENTITY(-13293, (-13293) - 0) & 0), (_GLF_IDENTITY(_GLF_IDENTITY(-13293, (-13293) - 0), (-13293) - 0) & 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false)))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(98.34)), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))))
                barrier();
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (6))) | (6))), (int(6)) | (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), max(~ (int(6)), ~ (int(6)))))))))), ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (6))) | (6))), (int(6)) | (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), max(~ (int(6)), ~ (int(6))))))))))) | ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (6))) | (6))), (int(6)) | (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), max(~ (int(6)), ~ (int(6)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? 1 : _GLF_FUZZED(-60862)))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(ivec4(_GLF_IDENTITY(-42994, int(_GLF_IDENTITY(ivec4(-42994, 0, (3315 & 0), (0 >> _GLF_IDENTITY(int(6), int(6)))), (ivec4(-42994, 0, (3315 & 0), (0 >> _GLF_IDENTITY(int(6), int(6))))) | (ivec4(-42994, 0, (3315 & 0), (0 >> _GLF_IDENTITY(int(6), int(6)))))))), 90882, -7037, -27475).t) : _injected_loop_counter ++)))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)), vec2(mat3x2(vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0)))))[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(6.5)), bvec2(true, false))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bool((false)))))))) && true))))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), min(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (0 & -91245) ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) >> 0)))) | (_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, _GLF_IDENTITY(0, max(0, 0))), 0 | (min(0, 0)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * (0u | 1u));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), ((1 & 1)) | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(6, 6, 6))) << 0)), int(6)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(36964u) : subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(7), int(7), int(7)), int(ivec3(clamp(int(7), int(7), int(7)), (0 << _GLF_IDENTITY(int(8), int(8))), 1))), ~ (~ (clamp(int(7), int(7), int(7))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(clamp(int(7), int(7), int(7)), ~ (~ (clamp(int(7), int(7), int(7))))))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(clamp(int(7), int(7), int(7)), ~ (~ (clamp(int(7), int(7), int(7)))))))) >> 0)) | 0)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-60229 & 0)); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
          barrier();
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))) || false), false))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-18.81, 76.75, 9630.4759, -3.6).g), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.9)), bvec2(true, false))).y)) || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! _GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false))))))), (! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true))), true, false, true))), true)))))))))))))) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))) || false), false))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-18.81, 76.75, 9630.4759, -3.6).g), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.9)), bvec2(true, false))).y)) || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! _GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false))))))), (! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true))), true, false, true))), true)))))))))))))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec4(bvec2((! (false)), true), false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec4(bvec2((! (false)), true), false, true)))), (bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec4(bvec2((! (false)), true), false, true))))) && true)), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec4(bvec2((! (false)), true), false, true)))), (bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec4(bvec2((! (false)), true), false, true))))) && true)))))))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), false, false))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), true, true))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-18.81, 76.75, _GLF_IDENTITY(9630.4759, clamp(_GLF_IDENTITY(9630.4759, max(9630.4759, _GLF_IDENTITY(9630.4759, min(9630.4759, 9630.4759)))), 9630.4759, 9630.4759)), -3.6).g), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + (0 | 0))) | (0))], _GLF_FUZZED(7.9)), bvec2(true, false))).y)) || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! _GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false))))))), (! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true)), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false))))))), (! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true)), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false))))))), (! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true)), true), true)))))), true, false, true))), true)))))))))))))) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true))))))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true)))))))))), (bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true))))))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true, true))))))))))) && true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), ! (! ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(14.98), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(5975u))), bvec2(true, false))).x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))) || false), false))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-18.81, 76.75, 9630.4759, -3.6).g), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.9)), bvec2(true, false))).y)) || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), true && (_GLF_IDENTITY(((false)), true && (((false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && _GLF_IDENTITY((((false))), ((((false)))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true, bool(bvec4((! (_GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), true && (((false)))))))) && true, true, false, false)))))), true, false, true))), true)))))))))))))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), true && (_GLF_IDENTITY((! (_GLF_DEAD(false))), false || ((! (_GLF_DEAD(false)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) ^ (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base, (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false))), false, false, false)))) ? _GLF_IDENTITY(workgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base : _GLF_FUZZED(workgroup_id))) : _GLF_FUZZED(workgroup_id))) + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base + subgroup_base), 0u ^ (_GLF_IDENTITY(0u ^ (workgroup_base + subgroup_base), (0u ^ (workgroup_base + subgroup_base)) | (0u ^ (workgroup_base + subgroup_base)))))))), workgroup_base + subgroup_base)), workgroup_base + subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), max(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | _GLF_IDENTITY((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), ~ (~ (_GLF_IDENTITY((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | 0u)))))))))) + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), max(_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) / 1u), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), subgroup_local_id)))))))) + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id)) + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(97273) : 1))) | 0u)), uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), max(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))))) + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), subgroup_local_id, subgroup_local_id)) + 1) | 0u))), (uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), subgroup_local_id, subgroup_local_id), max(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id)))) + 1) | 0u)))) | 0u)))) / (1u & (1u ^ 0u))) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), max(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)))))) ^ 0u), (workgroup_base + subgroup_base + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), 1, 1, 1)), max(int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (~ (1))))), 1, 1)), int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), 1, 1, 1))))))), int(ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(75877))), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), _GLF_IDENTITY(~ (1), (~ (1)) ^ 0))), 1, 0, 1))), 1, 1, 1)), max(int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(ivec2(int(ivec2(1, 1)), 0))))))), 1, _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))))), 1))), 1, 1, 1)), int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), 1, 1, 1))))))), 1, 1, 1)))) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), min(_GLF_IDENTITY(uint(subgroup_local_id), clamp(uint(subgroup_local_id), uint(subgroup_local_id), uint(subgroup_local_id))), uint(subgroup_local_id))))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), 1, 1, 1)), max(int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(_GLF_IDENTITY(~ (1), (~ (1)) | 0), ~ (1), ~ (1))), 1, 0, 1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) * 1)))) - 0), 1, 1)), int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), 1, 1, 1)))))))) | (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), min(1, 1))), clamp(~ (_GLF_IDENTITY(1, min(1, 1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(ivec3(1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) / 1)), min(1, 1))), ~ (_GLF_IDENTITY(1, min(1, 1))))) : _GLF_FUZZED(-77379)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(clamp(~ (1), ~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((1), ((1)) / 1))), ~ (1)), (clamp(~ (1), ~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY((1), ((1)) / 1))), ~ (1))) - 0)), 1, 0, 1))), _GLF_IDENTITY(1, (1) | (1)), 1, 1)), max(int(ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ((1)) / 1), int(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) ^ 0)), clamp(~ (1), ~ (1), ~ (1))), 1, 0, 1))), 1, 1, 1)), int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), clamp(~ _GLF_IDENTITY((1), ((1)) | 0), ~ (1), ~ _GLF_IDENTITY((1), ((1)) ^ 0))), _GLF_IDENTITY(1, 0 ^ (1)), 0, 1))), 1, 1, 1)))))))) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) | 0u))) % subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_local_id), (true ? uint(subgroup_local_id) : _GLF_FUZZED(33236u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_local_id), (true ? uint(subgroup_local_id) : _GLF_FUZZED(33236u))), (_GLF_IDENTITY(uint(subgroup_local_id), (true ? uint(subgroup_local_id) : _GLF_FUZZED(33236u)))) / 1u) : _GLF_FUZZED(workgroup_id))))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), (true ? uint(subgroup_local_id) : _GLF_IDENTITY(_GLF_FUZZED(33236u), (_GLF_FUZZED(33236u)) - 0u))))), uint(uint(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) * 1u), (true ? uint(subgroup_local_id) : _GLF_FUZZED(33236u)))))))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), (true ? uint(subgroup_local_id) : _GLF_FUZZED(33236u))))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), 0 | (1))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), int(1)), ~ (~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) | (0 << _GLF_IDENTITY(int(1), int(1))))))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) << 0))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) - 0)))))) % subgroup_size) >> 0u))) / 1u);
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))))))], 4, 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (4) * 1));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false, true)), true && (bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), clamp(min(0, 0), min(0, 0), _GLF_IDENTITY(min(0, 0), min(min(0, 0), min(0, 0))))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, false))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         subgroupBarrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)))))), _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), (true && (injectionSwitch.x > injectionSwitch.y)) || false))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), true, false, true))))));
    }
   else
    {
    }
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
}
