#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec4 GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base;
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id;
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid;
 GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw = GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.xy = GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.zw;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy = GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id.x = subgroup_id;
 do
  {
   GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x = GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id.x;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, cos(0.0), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), true)))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.x = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- -1081.5451))), bool(false))) : _GLF_FUZZED(5478.4884))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- -1081.5451))), bool(false))) : _GLF_FUZZED(5478.4884))))), ! (! (bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- -1081.5451))), bool(false))) : _GLF_FUZZED(5478.4884)))))))))))), true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))) && true))), ! (! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.7)), bvec2(true, false))).x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))), (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))) && true)), bool(bvec3(! (_GLF_IDENTITY(! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))), (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))) && true)), true, false))))))), bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), false, true))))))), true))))))))), bool(bool((_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), ! (! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4199.8007)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9446.0919), _GLF_FUZZED(8665.6548)), bvec2(false, false))).y, false, false, true)), (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9446.0919), _GLF_FUZZED(8665.6548)), bvec2(false, false))).y, false, false, true))) || false), bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), false, true))))))), true)))))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))))))))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size;
 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.w = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z = subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (max(injectionSwitch, injectionSwitch))), max(injectionSwitch, injectionSwitch))), max(injectionSwitch, injectionSwitch)))).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, log(1.0), 0.0))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, log(1.0), 0.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0))), mat3(1.0) * (vec3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), (false ? _GLF_FUZZED(vec3(167.230, -709.034, 7.7)) : vec3(injectionSwitch, 0.0))))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0))), mat3(1.0) * (vec3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), (false ? _GLF_FUZZED(vec3(167.230, -709.034, 7.7)) : vec3(injectionSwitch, 0.0))))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0))), mat3(1.0) * (vec3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), (false ? _GLF_FUZZED(vec3(167.230, -709.034, 7.7)) : vec3(injectionSwitch, 0.0))))).y), true, true))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(vec3(167.230, -709.034, 7.7)) : vec3(injectionSwitch, 0.0))))).y)))))) || _GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true))))) && (_GLF_DEAD(false))))
            return;
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(7.2))) > injectionSwitch.y))))))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(5.9) : _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))))), mix(float(_GLF_FUZZED(-73.86)), float(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))))), bool(true))))) - 0.0) > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3((false) && true, false, true))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) | 0u);
 GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base.x = num_workgroup;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.y = _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup --)) : GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)).y;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)) + (injectionSwitch.x)))) > injectionSwitch.y))))
    return;
   return;
  }
 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.z = _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.y, 0u + (GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.y));
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, true))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(bvec4((false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), true, false, false)))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, ! (! (true)))) && true))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, abs(1.0), 1.0), vec4(abs(0.0), 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, abs(1.0), 1.0), vec4(abs(0.0), 1.0, 0.0, 0.0))), 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0), transpose(_GLF_IDENTITY(transpose(mat4x3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, abs(1.0), 1.0), vec4(abs(0.0), 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, abs(1.0), 1.0), vec4(abs(0.0), 1.0, 0.0, 0.0))), 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0)), (transpose(mat4x3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, abs(1.0), 1.0), vec4(abs(0.0), 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, abs(1.0), 1.0), vec4(abs(0.0), 1.0, 0.0, 0.0))), 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! _GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true && (((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), ! (! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0))).y))), true && ((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0))).y))))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), bool(bool(bool(bvec2(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))) || false)), ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(_GLF_IDENTITY(true, (true) || false), true, true)))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0))))).y, float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0))), (true ? _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec2(-5592.7868, -66.06)[1]))))).y))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0))))).y, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(153.480)), bvec2(false, false))), vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0))), (true ? _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-94.91)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec2(-5592.7868, -66.06)[1]))))).y)))) && true))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat4(0.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), false || ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))) * mat2(1.0), (true ? (vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)) : _GLF_FUZZED(injectionSwitch))))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])), injectionSwitch), vec2(1.0, 1.0) * (max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])), injectionSwitch)))).y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec3(false || (false), true, false), bvec3(bvec4(bvec3(false || (false), true, false), true))))), ! (! (false || (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)), false)), (_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), (bool(bvec4(! (_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) || false)) || false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) && true))))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y) || false)))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / (uvec3(0u, 0u, 0u) ^ uvec3(1u, 1u, 1u))).x;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8888.4934), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.9)), bvec2(true, false))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id.z = workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.w = GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id.z;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec2(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y))), false)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_base = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y * GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base.z = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id.y = GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base.z;
 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z = GLF_merged3_0_1_11_1_1_14_2_1_12subgroup_idworkgroup_baseworkgroup_id.y;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.x * _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, _GLF_IDENTITY(max(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size), max(max(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size), max(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size)))).w, (GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.x * GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.w) | 0u) + GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base.y = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x;
  }
 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y = GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupvirtual_gidworkgroup_base.y;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(892.790)), bool(false))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
        }
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), ! (! (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) && true))))))))))), ! (! (false)))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))).y)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.xy.y = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.y = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.xy.y;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z, clamp(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z, GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z, max(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id, min(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id)).z, (GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z) / 1u))))) + _GLF_IDENTITY(GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.x, (GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.x) | 0u) * _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, (GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size) / uvec4(1u, 1u, 1u, 1u)).w + ((GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z + 1) % GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.w);
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true)))), true && (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true)))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true)))), true && (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), true, true))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size.xy.x = GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, 0 ^ (2)), 2)))) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), clamp(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)), ~ (_GLF_IDENTITY(~ (int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), 0 + (~ (int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))))))))) << 0))), _GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), int(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), min(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), _GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))))))), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)) : _GLF_FUZZED(bitfieldExtract(39740, 73157, 64267)))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)))), 0 | (0 << _GLF_IDENTITY(int(2), int(2))))) | (0 << _GLF_IDENTITY(int(2), int(2)))), 0 ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, 0 ^ (2)), 2)))) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), clamp(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)), ~ (_GLF_IDENTITY(~ (int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), 0 + (~ (int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))))))))) << 0))), _GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), int(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), min(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0))), _GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))))))), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)) : _GLF_FUZZED(bitfieldExtract(39740, 73157, 64267)))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(int(2), (int(2)) << 0)))), int(2)))), 0 | (0 << _GLF_IDENTITY(int(2), int(2))))) | (0 << _GLF_IDENTITY(int(2), int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(int(6), (0 >> _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy, (GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy) | (GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy)).y], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (64)))) | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)))), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, clamp(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size, GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size))) | (GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gidnum_workgroupsubgroup_size)).xy.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (bool(bool(_GLF_IDENTITY(false, (false) || false)))) && true))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 atomicStore(checker[GLF_merged2_0_2_47_2_2_52GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_16_1_1_11next_virtual_gidvirtual_gid.xy.y], read, _GLF_IDENTITY(4, 1 * (4)), 64, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(26343))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), bvec3(bvec4(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), bvec3(bvec4(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), true)))), true)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
