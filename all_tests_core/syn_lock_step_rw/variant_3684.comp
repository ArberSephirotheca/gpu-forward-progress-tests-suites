#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = ((((_GLF_IDENTITY(1 & 1, 0 | (1 & 1))) | (0 << _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-81804) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, (true) || false)))))), (! (_GLF_WRAPPED_LOOP(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) || false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bool(_GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))) && true)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), false || (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, ! (! (false))))))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))))), injectionSwitch.y)), 0, 0))) ^ 0), bool(bvec3(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))))), injectionSwitch.y)), 0, 0))) ^ 0), true, false)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-43682, int(_GLF_IDENTITY(_GLF_IDENTITY(int(-43682), ~ (~ (int(-43682)))), (_GLF_IDENTITY(int(-43682), ~ (~ (int(-43682))))) | (_GLF_IDENTITY(int(-43682), ~ (~ (int(-43682)))))))))))) | (int(0))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) + 0)) | (int(0)))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || false)))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(68966u)), _GLF_FUZZED(_GLF_IDENTITY(-470.135, (true ? -470.135 : _GLF_FUZZED(-0.3))))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), bvec2(true, true))).x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))));
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)), (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))))))), true))) || false))))))) && true)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))))
                barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))), false, true, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))), false, true, false))))) && true))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, (true) && true) ? injectionSwitch.x : _GLF_FUZZED(440.121))) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))))))))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-31.24, 4714.7127))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 & _GLF_IDENTITY(1, int(ivec3(1, 1, 1)))), bool(bvec4(_injected_loop_counter < (1 & _GLF_IDENTITY(1, int(ivec3(1, 1, 1)))), true, true, true)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))) && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)), (_injected_loop_counter --) >> 0))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(6, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (true ? injectionSwitch.y : _GLF_FUZZED(-5661.8440)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(6, 6)))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), bool(bvec3((true), true, false)))))), bool(bvec4(_GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), bool(bvec3((true), true, false)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1804.0572)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4690.2191)), bool(false)))), bool(true))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-329.780), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(4.0)), bvec2(true, false))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6185.2209)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))))))) || false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-93.50)), vec2(_GLF_FUZZED(5449.5213), (injectionSwitch)[1]), bvec2(false, true))).y))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), max(~ (gl_WorkGroupID), ~ (gl_WorkGroupID))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) | _GLF_IDENTITY(1, (1) / 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) != 0), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (0 & 95880) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))), _injected_loop_counter, _injected_loop_counter)) != 0)), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) != 0))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (! ((false))))) || false)), false || ((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (! ((false))))) || false))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), (_GLF_IDENTITY((false), ! (! ((false))))) || false)) || false)))) && true)) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0)))) && true); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))) - 0.0), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(892.164), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(892.164)) + 0.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (_GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y) - 0.0), mix(float(_GLF_FUZZED(53.47)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), _GLF_IDENTITY(bool(true), bool(bvec3(_GLF_IDENTITY(bool(true), (bool(true)) || false), false, true)))))) + 0.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-4.8), (_GLF_IDENTITY(_GLF_FUZZED(-4.8), clamp(_GLF_FUZZED(-4.8), _GLF_FUZZED(-4.8), _GLF_FUZZED(-4.8)))) * _GLF_ONE(1.0, injectionSwitch.y)))), 0.0))) : _GLF_FUZZED(-367.732)))), float(_GLF_FUZZED(4.4)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(39.98, 512.618)))).y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))));
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0), (true ? mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0) : _GLF_FUZZED(mat4x3(-843.773, 945.238, -4998.9820, 512.644, 4.5, 34.56, -20.83, -1446.9944, -2254.3803, 232.552, 6.3, 4.7))))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0), (true ? mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0) : _GLF_FUZZED(mat4x3(-843.773, 945.238, -4998.9820, 512.644, 4.5, 34.56, -20.83, -1446.9944, -2254.3803, 232.552, 6.3, 4.7)))))) - 0.0)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.5)), float(injectionSwitch.x), bool(true))))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-42.91)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 0.0)))))))))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) + 0))))
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) / 1u)) ^ 0u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) / 1u)), ((_GLF_IDENTITY(0u, (0u) / 1u))) ^ 0u))))))) * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true, true, true), false)), false)))))), false || _GLF_IDENTITY((true), true && ((true)))) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)) + subgroup_base + subgroup_local_id) * 1u), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) * 1u))))) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) + _GLF_IDENTITY(subgroup_base, uint(uvec3(subgroup_base, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + subgroup_local_id) * _GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec4(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u, 0u))), (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))) + 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-69929))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(int(6)))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (6)), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-8244) : _GLF_IDENTITY(6, (6) + 0))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))));
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), false, true))), (false) && true)));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(140032u) : (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(3u, 3u, _GLF_IDENTITY(3u, (3u) | (3u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) - 0u)), 1u * (_GLF_IDENTITY(uint(3u), ~ (~ (_GLF_IDENTITY(uint(3u), (uint(3u)) << 0u)))))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), true && ((true)))))))) ? _GLF_FUZZED(num_workgroup) : subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), min((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u))))) | (0u & 130530u))) ^ 0u))))), (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(num_workgroup))))) ^ (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), true && ((true)))))))) ? _GLF_FUZZED(num_workgroup) : subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), min((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (~ _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))) ^ 0u)) - 0u)))) / 1u))))) | (0u & 130530u))) ^ 0u))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), ! (! (true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))))))))) && true) ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id))))) ^ 0u), 1u, 0u, 1u))), ~ (~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u)))))))))))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, (3u) - 0u), 3u, 3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) ^ 0u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? num_workgroup : _GLF_FUZZED(subgroup_size))), clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_size))), max(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), max(0u | (subgroup_local_id), 0u | (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup))) : subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ (1u)))) * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) + 0u))), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), 1u * (~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u))) / 1u)) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))) | 0u)), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (_GLF_IDENTITY(uint(3u), max(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(workgroup_id))), uint(3u))))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id))))) ^ 0u), 1u, 0u, 1u))), ~ (~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u)))))))))))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, (3u) - 0u), 3u, 3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) ^ 0u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? num_workgroup : _GLF_FUZZED(subgroup_size))), clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_size))), max(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), max(0u | (subgroup_local_id), 0u | (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup))) : subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ (1u)))) * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) + 0u))), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), 1u * (~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u))) / 1u)) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))) | 0u)), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (_GLF_IDENTITY(uint(3u), max(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(workgroup_id))), uint(3u))))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id))))) ^ 0u), 1u, 0u, 1u))), ~ (~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u)))))))))))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, (3u) - 0u), 3u, 3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) ^ 0u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? num_workgroup : _GLF_FUZZED(subgroup_size))), clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_size))), max(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), max(0u | (subgroup_local_id), 0u | (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup))) : subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ (1u)))) * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) + 0u))), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), 1u * (~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u))) / 1u)) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))) | 0u)), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (_GLF_IDENTITY(uint(3u), max(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(workgroup_id))), uint(3u))))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id))))) ^ 0u), 1u, 0u, 1u))), ~ (~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u)))))))))))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, (3u) - 0u), 3u, 3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) ^ 0u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? num_workgroup : _GLF_FUZZED(subgroup_size))), clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_size))), max(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), max(0u | (subgroup_local_id), 0u | (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup))) : subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ (1u)))) * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) + 0u))), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), 1u * (~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u))) / 1u)) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))) | 0u)), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (_GLF_IDENTITY(uint(3u), max(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(workgroup_id))), uint(3u))))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id))))) ^ 0u), 1u, 0u, 1u))), ~ (~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), 1u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u)))))))))))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, (3u) - 0u), 3u, 3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) ^ 0u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? num_workgroup : _GLF_FUZZED(subgroup_size))), clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_size))), max(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), max(0u | (subgroup_local_id), 0u | (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup))) : subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ (1u)))) * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) + 0u))), _GLF_FUZZED(num_workgroup))) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), 1u * (~ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), 1u, 1u, 0u))) / 1u)) : subgroup_size))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))) | 0u)), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))), (1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (_GLF_IDENTITY(uint(3u), max(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(workgroup_id))), uint(3u))))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)))) + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))))))))))), 0u, (0u ^ 1u), 0u)))) | ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, 0u ^ (1u)) * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) - 0u) * (uint(_GLF_IDENTITY(3u, 0u ^ (3u))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 1u)))), uint(3u)), (_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) - 0u) * (uint(_GLF_IDENTITY(3u, 0u ^ (3u))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 1u)))), uint(3u)), 1u * ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) - 0u) * (uint(_GLF_IDENTITY(3u, 0u ^ (3u))))), (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) - 0u) * (uint(_GLF_IDENTITY(3u, 0u ^ (3u)))))) ^ (0u | 0u)))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 1u)))), uint(3u)))), uint(uvec4(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) - 0u) * (uint(_GLF_IDENTITY(3u, 0u ^ (3u))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 1u)))), uint(3u)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) - 0u) * (uint(_GLF_IDENTITY(3u, _GLF_IDENTITY(0u ^ (3u), (0u ^ (3u)) ^ 0u))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 1u)))), uint(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(virtual_gid) : 3u))))) | ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) ^ 0u) - 0u) * (uint(_GLF_IDENTITY(3u, 0u ^ (3u))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 1u)))), uint(3u)))), 1u, 1u, 0u)))) * 1u))) + _GLF_IDENTITY(1, (1) + 0)), max((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), max((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))), (_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec3(3u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u)))), uint(3u)))) + _GLF_IDENTITY(1, (1) + 0)), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id)), max(((subgroup_local_id)), ((subgroup_local_id)))), min(((subgroup_local_id)), ((subgroup_local_id)))) | (_GLF_IDENTITY((subgroup_local_id), 0u | ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))))), max((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), (1u | 1u), 1u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(uvec4(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), (1u | 1u), 1u)), (uint(uvec4(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), (1u | 1u), 1u))) << 0u))))))))), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))))) / ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY(uint(uvec3(3u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u)), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 0u))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))))))), (uint(uvec3(3u, 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 0u))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id))), ~ (~ (_GLF_IDENTITY(true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id))), (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id)))) >> 0u))))))))))) - 0u))), uint(3u)))) + _GLF_IDENTITY(1, (1) + 0)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_size) : _GLF_FUZZED(num_workgroup))) : subgroup_size)), min(_GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_size) : _GLF_FUZZED(num_workgroup))) : subgroup_size)), _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_size) : _GLF_FUZZED(num_workgroup))) : subgroup_size)))))))) / 1u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)))), min(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))), virtual_gid))], 4, _GLF_IDENTITY(64, ~ (~ (64))), 2);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) << 0u), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true), false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true), false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), true), false))))) || false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     subgroupBarrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (! (bool(_GLF_WRAPPED_IF_TRUE(true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -14552)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), int(6)), _GLF_IDENTITY((true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), int(6)), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), int(6)) : _GLF_FUZZED(_injected_loop_counter))), int(_GLF_IDENTITY(ivec4(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) | (0)) | (6))), int(6)), 0, 1, 0), ~ (~ (ivec4(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) | (0)) | (6))), int(6)), 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)), ~ (~ ((true ? _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, ~ (~ (0))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), clamp(int(_GLF_IDENTITY(6, (6) ^ 0)), int(_GLF_IDENTITY(6, (6) ^ 0)), int(_GLF_IDENTITY(6, (6) ^ 0))))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0)) | (6))), int(6)) : _GLF_FUZZED(_injected_loop_counter))), int(_GLF_IDENTITY(ivec4(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) | (0)) | _GLF_IDENTITY((6), (_GLF_IDENTITY((6), ((6)) >> 0)) << 0))), int(6)), 0, 1, 0), (true ? ivec4(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) | (0)) | _GLF_IDENTITY((6), (_GLF_IDENTITY((6), ((6)) >> 0)) << 0))), int(6)), 0, 1, 0) : _GLF_FUZZED(ivec4(95692, -6521, 5793, -39145)))))) : _GLF_FUZZED(_injected_loop_counter)))))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) >> 0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) * 1) >> 0, ((_injected_loop_counter --) >> 0) + _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> 0)), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0))) | 0)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), false, false, false)))))), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), false, true))))) || false), true, false, false))), true, true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, _GLF_IDENTITY(false, true && (false)), true)))), true, false, false))), ! (! (_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), false)))) || false), true, false, false))), ! (! (bool(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), (bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false))), ! (! (_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false), true, false, false))), ! (! (bool(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false))))))))))) && true))), true, true, false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(_GLF_IDENTITY(3, 0 + (3)))))), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(41226))))), max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(41226))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(41226))))))), 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) && true)))))))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), true)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), ! (_GLF_IDENTITY(! (false || (bool(bvec2(false, true)))), (! (false || (bool(bvec2(false, true))))) && true))))))))) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.4)), bvec2(true, false)))) - sin(vec2(0.0, 0.0))).x), float(vec3(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.4)), bvec2(true, false)))) - sin(vec2(0.0, 0.0))).x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.4)), bvec2(true, false)))) - sin(vec2(0.0, 0.0))).x)) / 1.0), 0.0, 0.0))))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) << ((4237 & 0) << _GLF_IDENTITY(int(0), int(0))))) / 1))
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))))) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), log(1.0), cos(0.0), 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, abs(0.0)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7))))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
          }
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}
