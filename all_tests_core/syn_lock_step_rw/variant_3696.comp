#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 bvec2 _f0;
 mat3 _f1;
 vec2 _f2;
 ivec2 _f3;
 bool _f4;
 vec4 _f5;
 mat2 _f6;
 uint read;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
 vec4 _f1;
 vec2 _f2;
 vec3 _f3;
 uvec4 _f4;
 ivec3 _f5;
 float _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_17 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_15 {
 mat3x2 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 uvec3 _f3;
 bvec3 _f4;
 uvec4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 _GLF_struct_15 _f1;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 mat4 _f1;
 bvec3 _f2;
 mat2x4 _f3;
 mat2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
 uint _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_14 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_19 _f2;
} ;

struct _GLF_struct_10 {
 int _f0;
 uint workgroup_base;
} ;

struct _GLF_struct_11 {
 uint _f0;
 _GLF_struct_10 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_7 {
 float _f0;
 ivec4 _f1;
 bvec4 _f2;
 mat4x2 _f3;
 bool _f4;
 ivec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_6 {
 uint workgroup_size;
 vec2 _f0;
 int _f1;
 mat3x4 _f2;
 mat2x4 _f3;
 uvec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 mat4 _f1;
 float _f2;
 mat2 _f3;
 ivec2 _f4;
 uvec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 bvec3 _f1;
 mat3 _f2;
 int _f3;
 uvec3 _f4;
 bvec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_5 {
 int _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 mat2x4 _f3;
 ivec2 _f4;
 ivec2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 uvec4 _f1;
 uvec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 uint _f1;
 bool _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 _GLF_struct_0 _f1;
 mat3x2 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_2 _f0;
 mat4 _f1;
 _GLF_struct_5 _f2;
 mat3x4 _f3;
 _GLF_struct_8 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), abs(0.0), 0.0, 0.0, 1.0, tan(0.0)))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))), true, true)), (bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))), true, true))) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(96502)), 0 | (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED(96502)), ((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(96502, min(_GLF_IDENTITY(96502, (96502) << 0), 96502))))) >> 0)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-50135), _GLF_IDENTITY(int(ivec2(_GLF_FUZZED(-50135), 0)), (int(ivec2(_GLF_FUZZED(-50135), 0))) - 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_FUZZED(-50135)) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_FUZZED(-50135)) | 0), max(_GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_FUZZED(-50135)) | _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(64426)))), _GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_FUZZED(-50135)) | 0))), _GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_FUZZED(-50135)) | 0)))) << 0)) | (_GLF_FUZZED(-50135))), _GLF_IDENTITY(int(ivec2(_GLF_FUZZED(-50135), 0)), (int(ivec2(_GLF_FUZZED(-50135), 0))) - 0)), _GLF_IDENTITY(_GLF_FUZZED(-50135), _GLF_IDENTITY(int(ivec2(_GLF_FUZZED(-50135), 0)), (int(ivec2(_GLF_FUZZED(-50135), 0))) - 0))))) | (_GLF_IDENTITY(_GLF_FUZZED(-50135), (_GLF_FUZZED(-50135)) / 1))) : 1))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (895 & 0)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) << 0))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(83.64), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1]), (vec2(_GLF_FUZZED(83.64), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1])) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-5160.5524)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_2(mat3x2(1.0), _GLF_struct_0(mat2(1.0), 1u, true, bvec4(true)), mat3x2(1.0), _GLF_struct_1(mat4(1.0), uvec4(1u), uvec2(1u), vec4(1.0))), mat4(1.0), _GLF_struct_5(1, _GLF_struct_3(bvec4(true), bvec3(true), mat3(1.0), 1, uvec3(1u), bvec4(true), bvec3(true)), _GLF_struct_4(mat3x2(1.0), mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec2(bool(bool(true)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bool(true), (bool(true)) || false)), false)), false || (bool(bvec2(bool(bool(true)), false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-19.41, 871.114)))), injectionSwitch)))).y) && true))) ? 1.0 : _GLF_FUZZED(43.74)))))), 1.0, mat2(1.0), ivec2(1), uvec2(1u), mat3x4(1.0)), mat2x4(1.0), ivec2(1), ivec2(1), bvec3(true)), mat3x4(1.0), _GLF_struct_8(_GLF_struct_6(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x))) ^ _GLF_IDENTITY((0u | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4((0u | 0u), 1u, 0u, 0u), (uvec4((0u | 0u), 1u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (uint(uvec4((0u | 0u), 1u, 0u, 0u)))))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) / vec2(1.0, 1.0)), 1, mat3x4(1.0), mat2x4(1.0), uvec3(1u), vec3(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_struct_7(1.0, ivec4(1), bvec4(true), mat4x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY((! (true)) || false, true && ((! (true)) || false))))), ivec4(1), uvec2(1u)), mat3(1.0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), ! (! (bool(bool(_GLF_WRAPPED_LOOP(false))))))), ! (! (_GLF_WRAPPED_LOOP(false))))))))));
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), true, false, false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 | (1)))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 ^ 0, (true ? 0 ^ 0 : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-38.22) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.5)), float(0.0), bool(true))))), 1.0))) : _GLF_FUZZED(vec2(-1.0, 1022.6367)))).x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(clamp(0, 0, 0), max(clamp(0, 0, 0), clamp(0, 0, 0)))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, true))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) << 0) < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 do
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                                      barrier();
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       do
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3764.7488))), 0.0)), mix(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)), _GLF_IDENTITY(vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (_GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(-267.056), _GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1], max((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]))), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], _GLF_FUZZED(-148.157)), bvec2(true, false))))[1]), min(vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (_GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(-267.056), _GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1], max((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]))), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], _GLF_FUZZED(-148.157)), bvec2(true, false))))[1]), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (_GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(-267.056), _GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1], max((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]))), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], _GLF_FUZZED(-148.157)), bvec2(true, false))))[1]))), bvec2(true, true)))).y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.4) : _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(round(vec2(7.4, -8.0))))), _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(_GLF_IDENTITY(-54.63, (-54.63) / 1.0))), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0))), 0.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), abs(0.0), 0.0, 1.0, 1.0, 1.0, round(length(normalize(1.0))), determinant(mat2(abs(0.0), 0.0, 1.0, 0.0)), abs(1.0), abs(0.0), round(length(normalize(1.0))), 1.0, cos(0.0), 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, true)))).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.9)), float(1.0), bool(true))))), 0.0)), mix(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, true)))).y))))))), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3764.7488))), 0.0)), mix(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, true)))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3764.7488))), 0.0)), mix(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, true)))).y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0)), mix(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(_GLF_IDENTITY(-54.63, (-54.63) / 1.0))), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0))), 0.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, _GLF_IDENTITY(true, (true) || false))))).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))))) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)), max(vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)), vec2(_GLF_FUZZED(106.568), _GLF_FUZZED(-54.63)))), vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[0], (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0)))[1]), bvec2(true, true)))).y)))))))) && true)))
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                            }
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 barrier();
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       barrier();
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                        barrier();
                                       barrier();
                                      }
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                }
                               do
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(sin(-998.594)))))), true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-344.557)), vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), bvec2(false, true))))))).x, 0.0, 0.0, 0.0, 0.0, 0.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0))) - 0.0)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(determinant(inverse(mat4(29.06, 551.564, 41.03, 9.0, 2.3, 283.420, 3.6, 9621.7485, -295.225, _GLF_IDENTITY(76.05, min(76.05, 76.05)), -167.085, 9.3, -12.39, -8.1, 5.9, -68.64)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))) * vec2(1.0, 1.0)))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-344.040)), bool(_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(76.77))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, abs(1.0)), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(76.77))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, abs(1.0)))))), bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false)))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))))))))))), ! (! (false))))))) / vec2(1.0, 1.0), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(determinant(inverse(mat4(29.06, 551.564, 41.03, 9.0, 2.3, 283.420, 3.6, 9621.7485, -295.225, _GLF_IDENTITY(76.05, min(76.05, 76.05)), -167.085, 9.3, -12.39, -8.1, 5.9, -68.64)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))) * vec2(1.0, 1.0)))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-344.040)), bool(_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))))) + 0.0), _GLF_FUZZED(-2.4)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0), mix(float(_GLF_FUZZED(-4.2)), float(_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), bool(true))) : _GLF_FUZZED(62.88)))))))) + 0.0), _GLF_FUZZED(-2.4)), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_FUZZED(-5.3)) + 0.0, ((_GLF_FUZZED(-5.3)) + 0.0) + sqrt(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0), float(float(_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))))))))) + 0.0), _GLF_FUZZED(-2.4)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_FUZZED(-5.3)), mix(float(_GLF_FUZZED(-0.9)), float((_GLF_FUZZED(-5.3))), bool(true))) + 0.0))), bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), ((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, (true) && true) ? 1.0 : _GLF_FUZZED(76.77))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, abs(1.0)), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))))))) + 0.0)) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))))) + 0.0), _GLF_FUZZED(-2.4)), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-5.3, clamp(_GLF_IDENTITY(-5.3, clamp(-5.3, -5.3, _GLF_IDENTITY(-5.3, mix(float(-5.3), float(_GLF_FUZZED(-394.581)), bool(false))))), -5.3, -5.3))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-5.3, float(mat4x3(-5.3, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat2(abs(1.0), 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) * 1.0), (_GLF_FUZZED(-5.3)) + 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), mix(float(_GLF_FUZZED(-9910.4158)), float((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0))), _GLF_IDENTITY(bool(true), true && (bool(true))))), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), max((_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-5.3), (_GLF_FUZZED(-5.3)) + 0.0)))))) + 0.0), _GLF_FUZZED(-2.4)))), 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(76.77))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-724.283))), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0))))), 0.0, 0.0, abs(1.0)))))), bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), true && (! (false)))))), true && (! (false)))))))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), true && (! (false)))))), true && (! (false)))))))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (false))))))))))))))), ! (! (false))))))) / vec2(1.0, 1.0) : _GLF_FUZZED(injectionSwitch)))).y))))));
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_11(1u, _GLF_struct_10(1, _GLF_struct_replacement_9._f4._f0.workgroup_size * workgroup_id)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(floor(injectionSwitch)))).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
                       barrier();
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))))
                  barrier();
                }
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(67.55)), float(injectionSwitch[1]), bool(true))), (true ? injectionSwitch[1] : _GLF_FUZZED(-7.9))))))).y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_struct_replacement_12._f0._f1.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0)), (float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0))) + 0.0))))))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)))) + 0.0) + 0.0))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0))) > injectionSwitch.y)), false)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0))) > injectionSwitch.y)), false)), true, false, true))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sin(0.0)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_12._f0._f1.workgroup_base + subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_struct_replacement_12._f0._f1.workgroup_base + subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u | _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u), (false ? _GLF_FUZZED((++ subgroup_id)) : false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)))))), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-1245))))), 1))) | 0u)) % subgroup_size);
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_14(_GLF_struct_13(mat2x4(1.0), mat4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))))))))), mat2x4(1.0), mat2(1.0), vec3(1.0)), 1u), _GLF_struct_16(mat3x2(1.0), _GLF_struct_15(mat3x2(1.0), mat2x4(1.0), mat3x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! ((false)))))))) ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(_GLF_IDENTITY(145.662, _GLF_IDENTITY((145.662), ((145.662)) - tan(0.0)) / 1.0), -908.616, 38.71, -9.0), (_GLF_IDENTITY(vec4(_GLF_IDENTITY(145.662, clamp(145.662, 145.662, _GLF_IDENTITY(145.662, clamp(145.662, _GLF_IDENTITY(145.662, float(mat2x4(145.662, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 145.662)))), -908.616, 38.71, -9.0), max(vec4(_GLF_IDENTITY(145.662, clamp(145.662, 145.662, _GLF_IDENTITY(145.662, clamp(145.662, _GLF_IDENTITY(145.662, float(mat2x4(145.662, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(145.662, clamp(145.662, _GLF_IDENTITY(145.662, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-26.36, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(-26.36, sqrt(1.0), 1.0, 0.0, 1.0, sqrt(0.0)), (mat3x2(-26.36, sqrt(1.0), 1.0, 0.0, 1.0, sqrt(0.0))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), abs(0.0) + (float(_GLF_IDENTITY(mat3x2(-26.36, sqrt(1.0), 1.0, 0.0, 1.0, sqrt(0.0)), (mat3x2(-26.36, sqrt(1.0), 1.0, 0.0, 1.0, sqrt(0.0))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), float(145.662), bool(true))), _GLF_IDENTITY(145.662, (145.662) - sqrt(0.0)))))))), -908.616, 38.71, -9.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(145.662, clamp(145.662, 145.662, _GLF_IDENTITY(145.662, clamp(145.662, _GLF_IDENTITY(145.662, float(mat2x4(145.662, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0))), 145.662)))), -908.616, 38.71, _GLF_IDENTITY(-9.0, (false ? _GLF_FUZZED(2.4) : -9.0))), (vec4(_GLF_IDENTITY(145.662, clamp(145.662, 145.662, _GLF_IDENTITY(145.662, clamp(145.662, _GLF_IDENTITY(145.662, float(mat2x4(145.662, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 145.662)))), -908.616, 38.71, -9.0)) + vec4(0.0, 0.0, 0.0, 0.0))))) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, _GLF_IDENTITY(-908.616, (-908.616) / 1.0), _GLF_IDENTITY(38.71, clamp(38.71, _GLF_IDENTITY(38.71, (false ? _GLF_FUZZED(28.37) : 38.71)), 38.71)), -9.0))))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, mix(float(_GLF_FUZZED((-79.48 / -2599.2690))), _GLF_IDENTITY(float(38.71), max(float(38.71), _GLF_IDENTITY(float(38.71), max(float(38.71), float(38.71))))), bool(_GLF_IDENTITY(true, (true) && true)))), -9.0), _GLF_IDENTITY(min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0)), vec4(0.0, 0.0, 0.0, 0.0) + (min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))))) : 1.0, clamp(false ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, mix(float(_GLF_FUZZED((-79.48 / -2599.2690))), _GLF_IDENTITY(float(38.71), _GLF_IDENTITY(max(float(38.71), _GLF_IDENTITY(float(38.71), max(float(38.71), float(38.71)))), max(max(float(38.71), _GLF_IDENTITY(float(38.71), max(float(38.71), float(38.71)))), max(float(38.71), _GLF_IDENTITY(float(38.71), max(float(38.71), float(38.71))))))), bool(_GLF_IDENTITY(true, (true) && true)))), -9.0), _GLF_IDENTITY(min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0)), vec4(0.0, 0.0, 0.0, 0.0) + (min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))))) : 1.0, false ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, mix(float(_GLF_FUZZED((-79.48 / -2599.2690))), _GLF_IDENTITY(float(38.71), max(float(38.71), _GLF_IDENTITY(float(38.71), max(float(38.71), float(38.71))))), bool(_GLF_IDENTITY(true, (true) && true)))), -9.0), _GLF_IDENTITY(min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, 0.0, 0.0)) * mat4(1.0))))), vec4(145.662, -908.616, 38.71, -9.0)), vec4(0.0, 0.0, 0.0, 0.0) + (min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))))) : 1.0, false ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, mix(float(_GLF_FUZZED((-79.48 / -2599.2690))), _GLF_IDENTITY(float(38.71), max(float(38.71), _GLF_IDENTITY(float(38.71), max(float(38.71), float(_GLF_IDENTITY(38.71, float(vec2(38.71, 1.0)))))))), bool(_GLF_IDENTITY(true, (true) && true)))), -9.0), _GLF_IDENTITY(min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0)), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0) + (min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))))) : 1.0)), _GLF_IDENTITY(false ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), vec4(145.662, -908.616, 38.71, _GLF_IDENTITY(-9.0, float(vec4(-9.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.9)), bool(false))), 1.0)))))))) : _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, log(1.0), 0.0, tan(0.0), _GLF_IDENTITY(dot(vec4(cos(0.0), 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(cos(0.0), 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0), mat4(1.0) * (mat3x4(1.0, 1.0, log(1.0), 0.0, tan(0.0), _GLF_IDENTITY(dot(vec4(cos(0.0), 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(cos(0.0), 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))), true, true, _GLF_IDENTITY(true, (true) && true)))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(length(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))), mix(vec4(_GLF_FUZZED(-16.32), _GLF_FUZZED(-916.015), _GLF_FUZZED((true ? (4590.3661 - 6.6) : -3245.0270)), _GLF_FUZZED(-8.1)), vec4((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[1], ((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[1]) - 0.0), (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[2], (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[3]), bvec4(true, true, true, true)))), (_GLF_IDENTITY(length(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))), mix(vec4(_GLF_FUZZED(-16.32), _GLF_FUZZED(-916.015), _GLF_FUZZED((true ? (4590.3661 - 6.6) : -3245.0270)), _GLF_FUZZED(-8.1)), vec4((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[1], ((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[1]) - 0.0), (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[2], (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[3]), bvec4(true, true, true, true)))), float(mat4x3(length(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))), mix(vec4(_GLF_FUZZED(-16.32), _GLF_FUZZED(-916.015), _GLF_FUZZED((true ? (4590.3661 - 6.6) : -3245.0270)), _GLF_FUZZED(-8.1)), vec4((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[1], ((_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[1]) - 0.0), (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[2], (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))[3]), bvec4(true, true, true, true)))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))) / 1.0)), 0.0 + (_GLF_FUZZED(length(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((+ -7.0))), bool(false))))), mat4(1.0) * (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), vec4(145.662, -908.616, 38.71, -9.0))), max(_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, clamp(38.71, _GLF_IDENTITY(38.71, (38.71) - 0.0), _GLF_IDENTITY(38.71, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))) + (38.71)))), -9.0), min(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((+ -7.0))), bool(false))))), mat4(1.0) * (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), vec4(145.662, -908.616, 38.71, -9.0))), _GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((+ -7.0))), bool(false)), (_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((+ -7.0))), bool(false)), (mix(float(0.0), float(_GLF_FUZZED((+ -7.0))), bool(false))) / cos(0.0))) / cos(0.0))))), mat4(1.0) * (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), vec4(145.662, -908.616, 38.71, -9.0))))))))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(759.202) : _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY((vec4(0.0, 0.0, 0.0, 0.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (vec4(0.0, 0.0, 0.0, 0.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(vec4(-4.4, -6427.5009, 25.30, 7.4)))))), vec4(145.662, -908.616, 38.71, -9.0))))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(759.202) : _GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec2((_GLF_IDENTITY(false, (false) || false)), true)))) ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, _GLF_IDENTITY(-908.616, min(-908.616, _GLF_IDENTITY(-908.616, min(-908.616, -908.616)))), 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), mix(vec4(_GLF_FUZZED(560.131), (vec4(145.662, _GLF_IDENTITY(-908.616, (true ? -908.616 : _GLF_FUZZED(-27.52))), 38.71, -9.0))[1], _GLF_FUZZED(-60.80), (vec4(145.662, -908.616, 38.71, -9.0))[3]), vec4((vec4(145.662, -908.616, 38.71, -9.0))[0], _GLF_FUZZED(2.3), (vec4(145.662, -908.616, 38.71, -9.0))[2], _GLF_FUZZED(-5.0)), bvec4(true, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) : _GLF_IDENTITY(1.0, (1.0) - log(1.0)), clamp(false ? _GLF_FUZZED(759.202) : _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))) && true) ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, _GLF_IDENTITY(-9.0, (_GLF_IDENTITY(-9.0, (-9.0) / 1.0)) / 1.0)), (_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, max(38.71, 38.71)), -9.0), clamp(vec4(145.662, -908.616, 38.71, -9.0), vec4(145.662, -908.616, 38.71, -9.0), vec4(145.662, -908.616, 38.71, -9.0)))) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))) : 1.0, false ? _GLF_FUZZED(759.202) : _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), min(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, _GLF_IDENTITY(38.71, (38.71) / 1.0), -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))) : 1.0, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) ? _GLF_FUZZED(759.202) : _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false) || false, ((false) || false) || false), true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false) || false, ((false) || false) || false), true, true)), true && (bool(bvec3(_GLF_IDENTITY((false) || false, ((false) || false) || false), true, true))))))))))) ? _GLF_FUZZED(length(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (true ? vec4(145.662, -908.616, 38.71, -9.0) : _GLF_FUZZED(vec4(-2196.6943, 2.9, -66.10, -543.888)))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(vec4(145.662, -908.616, 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, 0.0, 0.0))) * mat4(_GLF_ONE(1.0, injectionSwitch.y))), vec4(145.662, -908.616, 38.71, -9.0))))) : _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), false ? _GLF_FUZZED(759.202) : _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(145.662, -908.616, _GLF_IDENTITY(38.71, mix(float(38.71), float(_GLF_FUZZED(7.3)), bool(false))), -9.0), min(_GLF_IDENTITY(vec4(145.662, _GLF_IDENTITY(-908.616, (-908.616) - 0.0), 38.71, -9.0), (vec4(145.662, -908.616, 38.71, -9.0)) - vec4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0)), vec4(145.662, -908.616, 38.71, -9.0))))) : _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))))), 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(clamp(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(98.09)), float(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(0.6)), float(clamp(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(98.09)), float(max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.8) : 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))))), 0.0, 0.0, 1.0)))))))), uvec3(1u), bvec3(true), uvec4(1u), mat4x2(1.0))), _GLF_struct_19(_GLF_struct_17(mat2x3(1.0), vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.1)))), vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(vec3(1.0), mat3(1.0) * (vec3(1.0))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) >> 0u, ((1u) >> 0u) >> 0u)) : _GLF_FUZZED(virtual_gid)))) << 0u)), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) >> 0u) : _GLF_FUZZED(virtual_gid)))) << 0u)), (uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) >> 0u) : _GLF_FUZZED(virtual_gid)))) << 0u))) >> uvec4(0u, 0u, 0u, 0u))) | (uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) >> 0u) : _GLF_FUZZED(virtual_gid)))) << 0u)))), ivec3(1), 1.0), _GLF_struct_18(bvec2(true), mat3(1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), length(vec3(0.0, 0.0, 0.0)), exp(0.0))), float(mat3(float(mat3x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), length(vec3(0.0, 0.0, 0.0)), exp(0.0))), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0))))), ivec2(1), true, vec4(1.0), mat2(1.0), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))) - 0u)], 0u | (buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u | (virtual_gid), (_GLF_IDENTITY(0u | (virtual_gid), max(0u | (virtual_gid), 0u | (virtual_gid)))) | (0u | (virtual_gid))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(6u), uint(6u))), ((0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) / 1u) ^ (0u | (virtual_gid))))) - 0u)])), 4, 64, 0))));
 for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(0 ^ (int(7)), max(_GLF_IDENTITY(0 ^ (int(7)), (0 ^ (int(7))) | (0 ^ (int(7)))), 0 ^ (int(7))))))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(cos(vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(5.0), _GLF_FUZZED((-67.27))), vec2((cos(vec2(0.0, 0.0)))[0], (cos(vec2(0.0, 0.0)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) * (injectionSwitch)).x > injectionSwitch.y)))))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 do
  {
   do
    {
     atomicStore(checker[virtual_gid], _GLF_struct_replacement_20._f2._f1.read, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) | (int(4)))) - 0), (int(4)) | (int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
}
