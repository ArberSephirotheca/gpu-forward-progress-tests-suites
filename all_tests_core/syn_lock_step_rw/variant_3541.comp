#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 mat4x3 _f0;
 ivec2 _f1;
 mat3 _f2;
 uint workgroup_base;
 vec4 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
} ;

struct _GLF_struct_10 {
 uint _f0;
 vec2 _f1;
 ivec4 _f2;
 vec2 _f3;
 mat2x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_9 {
 bool _f0;
} ;

struct _GLF_struct_8 {
 uint _f0;
 ivec2 _f1;
 vec3 _f2;
 float _f3;
 vec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 bool _f1;
 ivec4 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 ivec4 _f1;
 mat4x3 _f2;
 vec2 _f3;
 mat3 _f4;
 mat2x3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 bvec4 _f1;
 ivec3 _f2;
 vec4 _f3;
 uvec4 _f4;
 mat3x4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 vec3 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 mat2x3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 _GLF_struct_0 _f1;
 bool _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_12 {
 uint num_workgroup;
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_7 _f2;
 ivec2 _f3;
 _GLF_struct_11 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
         break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), true))))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)) | _GLF_IDENTITY(0, (0) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0)))) + 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))), false || (true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), false || (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(bool(_GLF_DEAD(false)))), bool(bvec3(bool(bool(bool(_GLF_DEAD(false)))), false, false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
          }
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))) || false), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false)))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))), 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-128.521), _GLF_FUZZED(-3865.0979)), bvec2(false, _GLF_IDENTITY(false, ! (! (false)))))).y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (~ 19218))); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_NumWorkGroups.x, _GLF_struct_1(vec3(1.0), _GLF_struct_0(ivec2(1), mat2x3(1.0), vec3(1.0)), true, uvec4(1u)), _GLF_struct_3(_GLF_struct_2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), clamp(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))), mix(_GLF_IDENTITY(float(1.0), (float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-867.864), (true ? 1.0 : _GLF_FUZZED(-867.864)) / cos(0.0)))))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-7.1)), float(_GLF_IDENTITY(mat2x3(float(_GLF_FUZZED(-7.1)), 1.0, 0.0, sin(0.0), 1.0, 0.0), (mat2x3(float(_GLF_FUZZED(-7.1)), 1.0, 0.0, sin(0.0), 1.0, 0.0)) * mat2(1.0)))), (_GLF_IDENTITY(float(_GLF_FUZZED(-7.1)), (float(_GLF_FUZZED(-7.1))) - 0.0)) / 1.0), bool(false)))), vec3(1.0), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, 1u * (1u)) : _GLF_FUZZED(_GLF_IDENTITY(packHalf2x16(vec2(-4.5, -0.0)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(packHalf2x16(vec2(-4.5, -0.0)), (packHalf2x16(vec2(-4.5, -0.0))) ^ 0u)), (uint(_GLF_IDENTITY(packHalf2x16(vec2(-4.5, -0.0)), (packHalf2x16(vec2(-4.5, -0.0))) ^ 0u))) - 0u))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(164939u, 110300u), clamp(uvec2(164939u, 110300u), _GLF_IDENTITY(uvec2(164939u, 110300u), uvec2(1u, _GLF_IDENTITY(1u, (1u) | (1u))) * (uvec2(164939u, 110300u))), uvec2(164939u, 110300u)))) : uvec2(1u)))), mat3x2(1.0)), _GLF_struct_7(_GLF_struct_4(mat2x4(1.0), bvec4(true), ivec3(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1)), 1))), vec4(1.0), uvec4(1u), mat3x4(1.0), mat2(1.0)), _GLF_struct_5(uvec3(1u), _GLF_IDENTITY(ivec4(1), (true ? ivec4(1) : _GLF_FUZZED(ivec4(-29448, -37321, 60807, -21160)))), mat4x3(1.0), vec2(1.0), mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(968.787) : _GLF_IDENTITY(1.0, (1.0) / 1.0), float(mat2(false ? _GLF_FUZZED(968.787) : _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), 0.0)))))), mat2x3(1.0), vec3(1.0)), _GLF_struct_6(uvec2(1u), _GLF_IDENTITY(ivec4(1), min(ivec4(1), ivec4(1)))), ivec2(1)), ivec2(1), _GLF_struct_11(mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float((1.0)), float(_GLF_FUZZED(27.28)), bool(false))) - 0.0)), true, ivec4(1), _GLF_struct_8(1u, ivec2(1), vec3(1.0), 1.0, vec4(1.0), vec3(1.0)), _GLF_struct_9(true), _GLF_struct_10(1u, vec2(1.0), _GLF_IDENTITY(ivec4(1), (ivec4(1)) | ivec4(0, 0, 0, 0)), vec2(1.0), mat2x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.0)), bool(false))), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_IDENTITY(float(vec3(clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0))), 1.0, 1.0)), min(float(vec3(clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0))), 1.0, 1.0)), float(vec3(clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0))), 1.0, 1.0))))))))), ivec2(1))));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))) && true))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-2.9)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_13(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 0.0, 1.0))), 1.0)), clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(_GLF_IDENTITY(-52.40, mix(float(_GLF_FUZZED(-9.4)), float(-52.40), bool(true))))), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)) && true))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min((1.0), _GLF_IDENTITY((1.0), (true ? _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED((float(false) / -5.6))), float((1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(8.9))))) - 0.0))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.5)), bool(false)))))), ivec2(1), mat3(1.0), _GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u) * workgroup_id, _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(-49.26, (true ? -49.26 : _GLF_FUZZED((+ 1.3)))))))), max((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-49.02))), 1.0)), float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(-49.26)))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(-49.26)))), min((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(-49.26)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), 1.0, log(1.0), 1.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 0.0, exp(0.0), 0.0, 0.0)), (true ? float(mat4x3(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), 1.0, log(1.0), 1.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 0.0, exp(0.0), 0.0, 0.0)) : _GLF_FUZZED(-17.85)))), (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(-49.26)))), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) ? _GLF_FUZZED(5.2) : (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(-49.26)))))))))) + 0.0)) - _GLF_IDENTITY(0.0, 1.0 * (0.0)))), (true ? vec4(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : _GLF_IDENTITY(0.0, (0.0) - 0.0))))))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(-1.9, -38.33, 2288.4192, -21.42)), vec4(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(_GLF_FUZZED(vec4(-1.9, -38.33, 2288.4192, -21.42)), min(_GLF_FUZZED(vec4(-1.9, -38.33, 2288.4192, -21.42)), _GLF_FUZZED(vec4(-1.9, -38.33, 2288.4192, -21.42))))))))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_14._f0.workgroup_base, _GLF_IDENTITY(0u | (_GLF_struct_replacement_14._f0.workgroup_base), max(0u | (_GLF_struct_replacement_14._f0.workgroup_base), 0u | (_GLF_struct_replacement_14._f0.workgroup_base)))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (_GLF_IDENTITY(subgroup_base, 0u | _GLF_IDENTITY((subgroup_base), uint(uvec4((subgroup_base), 1u, 1u, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(trunc(-8211.0839)) : injectionSwitch.x)) > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_14._f0.workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_14._f0.workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(virtual_gid) : ~ (_GLF_struct_replacement_14._f0.workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(45618) : _injected_loop_counter)) != _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY((_GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(64948)))), int(ivec3((_GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(64948)))), 1, 0))) | 0) ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true && (false)), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)))), true && (false)), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))) && true), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), bool(bvec4((! (_GLF_IDENTITY(false, (false) && true))), true, true, true))))))))))))))))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), bool(bvec3(! ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), true, true)))))), (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), bool(bvec3(! ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), true, true))))))) && true))) && true)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, (false) && true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), true, false, false)))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), true, false, false)))))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), true, false, false)))))))), true, false))))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true)), false || (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && true)) && ((! (_GLF_IDENTITY(false, (false) && true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))))))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true))))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), true, false, false))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), ! (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (false) && true)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, (false) && true)))), ((! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))))))), false)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))))))), false)))), true)), true))))), true, false, false)))))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true && ((_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true)))))))), true && (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), (! (! (_GLF_IDENTITY(false, (false) && true)))) || false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), ! (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), false, false, true)))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ((! (_GLF_IDENTITY(false, (false) && true)))) && true))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))), false || ((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), (! (! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)))))) || false)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), (! ((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) || false))))))) || false)), false, false))))), true, false, false)))))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), bool(bvec4(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))))))))), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))), true, false))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), false, false))))), true, false, false)))))))), true, false))))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), bool(bvec3(_GLF_IDENTITY((false), ((false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), false || ((_GLF_IDENTITY(false, (false) && true))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), true && ((false))), ! (! (true && _GLF_IDENTITY((false), ((false)) || false))))), ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0))))) * (injectionSwitch)), _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(86.45))), 1.0), vec2(0.0, 1.0)))))), (vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))))), max(float(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(floor(-405.510)) : 1.0)))), float(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0))))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0, abs(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), max(_GLF_IDENTITY(vec2(0.0, 1.0), mix(vec2((vec2(0.0, 1.0))[0], (vec2(0.0, 1.0))[1]), vec2(_GLF_FUZZED((92.42 - 5714.7556)), _GLF_FUZZED(-5219.1838)), bvec2(false, false))), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, min(1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0))))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y : _GLF_FUZZED(84.30)))))))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (0) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), true), true, false)))))))), true, true, true)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.0) : injectionSwitch.x)) > injectionSwitch.y))))
              continue;
            }
           else
            {
             subgroupBarrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((float(57546u) / float(92874)))), bool(false))) > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))), mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 1.0)))), bool(true))), injectionSwitch.x)) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.8)), bool(false)))))), injectionSwitch.x)) > injectionSwitch.y)))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 & _GLF_IDENTITY(-56052, (-56052) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))))))
            break;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))), false)), false || (bool(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))), false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((~ -51636) & 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (2) / _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(0, (0) + 0)))), _GLF_IDENTITY((_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (2) / _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(2, (2) >> 0)))) >> 0, ((_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (2) / _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(2, (2) >> 0)))) >> 0) / int(_GLF_ONE(1.0, injectionSwitch.y))))), int(_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(30246))), 1, 0, 1)))))), 0 ^ ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) / _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(2, (2) >> 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), min(_GLF_IDENTITY(2, (2) / _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) * int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0)))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), min(_GLF_IDENTITY(2, (2) / _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) * int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0)))))) >> 0)), int(_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(30246))), 1, 0, 1)))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(false || (_injected_loop_counter != 0), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(false || (_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(false || (_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(false || (_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false))))), true, true))))))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(false || (_injected_loop_counter != 0), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false)))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false || (_injected_loop_counter != 0), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (_injected_loop_counter != 0), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(false || (_injected_loop_counter != 0), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false)))), true, true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(false || (_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(false, ! (! (false))))))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), _GLF_IDENTITY(_GLF_IDENTITY(false || (_injected_loop_counter != 0), ! (! (false || (_injected_loop_counter != 0)))), (false || (_injected_loop_counter != 0)) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))))))))))))) || false); _injected_loop_counter --)
      {
       do
        {
         atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, min(read, read))) / 1u), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 0, 0, 1)), int(ivec3(int(ivec4(4, 0, 0, 1)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))) << 0), 64, 4);
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, false || (false))))), ! (! (! ((! (_GLF_IDENTITY(false, false || (false))))))))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         break;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
}
