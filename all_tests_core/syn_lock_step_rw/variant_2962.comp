#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z = subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z = subgroup_size));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.y = _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x), min((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))) >> 0u)), 1u * (uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u), min(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)))) << 0u)), 1u * (uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)), 1u * (uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)), _GLF_IDENTITY(1u * (uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u))), (1u * (uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)))) >> 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u)), 1u * (uint(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u))))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x)), max(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, 0u ^ (gl_WorkGroupID.x)), _GLF_IDENTITY((gl_WorkGroupID.x) | (gl_WorkGroupID.x), ((gl_WorkGroupID.x) | (gl_WorkGroupID.x)) | 0u)))), gl_WorkGroupID.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, abs(1.0), 0.0, 1.0))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-887.551)), float(1.0), bool(true)))) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))).x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) | 0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)), ~ (~ ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)), ~ (_GLF_IDENTITY(~ ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u))), (~ ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)))) - 0u)))), (true ? (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)), ~ (~ ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u)))))) : _GLF_FUZZED(subgroup_size)))) >> 0u) + 0u)), (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w = _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)) << _GLF_IDENTITY(0u, max(0u, 0u))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), ((! (false))) || false))))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), ~ (~ (_GLF_IDENTITY((0) | (0), ((0) | (0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (_GLF_IDENTITY(0 & (-20666 * 32553), 0 | (0 & (_GLF_IDENTITY(-20666 * 32553, int(_GLF_IDENTITY(int(-20666 * 32553), (int(-20666 * 32553)) | (int(-20666 * 32553)))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? ~ (_injected_loop_counter) : _GLF_FUZZED(-66633)))), clamp((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_IDENTITY(_GLF_FUZZED(-66633), (_GLF_FUZZED(-66633)) - 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter)))) | (~ (_injected_loop_counter))), (true ? ~ (_injected_loop_counter) : _GLF_FUZZED(-66633)))), (_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) << 0) : _GLF_FUZZED(-66633))))))))) != (_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(_GLF_IDENTITY(1 | 1, _GLF_IDENTITY((1 | 1) ^ _GLF_IDENTITY(0, (0) >> 0), max(_GLF_IDENTITY((1 | 1) ^ 0, ((1 | 1) ^ 0) | (_GLF_IDENTITY((1 | 1) ^ 0, (true ? _GLF_IDENTITY((1 | 1) ^ 0, ((1 | 1) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0))) << 0) : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(1 | 1, 0 | (_GLF_IDENTITY(1 | 1, clamp(_GLF_IDENTITY(1 | 1, (1 | _GLF_IDENTITY(1, max(1, 1))) | (1 | 1)), 1 | 1, 1 | 1))))) ^ 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1 | 1, (1 | 1) ^ 0)))) | (1 | 1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.3)), float(injectionSwitch.y), bool(true)))))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), ! (! (_GLF_DEAD(false))))))), true && (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), false || (_GLF_IDENTITY(! _GLF_IDENTITY(((! (_GLF_DEAD(false)))), ! (! (((! (_GLF_DEAD(false))))))), false || (! _GLF_IDENTITY(((! (_GLF_DEAD(false)))), ! (! (((! (_GLF_DEAD(false)))))))))))) || false)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))) + 0.0) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))) + 0.0) < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))) + 0.0) < injectionSwitch.y, false, false)))) && true), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y) && true)), (false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))) || false)))) && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y)) || false)))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, length(0.0) + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / 1.0), sin(determinant(mat2(0.0, 0.0, 1.0, 0.0))), 0.0, sin(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-481.716)), bool(false))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), float(float(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0))).y, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat3x4((0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), sqrt(1.0), 0.0, 1.0, abs(1.0), round(length(normalize(sqrt(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) * 1.0)))))), 0.0, 0.0, 1.0, 1.0))) / 1.0), sin(determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 1.0, 0.0), (mat2(0.0, 0.0, 1.0, 0.0)) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))))) && true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec3(0.0, 1.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec3(0.0, 1.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.2, -384.941)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)))) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), max(_GLF_IDENTITY((1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), max((1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), (1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), (1.0) - determinant(mat4(0.0, length(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec3(0.0, 1.0, 0.0))) + (injectionSwitch.x)) > injectionSwitch.y))))))))) && true)))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (injectionSwitch.x > injectionSwitch.y))))))))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ((_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false, false, false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), bool(bool((_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))) && true))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
             if(_GLF_DEAD(false))
              continue;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + log(vec2(1.0, 1.0)), min((injectionSwitch) + log(vec2(1.0, 1.0)), (injectionSwitch) + log(vec2(1.0, 1.0))))).y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))
            continue;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y) / 1.0)), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-8.7), min(true ? injectionSwitch.y : _GLF_FUZZED(-8.7), true ? injectionSwitch.y : _GLF_FUZZED(-8.7))))))))), min(_GLF_IDENTITY(uint(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4041.3443)), bool(false))), (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4041.3443)), bool(false)))) * 1.0), injectionSwitch.y)), 1u * (uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))), 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), log(1.0), round(length(normalize(1.0)))))), injectionSwitch))) * abs(exp(vec2(0.0, 0.0)))).y)))), uint(_GLF_ONE(1.0, injectionSwitch.y)))) * (workgroup_size * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.w));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) && (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, sqrt(1.0), 0.0))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false), true, true))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), _GLF_IDENTITY(false, true && (false)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5216.6156)), float(injectionSwitch.y), bool(true))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false, true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y, false))), false), true, true)))))))))), true)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(injectionSwitch.s)))), false, false, false)))), true)), false, false, false)))), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(float(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), min(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(-47.54)), float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))))))))))) && true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))), (injectionSwitch.x > injectionSwitch.y))), false, false))))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), bool(bvec4(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), true, true, false)))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(7))), int(7)))); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       return;
                      }
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(-8.1), _GLF_FUZZED(-0.7)), bvec2(_GLF_IDENTITY(false, true && (false)), false)))), vec2(vec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(-8.1), _GLF_FUZZED(-0.7)), bvec2(_GLF_IDENTITY(false, true && (false)), false)))), 0.0, 1.0))) - vec2(0.0, 0.0)).y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(31.09), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(31.09), min(_GLF_FUZZED(31.09), _GLF_IDENTITY(_GLF_FUZZED(31.09), _GLF_IDENTITY(mix(float(_GLF_FUZZED(121.374)), float(_GLF_FUZZED(31.09)), bool(true)), (mix(float(_GLF_FUZZED(121.374)), float(_GLF_FUZZED(31.09)), bool(true))) - length(sqrt(vec4(0.0, 0.0, 0.0, 0.0)))))))) / 1.0, max((_GLF_FUZZED(31.09)) / 1.0, (_GLF_FUZZED(31.09)) / 1.0))) : 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x = _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (true ? _GLF_IDENTITY(subgroup_base, 1u * (subgroup_base)) : _GLF_FUZZED(35632u))), max(_GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))))) / 1u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_base) / 1u, min(_GLF_IDENTITY((subgroup_base) / 1u, uint(uvec2((subgroup_base) / 1u, 1u))), _GLF_IDENTITY((subgroup_base) / 1u, ((subgroup_base) / 1u) | ((subgroup_base) / 1u)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((subgroup_base) / 1u, ((subgroup_base) / 1u) - 0u)))) + 0u)), subgroup_base, subgroup_base)), subgroup_base)) : _GLF_IDENTITY(_GLF_FUZZED((num_workgroup ++)), ~ (~ (_GLF_FUZZED((num_workgroup ++)))))), ((true ? _GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (_GLF_IDENTITY((subgroup_base) / 1u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((subgroup_base) / 1u, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), (_GLF_IDENTITY((subgroup_base), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((subgroup_base), ((subgroup_base)) >> 0u)))) - 0u) / 1u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) | ((_GLF_IDENTITY((subgroup_base), (_GLF_IDENTITY((subgroup_base), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((subgroup_base), ((subgroup_base)) >> 0u)))) - 0u) / 1u))) - 0u)))) + 0u)), subgroup_base, subgroup_base)), subgroup_base)) : _GLF_FUZZED((_GLF_IDENTITY(num_workgroup ++, 0u | (_GLF_IDENTITY(num_workgroup ++, (num_workgroup ++) - 0u))))))) / (1u | 0u)));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u) + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x, (_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x, uint(uvec4(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x, clamp(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id)).x, workgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x, workgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x)), 0u, 0u, 0u)))) - 0u) + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id) << uvec4(0u, 0u, 0u, 0u)).y;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.x) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-48.08)), float(injectionSwitch.x), bool(true)))), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(injectionSwitch)), ((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0))).x)))), (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-48.08)), float(injectionSwitch.x), bool(true)))), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(injectionSwitch)), ((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0))).x))))) ^ 0u)) + (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z, min((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.y + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z, (true ? GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_id.z : _GLF_FUZZED(subgroup_size))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), true, true)))))), false, true))), true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), true)), false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), true)), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), _GLF_IDENTITY(true, ! (! (true))))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec2(! (true), false), bvec2(bvec3(bvec2(! (true), false), true))))))))), false)))))) && true)))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != 1))); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(uvec4(next_virtual_gid, 1u, (0u | (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), 1u))), (_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(read)))) | (next_virtual_gid))], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), (! (false)) && true)))))))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false)) && true)), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false)) && true))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false)) && true)))))))))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false, (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false, true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false))))))) || false))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))), true)))) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       return;
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.8), _GLF_FUZZED(7.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))));
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), min(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), min(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), vec2(vec3(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), 0.0))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
