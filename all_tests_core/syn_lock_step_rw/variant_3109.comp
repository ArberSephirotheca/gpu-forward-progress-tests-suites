#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))), (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))))) && true)))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))), true)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))))
          return;
        }
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(99.76)), float(injectionSwitch.y), bool(true))))) : _GLF_FUZZED(1.6)))))));
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
          return;
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) >> 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.4) : injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u)) >> 0u);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))))
            break;
           continue;
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-38.46, -9.7)) : injectionSwitch)))).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-38.46, -9.7)) : injectionSwitch)))).x > injectionSwitch.y)), true, true, false)))))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | (int(3)), _GLF_IDENTITY(0, (0) - 0) ^ ((int(3)) | (int(3))))), int(3)))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))) > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))))
              continue;
             return;
            }
          }
         break;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.7)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), true))))))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), true, false, true))))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
         if(_GLF_DEAD(false))
          break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, (0) | (0)))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.6) : injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(399.264, 1562.7487)) : mat2(1.0) * (injectionSwitch)))).y)), false, false, true))) && true))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))), false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))) ? _GLF_FUZZED(52460) : int(7))), int(7))) & 1); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))) || false)) && true))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(log(vec2(1.0, 1.0)), (true ? log(vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) : _GLF_FUZZED(subgroup_size))), uint(uvec4(subgroup_id * subgroup_size, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), ((false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) : _GLF_FUZZED(subgroup_size))), uint(uvec4(subgroup_id * subgroup_size, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))) | ((false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) : _GLF_FUZZED(subgroup_size))), uint(uvec4(subgroup_id * subgroup_size, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) << 0u))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(822.677) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(822.677) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(822.677) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), false || ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(822.677) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), bool(bool(! ((! (false)))))))))), bool(bvec4(false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), true, false, true))))))
  {
   do
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, true && (false))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)), (bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))) && true))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + subgroup_base), max((_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + subgroup_base), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))), ((_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + subgroup_base)) << 0u)) | 0u)))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0)))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec4(bvec2(false, true), false, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), false)))))), true && (bool(bvec2(false, true))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, false)))))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))), false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), bool(bvec2(bool(bool(! (false))), false)))))), true)), bvec2(bvec3(bvec2(bvec2(false, true)), false)))))), true && (bool(bvec2(false, true)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)), true, true, false)), (bool(bvec4(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)), true, true, false))) || false))) || false)), true, false, false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true)) || false))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true)) || false, ! (! ((_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, false))), false))) && true)) || false)))))), true)), bool(bvec3(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true)) || false))), true)), false, true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                       break;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(! (! (injectionSwitch.x < injectionSwitch.y)), true, true, false)), (bool(bvec4(! (! (injectionSwitch.x < injectionSwitch.y)), true, true, false))) || false))))) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5022.2194)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), false || (true && (false)))))) || false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) | (4))), clamp(int(4), int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, bool(bvec4(_GLF_IDENTITY((true) && true, bool(bvec2((true) && true, false))), false, false, true)))), true, true)))))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.5))) > injectionSwitch.y)))))) || false)))))
                  {
                   for(int _injected_loop_counter = (1 & ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(int(2)), clamp(int(int(2)), int(int(2)), int(int(2)))))), 0 ^ (int(2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), 1 * (int(2))))), _GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), 0 ^ (int(2))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 return;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) | (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))) | (0 ^ 0))))), 64, _GLF_IDENTITY(2, _GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) ^ 0), 2, 2), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-93857) : 2)))), (2) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(2, (2) ^ 0)) - 0), _GLF_IDENTITY(2, (2) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (1 | 1) * (2)), (2) ^ 0), (_GLF_IDENTITY(2, (2) ^ 0)) - 0), _GLF_IDENTITY(2, (2) ^ 0)))) / 1), 2, 2), min(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(2, (2) ^ 0)) - 0), _GLF_IDENTITY(2, (2) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), 0 ^ (_GLF_IDENTITY(2, (2) ^ 0)))) - 0), _GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, max((2) ^ 0, (2) ^ 0)))))) / 1), 2, 2), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ _GLF_IDENTITY(0, min(0, 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(2, (2) ^ 0)) - 0), _GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, ((2) ^ 0) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, 0 + ((2) ^ 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(2, (2) ^ 0)) - 0), _GLF_IDENTITY(2, (2) ^ 0)))) / 1), 2, 2))), (_GLF_IDENTITY(false ? _GLF_FUZZED(83115) : clamp(_GLF_IDENTITY(2, (2) ^ 0), 2, 2), 0 ^ (false ? _GLF_FUZZED(_GLF_IDENTITY(83115, (_GLF_IDENTITY(83115, ~ (_GLF_IDENTITY(~ (83115), min(~ (83115), ~ (83115)))))) | (0 ^ 0))) : clamp(_GLF_IDENTITY(2, (2) ^ 0), 2, 2)))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), true && ((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))) && true))) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_DEAD(false)))), true && (! (bool(bool(_GLF_DEAD(false)))))))))))))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-17787 & (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(ivec4(-14199, -45788, -67488, 37856)[2]))), (0 | 0) | (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(ivec4(-14199, -45788, -67488, 37856)[2])))))), (int(2)) << 0))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
              continue;
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), int(ivec2(_GLF_IDENTITY((1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)), max((1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)), (1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)))), 1)), (int(ivec2(_GLF_IDENTITY((1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)), max((1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)), (1 | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)).y)))), 1))) - 0)), 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) * 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true)), ! (! (bool(bvec2((! (false)), true)))))))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), bool(bool((! (false))))), false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)), next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u)), (clamp(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)), next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))) + 0u))], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), clamp(_GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(4, _GLF_IDENTITY(0, ~ (~ (0))) | (_GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), (true ? 4 : _GLF_FUZZED(-51272))), 0 | (_GLF_IDENTITY(4, int(ivec3(4, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))))), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (0) * 1), 1, 0))), 0))], (injectionSwitch)[1]), vec2(_GLF_FUZZED(507.718), _GLF_FUZZED(1.4)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, false), true, true)))))))))).y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).x > injectionSwitch.y))))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(-7.1) : float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0))))))), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)))))) ? 1.0 : _GLF_FUZZED(intBitsToFloat(38414)), float(mat4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(-7.1) : float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0))))))), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)))))) ? 1.0 : _GLF_FUZZED(intBitsToFloat(38414)), float(vec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(-7.1) : float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0))))))), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)))))) ? 1.0 : _GLF_FUZZED(intBitsToFloat(38414)), min(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(-7.1) : float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0))))))), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)))))) ? 1.0 : _GLF_FUZZED(intBitsToFloat(38414)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(-7.1) : float(mat2x4(0.0, determinant(mat4(0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), 0.0, abs(1.0), round(length(normalize(sqrt(vec2(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0))))))), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)))))) ? 1.0 : _GLF_FUZZED(intBitsToFloat(38414)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0))))) * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-20.90), min(_GLF_IDENTITY(_GLF_FUZZED(-20.90), min(_GLF_FUZZED(-20.90), _GLF_FUZZED(-20.90))), _GLF_FUZZED(-20.90))))))) : _GLF_FUZZED(-611.377))), injectionSwitch.x)) + (~ (1))))))) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) >> 0) != _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((_GLF_IDENTITY(8, (8) | (8))), ((8)) | ((8))) >> 0))))) + 0) & ivec3(64148, _GLF_IDENTITY(36813, (36813) ^ 0), 3142).y), ((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY(clamp(8, 8, 8), clamp(clamp(8, 8, 8), clamp(8, 8, 8), clamp(8, 8, 8))))))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(8), int(8)))), int(ivec2(((0 >> _GLF_IDENTITY(int(8), int(8)))), 0))) + 0) & ivec3(64148, 36813, 3142).y)) << 0), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))) + 0), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))) + 0)) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))) + 0))))) & ivec3(64148, _GLF_IDENTITY(36813, (36813) ^ 0), 3142).y), ((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, clamp(8, 8, 8))))), ((0 >> _GLF_IDENTITY(int(8), int(8)))) + 0) & ivec3(64148, 36813, 3142).y)) << 0)) | (_GLF_IDENTITY((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0)))), clamp(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0)))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0)))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))) >> 0)) | 0), (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0)))), (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))))) + 0) & ivec3(64148, _GLF_IDENTITY(36813, (36813) ^ 0), 3142).y), ((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, clamp(8, 8, 8))))), ((0 >> _GLF_IDENTITY(int(8), int(8)))) + 0) & ivec3(64148, 36813, 3142).y)) << 0)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), clamp(min(_injected_loop_counter, _injected_loop_counter), min(_injected_loop_counter, _injected_loop_counter), min(_injected_loop_counter, _injected_loop_counter)))), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) >> 0) != _GLF_IDENTITY((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, 0 ^ (_GLF_IDENTITY(8, max(8, 8))))) | (8))))), ((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) >> 0))))) + 0) & _GLF_IDENTITY(ivec3(_GLF_IDENTITY(64148, 0 | (64148)), _GLF_IDENTITY(36813, (36813) ^ 0), 3142).y, (_GLF_IDENTITY(ivec3(64148, _GLF_IDENTITY(36813, (36813) ^ 0), 3142).y, (true ? ivec3(64148, _GLF_IDENTITY(36813, _GLF_IDENTITY((36813), 0 + ((36813))) ^ 0), 3142).y : _GLF_FUZZED(findLSB(_injected_loop_counter))))) << 0)), ((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, clamp(8, 8, 8))))), ((0 >> _GLF_IDENTITY(int(8), int(8)))) + 0) & ivec3(64148, 36813, 3142).y)) << 0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, false || (false)), true)))))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true))))
          {
          }
         else
          {
           subgroupBarrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-46639)))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(34512) : _injected_loop_counter --)))))
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(vec3(0.0, 0.0, 0.0))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) | (read))) / _GLF_IDENTITY(1u, (1u) | (1u))), 4, 64, 4);
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(426.574)), bool(false)))) - 0.0))))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), false, true))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false)))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(9.0)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))))), (_GLF_DEAD(false)) || false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0))), injectionSwitch)).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(false, (false) && true)) && true)))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
