#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec4(true, true, true, false))), (bool(bool(bvec4(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true, false)))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(bool(bvec4(true, true, true, false))), (bool(bool(bvec4(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true, false)))) || false)), true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false), ((false)) || false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true)))), ((false) && true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), true, true, false))))), false || (false))));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(12542)))) * 1)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(_GLF_IDENTITY(2, min(2, 2))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-6.2)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u ^ ((~ (subgroup_local_id)))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), 0u, 0u)))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u ^ ((~ (subgroup_local_id)))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), 0u, 0u)))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u ^ ((~ (subgroup_local_id)))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), 0u, 0u)))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))))))), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u ^ ((~ (subgroup_local_id)))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), 0u, 0u)))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u ^ ((~ (subgroup_local_id)))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), 0u, 0u)))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u ^ ((~ (subgroup_local_id)))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), 0u, 0u)))) | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))), ~ (~ (subgroup_local_id)))))))))) << 0u)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) - (0u << _GLF_IDENTITY(uint(7u), uint(7u))))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u))) + subgroup_local_id), _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))), 0u, 0u), min(_GLF_IDENTITY(uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))), 0u, 0u), uvec3(uvec3(uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))), 0u, 0u)))), uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))), 0u, 0u))), (uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(179339u))) + subgroup_local_id)), 0u, 0u)) / uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), max(_GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), max((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), ((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | ((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))))), _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), ((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) << 0u))) | (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), 0u, 0u), (uvec3((uint(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (1u ^ 1u) + (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) + subgroup_local_id)))) | (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + subgroup_local_id)), 0u, 0u)) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) * (subgroup_id * subgroup_size)) + subgroup_local_id)), 0u, 0u), (uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)) + subgroup_local_id)), 0u, 0u)) / uvec3(1u, 1u, 1u)), (false ? _GLF_FUZZED(uvec3(147808u, 20587u, 24265u)) : _GLF_IDENTITY(uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), ((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) - 0u), 0u, 0u), (uvec3((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), 0u, 0u)) / uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), 1u, 1u))))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) ^ 0u)) | (subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(uint(uvec3(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 0u)), (uint(uvec3(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 0u))) << 0u))) | (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))), clamp(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))), clamp(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), 0u), clamp(uvec2(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), 0u), uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), 0u), (uvec2(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), 0u)) ^ uvec2(0u, 0u))))))), uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id), (uint(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))))), uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size + subgroup_local_id)) << 0u)))))))) << 0u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) ^ 0u)) | (subgroup_size)), (true ? workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) ^ 0u)) | (subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) - 0u))) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), uint(uvec3(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) + 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u))), (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size)) + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))) - 0u)), (0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), ~ (~ (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)))))), (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size)) + subgroup_local_id), _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), ((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) ^ 0u) << 0u)))) - 0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) + subgroup_local_id), (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) + subgroup_local_id)) - 0u), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, (workgroup_base) * (0u ^ 1u)) + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), clamp(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u, uint(uvec3(_GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u, ((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u) ^ 0u), 1u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)) ^ 0u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)) ^ 0u, uint(uint((_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)) ^ 0u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u) + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))))), clamp(uint(_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))), uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)))) + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u)))), uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), _GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), (_GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), ~ (~ (_GLF_IDENTITY((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), max((uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), (uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))))))) / 1u) << 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) + subgroup_local_id), (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | _GLF_IDENTITY(0u, (0u) / (1u & 1u))) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u) + subgroup_local_id)) << 0u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) + subgroup_local_id), (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | _GLF_IDENTITY(0u, (0u) / (1u & 1u))) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u) + subgroup_local_id)) << 0u)))), (uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) + subgroup_local_id), (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | _GLF_IDENTITY(0u, (0u) / (1u & 1u))) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u) + subgroup_local_id)) << 0u))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) + subgroup_local_id), (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | _GLF_IDENTITY(0u, (0u) / (1u & 1u))) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u) + subgroup_local_id)) << 0u)))), (uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) + subgroup_local_id), (uint(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | _GLF_IDENTITY(0u, (0u) / (1u & 1u))) + subgroup_local_id)) | (_GLF_IDENTITY(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u) + subgroup_local_id)) << 0u))))) >> 0u)))) ^ 0u))))) << 0u))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ((true) && true) && true))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(74.75), _GLF_FUZZED(-6.5)), bvec2(false, false))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(74.75), _GLF_FUZZED(-6.5)), bvec2(false, false))).y) - 0.0), (false ? _GLF_FUZZED(reflect(-7840.1643, -32.13)) : injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec2((false), false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), bool(bvec4(false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y) && true))))), false, false, true))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))) && true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))) && true, ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false) && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))) && true) || false))))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(6113.7194, -30.30, 66.83, -59.17), vec4(5.8, 3.9, 4857.2044, -5.9))))) > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.1) : injectionSwitch.y)), injectionSwitch.y)), (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))) || false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))) || false), false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false))))))))))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))) || false), false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false))))))))))))))))), false, true, false))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false))))), false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, true, true, true)))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), true, false))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, true, true, true)))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, true, true, true)))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), true, false))), false))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, true, true, true)))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true, true, true, true)))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), true, false))), false))), true))))))), false))))) || false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, false, true)), ! (! (bool(bvec4(true && (_GLF_IDENTITY(false, (false) || false)), false, false, true)))))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) / 1.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(distance(2207.6384, -76.76)) : injectionSwitch.x)), (true ? injectionSwitch.x : _GLF_FUZZED(-694.310))))), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, sqrt(1.0)), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, sqrt(1.0)), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(dot(vec4(0.0, 0.0, 0.0, sqrt(1.0)), vec4(0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(5890.0690)), bool(false)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-284.998)), bool(false))))), 1.0)).x, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)))) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 48802)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               else
                {
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), false), bvec3(bvec3(bvec3(bvec2(false, true), false))))))))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size))))) * 1u), (workgroup_base + subgroup_id * subgroup_size) / 1u) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (true ? _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), 0u ^ (max(subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(subgroup_id)))) + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))), (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))) ^ (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), 0u ^ (workgroup_base + subgroup_id * subgroup_size)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size))))) * 1u), (workgroup_base + subgroup_id * subgroup_size) / 1u) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (true ? _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), 0u ^ (max(subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(subgroup_id)))) + 1) % subgroup_size)) + 0u);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (false)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, ! (! ((_GLF_IDENTITY(false, (false) && true)) || false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, ! (! ((_GLF_IDENTITY(false, (false) && true)) || false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, ! (! ((_GLF_IDENTITY(false, (false) && true)) || false))), false, false)))))))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 0)))) >> 0) ^ _GLF_IDENTITY(0, (0) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           barrier();
          }
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))
  barrier();
 do
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, 1), (_GLF_IDENTITY(ivec2(64, 1), (true ? ivec2(64, 1) : _GLF_FUZZED(ivec2(-89415, -73670))))) << ivec2(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0)), 0)))), _GLF_IDENTITY((_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, 1), (_GLF_IDENTITY(ivec2(64, 1), (true ? ivec2(64, 1) : _GLF_FUZZED(ivec2(_GLF_IDENTITY(-89415, 0 + (-89415)), -73670))))) << ivec2(0, _GLF_IDENTITY(0, (0) / 1)))))) - 0, 0 ^ ((_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, 1), (_GLF_IDENTITY(ivec2(64, 1), (true ? ivec2(64, 1) : _GLF_FUZZED(ivec2(_GLF_IDENTITY(-89415, 0 + (-89415)), -73670))))) << ivec2(0, _GLF_IDENTITY(0, (0) / 1)))))) - 0))), 0, 1))), 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! _GLF_IDENTITY((bool(bvec4(false, false, true, false))), false || ((bool(bvec4(false, false, true, false)))))))), (false) && true)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 0) | 0) ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))) || false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8765.9905)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(uvec4(133842u, 176591u, 60686u, 66955u).b))), vec2(_GLF_FUZZED(4.0), (injectionSwitch)[1]), bvec2(false, true)))[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))) << 0)) ^ 0) != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(vec3(8991.9089, -1.3, -163.967), vec3(732.349, -395.189, -7808.8250))))) > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) - 0)), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) - 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) - 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) - 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : virtual_gid), max((false ? _GLF_FUZZED(subgroup_size) : virtual_gid), (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : virtual_gid)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : virtual_gid)), max(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : virtual_gid)), uint(uint(_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : virtual_gid))))), _GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : virtual_gid)))), 0u))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))))) | 0u), 0u, 0u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid) / 1u))))), (1u ^ 1u) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid) / 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid) / 1u))))))))), 0u, 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED((workgroup_id & read)) : _GLF_FUZZED(subgroup_size))) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_FUZZED(subgroup_size), (0u ^ 1u), 0u, 0u), (uvec4(_GLF_FUZZED(subgroup_size), (0u ^ 1u), 0u, 0u)) - uvec4(0u, 0u, 0u, 0u)))))) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))))), 0u, 0u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))))), min(_GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))))), _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))))))), 0u, 0u)) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))))))))), 0u, 0u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))) | (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))))), 0u, 0u)) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), 0u, 0u, 0u)))), clamp(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : virtual_gid), min(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : virtual_gid), 0u ^ (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : virtual_gid), ((false ? _GLF_FUZZED(subgroup_size) : virtual_gid)) - 0u))), (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))))), min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))), (min(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))) | (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))), 0u, 0u))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : virtual_gid))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u & 3145u))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (false ? _GLF_FUZZED(subgroup_size) : virtual_gid)))), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | 0u))) ^ uvec3(0u, 0u, 0u))))))], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), _GLF_IDENTITY(min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))), 1u * (min(_GLF_IDENTITY(uint(uvec2(read, 1u)), max(_GLF_IDENTITY(uint(uvec2(read, 1u)), max(uint(uvec2(read, 1u)), uint(uvec2(read, 1u)))), uint(uvec2(read, 1u)))), uint(uvec2(read, 1u))))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))))), (_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), _GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) * 1u))))) ^ 0u), 1u))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), clamp(_GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(1u, (1u) - 0u))) : _GLF_FUZZED(67135u))), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(workgroup_size))), uint(1u), uint(1u))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))))), min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))))), uint(uvec2(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))))), 1u)))))) - 0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(read, (false ? _GLF_FUZZED(workgroup_id) : read)), 1u)), min(uint(uvec2(read, 1u)), _GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, _GLF_IDENTITY(1u, 0u | (1u))))) / 1u)))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))))), uint(uvec2(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))))), 1u))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(read, 1u)), clamp(uint(uvec2(read, 1u)), _GLF_IDENTITY(uint(uvec2(read, 1u)), (_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) << 0u)) >> 0u), uint(uvec2(read, 1u)))), _GLF_IDENTITY(min(uint(uvec2(read, 1u)), uint(uvec2(read, 1u))), ~ (~ (min(uint(_GLF_IDENTITY(uvec2(read, 1u), clamp(_GLF_IDENTITY(uvec2(read, 1u), (uvec2(read, 1u)) | uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(read, 1u), uvec2(uvec2(uvec2(read, 1u)))), uvec2(read, 1u)))), uint(uvec2(read, 1u)))))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(read, 1u)), min(uint(uvec2(read, 1u)), uint(_GLF_IDENTITY(uvec2(read, _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 0u)))), uvec2(_GLF_IDENTITY(uvec3(uvec2(read, 1u), 0u), uvec3(1u, 1u, 1u) * (uvec3(uvec2(read, 1u), 0u))))))))), 1u), (uvec2(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(read, 1u)), (_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(_GLF_IDENTITY(uvec2(read, _GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u)))), uvec2(0u, 0u) ^ (uvec2(read, _GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u)))))))) | (_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) + 0u)))) ^ (_GLF_IDENTITY(121041u, (121041u) ^ 0u) & 0u)), min(uint(uvec2(read, 1u)), uint(_GLF_IDENTITY(uvec2(read, 1u), uvec2(_GLF_IDENTITY(uvec3(uvec2(read, 1u), 0u), _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))) * (uvec3(uvec2(read, 1u), 0u))))))))), 1u)) | _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), clamp(uvec2(0u, 0u), uvec2(0u, 0u), uvec2(0u, 0u)))) / uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + (0u | 0u))) << 0u), 1u)))))))) - 0u)) : _GLF_FUZZED(virtual_gid))), 4, _GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(16518))), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, log(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0))).y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat4(injectionSwitch.x, 0.0, abs(0.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-167.154) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4.4)))))))))) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, ((injectionSwitch.x) * 1.0) * 1.0)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, abs(0.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, abs(0.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0), (mat4(injectionSwitch.x, 0.0, abs(0.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) + 0.0, mix(float((abs(0.0)) + 0.0), float(_GLF_FUZZED(6913.1331)), bool(false)))), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0))))) > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))) > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (injectionSwitch.x) * 1.0) > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, (true) && true), true)))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (injectionSwitch.x) * 1.0) > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), true, true, true)))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0))))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) * 1.0) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) * abs(vec2(1.0, 1.0))).y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4.0) : injectionSwitch.y)))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), false, true, true)))), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true)))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (true ? _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch)), injectionSwitch)).y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))));
  }
}
