#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 vec2 _f0;
 ivec3 _f1;
 bvec2 _f2;
 bvec3 _f3;
 vec2 _f4;
 mat3x4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_26 {
 mat2 _f0;
 _GLF_struct_25 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_23 {
 vec3 _f0;
 mat2x4 _f1;
 vec2 _f2;
 float _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_22 {
 int _f0;
 float _f1;
 bvec4 _f2;
 uint _f3;
 vec3 _f4;
} ;

struct _GLF_struct_24 {
 vec3 _f0;
 bvec4 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_20 {
 mat4x3 _f0;
 ivec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_19 {
 mat2x4 _f0;
} ;

struct _GLF_struct_18 {
 uvec2 _f0;
 mat4x2 _f1;
 mat4x3 _f2;
 mat2 _f3;
 uvec4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 vec4 _f1;
 mat4x3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 vec2 _f3;
 mat2x3 _f4;
 int _f5;
} ;

struct _GLF_struct_15 {
 mat3 _f0;
 mat2x3 _f1;
 vec3 _f2;
 mat4 _f3;
 mat4 _f4;
 mat4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_21 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 int _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
 _GLF_struct_20 _f6;
} ;

struct _GLF_struct_27 {
 bvec4 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_24 _f2;
 uint virtual_gid;
 mat2x3 _f3;
 _GLF_struct_26 _f4;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_11 {
 uvec3 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
 uvec2 _f1;
 bvec4 _f2;
 mat2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 ivec4 _f1;
 uvec2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 mat3 _f1;
 uint _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 ivec4 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 _GLF_struct_13 _f1;
 bvec3 _f2;
 uint workgroup_size;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
} ;

struct _GLF_struct_3 {
 float _f0;
 int _f1;
 vec4 _f2;
 bool _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 mat4x3 _f1;
 vec2 _f2;
 vec3 _f3;
 int _f4;
} ;

struct _GLF_struct_0 {
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 ivec2 _f0;
 mat4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 bvec2 _f1;
 vec4 _f2;
 _GLF_struct_0 _f3;
 uint _f4;
 _GLF_struct_1 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_5 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, sqrt(1.0), determinant(mat2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(float(vec4((1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), clamp(float(vec4((1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), float(vec4((1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(float(vec4((1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), mix(float(_GLF_FUZZED(-4.7)), float(float(vec4((1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), bool(true)))))) - 0.0), 0.0, 1.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, sqrt(1.0), determinant(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))))), 1.0, 0.0, sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), (true ? vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0) : _GLF_FUZZED(mix(vec3(-3827.5749, 5673.8035, -74.63), vec3(-8.0, -22.11, -8.7), bvec3(true, true, true)))))), mix(float(_GLF_FUZZED(-84.16)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0) : _GLF_FUZZED(mix(vec3(-3827.5749, 5673.8035, -74.63), vec3(-8.0, _GLF_IDENTITY(-22.11, (-22.11) - 0.0), -8.7), bvec3(true, true, true)))))), float(vec3(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0) : _GLF_FUZZED(mix(vec3(-3827.5749, 5673.8035, -74.63), vec3(-8.0, -22.11, -8.7), bvec3(true, true, true)))))), 0.0, 1.0)))), bool(true)))), 0.0, 0.0, tan(0.0))), (vec2(mat4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, sqrt(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0)))), dot(vec3(1.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.6) : 0.0)), 0.0), vec3(0.0, sqrt(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0))))), 1.0, 0.0, sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)), tan(0.0)))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_4_1_1_11readsubgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    break;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))));
 uvec4 GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)))).x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base))[0], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[_GLF_IDENTITY(1, (1) ^ 0)]))) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base)), ((uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uvec2(3u), uvec2(3u))) >> _GLF_IDENTITY(uvec2(3u), uvec2(3u))) * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base) >> uvec2(0u, 0u)), max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base)))))), min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base))) | uvec2(0u, 0u));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true))))))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_6 _GLF_struct_replacement_6;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), bool(bvec4(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), true, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), bool(bvec4(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), true, false, false)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0)) - 0.0) > injectionSwitch.y))))) && true)), bool(bvec4(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), true, false, false))))) && true)) && true)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3864.2319) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(0.0)), bool(false))), injectionSwitch.x)) > injectionSwitch.y))))))) && true)), bool(bvec4(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! ((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! ((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-618.363) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)))))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), bool(bvec4(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))) && true)), true, false, false)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), bool(bvec4(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), true, false, false))))) && true)) && true))))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))))) && true)))), ((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))))) && true))))) || false)), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_4_1_1_11readsubgroup_id.y = subgroup_id;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x = _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readsubgroup_id, min(GLF_merged2_0_1_4_1_1_11readsubgroup_id, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readsubgroup_id, (GLF_merged2_0_1_4_1_1_11readsubgroup_id) >> uvec2(0u, 0u)))).y;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) && true))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), bvec2(bvec3(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), false)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), bvec2(bvec3(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), bvec2(bvec3(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), false)))), false))), false, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), bvec2(bvec3(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), bvec2(bvec3(bvec2(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), false)))), false))), false, false)))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w = subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   _GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), min(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id))))), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(subgroup_size) : GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id), ((_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(subgroup_size) : GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id)) + ((1u | 1u) ^ 1u)))))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, ~ (~ (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id))), 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) ? _GLF_FUZZED(subgroup_size) : GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))))))), (~ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id)))))) | 0u))))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool(bool(injectionSwitch.x > injectionSwitch.y)), false))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool(bool(injectionSwitch.x > injectionSwitch.y)), false))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 ^ 0), min(_GLF_IDENTITY((0 ^ 0), (true ? (0 ^ 0) : _GLF_FUZZED(35691))), (0 ^ 0)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.w = _GLF_IDENTITY(num_workgroup, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(num_workgroup, (num_workgroup) << 0u)) << 0u), (num_workgroup) / 1u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(num_workgroup, (num_workgroup) / 1u))), num_workgroup, _GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, _GLF_IDENTITY((num_workgroup) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2((num_workgroup) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u & 1u))))), (_GLF_IDENTITY(num_workgroup, _GLF_IDENTITY((num_workgroup) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2((num_workgroup) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u & 1u)))))) / 1u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.y = GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.w;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_10(_GLF_struct_7(uvec4(1u), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(true))), bool(false)))) * sqrt(1.0)), 1.0, 1.0))), float(_GLF_FUZZED(16.97)), bool(false)))), 1u), _GLF_struct_8(bvec4(true), ivec4(1), uvec2(1u), mat3x4(1.0)), ivec4(1), _GLF_struct_9(uvec4(1u), uvec2(1u), bvec4(true), mat2(1.0), mat2x3(1.0))), _GLF_struct_13(_GLF_struct_11(uvec3(1u)), _GLF_struct_12(mat4(1.0), mat2x3(1.0))), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), gl_WorkGroupSize.x);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.1), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec4(_GLF_IDENTITY((injectionSwitch)[0], float(vec4(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(round(vec2(-788.302, -3.7))) : (injectionSwitch)))[0], abs(0.0), 0.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))), _GLF_FUZZED(-2.9)), bvec2(true, false))))).y, float(float(injectionSwitch.y))))))))) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y = workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_14.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y, (false ? _GLF_FUZZED(133981u) : _GLF_IDENTITY(_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y, clamp(_GLF_IDENTITY(_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y, (_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y) / 1u), _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y, _GLF_IDENTITY(_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y, ~ (~ (_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y)))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y = workgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), bool(bool(_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(945.950) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6060.6972)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))) > injectionSwitch.y))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(945.950) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6060.6972)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))) > injectionSwitch.y))) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(bvec4(true), _GLF_struct_21(_GLF_struct_15(mat3(1.0), mat2x3(1.0), vec3(1.0), mat4(1.0), mat4(1.0), mat4(1.0), mat3(1.0)), _GLF_struct_16(mat2x3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7767.1642) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.3)), float(1.0), bool(true)))))))), uvec2(_GLF_IDENTITY(1u, ~ (~ (1u)))), mat4x3(1.0), vec2(1.0), mat2x3(1.0), 1), 1, _GLF_struct_17(mat2(1.0), vec4(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) + 0.0)), uvec4(1u)), _GLF_struct_18(uvec2(1u), mat4x2(1.0), mat4x3(1.0), _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))), uvec4(1u), uvec3(1u)), _GLF_struct_19(mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.9)))), float(_GLF_FUZZED(-1.6)), bool(false)), min(mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-9.9), clamp(true ? 1.0 : _GLF_FUZZED(-9.9), _GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-9.9), (true ? 1.0 : _GLF_FUZZED(-9.9)) + 0.0), _GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-9.9), clamp(true ? 1.0 : _GLF_FUZZED(-9.9), true ? 1.0 : _GLF_FUZZED(-9.9), true ? 1.0 : _GLF_FUZZED(-9.9)))))))), float(_GLF_FUZZED(-1.6)), bool(false)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.9)))), float(_GLF_FUZZED(-1.6)), bool(false)), clamp(mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.9)))), float(_GLF_FUZZED(-1.6)), bool(false)), mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.9)))), float(_GLF_FUZZED(-1.6)), bool(false)), mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.9)))), float(_GLF_FUZZED(-1.6)), bool(false))))))))), _GLF_struct_20(mat4x3(1.0), ivec3(1), bvec4(true))), _GLF_struct_24(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY((vec3(1.0)) * mat3(1.0), _GLF_IDENTITY(max((vec3(1.0)) * mat3(1.0), _GLF_IDENTITY((vec3(1.0)) * mat3(1.0), _GLF_IDENTITY(clamp((vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0)), vec3(mat2x3(clamp((vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0)), 1.0, 0.0, 1.0))))), clamp(max((vec3(1.0)) * mat3(1.0), _GLF_IDENTITY((vec3(1.0)) * mat3(1.0), clamp((vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0)))), max((vec3(1.0)) * mat3(1.0), _GLF_IDENTITY((vec3(1.0)) * mat3(1.0), clamp((vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0)))), max((vec3(1.0)) * mat3(1.0), _GLF_IDENTITY((vec3(1.0)) * mat3(1.0), clamp((vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0), (vec3(1.0)) * mat3(1.0)))))))), bvec4(true), _GLF_struct_22(1, 1.0, bvec4(true), 1u, vec3(_GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_struct_23(vec3(1.0), mat2x4(1.0), vec2(1.0), 1.0, mat4x3(1.0)), vec2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x, (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x))) >> 0u), (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x) << 0u), mat2x3(1.0), _GLF_struct_26(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.4) : 1.0))), _GLF_struct_25(vec2(1.0), ivec3(1), bvec2(true), bvec3(true), vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.4)), bool(false)))), mat3x4(1.0), ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (ivec3(1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) ^ ivec3(0, 0, 0)))))), uvec2(1u)));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, 0u | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w) >> 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, min(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w))) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy, (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy, (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy, _GLF_IDENTITY(uvec2(0u, 0u) | (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy), (uvec2(0u, 0u) | (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy)) | (uvec2(0u, 0u) | (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy))))) | (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy))) + uvec2(0u, 0u)).y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w) >> 0u))) >> 0u), (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w) >> 0u))))) + ((GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x + 1) % GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, 0u | (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)) + ((GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x + 1) % GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup, clamp(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup, GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup) >> uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup) >> uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup) >> uvec4(0u, 0u, 0u, 0u)))))).xy.y + _GLF_IDENTITY(_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x, _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0u) ^ (_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x), ((uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-5.1)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))) ^ 0u) ^ (_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x)) | (_GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0u) ^ (_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x), uint(uvec3((uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0u) ^ (_GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x), 1u, 1u)))))) * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, 0u | (GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_struct_replacement_6._f1._f3.GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)) + ((GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1))))) % GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)) - 0u)) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.z = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(0.1)), bool(false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-83199)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x = GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.z, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x = GLF_merged3_0_2_56_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenext_virtual_gidnum_workgroup.z) << 0u);
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint read = atomicLoad(buf[_GLF_struct_replacement_27.virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged2_0_1_4_1_1_11readsubgroup_id.x = read;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bool(_GLF_IDENTITY(true, ! (! (true)))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bool(_GLF_IDENTITY(true, ! (! (true))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z = GLF_merged2_0_1_4_1_1_11readsubgroup_id.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), false, true, true))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-81.49), _GLF_FUZZED(7.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) - vec2(0.0, 0.0)).y, (injectionSwitch.y) * 1.0)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_DEAD(false), true, true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, true && (true)), false)), (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, true && (true)), false))) && true)))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true))))))), bool(bool(false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && _GLF_IDENTITY((false), bool(bool((false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), true && (bool(bvec4(_GLF_DEAD(false), true, true, false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))));
 do
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x], uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(checker[_GLF_struct_replacement_27.virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
