#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, _GLF_IDENTITY(false, (false) || false), true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), true && (bool(bvec4(false, false, true, true)))))))
    barrier();
   return;
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.z = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true), false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), false || (! ((true)))))), true && (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((true)), ! (! (_GLF_IDENTITY(((true)), (((true))) || false)))), false || (! ((true)))))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), ~ (~ (int(6))))) | (int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) / 1))))), (_GLF_IDENTITY(int(6), int(6))) ^ 0)) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, ! (! (true))) && (! (_GLF_DEAD(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(59.80), _GLF_FUZZED(7366.6117)), bvec2(false, false))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             break;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))) / 1.0) > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.y = num_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.7))) : _GLF_FUZZED(-9.5))) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0)))) / vec2(1.0, 1.0)).y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), 0 | (int(3))) : _GLF_FUZZED(92041))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec2(int(3), 1)), int(ivec3(int(ivec2(int(3), 1)), 1, _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) << 0)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(3, 0 | (_GLF_IDENTITY(3, (3) | (3))))))), int(3)), int(_GLF_IDENTITY(ivec4(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(87044) : int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(87044) : int(5)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(87044) : int(5)))), int(ivec2((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(87044) : int(5)))), 1))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(87044) : int(5))))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), _GLF_IDENTITY(int(ivec2(int(_GLF_IDENTITY(3, int(ivec4(_GLF_IDENTITY(3, max(3, 3)), 0, 0, 0)))), 1)), int(ivec3(int(ivec2(int(3), _GLF_IDENTITY(1, (1) ^ 0))), 1, 0)))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3))))), 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, vec2(-3.6, 6.2))) : injectionSwitch)))).y)), 1), (_GLF_IDENTITY(ivec4((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 1 * (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (! (! (false))), ! (! (_GLF_IDENTITY(! (! (! (false))), false || (! (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), bool(bvec3(_GLF_IDENTITY(! (! (! (false))), false || (! (! (! (false))))), false, false)))))))))))))))) ? _GLF_FUZZED(87044) : int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) >> 0, 0 ^ ((5) >> 0)))))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, min(3, 3)), min(_GLF_IDENTITY(3, 1 * (3)), 3))), _GLF_IDENTITY(int(ivec2(int(_GLF_IDENTITY(3, int(ivec4(_GLF_IDENTITY(3, max(3, 3)), 0, 0, 0)))), 1)), int(ivec3(int(ivec2(int(3), 1)), 1, 0)))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3))))), 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, vec2(-3.6, 6.2))) : injectionSwitch)))).y)), 1), (ivec4((((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(87044) : int(5))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, (3) - 0)))), _GLF_IDENTITY(int(ivec2(int(_GLF_IDENTITY(3, int(ivec4(_GLF_IDENTITY(3, max(3, 3)), 0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), 0 | (0)))))), 1)), int(ivec3(int(ivec2(int(3), 1)), 1, 0)))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3))))), 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, vec2(-3.6, 6.2))) : injectionSwitch)))).y)), 1)) >> ivec4(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)), 0))) - ivec4(0, 0, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(atomicExchange(_injected_loop_counter, 79581), 1 * (_GLF_IDENTITY(atomicExchange(_injected_loop_counter, 79581), (atomicExchange(_injected_loop_counter, _GLF_IDENTITY(79581, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(79581, 1, (0 >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec4(79581, 1, (0 >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ ivec4(0, 0, 0, 0))), (int(_GLF_IDENTITY(ivec4(79581, 1, (0 >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec4(79581, 1, (0 >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ ivec4(0, 0, 0, 0)))) | (int(_GLF_IDENTITY(ivec4(79581, 1, (0 >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec4(79581, 1, (0 >> _GLF_IDENTITY(int(7), int(7))), int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ ivec4(0, 0, 0, 0)))))))) - 0)))) : _GLF_IDENTITY(0, (0) ^ 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-36.01)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-0.5)))), float(_GLF_FUZZED(2.4)), bool(false)))) - length(vec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, max(injectionSwitch.y, injectionSwitch.y))) - length(_GLF_IDENTITY(vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), (max(0.0, 0.0)) + 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((- 9.1)))), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(vec4(-8285.0122, -8.8, -6101.7787, 326.382)) : _GLF_IDENTITY(vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((- 9.1)))), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-525.715)), vec2(_GLF_FUZZED(1878.7388), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true)))).x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)))))), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(((5.0 + -1.2) - 695.709))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), clamp(vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((- 9.1)))), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((- 9.1)))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (true ? sqrt(0.0) : _GLF_FUZZED(1.6))), 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((- 9.1)))), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) + 0.0)))) - length(vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(fma(82.42, 293.947, 5.3)) : injectionSwitch.x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-43.27)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(983.228) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.4)), bool(false)))))))), _GLF_ZERO(0.0, injectionSwitch.x)))))) && true)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(log(-5509.6012)))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2406.6357), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-929.448)), bvec2(true, false))))).x) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))) + 0.0), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch))))), max(_GLF_IDENTITY((injectionSwitch), (true ? (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(417.676, -63.28)))))) : _GLF_FUZZED(vec2(3.8, -987.112)))), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(2828.2211), _GLF_FUZZED(-0.3)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false))).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       break;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec2(gl_WorkGroupSize.x, (68923u & (28714u & 0u)))), _GLF_IDENTITY((0u | _GLF_IDENTITY(0u, uint(uint(0u)))) ^ (uint(uvec2(gl_WorkGroupSize.x, (68923u & (28714u & 0u))))), (false ? _GLF_FUZZED(atomicXor(num_workgroup, subgroup_size)) : _GLF_IDENTITY((0u | _GLF_IDENTITY(0u, uint(uint(0u)))) ^ (uint(uvec2(gl_WorkGroupSize.x, (68923u & (28714u & 0u))))), min(_GLF_IDENTITY((0u | _GLF_IDENTITY(0u, uint(uint(0u)))) ^ (uint(uvec2(gl_WorkGroupSize.x, (68923u & (28714u & 0u))))), ~ (~ ((0u | _GLF_IDENTITY(0u, uint(uint(0u)))) ^ (uint(uvec2(gl_WorkGroupSize.x, (68923u & (28714u & 0u)))))))), (0u | _GLF_IDENTITY(0u, uint(uint(0u)))) ^ (uint(uvec2(gl_WorkGroupSize.x, (68923u & (28714u & 0u)))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(uvec4(~ (gl_WorkGroupID), 0u)))))) + uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), (~ (gl_WorkGroupID)) << uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x))), (true ? min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x))) : _GLF_FUZZED(subgroup_size)))), (uint(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | 0u)))))) ^ 0u))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(245.571)), bool(false))) > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.w = workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u), clamp((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u), (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u), (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)))))), (false ? _GLF_FUZZED((num_workgroup | GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id[0], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id[1], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id[2], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id[3])))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u), min((uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))))))) * uvec4(1u, 1u, 1u, 1u)).w, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, 0u | (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u))))) ^ (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(3u), _GLF_IDENTITY(uvec4(3u), (uvec4(3u)) >> uvec4(0u, 0u, 0u, 0u))))), (false ? _GLF_FUZZED((num_workgroup | GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), (1u ^ 1u), 0u))))) / uvec4(1u, 1u, 1u, 1u)))))))) * uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u))).w, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)))), (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u))), min(~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u))), ~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u))))))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)))))) : _GLF_FUZZED(uvec4(114923u, 199617u, 152865u, 46914u)))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u)))))))), _GLF_IDENTITY((false ? _GLF_FUZZED((num_workgroup | GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))), max((false ? _GLF_FUZZED((num_workgroup | GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))), (false ? _GLF_FUZZED((num_workgroup | GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))))))) * uvec4(1u, 1u, 1u, 1u)).w));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3x2(6.2, 5.0, 401.293, -4163.4818, -9.7, 22.26)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)))))) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3x2(6.2, 5.0, 401.293, -4163.4818, -9.7, 22.26)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)))))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3x2(6.2, 5.0, 401.293, -4163.4818, -9.7, 22.26)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3x2(6.2, 5.0, 401.293, -4163.4818, -9.7, 22.26)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, abs(1.0)))))) > injectionSwitch.y)) && true)) && true))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))))).x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(bool(false), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(false), true, false), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(false), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(false), true, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bool(false), true, false), true)), true))))))), false)))))))))), false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-80.64))))), false, false))), _GLF_IDENTITY(true, ! (! (true)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u)), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u)), (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u)) : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id))))).z * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(int(_GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (5) >> 0), _GLF_IDENTITY(5, (5) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))), 0 | (int(_GLF_IDENTITY(5, max(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(5, (5) >> 0), 0 | (_GLF_IDENTITY(5, (5) >> 0)))) / 1), 5)))))))), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), (true ? _GLF_IDENTITY(0, (0) / 1) : _GLF_FUZZED(_injected_loop_counter))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((19880 & 0), _GLF_IDENTITY((_GLF_IDENTITY((19880 & 0), int(ivec3((19880 & 0), 0, 1)))) | 0, (false ? _GLF_FUZZED(64306) : (_GLF_IDENTITY((19880 & 0), int(ivec3((19880 & 0), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) << 0)), min(~ (_GLF_IDENTITY(0, (0) << 0)), ~ (_GLF_IDENTITY(0, (0) << 0)))))), 1)))) | 0))) | (int(6))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               break;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-93.43))), injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-93.43))), injectionSwitch[1]))) / vec2(1.0, 1.0)), injectionSwitch)).y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))) && true)))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.z * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1))) - 0u)) % subgroup_size);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.x = next_virtual_gid) | 0u);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | 0), max((0 | 0), _GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), (0 | 0)))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2929.6817), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0)]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-1.0), (_GLF_IDENTITY(_GLF_FUZZED(-1.0), (_GLF_FUZZED(-1.0)) - 0.0)) - 0.0)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), true, false))), false, false)), false))), true, false)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), false))))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, false)), false))))))), true, true, true))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, sin(0.0)))) > injectionSwitch.y), true), true, false))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, false))), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false)))))))), true, false))))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0)), clamp(float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0)), float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0)), float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6799.5461) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.1)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0)), clamp(float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0)), float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0)), float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6799.5461) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.1)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y)) && true)))), true)))))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(944.983)), bool(false))), injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(2946.2644)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0)), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_DEAD(false)) && true)))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), (false ? _GLF_FUZZED(-50591) : (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))) + 0))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) || false); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false, false)))))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * exp(0.0))))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, tan(0.0), 1.0)), clamp(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, tan(0.0), 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, tan(0.0), 1.0)), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, tan(0.0), 1.0)), vec2(0.0, 0.0) + (vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, tan(0.0), 1.0))))))).y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            barrier();
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true, false)))))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-3.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))), 0 | (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-3.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-3.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))), ~ (~ ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-3.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))))))) | ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-3.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.6 - -11.35)), _GLF_FUZZED(395.969)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.6 - -11.35)), _GLF_FUZZED(395.969)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.6 - -11.35)), _GLF_FUZZED(395.969)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.6 - -11.35)), _GLF_FUZZED(395.969)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))) || false), true)))))))) || false)) || false)) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_injected_loop_counter ++)))
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))))))) / cos(abs(vec2(0.0, 0.0))), mix(vec2(_GLF_FUZZED(-608.687), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))))))) / cos(abs(vec2(0.0, 0.0))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))))))) / cos(abs(vec2(0.0, 0.0))))[0], _GLF_FUZZED(7.3)), bvec2(true, false)))).x > injectionSwitch.y) && true)), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(7), int(7))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) & (-62516 / 66298))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 1.0)), sin(0.0) + (float(vec3(injectionSwitch.x, 0.0, 1.0))))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               return;
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(_GLF_FUZZED(15.78)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.7) : 0.0))) / abs(1.0)), 1.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-81.00))), 1.0, 0.0, log(1.0), 0.0, 1.0, abs(0.0), 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), clamp(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.7) : 0.0))) / abs(1.0)), 1.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-81.00))), 1.0, 0.0, log(1.0), 0.0, 1.0, abs(0.0), 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.7) : 0.0))) / abs(1.0)), 1.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-81.00))), 1.0, 0.0, log(1.0), 0.0, 1.0, abs(0.0), 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.7) : 0.0))) / abs(1.0)), 1.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-81.00))), 1.0, 0.0, log(1.0), 0.0, 1.0, abs(0.0), 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(15.78)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(_GLF_FUZZED(15.78)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))));
            }
          }
        }
       else
        {
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), bool(_GLF_IDENTITY(bvec3(bool(bool(_GLF_IDENTITY(false, (false) || false))), false, true), bvec3(bvec3(bvec3(bool(bool(_GLF_IDENTITY(false, (false) || false))), false, true)))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[0], (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[0]) + 0.0)) / 1.0, clamp((_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY((((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(sinh(vec2(-8.1, 7.1))))))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) | (0))]) / 1.0), clamp((((injectionSwitch)[0]) / 1.0), (((injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (0)))]) / 1.0), (((injectionSwitch)[0]) / 1.0))) / 1.0), ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]), vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))[0], _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-1.2) : (injectionSwitch)[0]))) / 1.0, max(((injectionSwitch)[0]) / 1.0, (_GLF_IDENTITY((injectionSwitch)[0], 0.0 + ((injectionSwitch)[0]))) / 1.0)), clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9721.4445), (_GLF_FUZZED(-9721.4445)) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(sqrt(1.0), cos(0.0))), dot(vec2(0.0, 0.0), vec2(sqrt(1.0), cos(0.0))))), (vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), (_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat3x4((injectionSwitch)[0], 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0))), dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0)), mix(float(float(mat3x4((injectionSwitch)[0], 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0))), dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0))), float(_GLF_FUZZED(693.691)), bool(false))))) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat4x3(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[1]), vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0]))) / 1.0, clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, ((_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0]))) / 1.0) / 1.0), ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[0], min((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[0], (vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, mix(float(_GLF_IDENTITY(((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))]) / 1.0, (false ? _GLF_FUZZED(-5787.6670) : ((injectionSwitch)[0]) / 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(0.7, (_GLF_IDENTITY(0.7, _GLF_IDENTITY(float(vec2(0.7, 0.0)), (float(vec2(0.7, 0.0))) / 1.0))) / 1.0))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY((((injectionSwitch)[0]) / 1.0), 0.0 + ((((injectionSwitch)[0]) / 1.0))) / 1.0), ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[0])), _GLF_FUZZED(83.90)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false ? _GLF_FUZZED(vec2(-2.3, _GLF_IDENTITY(-5273.7482, clamp(-5273.7482, -5273.7482, -5273.7482)))) : _GLF_IDENTITY(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, max(((injectionSwitch)[0]) / 1.0, ((injectionSwitch)[0]) / 1.0)), clamp((_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0]))))), float(_GLF_FUZZED(-7.7)), bool(false)))) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0]) / 1.0) / 1.0), ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]), mix(vec2(_GLF_FUZZED(-9721.4445), (vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (0) ^ 0)], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), (_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat3x4((injectionSwitch)[0], 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0))), dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0)), mix(float(float(mat3x4((injectionSwitch)[0], 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0), vec3(sqrt(0.0), 0.0, exp(0.0))), dot(vec3(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(cos(63.88))))), vec3(sqrt(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(209.130)), float(0.0), bool(true))), exp(0.0)))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(15.91) : 1.0)), 1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), dot(vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mod(-1.0, -0.4)))), 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(dot(vec4(0.0, 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(15.91) : 1.0)), 1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), dot(vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mod(-1.0, -0.4)))), 0.0, exp(0.0), 0.0), vec4(1.0, 1.0, 0.0, 1.0)))) - 0.0), 1.0, 1.0, 0.0, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0, log(1.0), 0.0, 0.0)), mix(float(_GLF_FUZZED(87.59)), float(float(mat4x3(0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0, log(1.0), 0.0, 0.0))), bool(true))))), 0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(693.691, (false ? _GLF_FUZZED(-262.876) : 693.691)))), bool(false))))) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[1]), vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0]))) / 1.0, clamp((_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0]) / 1.0, _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))))))[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0]))) / 1.0) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, max(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), ((injectionSwitch)[0]) / 1.0)), ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))))))[0], clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(0.1))), _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), max(_GLF_IDENTITY((injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0])), (injectionSwitch)[0]))) / 1.0) / _GLF_IDENTITY(1.0, min(1.0, 1.0)))) - 0.0), (_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[0], min((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, clamp(((injectionSwitch)[0]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), ((injectionSwitch)[_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) - 0)))]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))[0], _GLF_IDENTITY((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-510.815), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-18.66)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))[0]) / 1.0, mix(float(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), (mat2(1.0) * ((injectionSwitch))) * mat2(1.0))), (injectionSwitch)), max(min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), (mat2(1.0) * ((injectionSwitch))) * mat2(1.0))), (injectionSwitch)), min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), (mat2(1.0) * ((injectionSwitch))) * mat2(1.0))), (injectionSwitch)))))[0]) / 1.0, (false ? _GLF_FUZZED(-5787.6670) : ((injectionSwitch)[0]) / 1.0))), float(_GLF_FUZZED(0.7)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), clamp((_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)])), min((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, mix(float(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 0.0, 1.0, 0.0)), float(vec4(float(vec4(1.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0))))) * ((injectionSwitch)), (_GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), clamp(mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch))))) * mat2(1.0))), (injectionSwitch)))[0]) / 1.0, (false ? _GLF_FUZZED(-5787.6670) : ((injectionSwitch)[0]) / 1.0))), float(_GLF_FUZZED(0.7)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), ((injectionSwitch)[0]) / 1.0)) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)])), _GLF_IDENTITY((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, mix(float(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), (mat2(1.0) * ((injectionSwitch))) * mat2(1.0))), (injectionSwitch)))[0]) / 1.0, (false ? _GLF_FUZZED(-5787.6670) : ((injectionSwitch)[0]) / 1.0))), float(_GLF_FUZZED(0.7)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), clamp((_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0]) / 1.0))), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)], float(_GLF_IDENTITY(mat4((injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)], sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, exp(0.0), sqrt(1.0)), (mat4((injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)], sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, exp(0.0), sqrt(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), mat2(1.0) * ((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, mix(float(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), (mat2(1.0) * ((injectionSwitch))) * mat2(1.0))), (injectionSwitch)))[0]) / 1.0, (false ? _GLF_FUZZED(-5787.6670) : ((injectionSwitch)[0]) / 1.0))), float(_GLF_FUZZED(0.7)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), clamp((_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (true ? ((injectionSwitch)[0]) / 1.0 : _GLF_FUZZED(322.507))))) / 1.0, _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, (((injectionSwitch)[0]) / 1.0) / 1.0), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0]) / 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]))))))[0])), _GLF_FUZZED(83.90)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 1.0, sin(0.0), 0.0, 1.0))), vec2(_GLF_IDENTITY(_GLF_FUZZED(11.99), clamp(_GLF_FUZZED(11.99), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11.99, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(150.879) : 11.99))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(11.99), clamp(_GLF_FUZZED(11.99), _GLF_FUZZED(11.99), _GLF_FUZZED(11.99)))), float(_GLF_FUZZED(-670.548)), bool(false))), _GLF_FUZZED(11.99))), _GLF_IDENTITY(_GLF_FUZZED(-5.1), max(_GLF_FUZZED(-5.1), _GLF_FUZZED(-5.1)))), bvec2(_GLF_IDENTITY(false, (false) && true), false))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       break;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   return;
  }
 for(int _injected_loop_counter = (1 & (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))), 1 * ((0 << _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.x], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}
