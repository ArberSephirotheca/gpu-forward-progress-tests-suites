#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 mat3 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 mat4 _f3;
 bool _f4;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 bvec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 float _f1;
 vec4 _f2;
 _GLF_struct_14 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_11 {
 float _f0;
 mat4 _f1;
} ;

struct _GLF_struct_10 {
 float _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 uvec2 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 int _f1;
 mat3 _f2;
 mat4x2 _f3;
 mat3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 vec2 _f1;
 uvec2 _f2;
 uint _f3;
 mat4x2 _f4;
 uvec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 uvec2 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 mat2x3 _f1;
 vec4 _f2;
 uvec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 bvec4 _f3;
 uvec3 _f4;
 vec3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat2x4 _f1;
 float _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 bool _f2;
 ivec3 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 mat4x2 _f1;
 float _f2;
 vec3 _f3;
 ivec2 _f4;
 bool _f5;
 mat3 _f6;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 _GLF_struct_2 _f1;
 mat3x4 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_12 _f5;
 uint subgroup_local_id;
 _GLF_struct_15 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(mat3(1.0), _GLF_struct_2(_GLF_struct_0(bvec4(true)), _GLF_struct_1(mat4(1.0), mat4x2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), clamp(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) - 0.0), 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))) * 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)), clamp(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(0.0, 0.0, 0.0, 1.0)))), clamp(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), mix(vec4(_GLF_FUZZED(1.7), (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], (vec4(0.0, 0.0, 0.0, 1.0))[3]), vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], _GLF_FUZZED((-721.156 / 29.92)), _GLF_FUZZED(-8439.1182), _GLF_FUZZED((true ? -4.8 : 3694.9774))), bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), vec4(0.0, 0.0, 0.0, 1.0)))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), 1.0, vec3(1.0), ivec2(1), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), mat3(1.0))), mat3x4(1.0), _GLF_struct_6(_GLF_struct_3(mat4(1.0), mat2x4(1.0), 1.0, ivec4(1)), _GLF_struct_4(bvec4(true), mat4x2(1.0), uvec4(1u), bvec4(true), uvec3(_GLF_IDENTITY(1u, (0u | 0u) | (1u))), vec3(1.0), vec4(1.0)), true, ivec3(1), _GLF_struct_5(mat4(1.0), mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(9.6)))), vec4(1.0), uvec3(1u), bvec4(true))), _GLF_struct_9(_GLF_struct_7(vec4(1.0), vec2(1.0), uvec2(1u), 1u, mat4x2(1.0), uvec3(_GLF_IDENTITY(1u, (1u) - 0u)), mat3(1.0)), uvec2(1u), _GLF_struct_8(ivec2(1), 1, mat3(1.0), mat4x2(1.0), mat3(1.0), ivec2(1))), _GLF_struct_12(_GLF_struct_10(1.0), uvec2(1u), _GLF_struct_11(1.0, mat4(1.0))), gl_SubgroupInvocationID, _GLF_struct_15(_GLF_struct_13(vec3(1.0), bvec4(true), mat4(1.0)), 1.0, vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, sin(0.0)))), 1.0, 1.0), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, sin(0.0)))), 1.0, 1.0), (true ? clamp(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, sin(0.0)))), 1.0, 1.0) : _GLF_FUZZED(476.556))), clamp(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, sin(0.0)))), 1.0, 1.0))))), _GLF_struct_14(mat3(1.0), bvec4(true), mat2x4(1.0), mat4(1.0), true), uvec4(1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-8.3)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ _GLF_IDENTITY(0u, (0u) | 0u));
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7814.9775)), bool(false)))))) + 0.0) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(86.66, 132.143)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9.0)))))))));
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_16.subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_base + ((_GLF_struct_replacement_16.subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5))) ^ _GLF_IDENTITY(0, 0 | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))))) * ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))))) / 1)), ~ (~ ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))))) * ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))))) / 1))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) << 0))))) < _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(37020) : 1))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, (_GLF_IDENTITY((4) - 0, int(ivec3((4) - 0, 0, 0)))) - 0)), 4)))))), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(4), int(4))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)))), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))))) >> 0) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)))), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))))) >> 0) / 1), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)))), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))))) >> 0) / 1), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)))), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))))) >> 0) / 1), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)))), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))))) >> 0) / 1)))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), clamp(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, (_GLF_IDENTITY((4) - 0, min((4) - 0, (4) - 0))) | 0)), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), (int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))))))) << 0), int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), (int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))))))) ^ 0))), int(4))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), clamp(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), _GLF_IDENTITY(~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), max(~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), _GLF_IDENTITY(~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), int(_GLF_IDENTITY(ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1), ~ (~ (ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1))))))), ~ (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), int(_GLF_IDENTITY(ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1), ~ (~ (ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1)))))))), min(~ (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), int(_GLF_IDENTITY(ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1), ~ (~ (ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1)))))))), ~ (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), int(_GLF_IDENTITY(ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1), ~ (~ (ivec2(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), 1))))))))))))))))))), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), 0 ^ (_GLF_IDENTITY((4), ~ (~ ((4))))))) ^ 0) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), 0 + (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (_GLF_IDENTITY(~ ((4)), int(ivec4(~ ((4)), 0, 1, 1))))) - 0), 4), clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4))))), _GLF_IDENTITY(4, (4) - 0), 4)))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), 0 + (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (_GLF_IDENTITY(~ ((4)), int(ivec4(~ ((4)), 0, 1, 1))))) - 0), 4), clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4))))), _GLF_IDENTITY(4, (4) - 0), 4)))))))))), min(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), 0 + (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (_GLF_IDENTITY(~ ((4)), int(ivec4(~ ((4)), 0, 1, 1))))) - 0), 4), clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4))))), _GLF_IDENTITY(4, (4) - 0), 4)))))))))), int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), 0 + (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (_GLF_IDENTITY(~ ((4)), int(ivec4(~ ((4)), 0, 1, 1))))) - 0), 4), clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4))))), _GLF_IDENTITY(4, (4) - 0), 4))))))))))))) + 0), int(4))))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (0 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> 0)), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(80079) : int(4)))) << 0)))) | ((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ _GLF_IDENTITY((~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), clamp((~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), _GLF_IDENTITY((~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), int(ivec2((~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4))), 1)))))))), _GLF_IDENTITY(int(4), int(ivec4(int(4), 0, 0, 1))))), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((4) - 0), ~ (~ (~ ((4) - 0)))), min(_GLF_IDENTITY(~ ((4) - 0), ~ (~ (~ ((4) - 0)))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((4) - 0), ~ (~ (~ ((4) - 0)))), min(_GLF_IDENTITY(~ ((4) - 0), ~ (~ (~ ((4) - 0)))), _GLF_IDENTITY(~ ((4) - 0), ~ (~ (~ ((4) - 0))))))))))), 4), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)) * 1))) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)) * 1))) - 0)))), 1 * (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)) * 1), 0 | (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)) * 1))))) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)), (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)) * 1))) - 0))))))))), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ _GLF_IDENTITY((clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4)), max((clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4)), _GLF_IDENTITY((clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4)), _GLF_IDENTITY(int(ivec4((clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4)), 1, 1, 0)), (false ? _GLF_FUZZED(-44938) : int(ivec4((clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, (4) - 0), 4)), 1, 1, 0))))))))))), int(4)))) / 1), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), int(_GLF_IDENTITY(ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0), clamp(ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0), ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0), ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0))))), (_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), int(_GLF_IDENTITY(ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0), clamp(ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0), ivec3(_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - _GLF_IDENTITY(0, 0 | (0))), 4)))), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))), int(1))), 0), ivec3(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0)))))) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) << 0)))))), int(4))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), (_GLF_IDENTITY(4, 0 | (4))) - 0)))), _GLF_IDENTITY(clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, clamp(0, 0, 0)))), 0))), 4)))))), int(4)))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)))), (clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, clamp(0, 0, 0)))), 0))), 4)))))), int(4)))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (4) - 0), 4), ~ (~ (clamp(4, _GLF_IDENTITY(4, (4) - 0), 4)))))), int(4))))) << 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, ~ (~ (3))), 3))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, ~ (~ (3))), 3))), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, ~ (~ (3))), 3))))), int(ivec4(~ (~ (int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, ~ (~ (3))), 3))))), 0, 1, 1)))))))) >> _GLF_IDENTITY(int(3), int(3))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u)) >> 0u), 4, 64, 2);
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(64, 1 * (64)))), 4);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(_GLF_IDENTITY(8, (8) | (8))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(read, clamp(read, read, read))), max((_GLF_IDENTITY(read, clamp(read, read, read))), (_GLF_IDENTITY(read, clamp(read, read, read)))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
}
