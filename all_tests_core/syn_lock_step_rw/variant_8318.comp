#version 460
struct _GLF_struct_1 {
 mat4x2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 ivec3 _f1;
 uint workgroup_id;
 mat4x3 _f2;
 mat2 _f3;
 ivec4 _f4;
 bool _f5;
 mat3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 uvec2 _f1;
 uvec4 _f2;
 vec4 _f3;
 _GLF_struct_2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4(1.0), uvec2(1u), uvec4(1u), vec4(1.0), _GLF_struct_2(_GLF_struct_0(ivec2(1), ivec3(1), gl_WorkGroupID.x, mat4x3(1.0), mat2(1.0), ivec4(1), true, mat3(1.0)), _GLF_struct_1(mat4x2(1.0), bvec3(true))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_3._f4._f0.workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
