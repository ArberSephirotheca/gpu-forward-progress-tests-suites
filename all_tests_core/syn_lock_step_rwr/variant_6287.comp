#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 mat4 _f0;
 float _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_8 {
 mat3 _f0;
 uint _f1;
 uvec3 _f2;
 mat2x3 _f3;
 vec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_10 {
 float _f0;
 ivec3 _f1;
 _GLF_struct_8 _f2;
 mat3x4 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 uvec4 _f1;
 bool _f2;
 bvec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 bvec4 _f1;
 uint _f2;
 vec4 _f3;
 uvec4 _f4;
 int _f5;
 mat4 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 bvec4 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 mat3 _f1;
 uint _f2;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat2x4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 uint _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_11 {
 bool _f0;
 mat2x3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_7 _f3;
 uint subgroup_id;
 _GLF_struct_10 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(true, mat2x3(1.0), _GLF_struct_4(mat3x2(1.0), _GLF_struct_0(mat3x2(1.0), bvec4(true), mat3x4(1.0), 1u, bvec2(true)), _GLF_struct_1(1, mat2x4(1.0), mat3x2(1.0)), _GLF_struct_2(ivec2(1), mat3(1.0), 1u), _GLF_struct_3(ivec3(1)), mat4x2(1.0)), _GLF_struct_7(_GLF_struct_5(vec3(1.0), bvec4(true), 1u, vec4(1.0), uvec4(1u), 1, mat4(1.0)), bvec4(true), _GLF_struct_6(mat4x3(1.0), uvec4(1u), true, bvec2(true), mat2x4(1.0))), gl_SubgroupID, _GLF_struct_10(1.0, ivec3(1), _GLF_struct_8(mat3(1.0), 1u, uvec3(1u), mat2x3(1.0), vec2(1.0), uvec3(1u)), mat3x4(1.0), _GLF_struct_9(mat4(1.0), 1.0, mat2x3(1.0), mat4x3(1.0), mat3x4(1.0), mat2x3(1.0))));
 do
  {
   GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.z = _GLF_struct_replacement_11.subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.w = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y = workgroup_id;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y;
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
    }
   else
    {
    }
  }
 uint virtual_gid = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.z * GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.w + subgroup_local_id;
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec3(int(2), 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x = virtual_gid;
  }
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.z * GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.w + ((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.w);
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x], 4, 64, 0);
 do
  {
   GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.y = read_1;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.y + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_13num_workgroupread_1subgroup_idsubgroup_size.y + 1 == read_2) + 1, 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}
