#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-0.9))) > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1))), int(int(1)))); _injected_loop_counter ++)
          {
           GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(86.04, 8559.8036)))).x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true, true), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true, true), false))))) || false))) && true))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) > (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, (7) + 0), 0, 0, 0))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (true))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = subgroup_local_id;
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (52671))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), clamp(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec2(2, 1)), 0 ^ (int(ivec2(2, 1)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), int(ivec4(_GLF_IDENTITY(int(2), min(int(2), int(2))), 1, 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), uint(uvec2((gl_WorkGroupSize.x), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))))) << 0u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), uint(uvec2((gl_WorkGroupSize.x), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))))) << 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), uint(uvec2((gl_WorkGroupSize.x), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))))) << 0u)) >> 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -72849) ^ 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (true ? ~ (_injected_loop_counter ++) : _GLF_FUZZED(_injected_loop_counter))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), int(2))), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), min(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, cos(0.0), exp(0.0), 0.0, 1.0))) > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(10.90)), float(injectionSwitch.y), bool(true)))))))))) || false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), 0 | (int(6))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0) || false)); _injected_loop_counter --)
          {
           barrier();
          }
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true)))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (true ? gl_WorkGroupID.x : _GLF_FUZZED(163673u))), clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : workgroup_id)), _GLF_IDENTITY(1u, max(1u, 1u)), 1u))), ~ (~ (_GLF_IDENTITY(workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true, true))) ? _GLF_FUZZED(workgroup_id) : workgroup_id), uint(uvec2((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true, true))) ? _GLF_FUZZED(workgroup_id) : workgroup_id), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))), _GLF_IDENTITY(1u, max(1u, 1u)), 1u))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true)))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true)))))))), false)))))), _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) && true))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
          {
           for(int _injected_loop_counter = (1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true)))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)), (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))
                                barrier();
                              }
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, clamp(3, 3, 3))))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), _GLF_IDENTITY(bool(bvec2(! (_injected_loop_counter != 0), false)), true && (bool(bvec2(! (_injected_loop_counter != 0), false)))))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        barrier();
                      }
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (1 ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (97533 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y + ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) | (0)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        barrier();
       barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.1))) > injectionSwitch.y)) && true)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(91.24), _GLF_FUZZED(-580.755)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(91.24), _GLF_FUZZED(-580.755)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], 0.0 + ((injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true)))) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true, false))))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(abs(vec2(0.0, 0.0)), vec2(1.0, 1.0) * (abs(vec2(0.0, 0.0))))))).y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))) - 0))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))));
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true)))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           else
                            {
                             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                                barrier();
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5298.4787)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true)))), (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true))))) || false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, (false ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), ~ (~ (0u))) | (read_1)) + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (false ? _GLF_FUZZED(uvec4(148572u, 110183u, 168586u, 3665u).b) : (~ (0u))))) | (read_1)) + 1) * 1u) : _GLF_FUZZED(next_virtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, (true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1 : _GLF_FUZZED(next_virtual_gid)))), ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, (true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1 : _GLF_FUZZED(next_virtual_gid))))) | 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 : _GLF_FUZZED(next_virtual_gid)), min((true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 : _GLF_FUZZED(next_virtual_gid)), (true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 : _GLF_FUZZED(next_virtual_gid)))), uint(uint(_GLF_IDENTITY((true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1 : _GLF_FUZZED(next_virtual_gid)), 1u * ((true ? _GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, min(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1, _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) | (read_1)) + 1)) : _GLF_FUZZED(next_virtual_gid)))))))))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u | (read_1)), (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, 1u * (0u)) | (read_1))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u | (read_1), (0u | (read_1)) ^ 0u)))) + 1, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), 0u | (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (true ? _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), min((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) : _GLF_FUZZED(workgroup_id))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), 0u | (((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))) << 0u)) / 1u))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 0u | (read_1)) + 1, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(subgroup_local_id) : 5u))), (true ? uint(5u) : _GLF_FUZZED(read_1))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(_GLF_IDENTITY(uvec4(5u, 1u, 0u, 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) >> 0u) >> 0u), min(_GLF_IDENTITY(0u, (0u) | 0u), 0u)), 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) - 0u), 0u)), 0u) ^ (uvec4(5u, 1u, 0u, 0u)))))), (uint(5u)) + _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u)), 1u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(_GLF_IDENTITY(uint(5u), clamp(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) - 0u), uint(5u))), uint(5u), uint(5u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))) | 0u, ~ (~ ((uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))) | 0u))))), max(_GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))) | 0u), (false ? _GLF_FUZZED(100048u) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))), min(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))), _GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))))) | 0u)))), _GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (_GLF_IDENTITY(~ (uint(5u)), 0u ^ (~ (uint(5u)))))), clamp(uint(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, ~ (~ (5u))))))), uint(5u), uint(5u))))) | 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), _GLF_IDENTITY(clamp(uint(_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) >> 0u))))), uint(5u), uint(5u)), (clamp(uint(_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) >> 0u))))), uint(5u), uint(5u))) >> (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, ~ (~ (5u)))), uint(5u), uint(5u))))) | 0u)) * 1u)))))))), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 0u | (read_1)) + 1, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(subgroup_local_id) : 5u))), (true ? uint(5u) : _GLF_FUZZED(read_1))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(_GLF_IDENTITY(uvec4(5u, 1u, 0u, 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) >> 0u) >> 0u), min(_GLF_IDENTITY(0u, (0u) | 0u), 0u)), 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) - 0u), 0u)), 0u) ^ (uvec4(5u, 1u, 0u, 0u)))))), (uint(5u)) + _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u)), 1u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(_GLF_IDENTITY(uint(5u), clamp(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) - 0u), uint(5u))), uint(5u), uint(5u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))) | 0u, ~ (~ ((uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))) | 0u))))), max(_GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))) | 0u), (false ? _GLF_FUZZED(100048u) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))), min(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))), _GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))))))) | 0u)))), _GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (_GLF_IDENTITY(~ (uint(5u)), 0u ^ (~ (uint(5u)))))), clamp(uint(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, ~ (~ (5u))))))), uint(5u), uint(5u))))) | 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), _GLF_IDENTITY(clamp(uint(_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) >> 0u))))), uint(5u), uint(5u)), (clamp(uint(_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) >> 0u))))), uint(5u), uint(5u))) >> (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, ~ (~ (5u)))), uint(5u), uint(5u))))) | 0u)) * 1u))))))))))), _GLF_IDENTITY(1u, uint(uvec2(1u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4((0u) << 0u, 1u, 0u, 1u), clamp(uvec4((0u) << 0u, 1u, 0u, 1u), uvec4((0u) << 0u, 1u, 0u, 1u), uvec4((0u) << 0u, 1u, 0u, 1u)))), (uint(_GLF_IDENTITY(uvec4((0u) << 0u, 1u, 0u, 1u), clamp(uvec4((0u) << 0u, 1u, 0u, 1u), uvec4((0u) << 0u, 1u, 0u, 1u), uvec4((0u) << 0u, 1u, 0u, 1u))))) * 1u))) : _GLF_FUZZED(next_virtual_gid)))))), 1u), max(_GLF_IDENTITY(uvec3(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u | (read_1), (0u | (read_1)) << 0u)) + 1, (_GLF_IDENTITY(read_1, 0u | _GLF_IDENTITY((read_1), max((read_1), (read_1)))) + 1) | _GLF_IDENTITY((_GLF_IDENTITY(0u | 0u, 1u * (0u | 0u))), ((_GLF_IDENTITY(0u | 0u, 1u * (_GLF_IDENTITY(0u, max(0u, 0u)) | 0u)))) | 0u)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, 0u + (5u))), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, min(5u, 5u))) | 0u)), uint(uvec2(_GLF_IDENTITY(uint(5u), (uint(5u)) + uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + determinant(mat4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-65.85 - 6.9))), float(1.0), bool(true))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.x))), 1u))), uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(uvec4(uint(5u), _GLF_IDENTITY(0u, 0u + (0u)), 1u, 0u), clamp(uvec4(uint(5u), _GLF_IDENTITY(0u, 0u + (0u)), 1u, 0u), uvec4(uint(5u), _GLF_IDENTITY(0u, 0u + (0u)), 1u, 0u), uvec4(uint(5u), _GLF_IDENTITY(0u, 0u + (0u)), 1u, 0u))))), clamp(_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))), uint(5u), uint(5u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(uint(5u), _GLF_IDENTITY(uint(5u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u)))), (~ (_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))))) / 1u))), uint(5u))), ~ (~ (_GLF_IDENTITY(uint(5u), _GLF_IDENTITY(clamp(uint(5u), uint(5u), uint(5u)), 0u ^ (clamp(uint(5u), uint(5u), uint(5u))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(uint(5u), _GLF_IDENTITY(clamp(uint(5u), uint(5u), uint(5u)), _GLF_IDENTITY(min(clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u))), min(min(clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u))), min(clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u))))))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uvec3(5u, 1u, 1u)), 0u | (uint(uvec3(5u, 1u, 1u)))))), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) / _GLF_IDENTITY(1u, (1u) | (1u))))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u))))))))) | 0u, (false ? _GLF_FUZZED(25820u) : (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(uint(5u), _GLF_IDENTITY(clamp(uint(5u), uint(5u), uint(5u)), _GLF_IDENTITY(min(clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u))), min(min(_GLF_IDENTITY(clamp(uint(5u), uint(5u), uint(5u)), clamp(clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u)))), clamp(uint(5u), uint(5u), uint(5u))), min(clamp(uint(5u), uint(5u), uint(5u)), clamp(uint(5u), uint(5u), uint(5u))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(_GLF_IDENTITY(5u, min(5u, 5u)), min(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) / 1u))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u))), (_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u)))) | (_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) / 1u))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (_GLF_IDENTITY(~ (uint(5u)), uint(uvec4(~ (uint(5u)), 1u, 1u, 0u))))), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) / 1u))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u))))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) / 1u))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u))), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(_GLF_IDENTITY(5u, (5u) * 1u), max(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(5u, (5u) * 1u), max(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(5u, (5u) * 1u), max(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) * 1u))))))), _GLF_IDENTITY(5u, (5u) / 1u))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), max(uint(5u), uint(5u))), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) - 0u)), uint(_GLF_IDENTITY(5u, max(5u, 5u)))))), max(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, (5u) * 1u), _GLF_IDENTITY(5u, (5u) / 1u))), 5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)) / 1u), uint(5u)))), uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u), uint(5u))))))))))) | 0u))))))))), _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(uint(uvec2(_GLF_IDENTITY(read_1, 0u | (read_1)) + 1, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), _GLF_IDENTITY((uint(5u)), ((uint(5u))) ^ 0u) << 0u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(1u, ~ (~ (1u)))))), uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))), true, false)), false, true, false)))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(5u, (5u) * 1u)))), clamp(uint(5u), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(uint(5u), clamp(_GLF_IDENTITY(uint(5u), max(uint(5u), uint(5u))), uint(5u), uint(5u))))) | 0u))))))), _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 1u))), uvec3(uint(uvec2(_GLF_IDENTITY(read_1, 0u | (read_1)) + 1, ((_GLF_IDENTITY(1u, (1u) >> 0u) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(_GLF_IDENTITY(uint(5u), (uint(_GLF_IDENTITY(5u, min(5u, 5u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), uint(5u))), clamp(uint(_GLF_IDENTITY(5u, (true ? _GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : 5u, (false ? _GLF_FUZZED(subgroup_size) : 5u) | 0u))), 5u)) : _GLF_FUZZED(workgroup_size)))), uint(_GLF_IDENTITY(5u, min(5u, _GLF_IDENTITY(5u, _GLF_IDENTITY(min(5u, 5u), (min(5u, 5u)) << 0u))))), uint(5u)))), (uint(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(_GLF_IDENTITY(5u, min(5u, 5u))), uint(5u))))) | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, min(5u, 5u))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(5u, min(5u, 5u)))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u)), max(uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u)), (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(5u, (5u) + 0u), max(_GLF_IDENTITY(5u, (5u) + 0u), _GLF_IDENTITY(5u, _GLF_IDENTITY((5u) + 0u, (_GLF_IDENTITY((5u) + 0u, ((5u) + 0u) * 1u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) ^ 0u), (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u))), _GLF_IDENTITY(1u, 1u * (1u))))))) | _GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), (false ? _GLF_FUZZED(101191u) : (uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))))), (_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), (false ? _GLF_FUZZED(101191u) : (uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u)))))) ^ _GLF_IDENTITY(0u, ~ (~ (0u)))), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), max((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), _GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), ((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), min(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u))), uint(uint((uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), 1u)))))), (uint(uvec2(_GLF_IDENTITY(5u, (5u) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))))), (1u) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))))))))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : 5u)), 5u)) : _GLF_FUZZED(workgroup_size)), max((true ? _GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : 5u)), 5u)) : _GLF_FUZZED(workgroup_size)), (true ? _GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : 5u)), 5u)) : _GLF_FUZZED(workgroup_size)))))), uint(5u), uint(5u)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uint(5u)))), clamp(uint(5u), uint(5u), uint(5u))))) | 0u))))) / (1u | 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), min(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u))) | (1u)), 0u))), _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))))), 1u))))))), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(max(64, 64), min(max(64, 64), max(64, 64)))), 4);
    }
   else
    {
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat3x2(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)), transpose(transpose((mat2(1.0))))) / mat2(1.0, 1.0, 1.0, 1.0))))) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))), mix(vec2(_GLF_FUZZED(441.369), _GLF_FUZZED(68.09)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))[0]) / 1.0), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) ^ 0))))), 0, 1)), 1 * (int(ivec4(0, 0, _GLF_IDENTITY(0, (0) | (0)), 1)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec2((false), false))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter))) != (1 & 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY((60903 & 0), clamp((60903 & 0), (60903 & 0), (_GLF_IDENTITY(60903 & 0, _GLF_IDENTITY((false ? _GLF_FUZZED(-72615) : 60903 & 0), min((false ? _GLF_FUZZED(-72615) : 60903 & 0), (false ? _GLF_FUZZED(-72615) : 60903 & 0))))))) | ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) - 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(_GLF_IDENTITY(int(1), 1 * (int(1))), 0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (read_1) | (read_1)) + 1 == read_2) + 1, 4, 64, _GLF_IDENTITY(4, (4) - ((0 & -81019) << _GLF_IDENTITY(int(7), int(7)))));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(_GLF_IDENTITY(5, ((0 ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) ^ 0)), int(3))) ^ (5))), 0 + (int(_GLF_IDENTITY(5, ((0 ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) ^ 0)), int(3))) ^ (5))))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))) && true))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))))) || false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(942.956), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max((_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), float(_GLF_FUZZED(vec2(50.65, -5.4).s)), bool(false))))), vec2((injectionSwitch)[0], _GLF_FUZZED(65.05)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(float(false))), bool(false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(942.956), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_IDENTITY(float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) - 0.0)), float(_GLF_FUZZED(-78.17)), bool(false))))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max((_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY((injectionSwitch)[1], float(mat4((injectionSwitch)[1], 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), float(_GLF_FUZZED(vec2(50.65, -5.4).s)), bool(false))))), vec2((injectionSwitch)[0], _GLF_FUZZED(65.05)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(float(false))), bool(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false))))))))));
        }
       else
        {
        }
      }
     else
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, determinant(mat3(0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), sqrt(0.0)), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, determinant(mat3(0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), sqrt(0.0))) * mat3(_GLF_ONE(1.0, injectionSwitch.y))))).x > injectionSwitch.y))) || false)));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(false)), (false || (_GLF_WRAPPED_LOOP(false))) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))));
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, sin(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(4115.8919) : float(mat4x2(injectionSwitch.y, sin(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))))) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) * 1)) ^ 0)))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                {
                 do
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1)) - (0 << _GLF_IDENTITY(int(7), int(7))), max((_GLF_IDENTITY(0, (0) / 1)) - (0 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, (0) / 1)))) - (0 << _GLF_IDENTITY(int(7), int(7)))))), int(ivec4(0, 1, 0, 1)))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                          {
                           for(int _injected_loop_counter = (((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, clamp(8, 8, 8))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(1, (1) / 1) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, false)))), (_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, false)))), true && ((! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, false))))))) || false))))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                             barrier();
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-45791) : 0, clamp(false ? _GLF_FUZZED(-45791) : 0, false ? _GLF_FUZZED(-45791) : 0, false ? _GLF_FUZZED(-45791) : 0))))) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(56647, clamp(_GLF_IDENTITY(56647, ~ (~ (56647))), _GLF_IDENTITY(56647, min(56647, 56647)), 56647)))); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) | 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(int(_GLF_IDENTITY(int(1), int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               barrier();
                                              }
                                            }
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           barrier();
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = (0 & (87457 - -25789)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       do
                                        {
                                         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                            {
                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_DEAD(false))
                                                  {
                                                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                    {
                                                     barrier();
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                               barrier();
                                              }
                                            }
                                           else
                                            {
                                            }
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false)), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))))))))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false)))))))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6074.8295)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))));
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), true), true)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), true), true)))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), true), true)))))), false, false, false)))) && true)))), true && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))))))) || false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 0 + (2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0 | 0) + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), true && ((_GLF_IDENTITY(false, false || (false))))) && true), (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
}
