#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.7)), vec2(_GLF_FUZZED(-1.7), (injectionSwitch)[1]), bvec2(false, true))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.7)), vec2(_GLF_FUZZED(-1.7), (injectionSwitch)[1]), bvec2(false, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.7)), vec2(_GLF_FUZZED(-1.7), (injectionSwitch)[1]), bvec2(false, true))).x)) > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-31.90) : 0.0)), _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED((402.016))), bool(false))))), 1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), (mat4x3(injectionSwitch.y, 1.0, 0.0, sqrt(1.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sqrt(1.0), determinant(mat3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, abs(1.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, 1.0))))).x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))), bvec3(bvec4(bvec3(true, true, true), true)))), _GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))), (false || (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (true) || false)), bvec3(bvec4(bvec3(true, true, true), true)))))) || false))), false))))))) && true), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))) || false)) || false)) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), _GLF_IDENTITY(true, true && (true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-115.410), _GLF_FUZZED(5.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y)))) || false, ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), false || ((_GLF_IDENTITY(! (false), false || (! (false)))))))))))), false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) || false))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_IDENTITY(true, false || (true))))), (injectionSwitch.x > injectionSwitch.y))) && true))) || false) || false)) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) || false), false || (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (false))) || (bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (false))) || (bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (false))) || (bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) | (0u)), 0u))))) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY(uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) ^ 0u)))) | (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (uint(1u)) << 0u)))))), uvec3(uvec4(uvec3(1u, 1u, 1u), 0u))))))) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec3(uvec3(0u, 0u, 0u))))))))), uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(75444u, 46122u, 108713u) & uvec3(167011u, 51091u, 192754u)))))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) | (0u)), 0u))))) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 0u))))))) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)), 0u), uvec3(_GLF_IDENTITY(uvec3(uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (uvec3(uvec3(0u, 0u, 0u)))))))))))))).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id)), clamp(workgroup_size * _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)), 0u | (~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)))))), workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) / 1u))) >> 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))) : workgroup_size * workgroup_id))))) - 0u)) << 0u, min((_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) / ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u)))) - 0u), uint(6u)))) >> 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, _GLF_IDENTITY(num_workgroup, max(num_workgroup, num_workgroup))))) : workgroup_size * workgroup_id))))) - 0u)) << 0u, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(subgroup_local_id))) * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), (_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))), _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), workgroup_size)))) * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), _GLF_IDENTITY(((workgroup_size * workgroup_id)), uint(uvec2(((workgroup_size * workgroup_id)), 1u))) / ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) | (uint(6u))))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (workgroup_size * workgroup_id))) + 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))) : workgroup_size * workgroup_id))))) - 0u)) << 0u))), (_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)), 0u | (_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)))))), (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)), clamp(_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id))))))) << 0u)) - 0u)) << 0u)) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), (_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id) >> 0u, ~ (~ ((workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))) >> 0u)))), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id))))) - 0u), max(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)), max(_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id))))))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id))))) - 0u), 0u | (_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id))))) - 0u)))))) << 0u)));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.2))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, log(1.0), 1.0, 1.0, sqrt(exp(0.0)), 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), injectionSwitch.y, injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(bool(true)))), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), true, true)))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))) && true))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))))) - vec2(0.0, 0.0)), 0.0))).x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id)))) / 1u), clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id))) | 0u) * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) >> (0u | 0u)) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(subgroup_id))) + 1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + 1, subgroup_local_id + 1))), 0u | ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)))))))) | ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, false, true))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), 1.0), _GLF_IDENTITY(mat4x2(mat4x3(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), 1.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), 1.0)))))), transpose(transpose(mat4x2(mat4x3(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), 1.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), 1.0)))))))))))), max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(6.4), _GLF_FUZZED(5.1)), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))) : _GLF_FUZZED(vec2(-3.4, 1.8)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + _GLF_IDENTITY(0.0, (0.0) / 1.0), (true ? (injectionSwitch.x) + _GLF_IDENTITY(0.0, (0.0) / 1.0) : _GLF_FUZZED(51.10)))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - sin(vec2(0.0, 0.0))).y) * 1.0), min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-80.86)), float((injectionSwitch.y)), bool(true))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(53.95), (_GLF_IDENTITY(_GLF_FUZZED(53.95), (false ? _GLF_FUZZED(-245.365) : _GLF_FUZZED(53.95)))) / round(length(normalize(1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), _GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / 1.0))), (_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), _GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / 1.0)))) / 1.0), bool(true))), (injectionSwitch.y) * 1.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, max(1.0, 1.0)))) * _GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(66.82)), bool(false))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))) ? _GLF_FUZZED(430.707) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) * 1.0, min(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) * 1.0, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) * 1.0)))) * _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bvec3(_GLF_IDENTITY(! (! (false)), false || (! (! (false)))), false, true))), false || (! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u + (next_virtual_gid), (0u + (next_virtual_gid)) << 0u))))], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))))) == read_2), (uint(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))))) == read_2)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(3.9, -9.5, -4.6, -6.6))) : _GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))) ? _GLF_FUZZED(95538) : 1)))))) == read_2), clamp(uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))) ? _GLF_FUZZED(95538) : 1)))))) == read_2), uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))) ? _GLF_FUZZED(95538) : 1)))))) == read_2), _GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))) ? _GLF_FUZZED(95538) : 1)))))) == read_2), (uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))) ? _GLF_FUZZED(95538) : 1)))))) == read_2)) | (uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))) ? _GLF_FUZZED(95538) : 1)))))) == read_2))))) + 1)), clamp(_GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2) + 1, ~ (_GLF_IDENTITY(~ (uint(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2) + 1), ~ (_GLF_IDENTITY(~ (~ (uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))), min(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))), _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))))) == read_2) + 1)), clamp(~ (~ (uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2, (read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2) || false)), bool(bvec3(bool(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2, (read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2) || false)), true, true)))))) + 1)), ~ (~ (uint(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2) + 1)), ~ (~ (uint(_GLF_IDENTITY(read_1, 1u * (_GLF_IDENTITY(read_1, 0u | (read_1)))) + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1)))) == read_2) + 1)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) ^ 0))))) == read_2, bool(bvec2(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) ^ 0))))) == read_2, false)))) + 1, 0u + (uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(96194) : 0))))))) == read_2, bool(bvec2(read_1 + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(38021))), (1) ^ 0)), 0 ^ (_GLF_IDENTITY(max(1, _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (0) << (1 ^ 1)))), 0 ^ (max(1, _GLF_IDENTITY(1, (1) ^ 0))))))))) == read_2, false)))) + 1)), uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (~ (read_1)))) / 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY(0 + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) | 0), ~ (~ (_GLF_IDENTITY(0 + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) | 0), (true ? 0 + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))), 0, 0, 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1), (max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec4(~ (~ (1)), 1, 1, 0))))) / 1), 1)) - 0)))))), int(int(((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1), (max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec4(~ (~ (1)), 1, 1, 0))))) / 1), 1)) - 0))))))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), ~ (_GLF_IDENTITY(~ (~ (~ (1))), max(_GLF_IDENTITY(~ (~ (~ (1))), clamp(~ (~ (~ (1))), ~ (~ (~ (1))), ~ (~ (~ (1))))), ~ (~ (~ (1))))))))) / 1), 1))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1))), ((_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1)))) >> 0)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) | 0) : _GLF_FUZZED(-84403))))))) == read_2) + _GLF_IDENTITY(1, max(1, 1)))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
  barrier();
}
