#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 uvec2 _f0;
 bvec3 _f1;
 int _f2;
 mat2x3 _f3;
 mat2 _f4;
 uvec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 vec3 _f2;
 uvec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 mat3x2 _f1;
 bvec2 _f2;
 float _f3;
 uvec2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_7 {
 uint workgroup_base;
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 bvec4 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 mat3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 bvec2 _f1;
 uvec2 _f2;
 uvec3 _f3;
 mat2x4 _f4;
 bool _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 int _f1;
 mat4x3 _f2;
 vec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_0 {
 uint read_1;
 vec3 _f0;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 _GLF_struct_0 _f1;
 bvec3 _f2;
 _GLF_struct_1 _f3;
 mat3 _f4;
 _GLF_struct_2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) + vec2(0.0, 0.0)))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(71.49, -76.19)))).x)) | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true), bvec2(bvec3(bvec2(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true), false))))))))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false))))))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false))))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false))))))), true))))))))))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), true, true)), ! (! (bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false)))))), true, _GLF_IDENTITY(true, ! (! (true)))))))))) || (_GLF_IDENTITY(false, (false) && true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, true))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), (! ((injectionSwitch.x < injectionSwitch.y))) || false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(103.867)), float(injectionSwitch.y), bool(true)))) / 1.0))), (bool((injectionSwitch.x > injectionSwitch.y))) && true)))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.6)), float(injectionSwitch.y), bool(true)))))) && true)))), true, false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sqrt(0.0))), (false ? _GLF_FUZZED(-0.6) : float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sqrt(0.0))))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(99915)))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)) * (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), 1 * (_GLF_IDENTITY(int(1), max(int(1), int(1)))))) | (_GLF_IDENTITY(int(1), max(int(1), int(1)))))) | 0), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))), 0 | (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 0, 0), (ivec4(1, 1, 0, 0)) >> ivec4(0, 0, 0, 0))))), max(int(1), int(1))), int(1))) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) | 0)))))), int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), 1 * (_GLF_IDENTITY(int(1), max(int(1), int(1)))))) | (_GLF_IDENTITY(int(1), max(int(1), int(1)))))) | 0), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))), 0 | (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 0, 0), (ivec4(1, 1, 0, 0)) >> ivec4(0, 0, 0, 0))))), max(int(1), int(1))), int(1))) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) | 0)))))), (0 & -97472), (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))), 1 * ((~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))))))) >> 0))))), ((~ (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sqrt(0.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(-0.6) : float(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(404.736) : injectionSwitch.y))), 1.0, 1.0, sqrt(0.0)))), clamp((false ? _GLF_FUZZED(-0.6) : float(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(404.736) : injectionSwitch.y))), 1.0, 1.0, sqrt(0.0)))), (false ? _GLF_FUZZED(-0.6) : float(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(404.736) : injectionSwitch.y))), 1.0, 1.0, sqrt(0.0)))), (false ? _GLF_FUZZED(-0.6) : float(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(404.736) : injectionSwitch.y))), 1.0, 1.0, sqrt(0.0))))))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(99915)))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), (false ? _GLF_FUZZED(53403) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), max(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), max(int(1), int(1))))))), int(1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), max(int(1), int(1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) | 0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-90390) : 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) - 0), int(1))), int(_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))) >> 0)))))) | ((~ (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sqrt(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), (false ? _GLF_FUZZED(-0.6) : float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sqrt(0.0))))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(99915)), ((true ? 1 : _GLF_FUZZED(99915))) | ((true ? 1 : _GLF_FUZZED(99915)))))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) << 0), int(1), int(1))), int(1))), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), 0 ^ (int(1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), int(1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) | 0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))) >> 0))))))))), int(int((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), (int(1)) - 0) : _GLF_FUZZED(-439)), (false ? _GLF_FUZZED(15737) : (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), (int(1)) - 0) : _GLF_FUZZED(-439)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(1.0, injectionSwitch.y)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), (~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-244.725)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(1.0, injectionSwitch.y)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(584.368)), float(1.0), bool(true)))) - 0.0))), injectionSwitch.y)) * ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) ^ ivec2(0, 0))), (int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) ^ ivec2(0, 0)))) * 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) - 0)))), int(1))))), (_GLF_IDENTITY((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(584.368)), float(1.0), bool(true)))) - 0.0))), injectionSwitch.y)) * ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) ^ ivec2(0, 0))), (int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) ^ ivec2(0, 0)))) * 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) - 0)))), int(1))))), 0 + ((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(584.368)), float(1.0), bool(true)))) - 0.0))), injectionSwitch.y)) * ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) ^ ivec2(0, 0))), (int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) ^ ivec2(0, 0)))) * 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) - 0)))), int(1)))))))) / 1), (~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | 0)) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(1.0, injectionSwitch.y)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))))) ^ 0), ~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), (int(1)) >> 0)), (~ (_GLF_IDENTITY(int(1), (int(1)) >> 0))) | (~ (_GLF_IDENTITY(int(1), (int(1)) >> 0)))))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(_GLF_ONE(1.0, injectionSwitch.y)) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(! (! (bool(bool(_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (! (! (bool(bool(_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(! (! (! (bool(bool(_GLF_DEAD(false)))))), (! (! (! _GLF_IDENTITY((bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))))), false || ((bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))))))))) && true)))))))))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)))), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x)))).y, 0.0 + (injectionSwitch.y))))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(_GLF_IDENTITY(int(3), (true ? int(_GLF_IDENTITY(3, (3) - 0)) : _GLF_FUZZED((-75214 * 36738)))), 0, 0))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))) | (int(7))), (true ? _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(_GLF_IDENTITY(7, (7) / 1)), int(7)))) | (int(7))) : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))) | (int(7))), (true ? _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(_GLF_IDENTITY(7, (7) / 1)), int(7)))) | (int(7))) : _GLF_FUZZED(_injected_loop_counter))))), ~ (~ ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))) | (int(7))), (true ? _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(_GLF_IDENTITY(7, (7) / 1)), int(7)))) | (int(7))) : _GLF_FUZZED(_injected_loop_counter))))))))) | ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))) | (int(7))), (true ? _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(_GLF_IDENTITY(7, (7) / 1)), int(7)))) | (int(7))) : _GLF_FUZZED(_injected_loop_counter))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(int(_GLF_IDENTITY(7, max(7, 7)))))), int(7)), 0 ^ ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), max(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))) | (1 ^ 1))))) | (int(7)), ~ (~ ((_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))) | _GLF_IDENTITY((int(7)), int(ivec4((int(7)), 1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((-56601 & 90928)))), 0))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, int(int(_GLF_IDENTITY(7, _GLF_IDENTITY(max(7, 7), (true ? max(7, 7) : _GLF_FUZZED(ivec3(99696, 25310, -97709)[0])))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(int(int(_GLF_IDENTITY(7, max(7, 7)))), ~ (~ (int(int(_GLF_IDENTITY(7, max(7, 7))))))))), (true ? int(_GLF_IDENTITY(7, int(int(_GLF_IDENTITY(7, _GLF_IDENTITY(max(7, 7), (max(7, 7)) >> 0)))))) : _GLF_FUZZED(mix(_injected_loop_counter, _injected_loop_counter, false))))))), int(7)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
              return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_7(workgroup_size * workgroup_id, _GLF_struct_6(vec2(1.0), mat3x2(1.0), bvec2(true), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(float(1.0)))) - 0.0), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u) : _GLF_FUZZED(num_workgroup)))) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u) : _GLF_FUZZED(num_workgroup))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u) : _GLF_FUZZED(num_workgroup)))), clamp(~ (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))), 0u ^ ((_GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u) : _GLF_FUZZED(num_workgroup)))), ~ (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u, clamp((_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u, min((_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u)), (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u))) : _GLF_FUZZED(num_workgroup)))), ~ (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u) : _GLF_FUZZED(num_workgroup))))))))), bvec4(true))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1))), (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))) | (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1))))), mat2x3(1.0), bvec4(true), _GLF_struct_10(_GLF_struct_8(mat4(1.0)), _GLF_struct_9(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (uvec2(1u)))) + uvec2(0u, 0u))) / uvec2(1u, 1u)), bvec3(true), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, int(int(1)))))), mat2x3(1.0), mat2(1.0), uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), (_GLF_IDENTITY(~ (1u), max(~ (1u), ~ (1u)))) ^ 0u)), uint(uvec3((_GLF_IDENTITY(~ (1u), (_GLF_IDENTITY(~ (1u), max(~ (1u), ~ (1u)))) ^ 0u)), 0u, 1u))))), mat4(1.0)), vec3(1.0), uvec2(1u), mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8916.5183)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) + (_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)), (1.0) - sqrt(0.0)))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (0 << _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x3((injectionSwitch)[0], 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), _GLF_FUZZED(-50.57)), vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))), (_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size))))) | (_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))))), max(_GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))), (_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size))))) | (_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))))), _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))), (_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size))))) | (_GLF_struct_replacement_11._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))))))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (subgroup_local_id)), (false ? _GLF_FUZZED(subgroup_size) : ~ (~ (subgroup_local_id))))))))), 0u | (_GLF_IDENTITY(uint((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (subgroup_local_id)), (false ? _GLF_FUZZED(subgroup_size) : ~ (~ (subgroup_local_id))))))))), max(uint((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (subgroup_local_id)), (false ? _GLF_FUZZED(subgroup_size) : ~ (~ (subgroup_local_id))))))))), uint((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (subgroup_local_id)), (false ? _GLF_FUZZED(subgroup_size) : ~ (~ (subgroup_local_id))))))))))))), (uint((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))))) - 0u))) ^ 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) >> 0) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-692.703) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2755.8960) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-692.703) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2755.8960) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-692.703) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2755.8960) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), false))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-631.636, 9.3)))).y, (injectionSwitch.y) - log(1.0))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), max(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), (clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size)) - 0u))), min(_GLF_IDENTITY(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), max(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), (clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size)) - 0u))), _GLF_IDENTITY(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), max(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY(clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size), (clamp(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_struct_replacement_11._f0.workgroup_base + subgroup_id * subgroup_size)) - 0u)))))) : _GLF_FUZZED(subgroup_local_id))) + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(bvec3(true), _GLF_struct_0(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) - 0), 64, _GLF_IDENTITY(0, min(0, 0))), vec3(1.0)), bvec3(true), _GLF_struct_1(ivec2(1), 1, mat4x3(1.0), vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(8.6)), bool(false)))) - 0.0), 1.0))), bvec4(true)), mat3(1.0), _GLF_struct_2(mat3x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false))), false, false))), bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec4(bvec3(bvec2(true), true), false))))), uvec2(1u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_id))), ~ (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_id))))))))), (1u) | (1u))), mat2x4(1.0), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), mat3x4(1.0)), _GLF_struct_3(bvec3(true), mat3(1.0), vec4(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_struct_replacement_5._f0._f1.read_1, (_GLF_IDENTITY(_GLF_struct_replacement_5._f0._f1.read_1, clamp(_GLF_struct_replacement_5._f0._f1.read_1, _GLF_IDENTITY(_GLF_struct_replacement_5._f0._f1.read_1, max(_GLF_struct_replacement_5._f0._f1.read_1, _GLF_struct_replacement_5._f0._f1.read_1)), _GLF_struct_replacement_5._f0._f1.read_1))) / 1u) + 1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 1)), min(int(ivec3(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 1)), int(ivec3(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 1))))))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY((bool(bvec2(false, true))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, true))), ! (! ((bool(bvec2(false, true)))))) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(mat3x2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-83.81))), 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0))), injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))), 1u), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | 0u), 1u), uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) | (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup)))))), 1u), uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), 1u)))), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), 1u), (uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), 1u)) | (uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), 1u))), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | 0u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u))), ~ (_GLF_IDENTITY(~ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u)))), min(~ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u)))), ~ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u))))))))), 1u), uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | 0u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u))), ~ (_GLF_IDENTITY(~ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u)))), min(~ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u)))), ~ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u) | _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), (next_virtual_gid) | 0u)) / 1u))))))))), 1u)))) / (uvec2(1u, 1u) ^ uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), max(_GLF_IDENTITY((next_virtual_gid), clamp((next_virtual_gid), (next_virtual_gid), (next_virtual_gid))), _GLF_IDENTITY((next_virtual_gid), ~ (~ ((next_virtual_gid)))))) | 0u), 1u), uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), _GLF_IDENTITY(1u, (1u) ^ 0u)), uvec2(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), 1u))))))))], uint(_GLF_struct_replacement_5._f0._f1.read_1 + 1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
