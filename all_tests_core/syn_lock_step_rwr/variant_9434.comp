#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-300.124))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-471.411)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(95.14) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(9.7))) > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), 0)) >> _GLF_IDENTITY(int(0), int(0))))) || false); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false))))));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z = subgroup_size;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bool(bool(bvec2(true, true)))))), bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))) && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, (true) || false)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(6944.5232) : _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), _GLF_FUZZED(-9301.8741)), vec2(_GLF_FUZZED(673.173), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y = subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(ivec2(3, 0)))), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 | (3)))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.x = num_workgroup, 0u | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.x = num_workgroup, ~ (~ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.x = num_workgroup)))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
      }
     for(int _injected_loop_counter = ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), int(int(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, max(3, 3))) >> 0), int(ivec3(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, max(3, 3))) >> 0), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) ^ 0))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(ivec3(0 << _GLF_IDENTITY(int(6), int(6)), 0, 1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(ivec3(0 << _GLF_IDENTITY(int(6), int(6)), 0, 1)))), min(~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(ivec3(0 << _GLF_IDENTITY(int(6), int(6)), 0, 1)))), ~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(ivec3(0 << _GLF_IDENTITY(int(6), int(6)), 0, 1))))))) + 0)))), 0 ^ ((0 << _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           else
            {
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), true)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.w = GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.z;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.w, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.w, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.w, GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.w)))));
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, _GLF_IDENTITY(uvec3(uvec4(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | 1u, ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) - _GLF_IDENTITY(0u, 1u * (0u)))))), (false ? _GLF_FUZZED(uvec3(40019u, 29629u, 10960u)) : uvec3(uvec4(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | 1u, ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) - _GLF_IDENTITY(0u, 1u * (0u))))))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), (false ? _GLF_FUZZED(bitfieldExtract(uvec3(45974u, 77108u, 64064u), -15830, -45554)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))))))), (uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u)), ~ (~ (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u))))))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << 0u))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (true ? GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size : _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id)))) >> (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), _GLF_IDENTITY((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), ((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) | (uvec3(6u)))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u)))), ~ (~ (_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2])))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), clamp((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), (uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), (uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))))))), ((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) | (uvec3(6u)))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))))))))) | uvec3(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))).z, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, _GLF_IDENTITY(uvec3(uvec4(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | 1u, ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) - _GLF_IDENTITY(0u, 1u * (0u)))))), (false ? _GLF_FUZZED(uvec3(40019u, 29629u, 10960u)) : uvec3(uvec4(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | 1u, ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) - _GLF_IDENTITY(0u, 1u * (0u))))))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), (false ? _GLF_FUZZED(bitfieldExtract(uvec3(45974u, 77108u, 64064u), -15830, -45554)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))))))), (uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u)), ~ (~ (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u))))))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << 0u))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (true ? GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size : _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id)))) >> (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), _GLF_IDENTITY((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), ((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) | (uvec3(6u)))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u)))), ~ (~ (_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2])))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), clamp((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), (uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), (uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))))))), ((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) | (uvec3(6u)))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))))))))) | uvec3(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))).z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, _GLF_IDENTITY(uvec3(uvec4(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | 1u, ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) - _GLF_IDENTITY(0u, 1u * (0u)))))), (false ? _GLF_FUZZED(uvec3(40019u, 29629u, 10960u)) : uvec3(uvec4(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | 1u, ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) - _GLF_IDENTITY(0u, 1u * (0u))))))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), (false ? _GLF_FUZZED(bitfieldExtract(uvec3(45974u, 77108u, 64064u), -15830, -45554)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))))))), (uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u)), ~ (~ (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u))))))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << 0u))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (true ? GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size : _GLF_FUZZED(GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id)))) >> (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), _GLF_IDENTITY((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size))), ((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) | (uvec3(6u)))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), 1u)), 1u)))), ~ (~ (_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2])))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), clamp((uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), (uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))), (uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2]))) << uvec3(0u, 0u, 0u))))))))), ((uvec3(uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) | (uvec3(6u)))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))))))))) | uvec3(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))).z) / 1u)) * 1u) + GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(78.25) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(160708u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(160708u, 1u * (_GLF_IDENTITY(160708u, min(160708u, 160708u))))))) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid), (_GLF_IDENTITY(false ? _GLF_FUZZED(160708u) : (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid, 0u ^ (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))), (false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid)) ^ 0u)) + 0u)), 0u + ((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(160708u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(160708u, 1u * (_GLF_IDENTITY(160708u, min(160708u, 160708u))))))) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid), (_GLF_IDENTITY(false ? _GLF_FUZZED(160708u) : (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid, 0u ^ (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))), (false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid)) ^ 0u)) + 0u))))) | 0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), false, true, false)))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), false, true, _GLF_IDENTITY(false, ! (! (false)))))))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid), (false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), ! (! (false)))) || false) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid), (false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))) | 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))) || false))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))) - 0u), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))), _GLF_IDENTITY((false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid)), ~ (_GLF_IDENTITY(~ ((false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))), ~ (~ (_GLF_IDENTITY(~ ((false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))), ~ (~ (_GLF_IDENTITY(~ ((false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid))), (~ ((false ? _GLF_FUZZED(160708u) : (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z = virtual_gid)))) * 1u)))))))))) | 0u))))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) >> 0, (true ? _GLF_IDENTITY((int(2)) >> 0, ((int(2)) >> 0) | 0) : _GLF_FUZZED((_injected_loop_counter | _injected_loop_counter)))))) - 0)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(43629) : _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) < (1 | 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) ^ 0))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7004.1451) : _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0))))) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), max(_GLF_IDENTITY(ivec2(1, 0), max(ivec2(1, 0), ivec2(1, 0))), _GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) + (ivec2(1, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(11909) : int(1))), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), int(ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), (true ? 0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))) : _GLF_FUZZED(_injected_loop_counter)))) | (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))), 0))))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, max(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, uvec3(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[0], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[1], GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size[2])))).z + (_GLF_IDENTITY((GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y + 1), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id, (GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id) + uvec3(0u, 0u, 0u)).y + 1), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y, max(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y, 0u + (GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y)), GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y)) + 1), ((GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.y + 1)) - 0u)) - 0u)) >> 0u) % GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z);
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | (0 << _GLF_IDENTITY(int(6), int(6)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, 1u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, 1u))) >> 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, 1u)), (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, 1u), (uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id, (false ? _GLF_FUZZED(uvec4(82402u, 98475u, _GLF_IDENTITY(120481u, max(120481u, 120481u)), 136765u)) : GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id)).z, 1u)) * ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))) >> _GLF_IDENTITY(uvec2(7u), uvec2(7u)))))) >> 0u))))], 4, 64, 0);
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(2.8, (2.8) / 1.0))), float(1.0), bool(true))), injectionSwitch.y))) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(mat4(1.0, 0.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(70.94)), bool(false))), 0.0, 1.0)), 1.0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 0, false || (_injected_loop_counter != _GLF_IDENTITY(0, (0 ^ 0) ^ (0))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(9376)))), (~ (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(9376))))) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.x = read_1;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(94.48) : injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(94.48) : injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y, true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true))))))), true, true, false))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.y = GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.x, (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.y = GLF_merged3_0_1_6_1_1_17_2_1_12read_1subgroup_local_idworkgroup_id.x) ^ 0u);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), min(0, _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, (_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(8), int(8)))), max(ivec3(0, 1, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), (int(8)) | (int(8))), int(8)))))), ivec3(0, 1, (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(8), int(8)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != ((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> (0 >> _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), clamp(int(3), int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec3(3, 0, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec3(ivec3(3, 0, 1)), (ivec3(ivec3(3, 0, 1))) / ivec3(1, 1, 1))), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec3(3, 0, 1)), (ivec3(ivec3(3, 0, 1))) >> ivec3(0, 0, 0)), (ivec3(ivec3(3, 0, 1))) / ivec3(1, 1, 1))), ivec3(_GLF_IDENTITY(ivec3(ivec3(3, 0, 1)), (_GLF_IDENTITY(ivec3(ivec3(3, 0, 1)), (_GLF_IDENTITY(ivec3(ivec3(3, 0, 1)), clamp(ivec3(ivec3(3, 0, 1)), ivec3(ivec3(3, 0, _GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(0), int(0)))))), ivec3(ivec3(3, 0, 1))))) - _GLF_IDENTITY(ivec3(0, 0, 0), ivec3(ivec4(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) / ivec3(1, 1, 1)), 1))))) / ivec3(1, 1, 1))), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec3(3, 0, 1)), (_GLF_IDENTITY(true, (true) && true) ? ivec3(ivec3(3, 0, 1)) : _GLF_FUZZED(ivec3(-36892, 78971, 95111)))), (ivec3(ivec3(3, 0, 1))) / ivec3(1, 1, 1))))))))), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), min(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))) >> 0, min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), min(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))) >> 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), min(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), min(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))) >> 0, (94967 & 0) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), min(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))) >> 0)))))))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.y + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.z], 4, 64, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, 0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) - 0.0)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.y = read_2;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_12next_virtual_gidread_1virtual_gidworkgroup_id.y + 1 == GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.y) + _GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-63641) : 1), _GLF_IDENTITY(((false ? _GLF_FUZZED(-63641) : 1)) + 0, (((false ? _GLF_FUZZED(-63641) : 1)) + 0) + 0))), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), clamp(mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, true, false)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), 1.0, 1.0, 0.0, sqrt(0.0), exp(0.0))), float(mat3(float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), 1.0, 1.0, 0.0, sqrt(0.0), exp(0.0))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 0.0)))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)))))))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)), (false ? _GLF_FUZZED((_injected_loop_counter * (_injected_loop_counter --))) : (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)))) >> 0))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0), mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0)))), clamp(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0), mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0)))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0), mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0)))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0), mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat2x3(injectionSwitch.x, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0))))))), max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, abs(0.0) + (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), max(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 0.0, 0.0)), mix(float(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(4.6)), bool(false))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0)))))).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), _GLF_IDENTITY(bool(bvec2(bool((false)), false)), (bool(bvec2(bool((false)), false))) || false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- 795.407))), bool(false))), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(-175.133)), bool(false)))), 1.0))), 0.0))), tan(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- 795.407))), bool(false))), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(-175.133)), bool(false)))), 1.0))), 0.0))), (false ? _GLF_FUZZED(vec4(96.65, -2.0, -4.9, 4772.0533)) : vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- 795.407))), bool(false))), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(-175.133)), bool(false)))), 1.0))), 0.0))))))), vec4(1.0, 1.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), cos(vec4(0.0, 0.0, 0.0, 0.0)) * (_GLF_IDENTITY(max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), (max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0))))))), _GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 1.0), (_GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 1.0), (vec4(1.0, 1.0, 0.0, 1.0)) * mat4(1.0))) / sqrt(vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 1.0), min(vec4(1.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 1.0), (vec4(1.0, 1.0, 0.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0))))))), 0.0, 0.0, 1.0, round(length(_GLF_IDENTITY(normalize(1.0), mix(float(_GLF_FUZZED(-8402.2495)), float(_GLF_IDENTITY(normalize(1.0), 1.0 * (_GLF_IDENTITY(normalize(1.0), float(vec4(normalize(1.0), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8.8))), determinant(mat3(log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(true))))), 1.0, log(1.0), 0.0)))))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0)))))).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), min(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, cos(log(1.0)), abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), (false ? _GLF_FUZZED(-6227.2889) : _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, log(1.0), 0.0)))))).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bool(! (! (false)))), true && (bool(bool(! (! (false))))))), (! (! (false))) && true)))))))))), false, false, false))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, 0), clamp(ivec3(0, 1, 0), _GLF_IDENTITY(ivec3(0, 1, 0), ~ (_GLF_IDENTITY(~ (ivec3(0, 1, 0)), ivec3(0, 0, 0) ^ (~ (ivec3(0, 1, 0)))))), ivec3(0, 1, 0)))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, 0), clamp(ivec3(0, 1, 0), _GLF_IDENTITY(ivec3(0, 1, 0), ~ (_GLF_IDENTITY(~ (ivec3(0, 1, 0)), ivec3(0, 0, 0) ^ (~ (ivec3(0, 1, 0)))))), ivec3(0, 1, 0)))))))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (false), false || (! (false))))))), (! (! (! (false)))) && true))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))))), (! (! (! (false)))) && true)), bool(bvec4((_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))), ! (_GLF_IDENTITY(! (! (! (false))), (! (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)))) && true)))))) && true)) || false))
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.6)), bool(false))))) && (_GLF_IDENTITY(_injected_loop_counter != 1, false || _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(bool(bvec4((_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4((_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true)))))))))); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_injected_loop_counter ++)))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec4(! (_GLF_IDENTITY(false, (false) || false)), false, true, true)))) && true)))))
          return;
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && (false))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                continue;
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(6040.8395)), bool(false))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true, bool(bool((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))))))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))) && true)))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))) && true)))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))) && true)))))), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))) && true)))))), false), true))))))))) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.6)))))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 ^ (0 ^ 0)))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
}
