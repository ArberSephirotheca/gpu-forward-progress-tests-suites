#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 0), max(ivec3(0, 0, 0), ivec3(0, 0, 0)))))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.w = subgroup_id;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.w + GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.w * GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.y + subgroup_local_id;
 GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.z = virtual_gid;
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.w + GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.w * GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.y);
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.x = next_virtual_gid;
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.z], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.z = read_1;
    }
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.z + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.z], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.x = read_2;
  }
 else
  {
  }
 do
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1subgroup_id.z + 1 == GLF_merged4_0_1_6_1_1_13_2_1_11_3_1_14read_2subgroup_sizevirtual_gidworkgroup_base.x) + 1, 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
}
