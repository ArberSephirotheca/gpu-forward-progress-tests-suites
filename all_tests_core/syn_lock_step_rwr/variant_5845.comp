#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1;
 uvec3 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
 uvec4 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0)))))
  return;
 uvec3 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size;
 GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), true && (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uvec3 GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * mat2(1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, length(0.0), 1.0))).x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(44.93)), float(injectionSwitch.y), bool(true))) : _GLF_FUZZED(8839.9827)))))), false)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, length(0.0), 1.0))).x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(44.93)), float(injectionSwitch.y), bool(true))) : _GLF_FUZZED(8839.9827)))))), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, length(0.0), 1.0))).x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(44.93)), float(injectionSwitch.y), bool(true))) : _GLF_FUZZED(8839.9827)))))), false)))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), false, true))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), false, true))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), false, true))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), false, true)))))))))) && true)), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1.7))) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1.7))) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1.7))) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))) || false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, true, true))))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? -1.3 : float(false))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-16.57 - 2.7))), bvec2(true, false))).x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat4x3(float(mat3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-6.3)), float(float(mat4x3(float(mat3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), bool(true))))) > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y = subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false))))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (8) >> 0)) ^ 0))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(28383, clamp(28383, 28383, 28383)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0) / 1), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)) << 0)) | 0)) ^ 0))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false))), true)))), ! (! (bool(bvec3(false, true, true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz.x = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x = GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) || false)), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) || false)), true)))) && true)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-761.752)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(879.518)), bool(false)))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false, false, false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) || false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) || false)))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.z = workgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), bool(bvec4(false, false, true, true)))))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz.z = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.z;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u), clamp(uvec3(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)), _GLF_IDENTITY(1u, (1u) >> 0u)))), uvec3(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u), uvec3(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u)))).x;
 GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz.y = workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz.z * GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.xyz.y;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y = workgroup_base;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y, (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y) / (uint(_GLF_ONE(1.0, injectionSwitch.y)) | 1u));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, (7) | (7)))) | (int(7))), int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(59990) : 7))), clamp(_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))), int(7), int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))), ~ (~ (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(54323) : int(7))), min(int(7), int(7))), clamp(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_GLF_IDENTITY(-87586, (-87586) | (-87586))) : int(7)))) | (int(7))), _GLF_IDENTITY(int(7), (int(7)) / 1), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), ! (! (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) / 1), ((1 ^ 1)) | 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base, max(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base, (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base) | (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base)))).w) << 0u), 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w, (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w) << 0u), (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w, (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.w) << 0u)) >> 0u)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x, max(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x, GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 0.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0)), vec2(mat3x4(injectionSwitch, 0.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0)), vec2(mat3x4(injectionSwitch, 0.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0)))), vec2(mat3x4(injectionSwitch, 0.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0))))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.z = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.z + _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, _GLF_IDENTITY(max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y), clamp(max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y), _GLF_IDENTITY(max(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w, max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w)) * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy, max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy)).y), (max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y)) - 0u), max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y))))), (uint(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, _GLF_IDENTITY(max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y), clamp(max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w, (GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w) / 1u) * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y), _GLF_IDENTITY(max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y), (max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y)) - 0u), max(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y, (GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y) + 0u), GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y)))))) / 1u))) + ((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1, min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1, (GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1) * 1u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1, (GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))))) % _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy, ~ (~ (GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy))).y);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.x = next_virtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.x = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.x;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
    barrier();
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), min(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u))) ^ (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base))) * uvec4(1u, 1u, 1u, 1u)).z], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.w = read_1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z = GLF_merged2_0_3_75_3_1_6GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_sizeread_1.w;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x = GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (true) || false)))
    {
     barrier();
    }
   else
    {
    }
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.x], uint(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))), true, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))), int(ivec4((_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))), 0, 0, 1)))))) | (_GLF_IDENTITY(~ (0), 0 | (~ (0)))))) - 0))) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 | (1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))), ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))), int(ivec4((_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))), 0, 0, 1)))))) | (_GLF_IDENTITY(~ (0), 0 | (~ (0)))))) - 0))) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 | (1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, abs(1.0), 1.0, 1.0, 1.0, 0.0))).y))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.z], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.y = read_2;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)))
    barrier();
   GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.y = GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.y;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.0)), float(injectionSwitch.y), bool(true)))))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.x, (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) << 0u)), max(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))) | (uint(0u))), uint(0u))))) + (GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_base.x))], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, 0u + (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x)) + 1, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, min(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, uint(uvec4(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, 0u, 0u, 0u))))), (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u))) == GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.y), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, 0u | (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u))) == GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.y), 0u + (uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base, ~ (~ (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base))).x + 1, _GLF_IDENTITY(0u, min(0u, 0u)) | (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, _GLF_IDENTITY((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1), _GLF_IDENTITY(((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1)), (_GLF_IDENTITY(((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1)), (((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1))) ^ 0u)) | 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u))) == GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.y))), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, 0u | (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x) | (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x)))) + 1, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, 0u | (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x) | (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x)))) + _GLF_IDENTITY(1, 0 | (1)), (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u))) << (0u ^ 0u))) == GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.y), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base, max(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base, _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base, (true ? GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base : _GLF_FUZZED(uvec3(112599u, 119764u, _GLF_IDENTITY(170879u, max(170879u, 170879u)))))))).x + 1, 0u | (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1, _GLF_IDENTITY((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, clamp((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u))), max((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base, uvec3(1u, 1u, 1u) * (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base)).x + 1) >> 0u, clamp((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, min(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x)) + 1, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, min(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x)) + 1, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, min(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x, GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x)) + 1)))))) >> 0u, clamp((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> _GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base)).x + 1) >> 0u, (true ? (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u : _GLF_FUZZED(15255u)))))), ((_GLF_IDENTITY((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, clamp((GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u, (GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.x + 1) >> 0u)))) ^ 0u))) >> 0u)))) == GLF_merged3_0_1_6_1_1_6_2_1_14read_1read_2workgroup_base.y)))))) + 1, 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), false, false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-3.3 + -3985.6272))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
