#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat2x4 _f0;
 ivec2 _f1;
 bvec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_10 {
 int _f0;
 mat4x3 _f1;
 uvec2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_9 {
 int _f0;
 vec3 _f1;
 mat4x3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
} ;

struct _GLF_struct_12 {
 mat3x4 _f0;
 _GLF_struct_8 _f1;
 mat3x4 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 ivec3 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_13 {
 uint workgroup_size;
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_7 {
 uint next_virtual_gid;
 bvec2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_4 {
 uint _f0;
 mat2 _f1;
 bool _f2;
 vec3 _f3;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
 uvec3 _f1;
 uvec2 _f2;
 int _f3;
 mat4x2 _f4;
 mat3x4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uint read_1;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 bvec2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 mat3 _f1;
 mat2x4 _f2;
 uvec3 _f3;
 mat4x3 _f4;
 int _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 bvec3 _f1;
 vec4 _f2;
 _GLF_struct_1 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))) ? injectionSwitch.y : _GLF_FUZZED(-3.9))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), float(_GLF_FUZZED(-2.6)), bool(_GLF_IDENTITY(false, ! (! (false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), true))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-3.1) : injectionSwitch[0])), injectionSwitch[1])), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(434.323)), vec2(_GLF_FUZZED(-89.63), (injectionSwitch)[1]), bvec2(false, true))))).y), ! (! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.1) : 1.0)), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(length(vec4(-89.84, -6042.2624, -722.286, -2.9))))))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat3x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 1.0, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0)))) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0))))).y)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))), false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, sqrt(0.0), 1.0, 1.0, 1.0, 0.0)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), true)), ! (! (bool(bvec2(bool(bvec2(false, true)), true)))))))))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false)))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(14.28)), bool(false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))), 0.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) - vec2(0.0, 0.0)).y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (! (false))))))) || false))) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(gl_WorkGroupSize.x, _GLF_struct_12(mat3x4(1.0), _GLF_struct_8(mat3x2(1.0)), mat3x4(1.0), _GLF_struct_9(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, max(1, 1)), 1)), vec3(1.0), mat4x3(1.0), _GLF_IDENTITY(ivec2(1), ~ (~ (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1))))))), _GLF_struct_10(1, mat4x3(1.0), uvec2(1u), mat4x2(1.0)), ivec3(1), _GLF_struct_11(mat2x4(1.0), ivec2(1), bvec4(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))), mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y)))))) && true)))), true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, (_GLF_struct_replacement_13.workgroup_size) - 0u) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true, bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED((- -243.516)))) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0))), (float(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)))) + 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0))), (float(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)))) / 1.0), float(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)))))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))))), exp(0.0))))))).y)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0))))))).y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y))))))), true && ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y)))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(_GLF_IDENTITY(0.0, max(0.0, 0.0)))), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0))))))).y)))))))), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(_GLF_IDENTITY(true, (true) && true)))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0))))))).y)))))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0)))))).y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true, false))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0))))))).y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, exp(0.0)))).y))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch), min(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch), (true ? min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch) : _GLF_FUZZED(vec2(-21.96, 2.2)))), min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) && true)) && true))), exp(0.0))))))).y))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch), min(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch), (true ? min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch) : _GLF_FUZZED(vec2(-21.96, 2.2)))), min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) && true)) && true))), exp(0.0))))))).y))))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch), min(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch), (true ? min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch) : _GLF_FUZZED(vec2(-21.96, 2.2)))), min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(true))), exp(0.0)), mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch)), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) && true)) && true))), exp(0.0))))))).y))))))), true, false, false)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))
      return;
     barrier();
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((true ? subgroup_local_id : _GLF_FUZZED(subgroup_id)), max(_GLF_IDENTITY((true ? subgroup_local_id : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))) >> 0u), _GLF_IDENTITY((true ? subgroup_local_id : _GLF_FUZZED(subgroup_id)), (true ? (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id)) : _GLF_FUZZED(80116u)))))), (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) / 1u)))) : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id)))) + 0u))), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, (1u) >> 0u) * (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u | 0u))))) % subgroup_size) / 1u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, (1u) >> 0u) * (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u | 0u))))) % subgroup_size) / 1u))), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, (1u) >> 0u) * (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u | 0u))))) % subgroup_size) / 1u))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, (1u) >> 0u) * (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u | 0u))))) % subgroup_size) / 1u))))) : _GLF_FUZZED(subgroup_size)))), bvec2(true), mat4(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(_GLF_struct_0(mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(2374.9964, _GLF_IDENTITY(min(_GLF_IDENTITY(2374.9964, (2374.9964) / 1.0), _GLF_IDENTITY(2374.9964, float(mat3(2374.9964, 0.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat4x2(min(_GLF_IDENTITY(2374.9964, (2374.9964) / 1.0), _GLF_IDENTITY(2374.9964, float(mat3(2374.9964, 0.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, exp(0.0), 0.0), (mat4x2(min(_GLF_IDENTITY(2374.9964, (2374.9964) / 1.0), _GLF_IDENTITY(2374.9964, float(mat3(2374.9964, 0.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, exp(0.0), 0.0)) * mat4(1.0))))))), max(float(_GLF_FUZZED(2374.9964)), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0)) / 1.0), _GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0))))), float(1.0), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(2374.9964, min(_GLF_IDENTITY(2374.9964, _GLF_IDENTITY((2374.9964) / 1.0, mix(float((2374.9964) / 1.0), float(_GLF_FUZZED((-9366.1077 - -5.3))), bool(false)))), _GLF_IDENTITY(2374.9964, float(mat3(2374.9964, 0.0, 1.0, 1.0, 0.0, exp(0.0), _GLF_IDENTITY(1.0, (1.0) / exp(0.0)), 0.0, 1.0))))))), max(float(_GLF_FUZZED(2374.9964)), _GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0))), float(_GLF_IDENTITY(1.0, 0.0 + (1.0))), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(2374.9964, min(_GLF_IDENTITY(2374.9964, (2374.9964) / 1.0), _GLF_IDENTITY(2374.9964, float(mat3(2374.9964, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), float(_GLF_FUZZED(-13.49)), bool(false))), 1.0, 0.0, exp(0.0), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.1) : 1.0)), 0.0, 1.0))))))), max(float(_GLF_FUZZED(2374.9964)), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(2374.9964, _GLF_IDENTITY(1.0 * (2374.9964), min(_GLF_IDENTITY(1.0 * (2374.9964), (1.0 * (2374.9964)) - 0.0), 1.0 * (2374.9964)))))), (_GLF_IDENTITY(float(_GLF_FUZZED(2374.9964)), (float(_GLF_FUZZED(2374.9964))) * 1.0)) * 1.0))), float(1.0), bool(true)))))), mat3(1.0), mat2x4(1.0), uvec3(1u), mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), min(min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(length(vec3(-8271.7315, 5.4, 4623.1803))))), min(1.0, 1.0))), float(_GLF_FUZZED(8317.6946)), bool(false)))), min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))), 1, uvec3(1u)), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), vec4(1.0), _GLF_struct_1(bvec4(true), bvec2(true), ivec3(1)), mat4x3(1.0)), _GLF_struct_5(_GLF_struct_3(mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), ~ (~ (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) ^ uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(uvec3(1u), ~ (~ (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) ^ uvec3(0u, 0u, 0u)))))) >> uvec3(0u, 0u, 0u)), max(uvec3(1u), uvec3(1u))), (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(max(uvec3(1u), uvec3(1u)), ~ (~ (_GLF_IDENTITY(max(uvec3(1u), uvec3(1u)), (max(uvec3(1u), uvec3(1u))) << uvec3(0u, 0u, 0u))))))) | (_GLF_IDENTITY(uvec3(1u), max(uvec3(1u), uvec3(1u))))), uvec2(1u), 1, mat4x2(1.0), mat3x4(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))), _GLF_struct_4(_GLF_IDENTITY(1u, ~ (~ (1u))), mat2(1.0), true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), max(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))))), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat2(1.0, abs(0.0), 1.0, 0.0)))), min(vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.6) : 1.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), vec3(1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))), mix(vec3(_GLF_FUZZED(-6.9), (_GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, abs(1.0)))), 1.0))))), vec3(1.0))))[1], (_GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))))[2]), vec3((_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0)), _GLF_IDENTITY(vec3(mat3x4(_GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0)), (min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))) / vec3(1.0, 1.0, 1.0)), round(length(normalize(1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), (vec3(mat3x4(_GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0)), (min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))) / vec3(1.0, 1.0, 1.0)), round(length(normalize(1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) * mat3(1.0)))))[0], _GLF_FUZZED(-160.933), _GLF_FUZZED(157.604)), bvec3(true, false, false))), _GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(max(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))), min(_GLF_IDENTITY(max(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))), max(max(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))), max(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))))), max(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), (1.0) - 0.0)), clamp(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))))), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat2(1.0, abs(0.0), 1.0, 0.0)))), min(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.6) : 1.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), (min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.6) : 1.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) * 1.0))), vec3(1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))), mix(vec3(_GLF_FUZZED(-6.9), (_GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, abs(1.0)))), 1.0))))), vec3(1.0))))[1], (_GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))))[2]), vec3((_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0)), _GLF_IDENTITY(vec3(mat3x4(_GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0)), (min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))) / _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))), round(length(normalize(1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), (vec3(mat3x4(_GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), 1.0 * (dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0))))))))))), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))), (min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))) / vec3(1.0, 1.0, 1.0)), round(length(normalize(1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) * mat3(1.0)))))[0], _GLF_FUZZED(-160.933), _GLF_FUZZED(157.604)), bvec3(true, false, false))), _GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec3(1.0))))))) : _GLF_FUZZED(vec3(53.57, -0.9, -8436.1629))))), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u | (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) / 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) / 1u, 0u | ((virtual_gid) / 1u)), ((virtual_gid) / 1u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))], 4, 64, 0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((false ? 3188.9305 : -0.0))), float(injectionSwitch.x), bool(true))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.9))), 1.0, 0.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0))), length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), mat3(1.0) * (vec3(0.0, 0.0, 0.0)))), 0.0)), (float(mat3x2(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), length(vec3(0.0, 0.0, 0.0)), 0.0))) - 0.0)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + 0.0)) || false))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))) && true)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(sin(0.0), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(sin(0.0), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(16.20)), float(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(sin(0.0), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(sin(0.0), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), bool(true)))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(! (! ((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(! (! ((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_DEAD(false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))) || false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((false) || false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(570.192) : injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1682.8267) : injectionSwitch.y))))))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))), 0.0 + (float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))), clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (true ? vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) + 0.0))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), abs(1.0), sqrt(0.0), 0.0, 0.0, 1.0, 1.0)), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.0), _GLF_FUZZED(-7025.6157)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[_GLF_struct_replacement_7.next_virtual_gid], uint(_GLF_struct_replacement_6._f1.read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2064.4137), _GLF_FUZZED(906.606)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y)))), true && (((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2520.2426)), float(injectionSwitch.y), bool(true))))), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), sqrt(1.0), sin(0.0), 1.0))), injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), sin(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))))))))) && true)), true, true, false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(0u | (buf[virtual_gid]), max(_GLF_IDENTITY(0u | (buf[virtual_gid]), 0u ^ (0u | (buf[virtual_gid]))), 0u | (buf[virtual_gid])))), 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) / 1), (_GLF_IDENTITY(64, (64) / 1)) << 0), 0 ^ (64)), max(64, 64)), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_struct_replacement_7.next_virtual_gid], uint(_GLF_IDENTITY(_GLF_struct_replacement_6._f1.read_1, ~ (~ (_GLF_struct_replacement_6._f1.read_1))) + 1 == read_2) + 1, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
  barrier();
}
