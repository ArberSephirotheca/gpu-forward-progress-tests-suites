#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(17153))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), bool(bvec3(true, false, false)))), false || (_GLF_WRAPPED_IF_TRUE(true)))) || false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(float(injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (true ? mat3x2(float(injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0) : _GLF_FUZZED((4.9 - mat3x2(-3.4, 3.4, -3.4, 0.3, 44.01, -18.76)))))), min(float(_GLF_IDENTITY(mat3x2(float(injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (true ? mat3x2(float(injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0) : _GLF_FUZZED((4.9 - mat3x2(-3.4, 3.4, -3.4, 0.3, 44.01, -18.76)))))), float(_GLF_IDENTITY(mat3x2(float(injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (true ? mat3x2(float(injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0) : _GLF_FUZZED((4.9 - mat3x2(-3.4, 3.4, -3.4, 0.3, 44.01, -18.76))))))))), float(_GLF_FUZZED((-868.449))), bool(false))), _GLF_IDENTITY(dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat2(0.0, 0.0, 0.0, 0.0)), (transpose(mat2(0.0, 0.0, 0.0, 0.0))) / mat2(1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + (injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y) && true)) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(_GLF_IDENTITY(length(normalize(1.0)), max(_GLF_IDENTITY(length(normalize(1.0)), 0.0 + (length(normalize(1.0)))), length(normalize(1.0))))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(_GLF_IDENTITY(determinant(mat2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / 1.0), 0.0, 0.0, 0.0)), float(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) / exp(0.0))), float(_GLF_FUZZED(vec3(-11.57, 3.0, 183.747).r)), bool(false))), 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))))), 0.0, 0.0))) + (injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))) && true)) || false))) && true))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(10.02, 8.4, -3621.7660, 9888.4199)) : mat2(0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0))) + (injectionSwitch.x)), float(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + (injectionSwitch.x))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y) && true)) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), bool(bvec3(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))), false, false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(_GLF_IDENTITY(length(normalize(1.0)), max(_GLF_IDENTITY(length(normalize(1.0)), 0.0 + (length(normalize(1.0)))), length(normalize(1.0))))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))))), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + (injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))) && true)))), bool(bvec4(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + (injectionSwitch.x)), float(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + (injectionSwitch.x))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y) && true)) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), bool(bvec3(true && (_GLF_IDENTITY(false, false || (false))), false, false)))), true && (false || (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))), bool(bvec3(true && (_GLF_IDENTITY(false, false || (false))), false, false)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, round(_GLF_IDENTITY(length(normalize(1.0)), max(_GLF_IDENTITY(length(normalize(1.0)), 0.0 + (length(normalize(1.0)))), length(normalize(1.0))))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))))), 0.0, 0.0)), dot(vec3(1.0, round(length(normalize(1.0))), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + (injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))) && true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (false)), true && (bool(! _GLF_IDENTITY((false), false || ((false))))))), (bool(_GLF_IDENTITY(bool(! (false)), true && (bool(! (false)))))) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), true && ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true))))), false, false)))))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), (! (false)) && true))), true && ((! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (false) || false)) && true))))))))))), ((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), true && ((! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))))) && true)))))))))))) || _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) || false)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             return;
                            }
                          }
                         break;
                        }
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                    return;
                  }
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     break;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, false))))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(418.685)), bool(false))) > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
                  return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0)), false || (_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) >> 0))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(normalize(-1.1)) : _GLF_ONE(1.0, injectionSwitch.y))), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), ! (! (_injected_loop_counter != (1 ^ int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(normalize(-1.1)) : _GLF_ONE(1.0, injectionSwitch.y))), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 1.0, 0.0))))), cos(0.0), 1.0))), determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), 1.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(0.0), 1.0))), determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - sqrt(0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), 1.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(0.0), 1.0))), determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(-3.9, -650.383, -6.0, -13.07, 1.7, 467.969, -6565.6484, -8.3, 6.3, 1.0, 2679.9849, 518.996, -1.2, 80.36, -11.90, 49.39)))))))), exp(0.0), 1.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(0.0), 1.0))), determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), 1.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))[0], _GLF_FUZZED(8351.5787)), vec2(_GLF_FUZZED(float(false)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(0.0), 1.0))), determinant(mat4(1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), 1.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)))))), cos(0.0), _GLF_IDENTITY(1.0, float(vec4(1.0, sqrt(1.0), 1.0, tan(0.0))))))), determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), 1.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))[1]), bvec2(false, true))).x, (false ? _GLF_FUZZED(652.790) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).x) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(4.0)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(4.0)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(1.5)), float((injectionSwitch.x)), bool(true))) * 1.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(4.0)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(4.0)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (injectionSwitch.x) * 1.0) : _GLF_FUZZED(4.0)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.3))))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(4.0)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))) / sqrt(1.0)), (false ? _GLF_FUZZED(step(faceforward(6540.4070, _GLF_IDENTITY(6.2, float(_GLF_IDENTITY(mat2x3(6.2, 0.0, 1.0, abs(1.0), _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 1.0), transpose(transpose(mat2x3(6.2, 0.0, 1.0, abs(1.0), 0.0, 1.0)))))), 145.369), -3.8)) : injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uint(workgroup_size), 0u ^ (uint(workgroup_size))))) * _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), workgroup_id)), clamp(workgroup_size * _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), workgroup_id)), workgroup_size * _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), workgroup_id)), workgroup_size * _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), workgroup_id))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0)))))), 1u * (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) * 1u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(_GLF_IDENTITY(uvec2(uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u), (uvec2(uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u))), 1u)) ^ uvec2(0u, 0u))))) << (_GLF_IDENTITY(0u | 0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(0u | 0u, 1u * (0u | 0u)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) + 0u))), _GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(uint(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED((subgroup_id ^ num_workgroup)) : subgroup_id)), 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), 1u * (_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) / 1u), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), uint(uvec3(max(0u, 0u), 0u, 0u)))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, _GLF_IDENTITY(0u, min(0u, 0u)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(uint(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), min(1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(uint(uvec4(subgroup_id, _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) / 1u))) ^ (0u)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) ^ 0u), 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(uint(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))))))))))))), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(uint(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_id, _GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u + (0u)), 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(uint(_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) / (1u ^ 0u)), 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(determinant(mat4(1.2, -6172.0127, -4.1, -7.6, 7.6, 516.244, -16.99, 9474.3034, 0.7, 9732.3454, 3.7, 690.918, -3135.4310, 98.29, 259.762, 7.5)))))))))))))))), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 1u * (uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u))))) * subgroup_size))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 1)), (true ? int(ivec3(0, 1, 1)) : _GLF_FUZZED(-26571)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), bool(bvec2(bool(bvec3(_GLF_DEAD(false), true, false)), true)))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((true ? _injected_loop_counter : _GLF_FUZZED(-71079)), min((true ? _injected_loop_counter : _GLF_FUZZED(-71079)), (true ? _injected_loop_counter : _GLF_FUZZED(-71079))))) > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 1, 0)), 0 ^ (int(ivec4(0, 1, 1, 0)))))) >> 0)), true && _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > (-71289 & 0)), false || (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))))), false || ((_injected_loop_counter > (-71289 & 0)))), true && (_GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))))), false || ((_injected_loop_counter > (-71289 & 0)))))))), true && (_GLF_IDENTITY((_injected_loop_counter > (-71289 & 0)), false || (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))))), false || ((_injected_loop_counter > (-71289 & 0)))), true && (_GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))))), false || ((_injected_loop_counter > (-71289 & 0))))))))))))))) || false)) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), max((-71289 & 0), (-71289 & 0))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, false), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, false), true), bvec3(bvec4(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, false), true), true)))))), (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, false), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, false), true), bvec3(bvec4(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, false, true, true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, bool(bvec2((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false, true))))))) && true), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & 0))))))) || false, ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && _GLF_IDENTITY((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))), ((_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))))))), (bool((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), true && (_injected_loop_counter > (-71289 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0)))))))))) || false))))))))) || false) && true), false))))) && true, false), true), true))))))) && true))))), bool(bvec4(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(50702) : -71289))) ^ _GLF_IDENTITY(0, (0) | 0)) & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(-71289 & 0, ~ (~ (_GLF_IDENTITY(-71289 & 0, (false ? _GLF_FUZZED(-7681) : -71289 & 0))))), min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8))), max((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8))), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & _GLF_IDENTITY(0, min(0, 0))))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8)))))))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(50702) : -71289))) ^ 0) & _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(ivec2(0, 1))), 0))), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(-71289 & _GLF_IDENTITY(0, (0) | 0), min(-71289 & 0, -71289 & 0))), max((_GLF_IDENTITY(-71289 & _GLF_IDENTITY(0, (0) | 0), min(-71289 & 0, -71289 & 0))), (_GLF_IDENTITY(-71289 & _GLF_IDENTITY(0, (0) | 0), min(-71289 & 0, -71289 & 0))))), ((-71289 & 0)) | _GLF_IDENTITY(((-71289 & 0)), (true ? ((-71289 & 0)) : _GLF_FUZZED(_injected_loop_counter)))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8))), max((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(-71289, (-71289) >> 0), max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(8), ~ (~ (int(8)))))), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(_GLF_IDENTITY(-71289 & 0, (-71289 & 0) / 1), -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(_GLF_IDENTITY(8, min(8, 8))))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8)))))))))))))) || false)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289 & 0, max(-71289 & 0, -71289 & 0))), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY(((-71289 & 0)), clamp(((-71289 & 0)), _GLF_IDENTITY(((-71289 & _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))))), (false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0)))), ((-71289 & 0)))) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))))) || false)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), clamp((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), _GLF_IDENTITY((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), ((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0)) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), ((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0)) >> 0))), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((-71289 & _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(((-71289 & 0)), clamp(((-71289 & 0)), _GLF_IDENTITY(((-71289 & 0)), (false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0)))), ((-71289 & 0)))) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))))) || false)), ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) + 0)), (true ? _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY((-71289 & 0), ~ (~ ((-71289 & 0))))), clamp(((-71289 & 0)), _GLF_IDENTITY(((-71289 & 0)), (false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, (-71289) | (0 >> _GLF_IDENTITY(int(1), int(1)))) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289, (-71289) | (0 >> _GLF_IDENTITY(int(1), int(1)))) & 0), clamp((_GLF_IDENTITY(-71289, (-71289) | (0 >> _GLF_IDENTITY(int(1), int(1)))) & 0), (_GLF_IDENTITY(-71289, (-71289) | (0 >> _GLF_IDENTITY(int(1), int(1)))) & 0), (_GLF_IDENTITY(-71289, (-71289) | (0 >> _GLF_IDENTITY(int(1), int(1)))) & 0))) : _GLF_FUZZED(18321)))))) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))))) || false))) || false))))))) && true))), ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(50702) : -71289))) ^ 0) & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), _GLF_IDENTITY((true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))), clamp((true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8))), max((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((_GLF_IDENTITY(-71289 & 0, (true ? -71289 & 0 : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y))))), int(8))), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8)))))))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(50702) : -71289))) ^ 0) & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(_GLF_IDENTITY(-71289, (true ? _GLF_IDENTITY(-71289, (-71289) | 0) : _GLF_FUZZED(-58840))) & 0, -71289 & 0))), _GLF_IDENTITY(((-71289 & 0)) | ((-71289 & 0)), (((-71289 & 0)) | ((-71289 & 0))) | (_GLF_IDENTITY(((-71289 & 0)) | ((-71289 & 0)), (((-71289 & 0)) | ((-71289 & 0))) / 1)))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8))), max((_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, _GLF_IDENTITY(-71289, (true ? _GLF_IDENTITY(-71289, (-71289) - 0) : _GLF_FUZZED(_injected_loop_counter))))) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 0.0, length(0.0)))), injectionSwitch.x))), int(8))), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, min(-71289 & 0, -71289 & 0))), ((-71289 & 0)) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), ~ (~ (int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(8)))))))))))))) || false)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, clamp(-71289, -71289, -71289)) & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY(((-71289 & 0)), clamp(((-71289 & 0)), _GLF_IDENTITY(((-71289 & 0)), (false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0)))), ((-71289 & 0)))) | ((_GLF_IDENTITY(-71289, (-71289) + 0) & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))))) || false)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), true && (_injected_loop_counter > _GLF_IDENTITY((-71289 & 0), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY(((-71289 & 0)), clamp(((_GLF_IDENTITY(-71289 & 0, min(_GLF_IDENTITY(-71289 & 0, int(ivec3(-71289 & 0, 0, 0))), -71289 & 0)))), _GLF_IDENTITY(((-71289 & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) + 0))), _GLF_IDENTITY((false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0))), (false ? _GLF_FUZZED(-51556) : _GLF_IDENTITY((false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0))) : _GLF_FUZZED(_injected_loop_counter)))))), ((-71289 & 0)))) | ((_GLF_IDENTITY(-71289 & 0, (-71289 & 0) << 0)))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))))) || false)), ((_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (-71289 & 0), ! (_GLF_IDENTITY(! (_injected_loop_counter > (-71289 & 0)), (! (_injected_loop_counter > (-71289 & 0))) || false))), ! (! (_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), max((_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0), (_GLF_IDENTITY(-71289, (false ? _GLF_FUZZED(36609) : -71289)) & 0))), true && (_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(-71289 & 0, 0 | (-71289 & 0))), (_GLF_IDENTITY((_GLF_IDENTITY(-71289, max(-71289, -71289)) & 0), (true ? _GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY(((-71289 & 0)), clamp(((-71289 & 0)), _GLF_IDENTITY(((-71289 & 0)), (false ? _GLF_FUZZED(clamp(-71013, _injected_loop_counter, _injected_loop_counter)) : ((-71289 & 0)))), ((-71289 & 0)))) | ((-71289 & 0))) : _GLF_FUZZED(bitfieldExtract(8136, _injected_loop_counter, -50110))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))))) || false))) || false))))))) && true)))) && true), true, true, true))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) / 1u)))), 4, 64, 4);
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(false, true && (false)), false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false))))) && true)), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(false, false))), false, false)))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
    return;
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))) || false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))), (true ? _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), _GLF_IDENTITY(uint(uvec4(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), 1u, 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), ~ (_GLF_IDENTITY(~ (uint(uvec4(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), 1u, 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), (~ (uint(uvec4(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), 1u, 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))) | 0u)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), (false ? _GLF_FUZZED(read_2) : _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), clamp(~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), ~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), ~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))))))) | (~ (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))))) : _GLF_FUZZED(uvec4(102384u, 131338u, 189869u, 79496u).q))), _GLF_IDENTITY((next_virtual_gid) >> 0u, ((_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(18349u)))) >> 0u) >> 0u))], uint(read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) | (read_2))) + 1, 4, 64, 4);
}
