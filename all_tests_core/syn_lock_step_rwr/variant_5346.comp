#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 int _f0;
 ivec3 _f1;
 mat2 _f2;
 mat4x2 _f3;
 vec2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 bvec2 _f1;
 ivec2 _f2;
 bvec3 _f3;
 int _f4;
 bool _f5;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_6 {
 uint workgroup_base;
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 mat3 _f2;
 mat3 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat3x4 _f1;
 bvec2 _f2;
 uvec3 _f3;
 uint _f4;
 mat4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 _GLF_struct_6 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_2(_GLF_struct_0(bvec2(true), mat3x4(1.0), bvec2(true), uvec3(1u), 1u, mat4(1.0), mat3x4(1.0)), vec4(1.0), _GLF_struct_1(vec3(1.0), true)), _GLF_struct_6(workgroup_size * GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.w, _GLF_struct_3(mat4(1.0), mat4x3(1.0)), _GLF_struct_4(bvec3(true), bvec2(true), ivec2(1), bvec3(true), 1, true), mat3(1.0), mat3(1.0), _GLF_struct_5(1, ivec3(1), mat2(1.0), mat4x2(1.0), vec2(1.0), uvec2(1u))));
 GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.z = _GLF_struct_replacement_7._f1.workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_id * GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.y + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_id * GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.y);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.x = read_1;
 do
  {
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.x + 1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_13_2_1_14_3_1_12read_1subgroup_sizeworkgroup_baseworkgroup_id.x + 1 == read_2) + 1, 4, 64, 4);
}
