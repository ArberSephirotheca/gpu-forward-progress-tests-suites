#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       return;
       for(int _injected_loop_counter = (1 | (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false), false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))), mix(float(_GLF_FUZZED(326.075)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true)))), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-11790))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 3.7))), bool(false))), abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * _GLF_IDENTITY(dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(abs(0.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), bool(true))))))) > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          break;
         return;
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, abs(0.0), abs(0.0), abs(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0))).x, mix(float(_GLF_FUZZED(-605.646)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, abs(0.0), abs(0.0), abs(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0))).x), bool(true))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 1.0, 1.0), (mat2(injectionSwitch.y, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(19.36) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.6)), float(1.0), bool(_GLF_IDENTITY(true, bool(bvec2(true, false)))))), 1.0), (mat2(injectionSwitch.y, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(19.36) : injectionSwitch.y))))))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), ~ (~ (_GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (6) - 0)), int(6), int(6)))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), true && (bool(bvec4(_GLF_DEAD(false), false, true, false))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-34.18 * 10.23)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7844.3570)), bvec2(true, false))))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      continue;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true))))), false, true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))) ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))), true)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true))), ! (! (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true))), ! (! (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true))), ! (! ((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) && true))))) && true), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true))), ! (! (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), (bool(bvec4(true, false, true, true))) && true)), false))) && (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true))))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.6) : injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.6) : injectionSwitch.x)) > injectionSwitch.y)) || false), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true))), ! (! (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(true, (true) || false))), bool(bvec3(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(true, (true) || false))), false, true)))), true)))), ! (! ((_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(true, (true) || false))), bool(bvec3(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(true, (true) || false))), false, true)))), true))))))))))), true))), ! (! _GLF_IDENTITY(((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), false)), ! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), false))))), true, true)))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true)))), ! (! (((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), float(_GLF_FUZZED((-2749.9017 - 1.0))), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), bool(bvec2(! (bool(bvec3((_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), false)), ! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), false))))), true, true)))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))) && (! (injectionSwitch.x > injectionSwitch.y)))), false, true))), true)))))))), true))))))))))))))))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))), (mat4x2(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x > injectionSwitch.y)))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))))))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
        barrier();
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup)))) ^ (gl_WorkGroupID))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)), min(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), min(gl_WorkGroupID, gl_WorkGroupID))))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0))) > injectionSwitch.y)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-55023))))))); _injected_loop_counter ++)
          {
           return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (workgroup_id)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))), min(~ (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))), ~ (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)))))))))))) - 0u)), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY((workgroup_id), 0u | ((workgroup_id))))))), _GLF_IDENTITY(uint(uvec3(~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY((workgroup_id), 0u | ((workgroup_id))))))), 1u, 1u)), 1u * (uint(uvec3(~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY((workgroup_id), 0u | ((workgroup_id))))))), 1u, 1u)))))), (_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(uvec3(33256u, 53108u, 55968u)[0]))))))), (_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (true ? ~ ((workgroup_id)) : _GLF_FUZZED(uint(192.884))))))), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | ((workgroup_id)))))), clamp(_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id))), (~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id))) / 1u))))), (workgroup_id)))) * 1u), ~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ _GLF_IDENTITY(((workgroup_id)), 0u | (((workgroup_id)))))))), (workgroup_id)))))), ((~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)))) : ~ ((workgroup_id)))))), (workgroup_id))))) + 0u) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) + 0u) : ~ ((workgroup_id)), 0u ^ (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) + _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))), (~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) << 0u))))))) : ~ ((workgroup_id)))))))), (workgroup_id)))), ~ (~ (_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)))), min((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id))))), (~ (_GLF_IDENTITY(~ ((workgroup_id)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id), _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_FUZZED(subgroup_id))))))))) : ~ ((workgroup_id)), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id), _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_FUZZED(subgroup_id))))))))) : ~ ((workgroup_id)), false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id), _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_FUZZED(subgroup_id))))))))) : ~ ((workgroup_id)))))))) + 0u)), (workgroup_id))), (~ _GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)), ~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)), uint(uvec3(max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), 0u)))))))) ^ 0u), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))))), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), workgroup_id)))))))), (workgroup_id))), (~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)))) ^ 0u)))), (~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 0u))))), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id))), clamp(_GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)))), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY((workgroup_id), ~ (~ (_GLF_IDENTITY((workgroup_id), (0u & 173881u) ^ ((workgroup_id))))))))))), (workgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) ^ 0u))), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)))))), (workgroup_id)))) / 1u))))))))), (~ _GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id))) | (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_id))))) / 1u))))), (workgroup_id))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), false || (false || (_GLF_IDENTITY(false, ! (! (false)))))))))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.8) : injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(4, 1, 1), clamp(ivec3(4, 1, 1), ivec3(4, 1, 1), ivec3(4, 1, 1)))), max(int(_GLF_IDENTITY(ivec3(4, 1, 1), clamp(ivec3(4, 1, 1), ivec3(4, 1, 1), ivec3(4, 1, 1)))), int(_GLF_IDENTITY(ivec3(4, 1, 1), clamp(ivec3(4, 1, 1), ivec3(4, 1, 1), ivec3(4, 1, 1)))))))), (true ? int(4) : _GLF_FUZZED(-99778))))) & -41415)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.6) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.2)), bool(false))), injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), min(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (3) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(3, (3) ^ 0), _GLF_IDENTITY(3, 0 ^ (3))))), int(3)), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), (vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1])) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED((+ -6.9)), _GLF_FUZZED(527.570)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))) != int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            return;
           barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false, false))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) && true)));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))), true && (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))), true && (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), false))))), _GLF_IDENTITY(false, (false) && true)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)) | 0u, ~ (~ (_GLF_IDENTITY(((subgroup_id)) | 0u, (_GLF_IDENTITY(((subgroup_id)) | 0u, (((subgroup_id)) | 0u) / 1u)) << (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))))) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u)) << 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (1u ^ 1u) ^ (_GLF_IDENTITY(2u, clamp(2u, 2u, 2u))))), uint(2u))))))))), (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), 0u, 0u, (142582u & 0u))), 0u + (uint(uvec4(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), 0u, 0u, (142582u & 0u)))))) ^ 1u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (uint(2u)) << 0u), uint(2u)))), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) - _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | 0u)))))) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (max(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u ^ 0u)))))) | 0u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u)))) * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8814.2014)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, false, _GLF_IDENTITY(true, false || (true)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (ivec4(18628, 92889, -58856, 36535).b & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))) : _GLF_FUZZED(208.794))), mix(float(_GLF_FUZZED(-6145.2836)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))) : _GLF_FUZZED(208.794)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-9.4))), (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], float(mat3((injectionSwitch)[0], 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), _GLF_FUZZED((true ? 2.2 : -335.490))), vec2(_GLF_FUZZED(8283.1464), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))))), false), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))), false), true, true)), false, false))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), 0.0))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))) && true)) && true))) || (false))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (true))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec2(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            break;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)))))
          barrier();
        }
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | (~ (workgroup_base))), 0u ^ _GLF_IDENTITY((~ (workgroup_base)), 0u ^ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) - (0u | 0u))))))))) ^ 0u) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), bool(bvec2(! ((! (_GLF_DEAD(false)))), true)))))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))) * (injectionSwitch)))).y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))) * (injectionSwitch)))).y), false || ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))) * (injectionSwitch)))).y)))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(64, (64) ^ 0), _GLF_IDENTITY(4, max(4, 4)));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))) && true)) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(4, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * _GLF_IDENTITY((0), _GLF_IDENTITY(int(ivec3((0), 0, _GLF_IDENTITY(0, 0 ^ (0)))), 0 | (int(ivec3((0), 0, 0)))))), _GLF_IDENTITY(0, (0) | (0)), 0)) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, min(4, 4))), int(ivec3((_GLF_IDENTITY(4, min(4, 4))), 0, 1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(4, min(4, 4))), int(ivec3((_GLF_IDENTITY(4, min(4, 4))), 0, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, min(4, 4))), int(ivec3((_GLF_IDENTITY(4, min(4, 4))), 0, 1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(4, min(4, 4))), int(ivec3((_GLF_IDENTITY(4, min(4, 4))), 0, 1))))))) >> 0)), 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) < injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                  return;
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, true)), bool(bvec3(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, true)), true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9866.1741), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-2.1, -48.61, -516.416).g)), bvec2(true, false))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9866.1741), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-2.1, -48.61, -516.416).g)), bvec2(true, false))).x > injectionSwitch.y), false), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9866.1741), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-2.1, -48.61, -516.416).g)), bvec2(true, false))).x > injectionSwitch.y), false), true)))))))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), false, true)))))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(8), int(8))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), 0u | (buf[virtual_gid] = uint(subgroupAllEqual(read_val))));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), max(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), max(0, 0))) * 1)), min((_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), max(0, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), max(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0)), _GLF_IDENTITY(0, (0) >> 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), max(0, 0)))) - 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y)), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0, 0), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0, 0)) ^ ivec4(0, 0, 0, 0))))) | 0) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
