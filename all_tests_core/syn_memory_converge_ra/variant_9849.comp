#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 uvec4 _f0;
 vec3 _f1;
 mat4 _f2;
 ivec2 _f3;
 ivec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_21 {
 int _f0;
 mat2x4 _f1;
 _GLF_struct_20 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_18 {
 vec2 _f0;
} ;

struct _GLF_struct_17 {
 uvec4 _f0;
 uint _f1;
 mat2x4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_16 {
 int _f0;
 ivec2 _f1;
 mat2x3 _f2;
 int _f3;
} ;

struct _GLF_struct_19 {
 mat2 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_17 _f2;
 _GLF_struct_18 _f3;
} ;

struct _GLF_struct_22 {
 _GLF_struct_19 _f0;
 ivec3 _f1;
 bvec4 _f2;
 uint virtual_gid;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_13 {
 mat3x2 _f0;
 ivec4 _f1;
 bool _f2;
 mat3x4 _f3;
 ivec4 _f4;
 mat3x2 _f5;
 float _f6;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 bvec4 _f1;
 vec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 _GLF_struct_13 _f3;
} ;

struct _GLF_struct_10 {
 mat2x4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 bvec4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 ivec2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 mat2x3 _f1;
 vec2 _f2;
 mat3x4 _f3;
 mat4x2 _f4;
 bvec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_7 {
 int _f0;
 _GLF_struct_5 _f1;
 bvec3 _f2;
 _GLF_struct_6 _f3;
 uvec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 uvec4 _f1;
 float _f2;
 _GLF_struct_3 _f3;
 vec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_4 _f0;
 vec4 _f1;
 _GLF_struct_7 _f2;
 mat3x2 _f3;
 _GLF_struct_11 _f4;
 _GLF_struct_14 _f5;
 uint read_val;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 uint _f1;
 _GLF_struct_0 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(mat2x3(1.0), 1u, _GLF_struct_0(mat2(1.0))), gl_SubgroupInvocationID);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.z = _GLF_struct_replacement_2.subgroup_local_id;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false)))))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.x = num_workgroup, (false ? _GLF_FUZZED(subgroup_size) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.x = _GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (num_workgroup), uint(_GLF_IDENTITY(uvec3(~ (num_workgroup), 1u, 1u), (uvec3(~ (num_workgroup), 1u, 1u)) | (uvec3(~ (num_workgroup), 1u, 1u)))))))));
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) && (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))), bool(bvec3(! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))), false, false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) && (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))), bool(bvec3(! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))), false, false))))))))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) && (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))), bool(bvec3(! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))), false, false)))))))))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2))), bool(bvec2(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2))), true)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, max(5, 5))) << 0)), int(5)))); _injected_loop_counter --)
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((~ (gl_WorkGroupSize.x)), (_GLF_IDENTITY(true ? (~ (gl_WorkGroupSize.x)) : _GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(true ? (~ (gl_WorkGroupSize.x)) : _GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : true ? (~ (gl_WorkGroupSize.x)) : _GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : true ? (~ (gl_WorkGroupSize.x)) : _GLF_FUZZED(subgroup_size)) - 0u)))) * 1u)))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)))).x) * 1u))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u), 0u + (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u)))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u))))), 0u, 1u))))))))) | 0u);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), true))))) && (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), true))))) && (_GLF_DEAD(false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), true))))) && (_GLF_DEAD(false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, true)), bvec3(bvec3(bvec3(bvec3(true, false, true))))))), true))))) && (_GLF_DEAD(false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))) || false)) && true), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))) || false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))))))), (! (_GLF_WRAPPED_LOOP(false))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) && true)) && true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) && true)) && true)))), true && ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) && true)) && true))))))))), (! (_GLF_WRAPPED_LOOP(false))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_WRAPPED_LOOP(false))) || false), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_WRAPPED_LOOP(false))) || false)) && true)))) && true))), true && (_GLF_WRAPPED_LOOP(false))), true, true))), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, false || (true)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, ! (! (true)))))))))))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)), (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) / 1u)), uint(uvec2(0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(_GLF_IDENTITY(6u, (6u) | 0u))) / 1u)), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << (0 >> _GLF_IDENTITY(int(8), int(8))))))) != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(false || ((_GLF_IDENTITY(false, (false) || false))), false || (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, (false) || false))), false || (_GLF_IDENTITY(false || ((_GLF_IDENTITY(false, (false) || false))), bool(bvec3(false || ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), true)))))) || false))), true, false)))))))) || false)))
                  {
                   for(int _injected_loop_counter = (1 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(floor(injectionSwitch)))).x > injectionSwitch.y))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
      }
     else
      {
       GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.y = subgroup_base;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_19(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) - 0.0)), _GLF_struct_16(1, ivec2(1), mat2x3(1.0), 1), _GLF_struct_17(uvec4(1u), 1u, mat2x4(1.0), ivec3(1)), _GLF_struct_18(vec2(1.0))), ivec3(1), bvec4(true), workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid) | uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid) | uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(68550u, 157064u, 155707u, 53679u)) : (GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid) | uvec4(0u, 0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? false ? _GLF_FUZZED(uvec4(68550u, 157064u, 155707u, 53679u)) : (GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid) | uvec4(0u, 0u, 0u, 0u) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid)))))) - uvec4(0u, 0u, 0u, 0u))).y + GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.z, _GLF_struct_21(1, mat2x4(1.0), _GLF_struct_20(uvec4(1u), vec3(1.0), mat4(1.0), ivec2(1), ivec4(1), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u)))) + (uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u)))), mat4(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -97123)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)))) ? _GLF_FUZZED(degrees(28.19)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), injectionSwitch.y))))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))), true && (! (bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))))), (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), int(4))), clamp((0 << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), 0 ^ ((0 << _GLF_IDENTITY(int(4), int(4))))), (0 << _GLF_IDENTITY(int(4), int(4))))) | (int(0)))))); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), max((0 << _GLF_IDENTITY(int(0), int(0))), (0 << _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, sin(0.0), 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y)))).y))))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
                                            {
                                             do
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                      {
                                                       GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.w = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ (~ (_GLF_struct_replacement_22.virtual_gid))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_struct_replacement_22.virtual_gid), min((_GLF_struct_replacement_22.virtual_gid), (_GLF_struct_replacement_22.virtual_gid))))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ (~ (_GLF_struct_replacement_22.virtual_gid))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ (~ (_GLF_struct_replacement_22.virtual_gid))), min(_GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ (~ (_GLF_struct_replacement_22.virtual_gid))), _GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ (~ (_GLF_struct_replacement_22.virtual_gid))))), _GLF_IDENTITY(_GLF_struct_replacement_22.virtual_gid, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_struct_replacement_22.virtual_gid)), 0u | ((~ (_GLF_struct_replacement_22.virtual_gid)))), (_GLF_IDENTITY((~ (_GLF_struct_replacement_22.virtual_gid)), 0u | ((~ (_GLF_struct_replacement_22.virtual_gid))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) / 1u);
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y))))) && true), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), false || (! (true && (injectionSwitch.x > injectionSwitch.y)))))))))));
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         atomicStore(write_val, uint(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.w), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(237.930), _GLF_FUZZED(-3.9)), bvec2(false, false))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), vec2(mat4x3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(237.930), _GLF_FUZZED(-3.9)), bvec2(false, false))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))).x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), min((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (0 | 0))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), max(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), float(vec3(float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)), 0.0, 1.0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = ((0 | 1) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), true))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))) || false)) || false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bool(true)))), (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_4(uvec3(1u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), max(1u, 1u))), 1.0, _GLF_struct_3(_GLF_IDENTITY(ivec3(1), ivec3(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, 0) | (ivec3(_GLF_IDENTITY(1, (1) ^ 0)))), mat2x4(1.0), mat2x4(1.0)), vec3(1.0), bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), false || (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), false))))))))), vec4(1.0), _GLF_struct_7(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_struct_5(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(-985.867)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), mat2x3(1.0), vec2(1.0), mat3x4(1.0), mat4x2(1.0), bvec4(_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(true, bool(bool(true)))), bvec3(true), _GLF_struct_6(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(8.4), min(_GLF_FUZZED(8.4), _GLF_FUZZED(8.4))) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0)))), clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0))), clamp((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(8.4), min(_GLF_IDENTITY(_GLF_FUZZED(8.4), min(_GLF_FUZZED(8.4), _GLF_FUZZED(8.4))), _GLF_FUZZED(8.4))) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : _GLF_IDENTITY(1.0, max(1.0, 1.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(8.4), mix(float(_GLF_FUZZED(5.0)), float(_GLF_FUZZED(8.4)), bool(true))) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0)))))))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(injectionSwitch, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.23), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(631.780)), bvec2(true, false))).x), 0.0, 1.0, sqrt(1.0)))).y)) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)))), float(_GLF_FUZZED(469.231)), bool(false))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0, 1.0)))))))), (true ? _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(23.41) : 1.0)))) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-775.810, (false ? _GLF_FUZZED(clamp(-551.250, 9814.7589, -466.712)) : -775.810)), mix(float(-775.810), float(_GLF_IDENTITY(_GLF_FUZZED(-893.841), (_GLF_IDENTITY(_GLF_FUZZED(-893.841), (_GLF_FUZZED(-893.841)) - sin(0.0))) - 0.0)), bool(false))))))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : 1u), ((false ? _GLF_FUZZED(workgroup_base) : 1u)) / 1u)))), _GLF_IDENTITY(1u, (1u) | 0u))), (_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(workgroup_id, subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (0u & 139854u) | (1u)), (1u) | _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_IDENTITY(_GLF_FUZZED(write_val), max(_GLF_IDENTITY(_GLF_FUZZED(write_val), (_GLF_FUZZED(write_val)) / 1u), _GLF_FUZZED(write_val))))))))) | (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) | 0u)))))), mat2x3(1.0), ivec2(1), mat2(1.0)), uvec2(1u), 1u), mat3x2(1.0), _GLF_struct_11(_GLF_struct_8(vec4(1.0)), _GLF_struct_9(vec3(1.0), bvec4(true), vec4(1.0)), _GLF_struct_10(mat2x4(1.0), vec2(1.0))), _GLF_struct_14(_GLF_struct_12(vec2(1.0), bvec4(true), vec4(1.0), uvec3(1u)), mat3x4(1.0), uvec4(1u), _GLF_struct_13(mat3x2(1.0), ivec4(_GLF_IDENTITY(1, 0 ^ (1))), true, mat3x4(1.0), ivec4(1), mat3x2(1.0), 1.0)), atomicLoad(write_val, 4, 64, 2));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = (int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0)), max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0), max(_GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0), min(max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0), max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0))), max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.2) : 1.0)), 1.0)))), injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-949.009)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))), 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0)))), vec3(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) + (0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0)))), vec3(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) + (0.0), mix(float(_GLF_FUZZED(9.1)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0 + (0.0), mix(float(0.0 + (0.0)), float(_GLF_FUZZED(-96.86)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + log(1.0))), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0)))), 0.0, 1.0, 1.0, exp(0.0)))), vec3(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) + (0.0)), bool(true))) : _GLF_FUZZED(-8073.7107)))), injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.1) : 1.0)), 0.0), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0)), dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(mat2x4(vec3(0.0, 1.0, 0.0), 0.0, abs(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, exp(0.0)), vec2(0.0, sqrt(1.0))), dot(vec2(0.0, exp(0.0)), vec2(0.0, sqrt(1.0))))))), vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mix(vec3(2.4, -554.046, -34.85), vec3(8.2, 5870.7203, 2744.6488), -32.91)) : _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) + sqrt(vec3(0.0, 0.0, 0.0))))), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0)))), vec3(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) + (0.0)), injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 1.0, 0.0)), min(mat3(1.0) * (vec3(0.0, 1.0, 0.0)), mat3(1.0) * (vec3(0.0, 1.0, 0.0))))), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-50.91) : 1.0)))), 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(_GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float((ivec2(-21471, 82333) == ivec2(74276, 80078))))), bool(false)))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.8)), (float(_GLF_FUZZED(-2.8))) - length(abs(vec3(0.0, 0.0, 0.0)))), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0))), clamp(vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-68.98)), bool(false))), 1.0)) * (1.0))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(-2.8)), (float(_GLF_FUZZED(-2.8))) - length(abs(vec3(0.0, 0.0, 0.0)))), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0))), vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) / abs(sqrt(vec3(1.0, 1.0, 1.0)))), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), (false ? _GLF_FUZZED(552.218) : _GLF_IDENTITY(1.0, 1.0 * (1.0))))), float(_GLF_FUZZED((- 6.5))), bool(false)))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(-2.8)), (float(_GLF_FUZZED(-2.8))) - length(abs(vec3(0.0, 0.0, 0.0)))), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0))), vec3(mat4(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3196.1434)), bool(false))), 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, abs(_GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(-2.8)), (float(_GLF_FUZZED(_GLF_IDENTITY(-2.8, float(mat2x3(_GLF_IDENTITY(-2.8, min(-2.8, -2.8)), 0.0, 0.0, 1.0, 1.0, 1.0)))))) - length(abs(vec3(0.0, 0.0, 0.0)))), bool(false))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0)))))), vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(10.76)), float(1.0), bool(true))), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) + (0.0)), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0)), mix(float(_GLF_FUZZED(36.93)), float(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))))), bool(true))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))), 0.0))), vec3(mat4(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))))))), float(mat3x4(determinant(mat2(1.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))))))), log(1.0), 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, 0.0, exp(0.0), 0.0, 1.0, 0.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, exp(0.0)))), vec3(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) + (0.0)), injectionSwitch.x))) - 0)) >> 0)) - 0)); _injected_loop_counter --)
                                        {
                                         do
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) | 0)); _injected_loop_counter --)
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, _GLF_IDENTITY(false, true && (false)), true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_IDENTITY(false, true && (false)), true))) || false)))
                                                  {
                                                   for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ (-99040 & 0), 0 | (0 ^ (-99040 & 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           do
                                                            {
                                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                                              {
                                                               do
                                                                {
                                                                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false); _injected_loop_counter --)
                                                                  {
                                                                   do
                                                                    {
                                                                     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) + 0, ((0) + 0) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.2)), vec2(_GLF_FUZZED(-6.7), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-56.66))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-56.66))))))), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), false)))))
                                                                        {
                                                                        }
                                                                       else
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                                            {
                                                                            }
                                                                           else
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                              {
                                                                              }
                                                                             else
                                                                              {
                                                                               buf[GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_11num_workgroupsubgroup_basesubgroup_local_idvirtual_gid.w] = uint(subgroupAllEqual(_GLF_struct_replacement_15.read_val));
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                   while(_GLF_WRAPPED_LOOP(false));
                                                                  }
                                                                }
                                                               while(_GLF_WRAPPED_LOOP(false));
                                                              }
                                                            }
                                                           while(_GLF_WRAPPED_LOOP(false));
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(_GLF_IDENTITY(bool(true && (false)), (bool(_GLF_IDENTITY(true, (true) && true) && (false))) || false))))));
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0)), mat4x3(mat4(transpose(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5020.8222) : 0.0)))), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x), 1.0, 0.0, 1.0, 1.0))))))))) > injectionSwitch.y))));
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))), false)))) || false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))));
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
}
