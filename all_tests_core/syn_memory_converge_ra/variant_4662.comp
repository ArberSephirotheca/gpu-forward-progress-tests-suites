#version 460
struct _GLF_struct_8 {
 mat2x4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 mat4 _f1;
 uvec2 _f2;
 bvec4 _f3;
 bvec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 vec3 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 int _f1;
 bool _f2;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 bvec4 _f1;
 uvec2 _f2;
 float _f3;
 float _f4;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 mat3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 uvec2 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_5 _f2;
 uint num_workgroup;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(uvec3(1u), _GLF_struct_0(mat4(1.0), uvec2(1u), mat3x2(1.0)), _GLF_struct_5(bvec2(true), _GLF_struct_1(mat3x2(1.0), bvec4(true), uvec2(1u), 1.0, 1.0), _GLF_struct_2(ivec4(1), 1, true), _GLF_struct_3(bvec3(true), bvec2(true)), _GLF_struct_4(uvec4(1u)), mat3(1.0), uvec4(1u)), gl_NumWorkGroups.x, _GLF_struct_7(bvec2(true), vec3(1.0), _GLF_struct_6(ivec4(1), mat4(1.0), uvec2(1u), bvec4(true), bvec4(true), mat2(1.0))), _GLF_struct_8(mat2x4(1.0), bvec4(true)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 4);
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
