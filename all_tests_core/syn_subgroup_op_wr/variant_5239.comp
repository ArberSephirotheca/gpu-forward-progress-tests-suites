#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 | (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(! (! (false)), false, false, false)), (bool(bvec4(! (! (false)), false, false, false))) && true))), true)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true))), false))) && true, true && ((_GLF_DEAD(false)) && true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(61788u, 36983u, 26550u))))) / _GLF_IDENTITY((uvec3(1u, 1u, 1u) | uvec3(0u, 0u, 0u)), min((uvec3(1u, 1u, 1u) | uvec3(0u, 0u, 0u)), (uvec3(1u, 1u, 1u) | uvec3(0u, 0u, 0u))))).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.z = _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(199991u)));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), min(~ (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.x = subgroup_base;
 uint virtual_gid = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.z + GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.x + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(68.96), _GLF_FUZZED(87.68)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))) - vec2(0.0, 0.0)).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, _GLF_IDENTITY(0u + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid)))), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid))))) - 0u))), _GLF_IDENTITY((true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid)))))) : _GLF_FUZZED(subgroup_local_id)), (true ? (true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid)))))) : _GLF_FUZZED(subgroup_local_id)) : _GLF_FUZZED(workgroup_id))))), 0u + ((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid))), (_GLF_IDENTITY(0u + (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u), (_GLF_IDENTITY(0u, 1u * (0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid), (_GLF_IDENTITY(0u + (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid)))), (0u + (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y = virtual_gid)) >> 0u)) << 0u))))) / 1u));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), true), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), true), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), true), false)))))))) && true))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), clamp(_GLF_IDENTITY((1 ^ 0), 0 | ((1 ^ 0))), (1 ^ 0), _GLF_IDENTITY((1 ^ 0), int(ivec3((1 ^ 0), 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(4.5)), float(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0]))), _GLF_IDENTITY(bool(true), true && (bool(true))))), _GLF_FUZZED((+ _GLF_IDENTITY(-800.482, mix(float(_GLF_FUZZED(4.6)), float(_GLF_IDENTITY(-800.482, max(_GLF_IDENTITY(-800.482, min(-800.482, -800.482)), -800.482))), bool(true)))))), vec2(_GLF_FUZZED(-1050.4822), (injectionSwitch)[1]), bvec2(false, true))).y))))), false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), 1.0))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), 1.0))) > injectionSwitch.y)))))))), false, false))))))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.z + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.x) ^ 0u) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 0u)))))))), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 0u)))))))), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))), min(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 0u)))))))), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))), ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 0u)))))))), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))))))));
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 | ((1))) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))), 0 | (1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1))), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1)))) / 1u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1))), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1)))) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1))), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1)))) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1))), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-8258))) | (1)))) / 1u))), uint(_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 | (1))), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53610) : _GLF_IDENTITY(1, (1) << 0))), clamp(1, 1, 1))))), 0 | (1))))))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(6u), uint(6u))), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(6u), uint(6u))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u)))) | 0u), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(6u), uint(6u))), 0u | ((1u << _GLF_IDENTITY(uint(6u), uint(6u))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, clamp(6u, _GLF_IDENTITY(6u, min(6u, 6u)), 6u))), clamp(_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, min(6u, 6u))) ^ 0u)), uint(6u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, clamp(6u, _GLF_IDENTITY(6u, min(6u, 6u)), 6u))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, clamp(_GLF_IDENTITY(6u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(6u, 1u * (6u)))), 6u, 6u))), max(uint(6u), uint(6u))), uint(_GLF_IDENTITY(6u, _GLF_IDENTITY((_GLF_IDENTITY(6u, min(6u, 6u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6u, min(6u, 6u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6u, min(6u, 6u)), 0u | (_GLF_IDENTITY(6u, min(6u, 6u)))), _GLF_IDENTITY(6u, min(6u, 6u)), _GLF_IDENTITY(_GLF_IDENTITY(6u, min(6u, 6u)), (_GLF_IDENTITY(6u, min(6u, 6u))) ^ 0u)))), max((_GLF_IDENTITY(6u, _GLF_IDENTITY(min(6u, 6u), (min(6u, 6u)) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(6u, min(6u, 6u))), (true ? (_GLF_IDENTITY(6u, min(6u, 6u))) : _GLF_FUZZED(subgroup_base)))))) >> 0u) ^ 0u)), uint(6u)))))))) % 2) == _GLF_IDENTITY(0, clamp(0, 0, 0)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.6)), float(0.0), bool(true))), 0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
        {
         subgroupAll(false);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (31229 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.7) : injectionSwitch.x)))) > injectionSwitch.y))))));
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)) || false)))))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), min(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), max((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))) / vec2(1.0, 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), min(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), max((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))) / vec2(1.0, 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), min(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), max((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))) / vec2(1.0, 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), min(_GLF_IDENTITY((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), max((_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))))) / vec2(1.0, 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)))))) / vec2(1.0, 1.0)))).x, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))) / vec2(1.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, round(length(normalize(1.0))) * (0.0))), sqrt(vec2(0.0, 0.0)) + (vec2(0.0, _GLF_IDENTITY(0.0, round(length(normalize(1.0))) * (0.0)))))), vec2(0.0, 0.0) + (injectionSwitch)))) / vec2(1.0, 1.0))).x), float(mat2(max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))) + (injectionSwitch), vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch))), clamp(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch))), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch))), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat2(1.0) * (mat4x2(_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), mix(vec2(_GLF_FUZZED(3274.8312), (vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))[1]), vec2((vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))[0], _GLF_FUZZED(4007.3647)), bvec2(true, false))) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (injectionSwitch)))) / vec2(1.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (_GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (_GLF_IDENTITY(vec2(0.0, 0.0), sqrt(vec2(0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))) + (vec2(0.0, 0.0))) + (injectionSwitch)) + vec2(0.0, _GLF_IDENTITY(0.0, round(length(normalize(1.0))) * (0.0)))), vec2(0.0, 0.0) + (injectionSwitch)))) / vec2(1.0, 1.0))).x), 1.0, 1.0, sqrt(1.0))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))))) / abs(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, ((1.0) - 0.0) - 0.0)), 1.0)), 1.0))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(4.8, -21.65)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-0.2, -373.763)) : _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(4.8, -21.65)), min(_GLF_FUZZED(vec2(4.8, -21.65)), _GLF_FUZZED(vec2(4.8, -21.65)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch)))), min(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(4.8, -21.65)), min(_GLF_FUZZED(vec2(4.8, -21.65)), _GLF_FUZZED(vec2(4.8, -21.65)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch)))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(4.8, -21.65)), min(_GLF_FUZZED(vec2(4.8, -21.65)), _GLF_FUZZED(vec2(4.8, -21.65)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch)))), mix(vec2((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(4.8, -21.65)), min(_GLF_FUZZED(vec2(4.8, -21.65)), _GLF_FUZZED(vec2(4.8, -21.65)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch)))))[0], (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(4.8, -21.65)), min(_GLF_FUZZED(vec2(4.8, -21.65)), _GLF_FUZZED(vec2(4.8, -21.65)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2((+ -3.1))) : injectionSwitch)))))[1]), vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(987.603)), bvec2(false, false))))))))).y))))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))), false))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))).y) ^ (0u | 0u))], 4, 64, _GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, int(ivec4(2, 0, 0, 0))))));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), log(1.0), _GLF_IDENTITY(dot(vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0)), dot(vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0))), 1.0, _GLF_IDENTITY(dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), (mat3x2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), log(1.0), _GLF_IDENTITY(dot(vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0)), dot(vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0))), 1.0, _GLF_IDENTITY(dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))) * mat3(1.0)))) > injectionSwitch.y))))
      barrier();
     read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y, uint(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y, (false ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))], 4, 64, 2);
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (false))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    barrier();
  }
 atomicStore(checker[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_basevirtual_gidworkgroup_base.y], _GLF_IDENTITY(read, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(read, 0u + (_GLF_IDENTITY(read, 1u * (read)))), _GLF_IDENTITY(uint(uint(read)), (uint(uint(read))) >> (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(workgroup_base) : uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), uint(uvec4(uint(_GLF_IDENTITY(5u, (5u) | 0u)), 0u, 0u, 1u))))))), 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)), ((_GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)), ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)))))), 1u, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)), ((_GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)), ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)))))), 1u, 1u)), uint(uint(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)), ((_GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)), ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)))))), 1u, 1u)))))), (~ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)), ((_GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)), ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)))))), 1u, 1u)), uint(uint(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)), ((_GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)), ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u | (0u)))), 0u ^ (uint(uint(_GLF_IDENTITY(0u, 0u | (0u))))))) - 0u))) >> 0u)))))), 1u, 1u))))))) + 0u)))) / 1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, ((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u) ^ 0u)) | ((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u)), uint(uvec2((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, 1u))))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, ((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u) ^ 0u)) | ((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u)), uint(uvec2((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, 1u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, ((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u) ^ 0u)) | ((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u)), uint(uvec2((_GLF_IDENTITY(0u, (0u) >> 0u)) / 1u, 1u)))))))))))))), _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) | 0) : _GLF_FUZZED(-55820))), 64, 4);
}
