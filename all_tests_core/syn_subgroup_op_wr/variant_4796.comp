#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 uvec4 _f0;
 vec2 _f1;
 int _f2;
 bvec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 mat2 _f1;
 bvec2 _f2;
 ivec3 _f3;
 uvec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec4 _f2;
 vec3 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 _GLF_struct_3 _f1;
 uvec3 _f2;
 uvec3 _f3;
 mat3x4 _f4;
 mat3 _f5;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  {
  }
 else
  {
   GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.z * GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(67518))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base;
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x;
 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y = virtual_gid;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat3x4(1.0), _GLF_struct_3(_GLF_struct_0(mat4x3(1.0)), _GLF_struct_1(ivec2(1), mat2(1.0), bvec2(true), ivec3(1), uvec2(1u), vec4(1.0)), ivec4(1), vec3(1.0), _GLF_struct_2(uvec4(1u), vec2(1.0), 1, bvec4(true), vec4(1.0))), uvec3(1u), uvec3(1u), mat3x4(1.0), mat3(1.0), GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y + ((GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x + 1) % GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y));
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_struct_replacement_4.next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y], 4, 64, 0);
 do
  {
   if(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x + 1 < GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y)
    {
     atomicStore(checker[GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y], read, 4, 64, 4);
     subgroupAll(false);
    }
   else
    {
     atomicStore(checker[GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(true);
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
