#version 460
struct _GLF_struct_10 {
 uvec2 _f0;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
} ;

struct _GLF_struct_11 {
 bvec2 _f0;
 _GLF_struct_9 _f1;
 mat2x3 _f2;
 ivec2 _f3;
 _GLF_struct_10 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_7 {
 float _f0;
 mat2x3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 ivec2 _f1;
 vec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_5 {
 bool _f0;
 ivec4 _f1;
 bool _f2;
 mat2x3 _f3;
 vec3 _f4;
 uvec2 _f5;
 int _f6;
} ;

struct _GLF_struct_8 {
 uint _f0;
 _GLF_struct_5 _f1;
 mat4x2 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 _GLF_struct_2 _f1;
 bvec4 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 vec4 _f1;
 mat2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_1 {
 bool _f0;
 _GLF_struct_0 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 uint workgroup_base;
 mat3x2 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_4 _f3;
 vec4 _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_11 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(vec2(1.0), workgroup_size * workgroup_id, mat3x2(1.0), _GLF_struct_1(true, _GLF_struct_0(mat2(1.0), vec4(1.0), mat2(1.0), mat3(1.0)), mat4(1.0)), _GLF_struct_4(mat3(1.0), _GLF_struct_2(uvec3(1u), mat4x2(1.0), bvec2(true), mat3(1.0)), bvec4(true), _GLF_struct_3(mat3x2(1.0))), vec4(1.0), _GLF_struct_8(1u, _GLF_struct_5(true, ivec4(1), true, mat2x3(1.0), vec3(1.0), uvec2(1u), 1), mat4x2(1.0), _GLF_struct_6(ivec2(1), ivec2(1), vec3(1.0), uvec4(1u)), _GLF_struct_7(1.0, mat2x3(1.0), vec3(1.0)), mat2x3(1.0)), _GLF_struct_11(bvec2(true), _GLF_struct_9(mat3(1.0)), mat2x3(1.0), ivec2(1), _GLF_struct_10(uvec2(1u)), bvec4(true)));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_struct_replacement_12.workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_12.workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
