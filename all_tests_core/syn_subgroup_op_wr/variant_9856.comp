#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 mat3 _f0;
 uint num_workgroup;
 float _f1;
 vec3 _f2;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 ivec3 _f1;
 vec4 _f2;
 uint _f3;
 mat3 _f4;
 mat4x3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 mat3 _f1;
 uvec3 _f2;
 mat2 _f3;
 uvec4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_12 {
 float _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 uvec2 _f3;
 ivec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 uvec3 _f1;
 bool _f2;
 uint _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 vec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 float _f2;
 _GLF_struct_10 _f3;
 uvec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_11 _f0;
 mat3x4 _f1;
 _GLF_struct_15 _f2;
 mat4x2 _f3;
 mat3 _f4;
 _GLF_struct_16 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 uint _f1;
 vec3 _f2;
 uvec2 _f3;
 uint _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 vec4 _f2;
 bvec4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 uvec3 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_6 _f4;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_11(_GLF_struct_8(mat4(1.0)), _GLF_struct_9(bvec4(true), vec3(1.0), mat3(1.0)), 1.0, _GLF_struct_10(vec3(1.0), uvec3(1u), true, 1u, ivec2(1)), uvec4(1u), ivec2(1)), mat3x4(1.0), _GLF_struct_15(_GLF_struct_12(1.0), _GLF_struct_13(mat4x3(1.0), mat3(1.0), uvec3(1u), mat2(1.0), uvec4(1u), mat4x3(1.0)), _GLF_struct_14(mat2x3(1.0), ivec3(1), vec4(1.0), 1u, mat3(1.0), mat4x3(1.0), mat4(1.0)), uvec2(1u), ivec4(1), bvec2(true)), mat4x2(1.0), mat3(1.0), _GLF_struct_16(mat3(1.0), gl_NumWorkGroups.x, 1.0, vec3(1.0)), bvec2(true));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(ivec4(1), _GLF_struct_0(uvec3(1u), uvec2(1u))), _GLF_struct_2(mat4(1.0)), uvec3(1u), _GLF_struct_3(bvec3(true)), _GLF_struct_6(_GLF_struct_4(bvec2(true), 1u, vec3(1.0), uvec2(1u), 1u, mat4x3(1.0)), _GLF_struct_5(mat3(1.0)), vec4(1.0), bvec4(true), mat2(1.0)), gl_WorkGroupSize.x);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_7.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((89570 & 0) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(bitfieldInsert(-1485, 79589, 64233, 11387)) : int(8)))))); _injected_loop_counter --)
      {
       subgroupAll(false);
      }
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   else
    {
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           read = atomicLoad(buf[virtual_gid], 4, 64, 2);
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
