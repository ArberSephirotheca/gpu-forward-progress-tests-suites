#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 bvec4 _f0;
 bvec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
} ;

struct _GLF_struct_0 {
 bool _f0;
 bool _f1;
 mat2x3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 bvec4 _f1;
 mat2 _f2;
 _GLF_struct_1 _f3;
 uint subgroup_size;
 uint _f4;
 mat4x3 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) - 0)) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(_GLF_struct_0(true, true, mat2x3(1.0), mat2x4(1.0)), bvec4(true), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), clamp(_GLF_IDENTITY((1.0), max((1.0), (1.0))), (1.0), (1.0))))) + 0.0)) / 1.0)), _GLF_struct_1(vec3(_GLF_IDENTITY(1.0, (1.0) + 0.0))), gl_SubgroupSize, 1u, mat4x3(1.0), _GLF_struct_2(bvec4(true), _GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))))))))), vec3(1.0))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (true ? _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)) : _GLF_FUZZED(uvec3(69682u, 184172u, 63292u)))).x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), 1 * ((1))) / 1)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false))) || false)));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 & 92846); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(179.473)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))) / vec2(1.0, 1.0)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_4._f0.subgroup_size, (subgroup_id * _GLF_struct_replacement_4._f0.subgroup_size) | (subgroup_id * _GLF_struct_replacement_4._f0.subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))) || false)), true && (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, false || (false)), true))))))))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) | 0u, ((subgroup_base) | 0u) | _GLF_IDENTITY(((subgroup_base) | 0u), (((subgroup_base) | 0u)) - 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_4._f0.subgroup_size);
 if(_GLF_DEAD(false))
  return;
 uint read = 0;
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch[1], 1.0, sqrt(1.0), 0.0, 0.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch[1], 1.0, sqrt(1.0), 0.0, 0.0, 0.0)))), min(float(_GLF_IDENTITY(mat3x2(injectionSwitch[1], 1.0, sqrt(1.0), 0.0, 0.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch[1], 1.0, sqrt(1.0), 0.0, 0.0, 0.0)))), float(_GLF_IDENTITY(mat3x2(injectionSwitch[1], 1.0, sqrt(1.0), 0.0, 0.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch[1], 1.0, sqrt(1.0), 0.0, 0.0, 0.0))))))))))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3.6, -1578.2872)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)))).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, true, true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), clamp((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), (1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), (1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, 0 | (4)))), 0, 1, (0 >> _GLF_IDENTITY(int(0), int(0)))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec3(_GLF_IDENTITY(4, min(4, 4)), 1, 1))), int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), (_GLF_IDENTITY(4, 0 | (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), 0 | (_GLF_IDENTITY(4, 0 | (4)))))))), 0, 1, (0 >> _GLF_IDENTITY(int(0), int(0)))))))), (_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 0, 0, 1), (ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))), int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, 0 | (4)))), 0, 1, (0 >> _GLF_IDENTITY(int(0), int(0))))))))) - 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), ~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))) ^ 0, ((((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))) ^ 0) ^ 0))))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 1, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))))) * (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))))) | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(atomicAdd(_injected_loop_counter, 62429))))), (int(4)) | (int(4))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))) >> _GLF_IDENTITY(int(4), int(4)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), 0 + (0 | (4)))))), 0, 1, (0 >> _GLF_IDENTITY(int(0), int(0))))))))), clamp(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), 0 + (0 | (4)))))), 0, 1, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ 0)))))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (int(4)) + 0), int(4))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), 0 + (0 | (4)))))), 0, 1, (0 >> _GLF_IDENTITY(int(0), int(0))))))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), 0 + (0 | (4)))))), 0, 1, (0 >> _GLF_IDENTITY(int(0), int(0))))))))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), ~ (~ (max(int(4), int(4)))))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(11423)))) + 0)) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))), 1 * (((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (false ? _GLF_IDENTITY(_GLF_FUZZED(-49317), (_GLF_FUZZED(-49317)) / 1) : 4))), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(4)))))) | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) ^ 0))))))) >> _GLF_IDENTITY(int(4), int(4))))))) || false); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY((subgroup_local_id % 2), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(((subgroup_local_id % 2)), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) << 0u)), uint(uint((subgroup_local_id % 2)))))) | _GLF_IDENTITY((((subgroup_local_id % 2))), 0u ^ ((((subgroup_local_id % 2))))))), (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)), max((_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)), (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)))) ^ 0u, (_GLF_IDENTITY((_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)), max((_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)), (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)))) ^ 0u) | (_GLF_IDENTITY((_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)), max((_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)), (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)) | 0u, (1u & 1u) * (0u | 0u))) | (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))))))) + 0u)))) ^ 0u)))) ^ 0u)) == 0)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, ~ (~ (8)))), _GLF_IDENTITY(int(8), (int(8)) | _GLF_IDENTITY(0, max(0, 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), true && (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), true && (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))), false, true)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * cos(0.0)))) + (injectionSwitch.y))), float(_GLF_FUZZED((_GLF_IDENTITY(3486.9497 * -60.56, (3486.9497 * -60.56) - 0.0)))), bool(_GLF_IDENTITY(false, true && (false)))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
      return;
     subgroupAll(false);
     do
      {
       _GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (true ? _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u) : _GLF_FUZZED(subgroup_id))), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) << 0u)), (~ (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) * 1u))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (buf[virtual_gid]), (~ (buf[virtual_gid])) << 0u), uint(_GLF_IDENTITY(uvec2(~ (buf[virtual_gid]), 1u), (true ? uvec2(~ (buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))]), 1u) : _GLF_FUZZED(uvec2(195684u, 170930u)))))))), 4, 64, 2), (read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), 4, _GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (~ (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (_GLF_IDENTITY(~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), ~ (~ (~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))))))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (int(_GLF_IDENTITY(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))), (ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))) | ivec3(0, 0, 0)))) - 0)))))) + 0)))))), clamp(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), 4, _GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (~ (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (_GLF_IDENTITY(~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), ~ (~ (~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))))))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (int(_GLF_IDENTITY(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))), (ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))) | ivec3(0, 0, 0)))) - 0)))))) + 0)))))), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), 4, _GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (~ (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (_GLF_IDENTITY(~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), ~ (~ (~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))))))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (int(_GLF_IDENTITY(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))), (ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))) | ivec3(0, 0, 0)))) - 0)))))) + 0)))))), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), 4, _GLF_IDENTITY(64, (64) << 0), _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (~ (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(_GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (_GLF_IDENTITY(~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), ~ (~ (~ (int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))))))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), max(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), (int(_GLF_IDENTITY(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))), (ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))) | ivec3(0, 0, 0)))) - 0)))))) + 0)))))))), 0u ^ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, (true ? _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u) : _GLF_FUZZED(128739u)))))]) / 1u), 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8))))), ~ (~ (_GLF_IDENTITY(int(ivec3(2, 1, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) ^ 0)))), _GLF_IDENTITY((int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), int(ivec3((int(ivec3(2, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), 0, 1))) + 0))))))))) - 0u)) / 1u);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         break;
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            continue;
           if(_GLF_DEAD(false))
            break;
           break;
           if(_GLF_DEAD(false))
            return;
          }
         continue;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        continue;
       read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (true ? atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | (4)), 64, 2) : _GLF_IDENTITY(_GLF_FUZZED(read), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (_GLF_FUZZED(read)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-222.548)), (true ? float(_GLF_FUZZED(-222.548)) : _GLF_FUZZED(356.759))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)) || false))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 subgroupBarrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true, false), bvec3(bvec4(bvec3(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec3(_GLF_IDENTITY(int(6), int(6)), 1, 1)))) >> _GLF_IDENTITY(int(5), int(5))) ^ (4)), 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))
        continue;
       break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec4(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), false, true))))), true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true))), false)))))));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
