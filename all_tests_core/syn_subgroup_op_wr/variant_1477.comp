#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u) << 0u))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) >> 0u)) / 1u) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))), 1u), uvec2(uvec4(uvec2((subgroup_local_id), 1u), 1u, 0u)))), clamp(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))), 1u), uvec2(uvec4(uvec2((subgroup_local_id), 1u), 1u, 0u)))), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))), 1u), uvec2(uvec4(uvec2((subgroup_local_id), 1u), 1u, 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))), 1u), uvec2(uvec4(uvec2((subgroup_local_id), 1u), 1u, 0u)))), 0u | (uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))), 1u), uvec2(uvec4(uvec2((subgroup_local_id), 1u), 1u, 0u))))))))) | (subgroup_local_id)), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) | 0u), uint(_GLF_IDENTITY(uvec2((subgroup_local_id), 1u), uvec2(uvec4(uvec2((subgroup_local_id), 1u), 1u, 0u))))) | (subgroup_local_id))) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, (0u ^ 0u), 0u), uvec3(uvec3(uvec3(subgroup_size, (0u ^ 0u), 0u)))))));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, max(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) | (uint(uvec2(read, 1u)))), (_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) | (uint(uvec2(read, 1u))))) << 0u)), read)), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
