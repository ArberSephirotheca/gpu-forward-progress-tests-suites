#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 mat4x2 _f0;
 mat3 _f1;
 uint _f2;
 uvec2 _f3;
 mat3x4 _f4;
 mat4 _f5;
 uint _f6;
} ;

struct _GLF_struct_15 {
 float _f0;
 uint subgroup_size;
 ivec2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_17 {
 mat3 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 mat4x2 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_13 {
 bool _f0;
} ;

struct _GLF_struct_12 {
 mat4x3 _f0;
 ivec4 _f1;
 vec2 _f2;
 uvec2 _f3;
 mat3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_10 {
 mat2x4 _f0;
 vec4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_18 {
 mat3x2 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_9 {
 uint subgroup_base;
 _GLF_struct_8 _f0;
 mat3x4 _f1;
 mat4x2 _f2;
 float _f3;
} ;

struct _GLF_struct_5 {
 uint workgroup_base;
 bool _f0;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 _GLF_struct_3 _f1;
 vec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 mat3x4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 mat2x3 _f1;
 int _f2;
 float _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 mat4x3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 mat3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(mat3x2(1.0), _GLF_struct_14(_GLF_struct_10(mat2x4(1.0), vec4(1.0), uvec4(1u)), _GLF_struct_11(bvec4(true), mat2x4(1.0)), _GLF_struct_12(mat4x3(1.0), ivec4(1), vec2(1.0), uvec2(1u), mat3(1.0), mat4x3(1.0)), _GLF_struct_13(true), bvec3(true)), _GLF_struct_17(mat3(1.0), mat4x3(1.0), bvec4(true), mat4x2(1.0), _GLF_struct_15(1.0, gl_SubgroupSize, ivec2(1), mat2x4(1.0)), _GLF_struct_16(mat4x2(1.0), mat3(1.0), 1u, uvec2(1u), mat3x4(1.0), mat4(1.0), 1u)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(_GLF_struct_0(ivec4(1), mat2x3(1.0), 1, 1.0), _GLF_struct_1(mat3(1.0), mat3x4(1.0), vec4(1.0)), mat2(1.0)), mat4x3(1.0), _GLF_struct_4(uvec3(1u), _GLF_struct_3(uvec2(1u), mat2x4(1.0)), vec4(1.0), uvec2(1u)), _GLF_struct_5(workgroup_size * workgroup_id, true), mat3(1.0));
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(subgroup_id * _GLF_struct_replacement_18._f2._f4.subgroup_size, _GLF_struct_8(_GLF_struct_7(mat4x2(1.0))), mat3x4(1.0), mat4x2(1.0), 1.0);
 uint virtual_gid = _GLF_struct_replacement_6._f3.workgroup_base + _GLF_struct_replacement_9.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_6._f3.workgroup_base + _GLF_struct_replacement_9.subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_18._f2._f4.subgroup_size);
 uint read = 0;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if((subgroup_local_id % 2) == 0)
    {
     subgroupAll(false);
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   else
    {
     subgroupAll(false);
     do
      {
       read = atomicLoad(buf[virtual_gid], 4, 64, 2);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 subgroupBarrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
