#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2 _f0;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
  }
 else
  {
   GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.w + subgroup_id * GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.z + GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.y;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat2(1.0), GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.w + subgroup_id * GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.z + ((GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1) % GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.z));
 atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   do
    {
     GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.x = read;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1 < GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.z)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.x, 4, 64, 4);
        }
      }
     do
      {
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, 0 | (0)) & -87767)); _injected_loop_counter --)
        {
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_4_1_1_17_2_1_13_3_1_14readsubgroup_local_idsubgroup_sizeworkgroup_base.x, 4, 64, 4);
        }
      }
     else
      {
      }
     subgroupAll(true);
    }
  }
}
