#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 mat4 _f0;
 mat3 _f1;
 ivec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 ivec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_6 {
 uint virtual_gid;
 vec2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 int _f3;
 mat3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_2 {
 uint _f0;
 uvec4 _f1;
 mat4x2 _f2;
 vec2 _f3;
 mat3x4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 int _f1;
 bool _f2;
 bool _f3;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 _GLF_struct_0 _f1;
 ivec3 _f2;
 float _f3;
 mat3x4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 mat4x3 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_6 _f4;
 float _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))), false || (bool(bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.0), _GLF_FUZZED(6.6)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))) && true) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y = subgroup_local_id;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((0 >> _GLF_IDENTITY(int(5), int(5)))))), max(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((0 >> _GLF_IDENTITY(int(5), int(5)))))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((0 >> _GLF_IDENTITY(int(5), int(5)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
              }
            }
           else
            {
            }
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           return;
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), int(ivec3(int(2), 0, 1)))) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -82545)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, tan(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), vec4(0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), vec4(0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0)))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, true, true))), true && (! (bool(bvec4(false, false, true, true))))))))))))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))) || false), ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))) || false), ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))) || false), ! (! (false)))) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED((injectionSwitch / -787.835)))).x > injectionSwitch.y))))
        continue;
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(ivec3((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), 0, 1))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
              break;
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))));
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))), injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-34.40)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(-28.36)), bool(false)))), float(_GLF_FUZZED(-8.7)), bool(false))) : _GLF_FUZZED(-4.2)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), (bool(bvec4(false, true, true, true))) && true))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) || false), true)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))));
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.7)))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), max(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))) - 0), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))) && true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.z = workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))))), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, (1.0) - log(1.0))) * (vec2(_GLF_FUZZED(vec3(_GLF_IDENTITY(-7.1, 1.0 * (-7.1)), 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), vec2(mat3(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))))), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, (1.0) - log(1.0))) * (vec2(_GLF_FUZZED(vec3(_GLF_IDENTITY(-7.1, 1.0 * (-7.1)), 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), sin(0.0), 0.0, abs(0.0), 0.0))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false)))) - 0.0), injectionSwitch.x)) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y) || false)) || false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true))))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 4.2)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0))) * (vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true)))), vec2(1.0, 1.0) * (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0))) * (vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true)))), max(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0))) * (vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true)))), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0))) * (vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true)))), max(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0))) * (vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true)))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.82)), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), (false ? _GLF_FUZZED(vec2(59.38, 0.2)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0))) * (vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]))))), vec2(_GLF_FUZZED(vec3(-7.1, 8.2, 6146.4823).b), (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.2)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), false, false)))) && true))))))))))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) * ((injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))) ? gl_WorkGroupID : _GLF_FUZZED((_GLF_IDENTITY(uvec3(55037u, 181544u, 75583u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uvec3(55037u, _GLF_IDENTITY(181544u, clamp(181544u, 181544u, _GLF_IDENTITY(181544u, (_GLF_IDENTITY(181544u, (181544u) - 0u)) | (181544u)))), _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u)))), ((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))) / 1u))))), uvec3(uvec3(_GLF_IDENTITY(uvec3(55037u, 181544u, 75583u), (false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size) : uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, ~ (~ (75583u))))))))), _GLF_IDENTITY(uvec3(55037u, 181544u, 75583u), uvec3(uvec4(uvec3(55037u, _GLF_IDENTITY(181544u, (false ? _GLF_FUZZED(subgroup_id) : 181544u)), 75583u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uvec3(55037u, 181544u, 75583u)), min(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(num_workgroup) : (0u))) ^ 0u)) - 0u))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))), max((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u)))), (false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))))) / 1u))))), (false ? _GLF_FUZZED(uvec3(4327u, 23667u, 21207u)) : _GLF_IDENTITY(uvec3(55037u, _GLF_IDENTITY(181544u, (181544u) / 1u), _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, clamp((0u) ^ 0u, (0u) ^ 0u, (0u) ^ 0u))))))), ((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(_GLF_IDENTITY(uvec3(75583u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(75583u, 0u, 0u))))))) / 1u))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))), ((false ? _GLF_FUZZED(_GLF_IDENTITY(39309u, (39309u) | (39309u))) : _GLF_IDENTITY(_GLF_IDENTITY(75583u, (75583u) - 0u), uint(uvec3(75583u, 0u, 0u))))) / 1u))))), (uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))), ((false ? _GLF_FUZZED(_GLF_IDENTITY(39309u, (39309u) | (39309u))) : _GLF_IDENTITY(_GLF_IDENTITY(75583u, (75583u) - 0u), uint(uvec3(75583u, 0u, 0u))))) / 1u)))))) + (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))), clamp(uvec3(0u, 0u, 0u) + (uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, _GLF_IDENTITY(0u, max(0u, 0u)) | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(39309u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(39309u))) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))), (false ? _GLF_FUZZED(subgroup_id) : false ? _GLF_IDENTITY(_GLF_FUZZED(39309u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(39309u))) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))))), ((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))) / 1u)))))), uvec3(0u, 0u, 0u) + (uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))), _GLF_IDENTITY(((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))), (true ? _GLF_IDENTITY(((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))), max(((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))), ((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))))) : _GLF_FUZZED((-- workgroup_size)))) / 1u)))))), uvec3(0u, 0u, 0u) + (uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))), ((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))) / 1u))))))))))), uvec3(uvec3(_GLF_IDENTITY(uvec3(55037u, 181544u, 75583u), (false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size) : uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, ~ (~ (75583u))))))))), _GLF_IDENTITY(uvec3(55037u, _GLF_IDENTITY(181544u, max(181544u, 181544u)), 75583u), uvec3(uvec4(uvec3(55037u, 181544u, 75583u), 1u))), uvec3(55037u, 181544u, 75583u)), clamp(_GLF_IDENTITY(uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, 0u | (_GLF_IDENTITY(75583u, _GLF_IDENTITY((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u)))), _GLF_IDENTITY(((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))), ~ (_GLF_IDENTITY(~ (((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u)))))), max(_GLF_IDENTITY(~ (((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u)))))), (~ (((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u))))))) << 0u), ~ (((false ? _GLF_FUZZED(39309u) : _GLF_IDENTITY(75583u, uint(uvec3(75583u, 0u, 0u)))))))))) / 1u))))), uvec3(uvec3(_GLF_IDENTITY(uvec3(55037u, 181544u, 75583u), (false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size) : uvec3(55037u, 181544u, _GLF_IDENTITY(75583u, ~ (~ (75583u))))))))), _GLF_IDENTITY(uvec3(55037u, 181544u, 75583u), uvec3(uvec4(uvec3(55037u, 181544u, 75583u), 1u))), uvec3(55037u, 181544u, 75583u))))) / _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size, uvec3(uvec3(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size))).z)))), gl_WorkGroupID)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3562.5871)), bool(_GLF_IDENTITY(false, (false) && true)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), (false || (false)) && true)) || false))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), true && _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), ! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(true, true && (true)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) || false))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) || false))), bool(bool((! (_GLF_IDENTITY(true, (true) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))), ! (! ((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))))))))))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))), ! (! ((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))))))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(((subgroup_size == subgroup_id) ? uintBitsToFloat(workgroup_id) : -3387.8586)) : injectionSwitch.x)), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (_GLF_IDENTITY((0.0), max((0.0), (0.0)))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), 1.0, 0.0)))) * 1.0)) - sqrt(0.0)), 0.0, 0.0, 1.0, 0.0, length(0.0), 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(895.319), _GLF_FUZZED(-435.629)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x)) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           continue;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           continue;
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * abs(vec2(1.0, 1.0))) * (injectionSwitch)).y))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))) && true))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.8), _GLF_FUZZED(-9.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) || _GLF_IDENTITY(_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bool((! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bool((! (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))) - 0.0) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))) - 0.0) > injectionSwitch.y), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))) - 0.0) > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))) - 0.0) > injectionSwitch.y), false, false))))))))))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = ((((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(1), 0, 1), clamp(ivec3(int(1), 0, 1), ivec3(int(1), 0, 1), ivec3(int(1), 0, 1)))), (int(_GLF_IDENTITY(ivec3(int(1), 0, 1), clamp(ivec3(int(1), 0, 1), ivec3(int(1), 0, 1), ivec3(int(1), 0, 1))))) | (int(_GLF_IDENTITY(ivec3(int(1), 0, 1), clamp(ivec3(int(1), 0, 1), ivec3(int(1), 0, 1), ivec3(int(1), 0, 1))))))))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7)), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7)), min(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7)))))), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))), true && (! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(29.92)), vec2(_GLF_FUZZED(-792.726), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), true, false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(70.82)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), false), true, false)))))), bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(70.82)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), false), true, false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, true))))))))))
          break;
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))) || false)))
            break;
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * cos(vec2(0.0, 0.0)))) / vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), 1.0))) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-640.189, -106.880)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED((-33.61 * _GLF_IDENTITY(-62.20, mix(float(-62.20), float(_GLF_IDENTITY(_GLF_FUZZED(-82.66), max(_GLF_FUZZED(-82.66), _GLF_FUZZED(-82.66)))), bool(false))))), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))) / vec2(1.0, 1.0))) : injectionSwitch)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0))) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-640.189, -106.880)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))[0], ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))[1]), vec2(_GLF_FUZZED((vec4(-3.6, -247.432, 5.5, 742.058).t * -6.9)), _GLF_FUZZED(float(58154))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) / vec2(_GLF_IDENTITY(1.0, (1.0) + log(1.0)), 1.0))) : injectionSwitch)))).x > injectionSwitch.y)), true && (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0))) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-640.189, -106.880)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0))))) : injectionSwitch)))).x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * cos(vec2(0.0, 0.0)))) / vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), 1.0))) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-640.189, -106.880)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED((-33.61 * _GLF_IDENTITY(-62.20, mix(float(-62.20), float(_GLF_FUZZED(-82.66)), bool(false))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) / vec2(1.0, 1.0))) : injectionSwitch)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0))) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-640.189, -106.880)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(_GLF_IDENTITY(1.0, (1.0) + log(1.0)), 1.0))) : injectionSwitch)))).x > injectionSwitch.y)), true && (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))) + vec2(0.0, 0.0)) / vec2(1.0, 1.0), vec2(mat2x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))) + vec2(0.0, 0.0)) / vec2(1.0, 1.0), 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0)))))) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-640.189, -106.880)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), (true ? (injectionSwitch) + vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch))))) / vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0))))) : injectionSwitch)))).x > injectionSwitch.y)))))))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
            break;
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (true && (false)))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec2(int(7), 0)))))); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
          }
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_base = GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.z * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(vec4(1.0), mat4x3(1.0), _GLF_struct_1(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (false ? _GLF_FUZZED(uvec4(163786u, 159487u, 127247u, 147004u)) : uvec4(1u))), _GLF_IDENTITY(uvec4(1u), min(uvec4(1u), uvec4(1u))))), _GLF_struct_0(mat4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4697.7106) : 1.0)), clamp(1.0, 1.0, 1.0))))), 1, true, true), ivec3(1), 1.0, mat3x4(1.0), mat3x2(1.0)), _GLF_struct_3(_GLF_struct_2(1u, uvec4(1u), mat4x2(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))), vec2(1.0), mat3x4(1.0), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(841.099, (true ? 841.099 : _GLF_FUZZED(-9.9)))) : _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-8.6)), float(float(vec4(1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_struct_6(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)), ~ (~ (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | 0u)))))) + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x * subgroup_size + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y, vec2(1.0), _GLF_struct_4(bvec4(true), mat4x3(1.0), ivec4(1), ivec3(1), bvec4(_GLF_IDENTITY(true, ! (! (true))))), _GLF_struct_5(mat4(1.0), _GLF_IDENTITY(mat3(1.0), (true ? mat3(1.0) : _GLF_FUZZED((mat3(-199.498, 93.32, -500.378, -2.9, -3.2, -17.76, -345.924, 4766.7577, -5.1) - 7.6)))), _GLF_IDENTITY(ivec2(1), min(ivec2(1), ivec2(1))), bvec2(true)), 1, mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-1181.0372, min(_GLF_IDENTITY(-1181.0372, (_GLF_IDENTITY(false ? _GLF_FUZZED(-66.67) : -1181.0372, min(false ? _GLF_FUZZED(-66.67) : -1181.0372, false ? _GLF_FUZZED(-66.67) : -1181.0372)))), -1181.0372))), (false ? _GLF_FUZZED(-6212.3719) : _GLF_FUZZED(-1181.0372)))), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - sin(length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0)))))), 1.0))), bool(true)))), ivec4(1)), 1.0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x * subgroup_size + _GLF_IDENTITY(((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) % subgroup_size)), min(_GLF_IDENTITY(~ (((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) % subgroup_size)), 0u | (~ (((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) % subgroup_size)))), ~ (((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) % subgroup_size))))), ~ (~ (~ (~ _GLF_IDENTITY((((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1, uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1, (GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) / 1u))))) % subgroup_size)), ((((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1, uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1, (GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1) / 1u))))) % subgroup_size))) - 0u))))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read = atomicLoad(buf[_GLF_struct_replacement_7._f4.virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), min(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(4, (4) ^ 0)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), (_GLF_IDENTITY((4), clamp((4), (4), (4)))) / _GLF_IDENTITY(1, 1 * (1))) | _GLF_IDENTITY((1 ^ _GLF_IDENTITY(1, (1) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) ^ (0 | 0)))) ^ 1), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-66.89, 7612.5334).x)), vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), bvec2(false, true))).y)), 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((_GLF_IDENTITY(1 ^ 1, (true ? 1 ^ 1 : _GLF_FUZZED(-61109)))), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0), ~ (_GLF_IDENTITY(~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) ^ 1), max((1 ^ 1), (1 ^ 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))), clamp(~ (_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, clamp(1 ^ 1, _GLF_IDENTITY(1 ^ 1, (1 ^ 1) ^ 0), _GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))))), max((1 ^ 1), (1 ^ 1)))), ~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))), ~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), _GLF_IDENTITY(ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) << 0)), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), _GLF_IDENTITY(max((1 ^ 1), (1 ^ 1)), (_GLF_IDENTITY(max((1 ^ 1), (1 ^ 1)), (_GLF_IDENTITY(max((1 ^ 1), (1 ^ 1)), (max((1 ^ 1), (1 ^ 1))) >> 0)) | 0)) | (max((1 ^ 1), (1 ^ 1)))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), 1)), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max(_GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), 1 * ((1 ^ 1)))) ^ 0), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), 1)), ~ (~ (ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max(_GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), 1 * ((1 ^ 1)))) ^ 0), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), 1))))), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max(_GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), 1 * ((1 ^ 1)))) ^ 0), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), 1)), ~ (~ (ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max(_GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), 1 * ((1 ^ 1)))) ^ 0), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), 1)))))))) << ivec3(0, 0, 0)))))) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ _GLF_IDENTITY(1, (1) ^ 0)), max((1 ^ 1), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0), (true ? ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0) ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) / 1)))))))) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 0) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(93879, int(int(93879))), 2163, -33231)))))), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (_GLF_IDENTITY(1, 0 | (1)) ^ 1)))))), int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, 13.63)) : injectionSwitch)).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, 13.63)) : injectionSwitch)).y), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, 13.63)) : injectionSwitch)).y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, 13.63)) : injectionSwitch)).y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, 13.63)) : injectionSwitch)).y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, 13.63)) : injectionSwitch)).y)))), 0), (false ? _GLF_FUZZED(ivec3(-88198, _GLF_IDENTITY(94790, (94790) | (94790)), -93832)) : ivec3(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(1 ^ 1), (false ? _GLF_FUZZED(71777) : _GLF_IDENTITY(int(1 ^ 1), max(int(1 ^ 1), int(1 ^ 1)))))), (int(_GLF_IDENTITY(int(1 ^ 1), (false ? _GLF_FUZZED(71777) : _GLF_IDENTITY(int(1 ^ 1), max(int(1 ^ 1), int(1 ^ 1))))))) | 0))))), ~ (~ (_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 1), max((1 ^ 1), _GLF_IDENTITY((1 ^ 1), 0 + (_GLF_IDENTITY((1 ^ 1), _GLF_IDENTITY(0, (0) | (0)) | ((1 ^ 1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))) ^ 1), _GLF_IDENTITY(max((1 ^ 1), (_GLF_IDENTITY(1, (1) * 1) ^ _GLF_IDENTITY(1, clamp(1, 1, 1)))), min(max((1 ^ 1), (_GLF_IDENTITY(1, (1) * 1) ^ _GLF_IDENTITY(1, clamp(1, 1, 1)))), max((1 ^ 1), (_GLF_IDENTITY(1, (1) * 1) ^ _GLF_IDENTITY(1, clamp(1, 1, 1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4)))) / 1, _GLF_IDENTITY(0 | ((_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4)))) / 1), max(_GLF_IDENTITY(0 | ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4))), (_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4)))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4)))))) / 1), (0 | ((_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4)))) / 1)) * int(_GLF_ONE(1.0, injectionSwitch.y))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((4)))), clamp((4), (4), (4)))) / 1))))) | (1 ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), min((4), _GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), clamp((4), (4), (4))), (4))), _GLF_IDENTITY((4), 1 * ((4))), (4)))) / 1) | (1 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) >> 0)), clamp(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp(_GLF_IDENTITY((4), ((4)) + 0), (4), (4)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (clamp((4), (4), (4))), clamp(~ (clamp((_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) >> 0)), clamp((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) >> 0)), clamp((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) / 1)))) >> 0)), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) >> 0)), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), clamp(~ (4), ~ (4), ~ (4)))))) >> 0)))), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), (false ? _GLF_FUZZED(39023) : (~ (4)))))) >> 0)))) | (4))), (4), (4))), ~ (clamp((4), (4), _GLF_IDENTITY((4), 0 ^ (_GLF_IDENTITY((4), ((4)) | ((4))))))), ~ (clamp((4), (4), (_GLF_IDENTITY(4, ~ (~ (4)))))))), (~ (clamp((4), (4), (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) >> 0))))))))) / 1)))) - 0))) / 1) | (1 ^ 1), _GLF_IDENTITY((4), (_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((4)) / 1)), int(ivec3(_GLF_IDENTITY(clamp(_GLF_IDENTITY((4), ((4)) | ((4))), (4), _GLF_IDENTITY((4), ((4)) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((-93082 % -21129)))))), _GLF_IDENTITY(int(ivec4(clamp((4), (4), _GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(((4)) / 1, (false ? _GLF_FUZZED(38245) : _GLF_IDENTITY(((4)) / 1, max(((4)) / 1, ((4)) / 1))))), min(_GLF_IDENTITY((4), ((4)) / 1), _GLF_IDENTITY((4), (_GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) >> 0), (4)))))) / 1)))), 0, 0, 1)), 0 ^ (int(ivec4(clamp((4), (4), _GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(((4)) / 1, (false ? _GLF_FUZZED(38245) : _GLF_IDENTITY(((4)) / 1, max(((4)) / 1, ((4)) / 1))))), min(_GLF_IDENTITY((4), ((4)) / 1), _GLF_IDENTITY((4), ((4)) / 1)))), 0, 0, 1))))), 0, 0))))) / _GLF_IDENTITY(1, (0 | 0) | (1))) | _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, int(_GLF_IDENTITY(int(1 ^ 1), 0 | (int(1 ^ 1)))))), (true ? _GLF_IDENTITY((1 ^ 1), (false ? _GLF_FUZZED(-98054) : (1 ^ 1))) : _GLF_FUZZED(89685))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (4) + 0))), (clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(5.5)) : _GLF_IDENTITY(4, (4) / 1)))))) / 1)), 0 + (_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), int(int(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(89863) : _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4)))))) / 1), min(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (4) + 0))), (clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(5.5)) : _GLF_IDENTITY(4, (4) / 1)))))) / 1)), 0 + (_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), int(int(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(89863) : _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (4) + 0))), (clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(5.5)) : _GLF_IDENTITY(4, (4) / 1)))))) / 1)), 0 + (_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), int(int(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(89863) : _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4)))))) / 1), (_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (4) + 0))), (clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(5.5)) : _GLF_IDENTITY(4, (4) / 1)))))) / 1)), 0 + (_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), int(int(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(89863) : _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4)))))) / 1)) | 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))))), 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))))) / 1), (_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), clamp((4), (4), (4))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), ~ (~ (_GLF_IDENTITY((4), max((4), (4)))))), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), min(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), _GLF_IDENTITY((4), clamp((4), (4), (4))), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), _GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), _GLF_IDENTITY(max(clamp((4), (4), (4)), clamp((4), (4), (4))), (_GLF_IDENTITY(max(clamp((4), (4), (4)), clamp((4), (4), (4))), (false ? _GLF_FUZZED(-25225) : max(clamp((4), (4), (4)), clamp((4), (4), (4)))))) ^ ((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(0), int(0)))))) ^ (1 ^ (1 | 1))))))) / 1))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (_GLF_IDENTITY(4, (4) ^ 0)), (4)))))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (_GLF_IDENTITY(4, (4) ^ 0)), (4))))))) << 0)), 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))))) / 1)) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (4) + 0))), (clamp((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (4) | 0)), (4), (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(5.5)) : _GLF_IDENTITY(4, (4) / 1)))))) / 1)), 0 + (_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), int(int(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(89863) : _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4)))))) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + _GLF_IDENTITY((_GLF_IDENTITY((4), clamp((4), (4), (4)))), ((_GLF_IDENTITY((4), clamp((4), (4), (4))))) >> 0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))))), 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))))) / 1), (_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), _GLF_IDENTITY(clamp((4), (4), (4)), (clamp((4), (4), (4))) | (clamp((4), (4), (4))))))) ^ (1 ^ (1 | 1)))), min(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (_GLF_IDENTITY(4, 0 + (4))), (4))))) ^ (1 ^ (1 | 1)))), _GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1))))))) / 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (_GLF_IDENTITY(4, (4) ^ 0)), (4))))))), 0, 1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)), 0 + (int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)))))))))) / 1)) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((_GLF_IDENTITY(4, (4) | 0)), (4), (_GLF_IDENTITY(4, (4) + 0))), (clamp((_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec3(4, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), (4) | 0)), (4), (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(5.5)) : _GLF_IDENTITY(4, (4) / 1)))))) / 1)), 0 + (_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), int(int(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(89863) : _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4)))))) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (_GLF_IDENTITY(4, min(4, 4))))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(max((4), (4)), int(int(_GLF_IDENTITY(max((4), (4)), _GLF_IDENTITY(int(ivec3(max((4), (4)), 1, 0)), 0 ^ (int(ivec3(max((4), (4)), 1, 0))))))))), clamp((4), (4), (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, 0 + (4))))))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), (_GLF_IDENTITY((4), clamp((4), (4), (4)))) ^ 0), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))))), 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (_GLF_IDENTITY(4, min(4, 4))))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(max((4), (4)), int(int(_GLF_IDENTITY(max((4), (4)), _GLF_IDENTITY(int(ivec3(max((4), (4)), 1, 0)), 0 ^ (int(ivec3(max((4), (4)), 1, 0))))))))), clamp((4), (4), (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, 0 + (4))))))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), (_GLF_IDENTITY((4), clamp((4), (4), (4)))) ^ 0), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))))), 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x))))))))) / 1), (_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (4), (4))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), clamp((4), (4), _GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), min((4), _GLF_IDENTITY((4), ((4)) | ((4))))), (4))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), min(_GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1)), ~ (~ (int(ivec4(4, int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1))))))) >> 0)), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1)))), _GLF_IDENTITY((4), _GLF_IDENTITY(clamp((4), (4), (4)), (_GLF_IDENTITY(clamp((4), (4), (4)), max(clamp((4), (4), (4)), clamp((4), (4), (4))))) ^ (1 ^ (1 | 1))))))) / _GLF_IDENTITY(1, int(ivec3(1, 1, 0)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 0 + (_GLF_IDENTITY((4), clamp((4), (_GLF_IDENTITY(4, (4) ^ 0)), (4))))))), 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))))) / 1)) + 0))))) >> 0)) + 0) | (1 ^ 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), clamp((4), (4), (4)))) / 1) | (1 ^ 1), 0 ^ (_GLF_IDENTITY((4), (_GLF_IDENTITY((4), clamp((4), (4), (4)))) / 1) | (1 ^ 1)))))) - 0)), _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(64, (64) << 0))), 0);
 do
  {
   if(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1 < _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) * 1u))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
            {
             return;
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-31.56)), bool(false))), 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))))) ^ (_injected_loop_counter ++)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     atomicStore(checker[_GLF_struct_replacement_7._f4.virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
     do
      {
       subgroupAll(false);
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))), true && (false))));
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       atomicStore(checker[_GLF_struct_replacement_7._f4.virtual_gid], _GLF_IDENTITY(read, uint(_GLF_IDENTITY(uint(read), (true ? _GLF_IDENTITY(uint(read), (_GLF_IDENTITY(uint(read), (_GLF_IDENTITY(uint(read), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false))), true), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 0.0))))), injectionSwitch.x)) < injectionSwitch.y)), true)))), false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec4(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(81.19)), bool(false))), 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(81.19)), bool(false))), 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(81.19)), bool(false))), 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(81.19)), bool(false))), 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-28.66)), bool(false)))) < injectionSwitch.y, false, true, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))), true))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + tan(0.0)))) < injectionSwitch.y, false, true, true)))), true)))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, true, true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(-8.4) : float(float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)))))))) < injectionSwitch.y, false, true, true)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))), true)))) || false)))))), bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, sqrt(1.0)), max(vec3(injectionSwitch, sqrt(1.0)), vec3(injectionSwitch, sqrt(1.0)))))).x > injectionSwitch.y)), true))))))) || _GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false))))))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), ! (! ((true)))))), false, true)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x < injectionSwitch.y)), true), false, true)))), false, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false, true)))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false, true)))), false, false))))), true, false))), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false, true)))), false, false)), false))))))))))) ? uint(read) : _GLF_IDENTITY(_GLF_FUZZED(65513u), _GLF_IDENTITY((_GLF_FUZZED(65513u)) - 0u, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(65513u)) - 0u, 1u * ((_GLF_FUZZED(65513u)) - 0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(65513u)) - 0u, 1u * ((_GLF_FUZZED(65513u)) - 0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), max((_GLF_IDENTITY((_GLF_FUZZED(65513u)) - 0u, 1u * ((_GLF_FUZZED(65513u)) - 0u))) - uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), abs(1.0), 1.0)))), (_GLF_IDENTITY((_GLF_FUZZED(65513u)) - 0u, 1u * ((_GLF_FUZZED(65513u)) - 0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1u)))))) - 0u)) - 0u) : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(next_virtual_gid, workgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(_GLF_IDENTITY(atomicAdd(next_virtual_gid, workgroup_size), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ (_GLF_IDENTITY(atomicAdd(next_virtual_gid, workgroup_size), (atomicAdd(next_virtual_gid, workgroup_size)) >> 0u))))), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : ~ (_GLF_FUZZED(atomicAdd(next_virtual_gid, workgroup_size)))), ((false ? _GLF_FUZZED(num_workgroup) : ~ (_GLF_FUZZED(atomicAdd(next_virtual_gid, workgroup_size))))) >> 0u)))))))), 4, 64, 4);
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         subgroupAll(true);
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) / 1)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5105.1237), _GLF_FUZZED(6.1)), bvec2(false, false))).y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), true, false)))), _GLF_IDENTITY((bool(bvec2(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), _GLF_IDENTITY(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), (float(mat2(float(mat2(injectionSwitch.y, length(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec3(986.334, 83.75, 0.0).g)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0))), 1.0, abs(0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((3.0))), float(0.0), bool(true)))))) / 1.0))))), true))), ! (! (_GLF_IDENTITY((bool(bvec2(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), max(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), max(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)))))), (float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED((3.0))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED((3.0))), _GLF_IDENTITY(float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), clamp(float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED((3.0))), min(_GLF_IDENTITY(float(_GLF_FUZZED((3.0))), (float(_GLF_FUZZED((3.0)))) * 1.0), float(_GLF_FUZZED((3.0))))), float(_GLF_FUZZED((3.0))))), float(0.0), bool(true)))))) / 1.0))))), true))), false || ((bool(bvec2(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), max(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), max(float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)), float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, 0.0)))))), (float(mat2(float(mat2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED((3.0))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED((3.0))), _GLF_IDENTITY(float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), clamp(float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3(float(_GLF_FUZZED((3.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED((3.0))), min(_GLF_IDENTITY(float(_GLF_FUZZED((3.0))), (float(_GLF_FUZZED((3.0)))) * 1.0), float(_GLF_FUZZED((3.0))))), float(_GLF_FUZZED((3.0))))), float(0.0), bool(true)))))) / 1.0))))), true)))))))) && true))) && true, bool(_GLF_IDENTITY(bvec2((! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, log(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, log(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, log(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, log(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, log(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, true, true))))))), true)), (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true))))) && true))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), true, false)))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2((! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bool(true))))), (bool(_GLF_IDENTITY(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), true))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))))))))))))) && true))) && true, true), bvec2(bvec4(bvec2((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false || ((injectionSwitch.x > injectionSwitch.y)))))))))), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))) && true)), _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)), true)), (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))) && true))) && true, true), false, true))), false)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(67648))) : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))) || false)))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))), (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   do
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bool((false))))))));
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), false, false, true)))), false, true)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), true, false, true)), false))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), false || (bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))), false, false, true)))), false, true)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), true, false, true)), false))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
