#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 0:
     case 29:
     case 3:
     case 96:
     case 64:
     case 93:
     case 26:
     case 77:
     subgroupAll(false);
     case 7:
     case 6:
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     break;
     case 91:
     for(vec2 _GLF_SWITCH_0_0v[15]; true; vec2(4947.8522, -2.8).ttt)
      {
       -4866.2425;
       {
        switch(_GLF_SWITCH(0))
         {
          case 42:
          uint _GLF_SWITCH_1_0v;
          case 68:
          tanh(injectionSwitch);
          case 0:
          case 14:
          -61946;
          while(false)
           {
            vec2 _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
            bool _GLF_SWITCH_0_3v[13], _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
            bvec4 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
           }
          (ceil(vec3(-6437.6991, -8911.7699, 42.39)) * mat2x3(-215.703, 1.8, -9.8, 7.3, -6201.3820, 45.30));
          if(any(notEqual(ivec3(-440, -63011, 76926), ivec3(89844, 66259, 64653))))
           {
            -73284;
            (uvec3(191476u, 174842u, 96841u) - ((false) ? subgroup_base : next_virtual_gid));
            (true ? bvec4(true, false, false, true) : bvec4(false, false, false, false));
            58698;
            uvec3(175011u, 19641u, 9276u);
            mat3x2(0.0, 340.278, -9.2, 9.8, 1.9, 747.036);
           }
          else
           {
            mat4(-2.4, -3180.9695, 2.2, -5.8, -33.18, 223.738, 0.1, 382.777, 33.57, 6.3, -3551.7118, -5106.3755, 8631.8952, -7.3, -264.079, 9.4);
            28662;
           }
          uvec2(180319u, 26038u);
          uvec3(144519u, 54708u, 107608u);
          break;
          case 30:
          false;
          case 6:
          ivec2 _GLF_SWITCH_1_1v[22], _GLF_SWITCH_1_2v;
          default:
          1;
         }
       }
       ivec3 _GLF_SWITCH_0_8v;
       mat2x3(976.295, -2.2, -1483.2539, 713.838, -65.20, -51.85);
       mat3 _GLF_SWITCH_0_9v[62];
      }
     case 66:
     mat3x4(-49.25, -66.23, 6724.6062, 1113.3145, -4.9, -35.71, 5.0, 6.8, -1.4, -9.3, -8.2, 72.80);
     default:
     1;
    }
  }
 else
  {
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
