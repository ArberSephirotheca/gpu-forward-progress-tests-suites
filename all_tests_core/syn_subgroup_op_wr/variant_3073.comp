#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 float _f0;
 uint subgroup_base;
} ;

struct _GLF_struct_23 {
 vec3 _f0;
} ;

struct _GLF_struct_21 {
 mat4 _f0;
 bvec4 _f1;
 ivec3 _f2;
 uint _f3;
 float _f4;
 mat3 _f5;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
 uint workgroup_size;
 uvec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 vec2 _f1;
 uint _f2;
 bool _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 mat2x4 _f1;
 mat4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 _GLF_struct_19 _f1;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 mat4 _f1;
 mat3x2 _f2;
 _GLF_struct_22 _f3;
 _GLF_struct_23 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 uvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_14 {
 uint _f0;
 bvec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_13 {
 uint _f0;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 bvec4 _f1;
 bvec2 _f2;
 uvec4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
 bool _f4;
 float _f5;
} ;

struct _GLF_struct_10 {
 uvec3 _f0;
 ivec3 _f1;
 ivec2 _f2;
 mat4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_9 {
 float _f0;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
} ;

struct _GLF_struct_7 {
 mat2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 uvec3 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 uvec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_17 {
 _GLF_struct_6 _f0;
 uint num_workgroup;
 bvec2 _f1;
 vec3 _f2;
 int _f3;
 mat4x3 _f4;
 _GLF_struct_11 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 mat2 _f1;
 uvec2 _f2;
 mat2x3 _f3;
 uvec3 _f4;
 mat2x4 _f5;
 int _f6;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 ivec2 _f1;
 bvec4 _f2;
 float _f3;
 mat3 _f4;
 bvec2 _f5;
 float _f6;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 mat3x2 _f1;
 int _f2;
 float _f3;
 mat4x2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 bvec4 _f3;
 float _f4;
 int _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 int _f4;
 _GLF_struct_3 _f5;
 uint workgroup_id;
 mat3x4 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 vec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_6(mat2x4(1.0), uvec3(1u), vec3(1.0)), gl_NumWorkGroups.x, bvec2(true), vec3(1.0), 1, mat4x3(1.0), _GLF_struct_11(_GLF_struct_7(mat2(1.0), uvec4(1u)), _GLF_struct_8(ivec4(1)), _GLF_struct_9(1.0), uvec3(1u), _GLF_struct_10(uvec3(1u), ivec3(1), ivec2(1), mat4(1.0), mat4(1.0))), _GLF_struct_16(_GLF_struct_12(vec2(1.0), bvec4(true), bvec2(true), uvec4(1u), mat2x3(1.0)), _GLF_struct_13(1u), _GLF_struct_14(1u, bvec4(true), vec2(1.0)), _GLF_struct_15(mat3x4(1.0), uvec4(1u), mat2x3(1.0)), true, 1.0));
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_20(_GLF_struct_18(uvec3(1u), mat2x4(1.0), mat4(1.0), mat3(1.0)), _GLF_struct_19(vec4(1.0), vec2(1.0), 1u, true, uvec3(1u))), mat4(1.0), mat3x2(1.0), _GLF_struct_22(_GLF_struct_21(mat4(1.0), bvec4(true), ivec3(1), 1u, 1.0, mat3(1.0)), gl_WorkGroupSize.x, uvec4(1u), mat3(1.0)), _GLF_struct_23(vec3(1.0)), mat4x2(1.0));
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(_GLF_struct_0(uvec3(1u), mat2x4(1.0), bvec3(true), bvec4(true), 1.0, 1), mat3(1.0), _GLF_struct_1(vec3(1.0), mat3x2(1.0), 1, 1.0, mat4x2(1.0), ivec2(1)), _GLF_struct_2(ivec3(1), ivec2(1), bvec4(true), 1.0, mat3(1.0), bvec2(true), 1.0), 1, _GLF_struct_3(mat4x3(1.0), mat2(1.0), uvec2(1u), mat2x3(1.0), uvec3(1u), mat2x4(1.0), 1), gl_WorkGroupID.x, mat3x4(1.0)), vec3(1.0));
 uint workgroup_base = _GLF_struct_replacement_24._f3.workgroup_size * _GLF_struct_replacement_5._f0.workgroup_id;
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(1.0, subgroup_id * subgroup_size);
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_25.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_25.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if((subgroup_local_id % 2) == 0)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       subgroupAll(false);
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((0 & 96025), ~ (~ ((0 & 96025)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           read = atomicLoad(buf[virtual_gid], 4, 64, 2);
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           subgroupAll(false);
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 1) & _GLF_IDENTITY(1, (1) * 1))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             read = atomicLoad(buf[virtual_gid], 4, 64, 2);
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   subgroupBarrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
