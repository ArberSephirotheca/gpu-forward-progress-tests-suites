#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))))) ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(848.247), clamp(_GLF_FUZZED(848.247), _GLF_IDENTITY(_GLF_FUZZED(848.247), clamp(_GLF_FUZZED(848.247), _GLF_FUZZED(848.247), _GLF_FUZZED(848.247))), _GLF_FUZZED(848.247))))), injectionSwitch.y)), (injectionSwitch.x > injectionSwitch.y) && true))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true, true)), false || (bool(bvec3(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, true, true)))))))); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1309.1687)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((745.931 / -1352.4527))), bool(false))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((745.931 / -1352.4527))), bool(false))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((745.931 / -1352.4527))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((745.931 / -1352.4527))), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((745.931 / -1352.4527))), bool(false))))))), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(0.0, 1.0, 0.0))) + 0.0)), 1.0, 0.0), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(0.0, 1.0, 0.0))) + 0.0)), 1.0, 0.0)) * vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.0)), vec2(_GLF_FUZZED(-7.9), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.0)), vec2(_GLF_FUZZED(-7.9), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))))), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((231.377 * vec4(433.373, -79.69, 1021.7061, 773.694).p)), _GLF_FUZZED(-8.1)), bvec2(false, false))).x > injectionSwitch.y)))))), false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3013.5104)), float(injectionSwitch.y), bool(true)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch * mat2(1113.4298, -4506.2112, _GLF_IDENTITY(1444.9294, clamp(1444.9294, 1444.9294, 1444.9294)), -7.8))))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch * mat2(1113.4298, -4506.2112, _GLF_IDENTITY(1444.9294, clamp(1444.9294, 1444.9294, 1444.9294)), -7.8))))).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch * mat2(1113.4298, -4506.2112, _GLF_IDENTITY(1444.9294, clamp(1444.9294, 1444.9294, 1444.9294)), -7.8))))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch * mat2(1113.4298, -4506.2112, _GLF_IDENTITY(1444.9294, clamp(1444.9294, 1444.9294, 1444.9294)), -7.8))))).x > injectionSwitch.y)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch * mat2(1113.4298, -4506.2112, _GLF_IDENTITY(1444.9294, clamp(1444.9294, 1444.9294, 1444.9294)), -7.8))))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch * mat2(1113.4298, -4506.2112, _GLF_IDENTITY(1444.9294, clamp(1444.9294, 1444.9294, 1444.9294)), -7.8))))).x > injectionSwitch.y)))), true, true), true))))))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1335.1758)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5682.8226, -746.126)))).x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_WRAPPED_IF_TRUE(true)), false), bvec2(bvec4(bvec2((_GLF_WRAPPED_IF_TRUE(true)), false), false, false)))), ! (! (bool(_GLF_IDENTITY(bvec2((_GLF_WRAPPED_IF_TRUE(true)), false), bvec2(bvec4(bvec2((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))), false), false, false)))))))), false, false)))))
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY(0u, (0u) / 1u)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), workgroup_base), (min(workgroup_base, workgroup_base)) + 0u)))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_id : _GLF_FUZZED(subgroup_id), max(true ? subgroup_id : _GLF_FUZZED(subgroup_id), true ? subgroup_id : _GLF_FUZZED(subgroup_id)))), ((_GLF_IDENTITY(true ? subgroup_id : _GLF_FUZZED(subgroup_id), max(true ? subgroup_id : _GLF_FUZZED(subgroup_id), true ? subgroup_id : _GLF_FUZZED(subgroup_id))))) << 0u))) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED((subgroup_local_id % 84822u)), _GLF_IDENTITY(~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (_GLF_IDENTITY(84822u, (84822u) | (84822u))) | (84822u)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))), max(_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))), _GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))))))))))), min((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED((subgroup_local_id % 84822u)), _GLF_IDENTITY(~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u)))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))))))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), true)))))))), (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED((subgroup_local_id % 84822u)), _GLF_IDENTITY(~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u)))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (_GLF_IDENTITY(84822u, min(_GLF_IDENTITY(84822u, (84822u) | (84822u)), 84822u))) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (_GLF_IDENTITY(84822u, (_GLF_IDENTITY(84822u, clamp(84822u, 84822u, 84822u))) >> 0u)))))))), ~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))))))))))) / 1u, (false ? _GLF_FUZZED(mix(subgroup_local_id, subgroup_size, false)) : _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), false || (bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y), (max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)) / 1.0)))))))))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED((subgroup_local_id % 84822u)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (_GLF_IDENTITY(84822u, (33437u & 0u) | (_GLF_IDENTITY(84822u, (84822u) | (_GLF_IDENTITY(84822u, uint(uvec4(84822u, 0u, 1u, 1u)))))))) | (84822u)))))), uint(uvec2(~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (_GLF_IDENTITY(84822u, (33437u & 0u) | (_GLF_IDENTITY(84822u, (84822u) | (_GLF_IDENTITY(84822u, uint(uvec4(84822u, 0u, 1u, 1u)))))))) | (84822u)))))), 0u))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, _GLF_IDENTITY(_GLF_IDENTITY((84822u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (84822u) : _GLF_FUZZED(workgroup_base))), ((84822u)) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ~ _GLF_IDENTITY((~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ((~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u)))))))) << 0u))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (92038u & 0u) ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size))))) | _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), uint(uvec4(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), 0u | ((workgroup_base + subgroup_id * subgroup_size))), 0u, 1u, 0u))))))), (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4994.3163)), bool(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true))))))), bool(bool(! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true))))))), bool(bool(! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true))))))))))))))) || false)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))), false, false, false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false, false, false))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false, false, false))) || false), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true))))))), (bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))) || false)), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(true, false), false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))), true, false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))), true, false)))))), bool(bvec4(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(bool(true), true)))), true, false)))))), true, true, true))))))), (injectionSwitch.x < injectionSwitch.y))))), false, false, false))) || false)) && true)))))))) ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED((subgroup_local_id % 84822u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))), ~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, _GLF_IDENTITY((84822u), ((84822u)) | (_GLF_IDENTITY((84822u), ((84822u)) >> 0u))) | (84822u))))))), max(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(84822u, max(84822u, _GLF_IDENTITY(84822u, (84822u) >> (0u & 154752u)))), (84822u) | (84822u))))), uint(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_FUZZED((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % _GLF_IDENTITY(84822u, (84822u) | (84822u))))), (true ? _GLF_IDENTITY((_GLF_FUZZED((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % _GLF_IDENTITY(84822u, (84822u) | (84822u))))), ((_GLF_FUZZED((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % _GLF_IDENTITY(84822u, (84822u) | (84822u)))))) | 0u) : _GLF_FUZZED(subgroup_size))), 0u), (uvec2(~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))), 0u)) | (_GLF_IDENTITY(uvec2(~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))), 0u), uvec2(0u, 0u) ^ (uvec2(~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))), 0u))))))))))))))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(bool(true), true))), bvec2(bvec2(bvec2(bvec2(bvec2(bool(true), true))))))))))), (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED((subgroup_local_id % 84822u)), _GLF_IDENTITY(~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u)))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))), max(~ (~ _GLF_IDENTITY((~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u)))))), ((~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))) / 1u)), ~ (~ (_GLF_IDENTITY(~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (_GLF_IDENTITY(84822u, (84822u) | (84822u))))))), 0u ^ (~ (_GLF_FUZZED((subgroup_local_id % _GLF_IDENTITY(84822u, (84822u) | (84822u))))))))))))))))))) / 1u))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 0u, 0u), clamp(uvec4(subgroup_local_id + 1, 0u, 0u, 0u), uvec4(subgroup_local_id + 1, 0u, 0u, 0u), uvec4(subgroup_local_id + 1, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 0u, 0u), clamp(uvec4(subgroup_local_id + 1, 0u, 0u, 0u), uvec4(subgroup_local_id + 1, 0u, 0u, 0u), uvec4(subgroup_local_id + 1, 0u, 0u, 0u))))) ^ 0u))) % subgroup_size), ((_GLF_IDENTITY(1u, max(1u, 1u)) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), min(max(4, 4), _GLF_IDENTITY(max(4, 4), int(int(_GLF_IDENTITY(max(4, 4), ~ (~ (max(4, 4)))))))))))), int(ivec3((~ (_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), min(max(4, 4), _GLF_IDENTITY(max(4, 4), int(int(_GLF_IDENTITY(max(4, 4), ~ (~ (max(4, 4)))))))))))), 0, 0)))), _GLF_IDENTITY(64, int(int(_GLF_IDENTITY(64, clamp(64, 64, 64))))), 4);
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(64, clamp(64, 64, 64)), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, max(0, 0))) ^ _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(0, max(0, 0))), ((_GLF_IDENTITY(0, max(0, 0)))) >> 0) ^ 0)), 0 + (int(int((_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))))))
    {
     if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u + (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id)) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-545.846)), vec2(_GLF_FUZZED(74.70), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), bvec2(false, true))).x)), (1u & 1u) * (_GLF_IDENTITY(((subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id)), (((subgroup_local_id))) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(((subgroup_local_id)), (_GLF_IDENTITY(((subgroup_local_id)), _GLF_IDENTITY(uint(uvec3(((subgroup_local_id)), (1u & 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (uint(uvec3(((subgroup_local_id)), (1u & 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) / _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, 0u ^ (1u)))))))) / 1u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) ^ (0u & 82843u)) + 1 < subgroup_size)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * round(length(normalize(vec3(1.0, 1.0, 1.0))))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0), (mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0)))), 1.0 * ((_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0)))))) * round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0))))) > 0) && true)), true && (bool(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))))))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.x))) - abs(0.0)) > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(_GLF_IDENTITY(read, min(read, read)), (0u ^ 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(read, (read) / 1u), min(read, read))))) | (read)), 4, 64, 4);
       subgroupAll(false);
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(4), (int(4)) >> 0))) : _GLF_FUZZED(-54557))) : _GLF_FUZZED(-99830))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(frexp(-3497.3031, _injected_loop_counter)) : _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(1.3) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0)), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0))) - 0.0)))), injectionSwitch.y, injectionSwitch.y)))))) * (injectionSwitch)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(2830.9971))), _GLF_IDENTITY(0.0, float(mat2x4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-70.60)), float(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), bool(true))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), vec2(mat4x3(vec2(mat3x4(injectionSwitch, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))).y)) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0)), dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0)))), mat2(mat4x2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0)), dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0))))))))).y)) * (injectionSwitch)))), 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), (mat2(1.0, 1.0, 1.0, 1.0)) * mat2(1.0)))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.2)), float(0.0), bool(true))), 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 1.0, 0.0, 0.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), transpose(_GLF_IDENTITY(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y))), transpose(transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y)))))))) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_ONE(1.0, injectionSwitch.y)))))) * (injectionSwitch)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), transpose(_GLF_IDENTITY(transpose(mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))))), transpose(transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y)))))))) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(vec3(vec2(1.0, 1.0), 1.0)), min(vec2(vec3(vec2(1.0, 1.0), 1.0)), vec2(vec3(vec2(1.0, 1.0), 1.0)))))), mat2(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_ONE(1.0, injectionSwitch.y)))))) * (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-14.08)), bool(false)))), 0.0 + (_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), clamp(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), max(clamp(0.0, 0.0, 0.0), clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), (max(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), clamp(0.0, 0.0, 0.0))) / _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))))))), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))).y))), 0.0 + (_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(925.864))))) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-807.151), _GLF_FUZZED((false ? (3909.6773 + -9.5) : 18.22))), vec2((_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch))[0], (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch))[1]), bvec2(true, true)))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(frexp(-3497.3031, _injected_loop_counter)) : _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(1.3) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0)), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0))) - 0.0)))), injectionSwitch.y, injectionSwitch.y)))))) * (injectionSwitch))), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(frexp(-3497.3031, _injected_loop_counter)) : _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(1.3) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0)), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0))) - 0.0)))), injectionSwitch.y, injectionSwitch.y)))))) * (injectionSwitch))), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(frexp(-3497.3031, _injected_loop_counter)) : _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(1.3) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(76.06)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 0.0, 1.0)), (float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (mix(float(_GLF_FUZZED(930.661)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) - 0.0)) * _GLF_IDENTITY(dot(vec3(0.0, 0.0, sqrt(1.0)), vec3(0.0, abs(0.0), 1.0)), dot(vec3(0.0, 0.0, sqrt(1.0)), vec3(0.0, abs(0.0), 1.0))))), exp(0.0), 0.0, 1.0))) - 0.0)))), injectionSwitch.y, injectionSwitch.y)))))) * (injectionSwitch)))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(2830.9971))), _GLF_IDENTITY(0.0, float(mat2x4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-70.60)), float(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), bool(true))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), vec2(mat4x3(vec2(mat3x4(injectionSwitch, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))).y)) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(77.34)), float(float(vec4(1.0, 1.0, 0.0, 1.0))), bool(true)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(log(1.0), max(log(1.0), _GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(vec2(5.3, -7.7).x))))), 1.0)))), mat2(mat4x2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0)), dot(vec2(1.0, 0.0), vec2(log(1.0), 1.0))))))))).y)) * (injectionSwitch)))), 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0)))))), transpose(transpose(_GLF_IDENTITY(mat4((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0)))))), transpose(transpose(mat4((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0))))))))))))), (true ? mat2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0)))))), transpose(transpose(_GLF_IDENTITY(mat4((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0)))))), transpose(transpose(mat4((_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0))))))))))))) : _GLF_FUZZED(mat2(-8250.3938, 8.9, -9048.1739, 4695.2714))))) * mat2(1.0)))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.2)), float(0.0), bool(true))), 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), (true ? _GLF_IDENTITY(length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), mix(float(_GLF_IDENTITY(length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), float(mat4x2(length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(94.46)), bool(false))) : _GLF_FUZZED(-3.0))), 1.0, 0.0, 0.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), transpose(_GLF_IDENTITY(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y))), transpose(transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y)))))))) * _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(2174.8952)), vec2(_GLF_FUZZED(vec3(81.28, 2.1, -3018.4830).y), _GLF_IDENTITY(((injectionSwitch))[1], mix(float(((injectionSwitch))[1]), float(_GLF_FUZZED(-8.5)), bool(false)))), bvec2(false, true)))), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_ONE(1.0, injectionSwitch.y)))))), (mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_ONE(1.0, injectionSwitch.y))))))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (injectionSwitch)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), transpose(_GLF_IDENTITY(transpose(mat2(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / cos(0.0)), injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))))), transpose(transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y)))))))) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(vec3(vec2(1.0, 1.0), 1.0)), min(vec2(vec3(vec2(1.0, 1.0), 1.0)), vec2(vec3(vec2(1.0, 1.0), 1.0)))))), mat2(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))).y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_ONE(1.0, injectionSwitch.y)))))) * (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-14.08)), bool(false)))), 0.0 + (_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), clamp(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), max(clamp(0.0, 0.0, 0.0), clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), (max(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), clamp(0.0, 0.0, 0.0))) / _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))))))), mix(float(_GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-14.08)), bool(false)))), 0.0 + (_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), clamp(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), max(clamp(0.0, 0.0, 0.0), clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)), (max(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), clamp(0.0, 0.0, 0.0))) / _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))))))), float(_GLF_FUZZED(7.8)), bool(false)))), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))).y)))))), _GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), min(_GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, sin(0.0), 0.0))) < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, sin(0.0), 0.0))) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.5)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, sin(0.0), 0.0))) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.5)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false)))) || false)))))) && true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, true, false))), true && (! (bool(bvec4(false, false, true, false))))))))) || false)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-5.9), float(float(_GLF_FUZZED(-5.9))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x < injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-520.593), _GLF_FUZZED(5.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
                  barrier();
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       subgroupAll(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bvec4((true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), true && (! (_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bvec4((true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, log(1.0), 0.0, 1.0, 1.0))), injectionSwitch.y)))) && (false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), float(mat3x2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), float(mat3x2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, cos(0.0), 0.0, 1.0))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, cos(0.0), 0.0)))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(_GLF_IDENTITY(false, false || (false)))))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2((injectionSwitch) * mat2(1.0), 0.0, sqrt(determinant(mat2(1.0, 1.0, 0.0, 1.0))), 1.0, 1.0)))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, true))))))))) || false)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), _GLF_IDENTITY(false, false || (false)), false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 0.0)))).x < injectionSwitch.y, false, true))))), true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), ! (! (_injected_loop_counter != (1 & 1)))), true, false)))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (_GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true))))))))))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, true)), true && (bool(bvec3(! (false), true, true)))))))))
      barrier();
     barrier();
    }
  }
}
