#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uint _f0;
 uint read;
 uint _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_8 {
 mat2x3 _f0;
 _GLF_struct_7 _f1;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 ivec4 _f1;
 uint workgroup_size;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 vec3 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 ivec3 _f1;
 _GLF_struct_5 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 vec2 _f1;
 mat2x4 _f2;
 ivec3 _f3;
 bvec2 _f4;
 uvec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat2x3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 uvec2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_3 {
 uint subgroup_local_id;
 _GLF_struct_2 _f0;
 uvec2 _f1;
 bvec3 _f2;
 mat3x2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_SubgroupInvocationID, _GLF_struct_2(uvec3(1u), _GLF_struct_0(ivec3(1), mat2x3(1.0), mat4x2(1.0)), _GLF_struct_1(ivec3(1), vec2(1.0), mat2x4(1.0), ivec3(1), bvec2(true), uvec4(1u), bvec2(true)), uvec2(1u), mat2(1.0)), uvec2(1u), bvec3(true), mat3x2(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat4x3(1.0), ivec3(1), _GLF_struct_5(vec3(1.0), vec3(1.0), _GLF_struct_4(bvec3(true), ivec4(1), gl_WorkGroupSize.x)), vec2(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_6._f2._f2.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat2x3(1.0), _GLF_struct_7(1u, 0, 1u, ivec2(1)));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((_GLF_struct_replacement_3.subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   _GLF_struct_replacement_8._f1.read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   do
    {
     _GLF_struct_replacement_8._f1.read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_8._f1.read, 4, 64, 4);
}
