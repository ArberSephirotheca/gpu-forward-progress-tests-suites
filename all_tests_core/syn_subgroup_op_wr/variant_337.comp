#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! (true))), _GLF_IDENTITY(false, false || (false)) || (bool(bool(! (true))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            return;
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || ((false))))))))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), (bool(bvec4(true, true, true, true))) && true)), false, false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(859.639), _GLF_FUZZED(vec3(-43.43, 3.4, _GLF_IDENTITY(8.4, (true ? _GLF_IDENTITY(8.4, min(8.4, 8.4)) : _GLF_FUZZED(3.8)))).p)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), bool(bvec2((false) && true, true)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false), ! (! ((false)))) && true, _GLF_IDENTITY(true, true && (true)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true))))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true)))))))), true, true, false))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bvec2((false) && true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2((false) && true, true), false, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2((false) && true, true), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2((false) && true, true), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2((false) && true, true), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), false, false))))))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bvec2((false) && true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2((false) && true, true), false, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2((false) && true, true), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2((false) && true, true), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2((false) && true, true), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), false, false)))))))))))) && true))))))))))))
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) << 0) > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.7)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u), uint(uvec2((subgroup_local_id + 1) % subgroup_size, 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u), uint(uvec2((subgroup_local_id + 1) % subgroup_size, 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u), uint(uvec2((subgroup_local_id + 1) % subgroup_size, 0u)))))) : _GLF_FUZZED(workgroup_base))))));
 uint read = 0;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), uint(uvec3(uint(1), 0u, 1u))), 4, 64, 4);
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << _GLF_IDENTITY(0u, (0u) ^ 0u)) % 2), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), 0u | ((subgroup_local_id % 2))), ((subgroup_local_id % 2)) | _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2)))), 0u + (((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2)))))))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2)))), 0u + (((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2)))))))), (~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2)))), 0u + (((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(workgroup_id, workgroup_base, subgroup_local_id)) : subgroup_local_id % 2))))))))) * 1u)) >> (0u | 0u))))) >> 0u), ((subgroup_local_id % 2)) | 0u) == 0)
    {
     if(_GLF_DEAD(false))
      continue;
     subgroupAll(false);
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, determinant(mat3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0), (_GLF_IDENTITY(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat3(1.0))) * mat3(1.0))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), 1.0 * (round(length(normalize(1.0))))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 0.0, tan(0.0), sqrt(0.0), 1.0, 1.0, 0.0, sqrt(1.0)), mat4(1.0) * (mat2x4(0.0, 0.0, tan(0.0), sqrt(0.0), 1.0, 1.0, 0.0, sqrt(1.0)))))), round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-1.7)), float(determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))), bool(true))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), sin(0.0))), (float(mat4x3(_GLF_IDENTITY(determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-1.7)), float(determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))), bool(true))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), sin(0.0)))) - 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) * 1.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-658.772))), abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) / mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.5) : 1.0)))), 1.0)))))))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0)), 0.0)) + (1.0))), bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), false || _GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-5967.6219))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-11.81))))), (bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-11.81)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true && ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))) || false)), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / exp(0.0)) / 1.0))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)), false, true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, mix(float((injectionSwitch.y) / 1.0), float(_GLF_FUZZED(802.654)), bool(false)))))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)), false, true))))))))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, determinant(mat3(0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-3.5) : 0.0)), clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), clamp(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), (true ? round(length(normalize(1.0))) : _GLF_FUZZED(84.11))), round(length(normalize(1.0))))), 0.0, _GLF_IDENTITY(abs(0.0), 1.0 * (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), transpose(_GLF_IDENTITY(transpose(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), clamp(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), (true ? round(length(normalize(1.0))) : _GLF_FUZZED(84.11))), round(length(normalize(1.0))))), 0.0, _GLF_IDENTITY(abs(0.0), 1.0 * (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(transpose(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), clamp(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), (true ? round(length(normalize(1.0))) : _GLF_FUZZED(84.11))), round(length(normalize(1.0))))), 0.0, _GLF_IDENTITY(abs(0.0), 1.0 * (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))), (transpose(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), clamp(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), (true ? round(length(normalize(1.0))) : _GLF_FUZZED(84.11))), round(length(normalize(1.0))))), 0.0, _GLF_IDENTITY(abs(0.0), 1.0 * (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(716.773) : _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 1.0))))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(0.0, (0.0) / 1.0)) - 0.0), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0))), transpose(transpose((mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) - 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.2) : 0.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0)))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(811.151) : 1.0)), 1.0))))), min(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, (1.0) - 0.0)), cos(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(min(-9.5, -8.3))))), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, abs(0.0)))), 0.0, 0.0)), _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), max(_GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY((determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0, clamp(_GLF_IDENTITY((determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0, min((determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0, (determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0)), (determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0, _GLF_IDENTITY((determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0, float(vec2((determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0, sin(0.0))))))), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), clamp((1.0), (1.0), (1.0))) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(round(length(normalize(1.0))), round(length(normalize(1.0))))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(round(length(normalize(1.0))), round(length(normalize(1.0))))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)) * mat3(1.0))), determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4.7)), bool(false))), 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0))) - 0.0)), 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, tan(0.0), log(1.0), 1.0, 0.0, 1.0, 1.0)))) - 0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 0.0))), 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-7700.1422)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), 0.0)), 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1400.9608))), 0.0)), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1400.9608))), 0.0)), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, max((1.0) / 1.0, _GLF_IDENTITY((1.0) / 1.0, float(vec4((1.0) / 1.0, 1.0, 0.0, 0.0)))))), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY((mat4(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, (true ? (1.0) / 1.0 : _GLF_FUZZED(64.52)))), cos(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(721.434)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) - 0.0), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), min(max(0.0, 0.0), max(0.0, 0.0)))), 0.0, 1.0, 0.0))), transpose(transpose((mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) - 0.0), 0.0, 0.0)), determinant(mat2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0)))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4701.2830) : 1.0)), 1.0))))), min(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, (1.0) - 0.0)), cos(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(min(-9.5, -8.3))))), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(-1.8)), float((1.0)), bool(true)))) - 0.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), max(_GLF_IDENTITY(determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6348.0244) : 0.0)), 0.0)), (determinant(mat2(0.0, 1.0, 0.0, 0.0))) * 1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(clamp((1.0), (1.0), (1.0)), (clamp(_GLF_IDENTITY((1.0), ((1.0)) - 0.0), (1.0), (1.0))) / 1.0)) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(round(length(_GLF_IDENTITY(normalize(1.0), mix(float(_GLF_FUZZED(-8778.1284)), float(_GLF_IDENTITY(normalize(1.0), max(_GLF_IDENTITY(normalize(1.0), (normalize(1.0)) / 1.0), normalize(1.0)))), bool(true))))), round(length(normalize(1.0))))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ -43.20))), float(0.0), bool(true))), 1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0)), 0.0, sin(0.0), 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0))) - 0.0)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat2x4(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)) : _GLF_FUZZED((+ -8.7)))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1400.9608))), 0.0)), 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), (mat4(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, max((1.0) / 1.0, _GLF_IDENTITY((1.0) / 1.0, float(vec4((1.0) / 1.0, 1.0, 0.0, 0.0)))))), cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(round(length(normalize(1.0))), min(_GLF_IDENTITY(round(length(normalize(1.0))), clamp(round(length(normalize(1.0))), round(length(normalize(1.0))), round(length(normalize(1.0))))), round(length(normalize(1.0))))), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0)))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)) + (1.0))), bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) / 1.0)), _GLF_IDENTITY(false || _GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)), false || (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)), false, true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) / 1.0))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5383.5362)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(-1363.4184))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || _GLF_IDENTITY(false, bool(bool(false))))), false, true)))))))), ! (! (false || _GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, sin(0.0), 1.0)), 1.0), (false ? _GLF_FUZZED(mat3x4(56.04, 1.2, -6.1, -2.5, -4704.2115, 843.452, 8.4, 60.31, -70.05, 118.697, 7.6, 30.68)) : mat3x4(1.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, sin(0.0), 1.0)), 1.0)))))))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)), false || (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), (injectionSwitch.y) / 1.0)))) || false)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-9.1)), float((injectionSwitch.y)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / 1.0)))))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || false)), false, true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) / 1.0))), ((bool(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fma(285.148, 5.7, -782.906)) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(5383.5362)), max(float(_GLF_FUZZED(5383.5362)), _GLF_IDENTITY(float(_GLF_FUZZED(5383.5362)), (_GLF_IDENTITY(float(_GLF_FUZZED(5383.5362)), mix(float(float(_GLF_FUZZED(5383.5362))), float(_GLF_FUZZED(3277.0497)), bool(false)))) / 1.0))), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(-1363.4184))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) || _GLF_IDENTITY(false, bool(bool(false))))), false, true))))))))))))))) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(99.71) : injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             read = atomicLoad(buf[virtual_gid], 4, 64, 2);
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.6), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-4080.0472)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2((injectionSwitch)[0], _GLF_FUZZED(-4080.0472)))), bvec2(true, false))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0), mat4x3(mat4x3(mat4x3(injectionSwitch, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0)))))).y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.6), (injectionSwitch)[1]), mat2(1.0) * (vec2(_GLF_FUZZED(-2.6), (injectionSwitch)[1]))), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) + 0)], _GLF_FUZZED(-4080.0472)), bvec2(true, false))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.x))) - sin(0.0)))) > injectionSwitch.y)))) || false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6076.0897)), bool(false))) > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
          }
        }
      }
    }
   else
    {
     subgroupAll(false);
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), (min(virtual_gid, virtual_gid)) >> 0u)), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | ((virtual_gid))) | (virtual_gid))))], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(20828))), 4)), 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2))))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid), (min(virtual_gid, virtual_gid)) >> 0u)), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | ((virtual_gid))) | (virtual_gid))))], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2)))))));
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(89075) : 1))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false))))
    return;
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (4) >> (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 64, 4);
}
