#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(4), int(4))) | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(vec2(-21.64, -291.687)) : injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asinh(injectionSwitch)))), injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 0.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch[1])))[_GLF_IDENTITY(0, (0) << 0)], (false ? _GLF_FUZZED(842.734) : (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(mat3x2(3187.4858, 471.136, 59.94, -99.74, -7005.4609, -99.15)[2])))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.6), _GLF_FUZZED(5.5)), bvec2(false, false))))[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-17.74), _GLF_FUZZED(-19.31)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((5777.2030)), _GLF_FUZZED(5516.8834)), bvec2(false, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y)))))), false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (6u) | 0u)))))), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), min(((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), max(((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), (true ? uint(uint(1u)) : _GLF_FUZZED(subgroup_local_id)))) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))) | 0u))))))))).x, gl_NumWorkGroups.x))) >> (0u ^ 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), min((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), max((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), max((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), max((_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x), (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x)))) | 0u)) * 1u)) * 1u));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uint(gl_WorkGroupID.x)), (uint(uint(gl_WorkGroupID.x))) >> 0u));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), ~ (~ (int(2))))) | (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) || false)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 0u), (0u ^ 0u))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)) : _GLF_FUZZED(subgroup_base))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_base))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_base))))))) : _GLF_FUZZED(subgroup_id))), workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))), ~ (~ ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u | 0u) | (workgroup_base)), max(workgroup_base, workgroup_base)))), uint(uvec2(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u | 0u) | (workgroup_base)), max(workgroup_base, workgroup_base)))), 0u))) + subgroup_base)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), min((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 0u, 1u))))), 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) + subgroup_base)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(false, bool(bvec3(false, false, true))) ? _GLF_FUZZED(workgroup_id) : 0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) | (0u)) | (workgroup_base))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 1u)))) / 1u), (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)))))), clamp(_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 1u)))) / 1u), (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)))))), uint(uvec4((uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 1u)))) / 1u), (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)))))), 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 1u)))) / 1u), (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)))))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 1u)))) / 1u), (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)))))))) | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u, 0u, (1u | 1u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << 0u), 0u, 0u, (1u | 1u)))))))), workgroup_base))) | (0u | 0u)))) + subgroup_base, _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_size) : subgroup_base)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))) ^ 0u))), ((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))) ^ 0u)))) + (177445u & 0u)) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : (workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)) >> 0u)))), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : (workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)) >> 0u))))) | (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : (workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)) >> 0u))))))) | (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), workgroup_base)))) + subgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) + 0u))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))), 1u * ((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) - (0u ^ 0u)))) + subgroup_base))))) | 0u)), (true ? _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))) : subgroup_base)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))), ((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))), min((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))), (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : (workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)) >> 0u))))) | (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), workgroup_base)))) + subgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) + 0u))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))), 1u * ((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) - (0u ^ 0u)))) + subgroup_base))))) | 0u)), ~ (~ ((false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (0u & 33798u) + (_GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_size) : subgroup_base)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), (_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : (workgroup_base), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)), max(_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)), ((false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))) * 1u), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base)))) >> 0u))))) | (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), workgroup_base)))) + subgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) + 0u))) + subgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), min(_GLF_FUZZED(workgroup_size), _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u | (_GLF_FUZZED(workgroup_size))))) : (workgroup_base))))), 1u * ((_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_size) : (workgroup_base))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) - (0u ^ 0u)))) + subgroup_base))))) | 0u))))) : _GLF_FUZZED(subgroup_id))))) / 1u), 0u ^ (workgroup_base + subgroup_base)) + subgroup_local_id));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_size))), (true ? workgroup_base : _GLF_FUZZED(workgroup_id))) + subgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))) + subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(true, (true) || false) ? (subgroup_local_id + 1) : _GLF_FUZZED(virtual_gid)))) ^ 0u) % subgroup_size);
 uint read = _GLF_IDENTITY(0, (0) - 0);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), 1 * (int(8))), int(8)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) ^ 0), 64, 4);
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! _GLF_IDENTITY((! ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))), (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))), max(clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))))) : _GLF_FUZZED(-95301)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) == 0)), _GLF_IDENTITY(((! ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) | (_GLF_IDENTITY(2, ~ (~ (2))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(3), int(3))) | (2)))), (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, max(_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, int(ivec4((_GLF_IDENTITY(2, (2) | (2))) << 0, 1, 0, 1))), (_GLF_IDENTITY(2, (2) | (2))) << 0)), ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))))) == 0))), ! (! (_GLF_IDENTITY(((! ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) | (_GLF_IDENTITY(2, ~ (~ (2))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(3), int(3))) | (2)))), (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, max(_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, int(ivec4((_GLF_IDENTITY(2, (2) | (2))) << 0, 1, 0, 1))), (_GLF_IDENTITY(2, (2) | (2))) << 0)), ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))))) == 0))), bool(bool(((! ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) | (_GLF_IDENTITY(2, ~ (~ (2))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(3), int(3))) | (2)))), (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, max(_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, int(ivec4((_GLF_IDENTITY(2, (2) | (2))) << 0, 1, 0, 1))), (_GLF_IDENTITY(2, (2) | (2))) << 0)), ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (2))) << 0, ((_GLF_IDENTITY(2, (2) | (2))) << 0) << (0 << _GLF_IDENTITY(int(7), int(7)))))))) == 0))))))))) || false)))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0) + 0.0) > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupAll(false);
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch))), mix(vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch))))[0], clamp((vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch))))[0], (vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch))))[0], (vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch))))[0])), (vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch))))[1]), vec2(_GLF_FUZZED(265.483), _GLF_FUZZED(3.0)), bvec2(false, false))))).y))))
          return;
        }
      }
    }
   else
    {
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], uint(uvec4(buf[virtual_gid], 1u, 0u, 1u)))) - 0u), 4, 64, 2);
   for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))), (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))), (~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ (5)), clamp(_GLF_IDENTITY((~ (5)), 1 * ((~ (5)))), _GLF_IDENTITY((~ (5)), int(int((~ (5))))), (~ (5)))))) + 0)))))) / 1)) + 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))), (~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))))) + 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), min((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(~ (~ (5)), 0 | (~ (~ (5)))))) + _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(34357))))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), min(~ (5), ~ (5)))))) + 0))))), (~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))))) + 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + _GLF_IDENTITY(0, (0) >> 0))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))), (~ (int(_GLF_IDENTITY(5, (5) | _GLF_IDENTITY((_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)), 0)), max(int(ivec2((_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)), 0)), int(ivec2((_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)), 0))))))))) + 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))))) >> 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(71469, (71469) | 0), min(71469, 71469))) : 1))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(71469, (71469) | 0), min(71469, 71469))) : 1)))) && true); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), (_GLF_IDENTITY((_injected_loop_counter ++), (_GLF_IDENTITY((_injected_loop_counter ++), (true ? (_injected_loop_counter ++) : _GLF_FUZZED(-62086)))) << 0)) << 0) / 1))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))) || false))), true, true, false)), (bool(bvec4(false, true, true, false))) && true)), false, false, false)))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-13339 & 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < (1 | 1), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_injected_loop_counter < (1 | 1), true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(_injected_loop_counter < (1 | 1), true), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             atomicStore(checker[virtual_gid], read, 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (0 >> _GLF_IDENTITY(int(5), int(5)))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) && true))
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
}
