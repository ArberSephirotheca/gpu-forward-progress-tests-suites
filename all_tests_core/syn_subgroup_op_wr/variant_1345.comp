#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 float _f0;
 float _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 uint subgroup_id;
 uint _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_0 {
 int _f0;
 bvec3 _f1;
 ivec2 _f2;
 uvec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 _GLF_struct_0 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_4 {
 bool _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_3 _f2;
 mat4x3 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size;
 uvec4 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(true, _GLF_struct_1(ivec3(1), _GLF_struct_0(1, bvec3(true), ivec2(1), uvec2(1u), 1u), mat2(1.0)), _GLF_struct_3(mat3x2(1.0), gl_SubgroupID, 1u, _GLF_struct_2(1.0, 1.0, uvec3(1u))), mat4x3(1.0));
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.w = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y = GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.w;
 uint workgroup_base = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w * GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y;
 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.z = workgroup_base;
 uint subgroup_base = _GLF_struct_replacement_4._f2.subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y;
 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.y = subgroup_base;
 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x = GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.y;
 uint virtual_gid = GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.z + GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x + GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.z + GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x + ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y);
 uint read = 0;
 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.x = read;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x % 2) == 0)
  {
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.x = atomicLoad(buf[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.x = atomicLoad(buf[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z], GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_baseworkgroup_baseworkgroup_id.x, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
