#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), clamp((0.0), (0.0), (0.0))) - 0.0), injectionSwitch.x))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, sin(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-83.17)), bool(false))), 1.0, 1.0, 0.0, 0.0)), mix(float(float(mat4x2(injectionSwitch.x, 0.0, sin(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.4)), bool(false)))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, sin(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-83.17)), bool(false))), 1.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(mix(float(float(mat4x2(injectionSwitch.x, 0.0, sin(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.4)), bool(false)), (false ? _GLF_FUZZED(8.6) : _GLF_IDENTITY(mix(float(float(mat4x2(injectionSwitch.x, 0.0, sin(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.4)), bool(false)), (false ? _GLF_FUZZED(-28.90) : mix(float(float(mat4x2(injectionSwitch.x, 0.0, sin(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.4)), bool(false)))))))) > injectionSwitch.y)))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false, true, false))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(6.2)), bool(false))) > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / 1u)), (max(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x, _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) - 0u) / 1u))) - (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u), ~ _GLF_IDENTITY((~ (uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((~ (uvec3(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) << 0u), 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), _GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), (((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))) | (((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (_GLF_IDENTITY(uvec3(1u, 1u, 1u), clamp(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))) & uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((_GLF_IDENTITY(~ (uvec3(0u, 0u, 0u)), clamp(~ (uvec3(0u, 0u, 0u)), ~ (uvec3(0u, 0u, 0u)), ~ (uvec3(0u, 0u, 0u)))))) / (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0u)))), max(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) << (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u)))))), 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(_GLF_IDENTITY(1u, (1u) >> (1u ^ 1u)), 1u, 1u) & uvec3(1u, 1u, 1u)), _GLF_IDENTITY(max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))), (true ? max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))) : _GLF_FUZZED(uvec3(198207u, 18022u, 132308u))))), 0u))))))))), uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))), float(_GLF_IDENTITY(mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), (false ? _GLF_FUZZED(mat3x4(-1497.7442, 4.5, -6.7, 39.27, 1.3, -48.59, -58.22, 522.081, -5721.0733, -6.4, -1.1, -9.9)) : mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))) | (gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))), ~ (~ (((gl_WorkGroupID))))) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (gl_WorkGroupID))) | (gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))), ~ (~ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, gl_WorkGroupID), ~ (_GLF_IDENTITY(~ (max(gl_WorkGroupID, gl_WorkGroupID)), (~ (max(gl_WorkGroupID, gl_WorkGroupID))) | (~ (max(gl_WorkGroupID, gl_WorkGroupID)))))))) + uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, gl_WorkGroupID), ~ (_GLF_IDENTITY(~ (max(gl_WorkGroupID, gl_WorkGroupID)), (~ (max(gl_WorkGroupID, gl_WorkGroupID))) | (~ (max(gl_WorkGroupID, gl_WorkGroupID)))))))) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, gl_WorkGroupID), ~ (_GLF_IDENTITY(~ (max(gl_WorkGroupID, gl_WorkGroupID)), (~ (max(gl_WorkGroupID, gl_WorkGroupID))) | (~ (max(gl_WorkGroupID, gl_WorkGroupID)))))))) + uvec3(0u, 0u, 0u)))) + uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))))))) | (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(82435u, uvec3(133777u, 134293u, 97621u).p, 59629u)) : gl_WorkGroupID)))))))))).x, min(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, _GLF_IDENTITY(617u, 1u * (_GLF_IDENTITY(617u, max(617u, _GLF_IDENTITY(617u, (617u) | (617u)))))), 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, (1u) / 1u), 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u)))), max(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false))) ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, _GLF_IDENTITY(188318u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(188318u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (188318u)), 0u, 0u), (false ? _GLF_FUZZED(uvec3(157040u, 102739u, 131236u)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(188318u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (188318u)), 0u, 0u), clamp(uvec3(_GLF_IDENTITY(188318u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (188318u)), 0u, 0u), uvec3(_GLF_IDENTITY(188318u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (188318u)), 0u, 0u), uvec3(_GLF_IDENTITY(188318u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (188318u)), 0u, 0u))))))))) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))) : _GLF_FUZZED(workgroup_size))))))), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), 0u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, 0u + (1u)))), 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(0u, min(0u, 0u))), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) & uvec3(1u, 1u, 1u)))), 0u))))))))), uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(135.696)), float(0.0), bool(true))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(5.9)), min(float(_GLF_FUZZED(5.9)), float(_GLF_FUZZED(5.9)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x))))) | (gl_WorkGroupID), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), ~ (~ ((gl_WorkGroupID)))), _GLF_IDENTITY(((gl_WorkGroupID)), ~ (~ (((gl_WorkGroupID))))) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) << uvec3(0u, 0u, 0u))))) + uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u)))))))) | (gl_WorkGroupID)))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ (uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (uvec3(0u, 0u, 0u)), uvec3(uvec4(~ (uvec3(0u, 0u, 0u)), 1u))))) / (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) ^ 0u)))), 1u)), _GLF_IDENTITY(max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) | (max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))))) ^ uvec3(0u, 0u, 0u))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, _GLF_IDENTITY(110006u, (110006u) * (1u | 1u)), 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u))) ^ (uvec3(1u, 1u, 1u))) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u)))), max(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), uint(uvec4(uint(uint(1u)), 0u, 0u, 1u)))))), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ _GLF_IDENTITY((uvec3(0u, 0u, 0u)), ((uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(0u, 1u * (0u))), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u))))))))), uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))))) | (gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))), mix(float(_GLF_FUZZED(float(112815u))), float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))), bool(true))))) | (gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(((gl_WorkGroupID)), ~ (~ (((gl_WorkGroupID))))) - uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))), 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u), ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u)))))))) | (gl_WorkGroupID)))))))).x, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ (uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(1u), uint(1u))))), uvec3(0u, 0u, 0u) | (uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))))))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u)))), max(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, 0u, 0u)))))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u)))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, _GLF_IDENTITY(1u, (0u & 197012u) ^ (1u)), 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u), (false ? _GLF_FUZZED(uvec4(41479u, 42828u, 161u, 57994u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, _GLF_IDENTITY(1u, (0u & 197012u) ^ (1u)), 1u) & uvec3(1u, 1u, 1u)), max(((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), 0u))), (false ? _GLF_FUZZED(uvec4(72644u, 617u, 110006u, 188318u)) : uvec4(_GLF_IDENTITY(((~ (uvec3(0u, 0u, 0u)))) / (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(102751u, 165268u, 22888u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))) << uvec3(0u, 0u, 0u))))), max(((~ (_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u)))), 0u), max(uvec3(0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u)))), 0u), uvec3(0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u)))), 0u)))))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), ((~ (uvec3(0u, 0u, 0u)))) / (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(_GLF_IDENTITY(uvec3(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)), (uvec3(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))) * uvec3(1u, 1u, 1u))))))), 0u))))))))), uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))))))) | (gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(((gl_WorkGroupID)), ~ (~ (((gl_WorkGroupID))))) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))))))))) | (gl_WorkGroupID)))))))).x) / 1u)));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) || false))));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) + 0u);
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))) : workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base))), uint(uvec4((_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base))), 0u, 1u, 1u)))) ^ 0u) >> 0u), _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base)))) + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))), subgroup_id))) * 1u, (0u ^ (0u | 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))), subgroup_id))) * 1u, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))), subgroup_id))) * 1u, ((_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))))), ~ (~ (subgroup_id)))))), subgroup_id))) * 1u) - 0u)) / (1u | 1u))))) * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), max((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), max((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) ^ 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(1 * (4), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-3719) : 1)) * (4), (1 * (4)) << 0)))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 ^ (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, 0 | (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), (_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), min(_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), (true ? (false ? _GLF_FUZZED(60288) : 0) : _GLF_FUZZED(_injected_loop_counter))), (false ? _GLF_FUZZED(60288) : 0)))) ^ 0)), int(ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), (_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), min(_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : _GLF_IDENTITY(0, clamp(0, 0, 0))), (true ? (false ? _GLF_FUZZED(60288) : 0) : _GLF_FUZZED(_injected_loop_counter))), (false ? _GLF_FUZZED(60288) : 0)))) ^ 0)), 0))), max(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))), _GLF_IDENTITY(((false ? _GLF_IDENTITY(_GLF_FUZZED(60288), _GLF_IDENTITY((_GLF_FUZZED(60288)), (true ? _GLF_IDENTITY((_GLF_FUZZED(60288)), max((_GLF_FUZZED(60288)), (_GLF_FUZZED(60288)))) : _GLF_FUZZED(-33601))) | (_GLF_FUZZED(60288))) : 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((false ? _GLF_IDENTITY(_GLF_FUZZED(60288), (_GLF_FUZZED(60288)) | (_GLF_FUZZED(60288))) : 0)), (((false ? _GLF_IDENTITY(_GLF_FUZZED(60288), (_GLF_FUZZED(60288)) | (_GLF_FUZZED(60288))) : 0))) ^ 0)), int(ivec3(~ (_GLF_IDENTITY(((false ? _GLF_IDENTITY(_GLF_FUZZED(60288), _GLF_IDENTITY((_GLF_FUZZED(60288)), max((_GLF_FUZZED(60288)), (_GLF_FUZZED(60288)))) | (_GLF_FUZZED(60288))) : 0)), (((false ? _GLF_IDENTITY(_GLF_FUZZED(60288), (_GLF_FUZZED(60288)) | (_GLF_FUZZED(60288))) : 0))) ^ 0)), 1, 0))))) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)), max(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(60288, (60288) << 0)) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), _GLF_IDENTITY(((false ? _GLF_FUZZED(60288) : 0)) ^ 0, min(((false ? _GLF_FUZZED(60288) : 0)) ^ 0, ((false ? _GLF_FUZZED(60288) : 0)) ^ 0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), 0 | ((false ? _GLF_FUZZED(60288) : 0))), (false ? _GLF_FUZZED(60288) : 0), (false ? _GLF_FUZZED(60288) : 0))), (_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), 0 | ((false ? _GLF_FUZZED(60288) : 0))), (false ? _GLF_FUZZED(60288) : 0), (false ? _GLF_FUZZED(60288) : 0)))) << 0), ((false ? _GLF_IDENTITY(_GLF_FUZZED(60288), (_GLF_FUZZED(60288)) | (_GLF_FUZZED(60288))) : 0)) ^ 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)), max(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : _GLF_IDENTITY(0, (-39290 & 0) ^ (_GLF_IDENTITY(0, int(int(0))))))) ^ 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), (_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), max((false ? _GLF_FUZZED(60288) : 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(60288, ~ (~ (60288)))) : 0, min(false ? _GLF_FUZZED(_GLF_IDENTITY(60288, ~ (~ (60288)))) : 0, false ? _GLF_FUZZED(_GLF_IDENTITY(60288, ~ (~ (60288)))) : 0)))))) ^ 0)), max(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), (_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), 0 | (_GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), clamp((false ? _GLF_FUZZED(60288) : 0), _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), int(_GLF_IDENTITY(ivec2((false ? _GLF_FUZZED(60288) : _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), 0, 1)))), 0), ivec2(ivec3(ivec2((false ? _GLF_FUZZED(60288) : _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), 0, 1)))), 0), 1))))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (false ? _GLF_FUZZED(60288) : 0) / 1), false ? _GLF_FUZZED(60288) : 0, false ? _GLF_FUZZED(60288) : 0))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (true ? false ? _GLF_FUZZED(60288) : 0 : _GLF_FUZZED(ivec4(-3045, 35761, -43967, 27898).s)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (false ? _GLF_FUZZED(60288) : 0) / 1), false ? _GLF_FUZZED(60288) : 0, false ? _GLF_FUZZED(60288) : 0))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (true ? false ? _GLF_FUZZED(60288) : 0 : _GLF_FUZZED(ivec4(-3045, 35761, -43967, 27898).s)))))), ~ (~ ((_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (false ? _GLF_FUZZED(60288) : 0) / 1), false ? _GLF_FUZZED(60288) : 0, false ? _GLF_FUZZED(60288) : 0))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (true ? false ? _GLF_FUZZED(60288) : 0 : _GLF_FUZZED(ivec4(-3045, 35761, -43967, 27898).s)))))))))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (false ? _GLF_FUZZED(60288) : 0) / 1), false ? _GLF_FUZZED(60288) : 0, false ? _GLF_FUZZED(60288) : 0))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (true ? false ? _GLF_FUZZED(60288) : 0 : _GLF_FUZZED(ivec4(-3045, 35761, -43967, 27898).s)))))), ~ (~ ((_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (false ? _GLF_FUZZED(60288) : 0) / 1), false ? _GLF_FUZZED(60288) : 0, false ? _GLF_FUZZED(60288) : 0))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(60288) : 0, (true ? false ? _GLF_FUZZED(60288) : 0 : _GLF_FUZZED(ivec4(-3045, 35761, -43967, 27898).s))))))))))) / 1)))))))) ^ 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(60288) : 0), ((false ? _GLF_FUZZED(60288) : 0)) ^ 0))))) ^ 0), 0)))))) << 0))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false))));
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) - 0u)) * 1u) + 1 < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(false))))), true && (! (_GLF_IDENTITY((bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(false))))))))) && true)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, min(64, 64)), 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && _GLF_IDENTITY((false), bool(bvec2((false), true))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)))), true)), ! (! (bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true && (false), true && (true && (false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true && (false), true && (true && (false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true && (false), true && (true && (false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)))), true))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bool(true && (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (true && (false)) || false), _GLF_IDENTITY(true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(! (! (_GLF_IDENTITY(true, (true) || false))), true, false)))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(! (! (_GLF_IDENTITY(true, (true) || false))), true, false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && (false)), _GLF_IDENTITY(bool(bvec4(true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(! (! (_GLF_IDENTITY(true, (true) || false))), true, false)))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(! (! (_GLF_IDENTITY(true, (true) || false))), true, false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && (false)), true, true, false)), true && (bool(bvec4(true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(! (! (_GLF_IDENTITY(true, (true) || false))), true, false)))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) || false))), bool(bvec3(! (! (_GLF_IDENTITY(true, (true) || false))), true, false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && (false)), true, true, false)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true))))), bool(_GLF_IDENTITY(bvec2(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true))))), true), bvec2(bvec2(bvec2(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true))))), true))))))) && (true && _GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false || ((_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)))))), ! (_GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true && (false)))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true, false, true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false))))))), ! (! (! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), ! (! (((false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))) && true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)), true, true, false)))))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true, false, true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(true, true)), true, false), bvec3(bvec3(bvec3(bool(bvec2(true, true)), true, false)))))), bool(bvec2(bool(bvec2(true, true)), true)))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), ! (! (((false)))))))), _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))) && true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, false, true)), ! (! (bool(bvec4((false), false, false, true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)), true, true, false)))))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true, false, true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))))) || false))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true))))), ! (! (false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true))))))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec3(bool(bvec2(true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec2(bool(bvec2(true, true)), true)))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false)))), true)))))) && (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), ! (! (((false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))) && true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, (true) && true), false))), true)), true, true, false)))))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true, false, true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)))))))))))))))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), clamp((1 << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4)))) / 1), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), ! (! (false)))) || false)))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))), injectionSwitch.x))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(vec2(84.07, -380.648)) : vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))), exp(0.0), 1.0, sqrt(round(length(normalize(vec2(1.0, 1.0))))), 0.0, 0.0, 0.0))).y))))));
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bvec2(bool(bvec3(true, true, false)), false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bvec2(bool(bvec3(true, true, false)), false)))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, false || (false)))), bool(bvec2(bool(bvec3(true, _GLF_IDENTITY(true, true && (true)), false)), false))))))) || false))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = ((0 & ivec3(-93657, 46881, 18749).z) & -9180); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0)), vec2(0.0, 0.0) + _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))), mix(vec2(_GLF_FUZZED(3.1), ((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))))[1]), vec2(((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))))[0], _GLF_FUZZED(97.32)), bvec2(true, false))))), injectionSwitch, injectionSwitch)))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0)), vec2(0.0, 0.0) + _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))), mix(vec2(_GLF_FUZZED(3.1), ((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-12.91)), float(_GLF_IDENTITY(1.0, (1.0) / exp(0.0))), bool(true)))))))[1]), vec2(((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))))[0], _GLF_FUZZED(97.32)), bvec2(true, _GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))), injectionSwitch, injectionSwitch)))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, cos(0.0))), mix(vec2(_GLF_FUZZED(321.529), (vec2(mat2x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, cos(0.0))))[1]), vec2((vec2(mat2x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, cos(0.0))))[0], _GLF_FUZZED(-66.31)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, sin(0.0), sin(0.0), exp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3467.5342)), bool(false)))), 1.0)), vec2(0.0, 0.0) + _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))), mix(vec2(_GLF_FUZZED(3.1), ((vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), float(mat3x4(_GLF_IDENTITY(sin(0.0), min(_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(771.128)), float(sin(0.0)), bool(true))), sin(0.0))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0))), sin(0.0), exp(0.0), 1.0))))[1]), vec2(((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))))[0], _GLF_FUZZED(97.32)), bvec2(true, false))))), injectionSwitch, injectionSwitch)))))).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0)), vec2(0.0, 0.0) + _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))), mix(vec2(_GLF_FUZZED(3.1), ((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(0.0), sin(0.0), exp(0.0), 1.0))))[1]), vec2(((vec2(mat2x4(injectionSwitch, 1.0, 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0)))), sin(0.0), exp(0.0), 1.0))))[0], _GLF_FUZZED(97.32)), bvec2(true, false))))), injectionSwitch, injectionSwitch)))))).x)) > injectionSwitch.y))) || false)))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true))), true)))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1 * (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     barrier();
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0))).y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       subgroupAll(false);
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.3)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, true && (true))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
           for(int _injected_loop_counter = (_GLF_IDENTITY(1, max(1, 1)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, clamp(_GLF_IDENTITY(read, (read) + _GLF_IDENTITY(0u, (0u) * 1u)), read, _GLF_IDENTITY(read, min(read, read)))), 4, 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true)));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}
