#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_35 {
 mat4 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_32 {
 mat3x2 _f0;
} ;

struct _GLF_struct_33 {
 _GLF_struct_32 _f0;
} ;

struct _GLF_struct_30 {
 mat2 _f0;
} ;

struct _GLF_struct_29 {
 bvec3 _f0;
 vec4 _f1;
 bvec2 _f2;
 uint _f3;
 vec4 _f4;
} ;

struct _GLF_struct_31 {
 ivec4 _f0;
 _GLF_struct_29 _f1;
 mat4 _f2;
 bvec4 _f3;
 mat3x4 _f4;
 _GLF_struct_30 _f5;
} ;

struct _GLF_struct_27 {
 uvec4 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 ivec2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_26 {
 bvec4 _f0;
 bvec2 _f1;
 ivec4 _f2;
 int _f3;
 uvec2 _f4;
 ivec4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_28 {
 _GLF_struct_26 _f0;
 mat2x3 _f1;
 _GLF_struct_27 _f2;
} ;

struct _GLF_struct_24 {
 mat3x2 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_25 {
 bool _f0;
 _GLF_struct_24 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_23 {
 mat2 _f0;
} ;

struct _GLF_struct_34 {
 _GLF_struct_23 _f0;
 _GLF_struct_25 _f1;
 mat2x4 _f2;
 _GLF_struct_28 _f3;
 _GLF_struct_31 _f4;
 _GLF_struct_33 _f5;
} ;

struct _GLF_struct_21 {
 float _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_19 {
 float _f0;
 uvec4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_20 {
 mat4x2 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
 _GLF_struct_19 _f3;
 mat2x3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_17 {
 bvec2 _f0;
 mat4x2 _f1;
 mat2 _f2;
 uvec3 _f3;
 bvec4 _f4;
 bvec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_16 {
 vec3 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 mat3 _f4;
 mat4x3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
} ;

struct _GLF_struct_22 {
 _GLF_struct_18 _f0;
 _GLF_struct_20 _f1;
 _GLF_struct_21 _f2;
 ivec2 _f3;
 uint virtual_gid;
} ;

struct _GLF_struct_13 {
 bvec4 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 ivec3 _f3;
 ivec2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_12 {
 uvec4 _f0;
 mat2x3 _f1;
 bvec2 _f2;
 mat3 _f3;
 mat3x4 _f4;
 bvec2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 mat2 _f1;
 _GLF_struct_13 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_15 {
 uint workgroup_base;
 _GLF_struct_14 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_8 {
 bool _f0;
 mat3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 vec4 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 bvec3 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_5 {
 uint _f0;
 ivec2 _f1;
 mat3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 mat3x2 _f1;
 int _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 uvec3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 ivec4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 uint read;
 mat4 _f1;
 mat2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_0 {
 float _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uvec4 _f1;
 _GLF_struct_1 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_11 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 float _f2;
 _GLF_struct_7 _f3;
 float _f4;
 _GLF_struct_10 _f5;
 ivec4 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(mat4(1.0), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(workgroup_size * workgroup_id, _GLF_struct_14(_GLF_struct_12(uvec4(1u), mat2x3(1.0), bvec2(true), mat3(1.0), mat3x4(1.0), bvec2(true), mat3(1.0)), mat2(1.0), _GLF_struct_13(bvec4(true), mat4x3(1.0), uvec2(1u), ivec3(1), ivec2(1), vec3(1.0)), ivec2(1)), mat3x4(1.0));
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_18(_GLF_struct_16(vec3(1.0), bvec4(true), mat3x4(1.0), ivec2(1), mat3(1.0), mat4x3(1.0), ivec2(1)), _GLF_struct_17(bvec2(true), mat4x2(1.0), mat2(1.0), uvec3(1u), bvec4(true), bvec3(true), vec3(1.0))), _GLF_struct_20(mat4x2(1.0), mat2x4(1.0), mat2x4(1.0), _GLF_struct_19(1.0, uvec4(1u), mat4x3(1.0)), mat2x3(1.0), ivec4(1)), _GLF_struct_21(1.0, ivec3(1)), ivec2(1), _GLF_struct_replacement_15.workgroup_base + subgroup_base + _GLF_struct_replacement_35.subgroup_local_id);
 uint next_virtual_gid = _GLF_struct_replacement_15.workgroup_base + subgroup_base + ((_GLF_struct_replacement_35.subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_2(_GLF_struct_0(1.0), uvec4(1u), _GLF_struct_1(vec2(1.0), 0, mat4(1.0), mat2(1.0), mat2(1.0)), mat4x2(1.0)), _GLF_struct_3(bvec3(true), ivec4(1), mat3x2(1.0)), 1.0, _GLF_struct_7(mat4x2(1.0), uvec3(1u), _GLF_struct_4(mat3x4(1.0), mat3x2(1.0), 1, ivec3(1)), _GLF_struct_5(1u, ivec2(1), mat3(1.0), mat2(1.0)), _GLF_struct_6(uvec2(1u), bvec3(true), uvec2(1u), mat2x4(1.0), ivec3(1))), 1.0, _GLF_struct_10(bvec4(true), vec4(1.0), _GLF_struct_8(true, mat3(1.0), bvec3(true)), _GLF_struct_9(bvec3(true), bvec3(true))), ivec4(1));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if((_GLF_struct_replacement_35.subgroup_local_id % 2) == 0)
              {
               subgroupAll(false);
               _GLF_struct_replacement_11._f0._f2.read = atomicLoad(buf[_GLF_struct_replacement_22.virtual_gid], 4, 64, 2);
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 subgroupAll(false);
                }
               do
                {
                 for(_GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(_GLF_struct_23(mat2(1.0)), _GLF_struct_25(true, _GLF_struct_24(mat3x2(1.0), 1), mat3(1.0)), mat2x4(1.0), _GLF_struct_28(_GLF_struct_26(bvec4(true), bvec2(true), ivec4(1), 1, uvec2(1u), ivec4(1), mat2x3(1.0)), mat2x3(1.0), _GLF_struct_27(uvec4(1u), mat4x2(1.0), bvec2(true), ivec2(1), vec2(1.0))), _GLF_struct_31(ivec4(1), _GLF_struct_29(bvec3(true), vec4(1.0), bvec2(true), 1u, vec4(1.0)), mat4(1.0), bvec4(true), mat3x4(1.0), _GLF_struct_30(mat2(1.0))), _GLF_struct_33(_GLF_struct_32(mat3x2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_34._f1._f1._injected_loop_counter != 0); _GLF_struct_replacement_34._f1._f1._injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     _GLF_struct_replacement_11._f0._f2.read = atomicLoad(buf[_GLF_struct_replacement_22.virtual_gid], 4, 64, 2);
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 subgroupBarrier();
 atomicStore(checker[_GLF_struct_replacement_22.virtual_gid], _GLF_struct_replacement_11._f0._f2.read, 4, 64, 4);
}
