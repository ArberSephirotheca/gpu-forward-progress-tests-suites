#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec4 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.xy = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.zw = GLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.y = num_workgroup;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.xy.y = workgroup_id;
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.xy.y;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.xy.x = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x;
 uint virtual_gid = GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.xy.x + subgroup_id * subgroup_size + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.z;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.w = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.xy.x + subgroup_id * subgroup_size + ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.z + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.x = next_virtual_gid;
 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.zw.x = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.zw.x], uint(1), 4, 64, 4);
  }
 else
  {
  }
 uint read = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.w], 4, 64, 0);
 GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.zw.y = read;
 if(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.z + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       atomicStore(checker[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.w], GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.zw.y, 4, 64, 4);
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     subgroupAll(false);
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     atomicStore(checker[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidnum_workgroupsubgroup_local_idvirtual_gid.w], GLF_merged2_0_2_51_2_2_44GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_16_1_1_4next_virtual_gidread.zw.y, 4, 64, 4);
    }
   subgroupAll(true);
  }
}
