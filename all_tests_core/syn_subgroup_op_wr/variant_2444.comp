#version 460
struct _GLF_struct_28 {
 mat4x3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_27 {
 vec4 _f0;
 bvec2 _f1;
 bvec3 _f2;
 bvec3 _f3;
 vec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_26 {
 bvec3 _f0;
 vec3 _f1;
 ivec2 _f2;
 vec2 _f3;
 mat4x2 _f4;
 mat4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_25 {
 vec3 _f0;
 vec4 _f1;
 mat2 _f2;
 float _f3;
 ivec4 _f4;
 mat4x3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_29 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_27 _f2;
 mat4x2 _f3;
 _GLF_struct_28 _f4;
} ;

struct _GLF_struct_23 {
 vec2 _f0;
 bvec3 _f1;
 uvec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_22 {
 float _f0;
 mat4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_21 {
 uvec4 _f0;
 uint num_workgroup;
 mat2x4 _f1;
 mat3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_20 {
 uvec4 _f0;
 vec2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 mat2 _f2;
 _GLF_struct_22 _f3;
 _GLF_struct_23 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_30 {
 _GLF_struct_24 _f0;
 _GLF_struct_29 _f1;
 mat2 _f2;
 ivec4 _f3;
 ivec2 _f4;
 bvec2 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_18 {
 bool _f0;
 mat3x2 _f1;
 uvec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 ivec2 _f1;
 ivec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_15 {
 mat2x4 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 ivec3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_12 {
 mat4x3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 bvec3 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 bvec2 _f1;
 _GLF_struct_17 _f2;
 _GLF_struct_18 _f3;
 vec3 _f4;
 uint next_virtual_gid;
} ;

struct _GLF_struct_11 {
 uint subgroup_local_id;
 mat4x2 _f0;
 bool _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_10 {
 uint read;
 ivec4 _f0;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 mat4x2 _f1;
 uint _f2;
 mat4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_6 {
 int _f0;
 ivec3 _f1;
 uvec3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 _GLF_struct_6 _f1;
 mat4 _f2;
 int _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 vec4 _f1;
 uvec4 _f2;
 bvec2 _f3;
 mat3 _f4;
 int _f5;
 mat3 _f6;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 uvec4 _f1;
 float _f2;
 mat4 _f3;
 int _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 mat4 _f1;
 bvec2 _f2;
 vec2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 bvec4 _f1;
 _GLF_struct_5 _f2;
 uvec2 _f3;
 _GLF_struct_8 _f4;
 uint virtual_gid;
 float _f5;
 vec4 _f6;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 ivec3 _f1;
 uvec4 _f2;
 bool _f3;
 uvec4 _f4;
 mat2x4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uint workgroup_id;
 mat2x3 _f1;
 uint _f2;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 _GLF_struct_1 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(gl_SubgroupInvocationID, mat4x2(1.0), true, ivec3(1));
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(_GLF_struct_24(_GLF_struct_20(uvec4(1u), vec2(1.0), ivec2(1)), _GLF_struct_21(uvec4(1u), gl_NumWorkGroups.x, mat2x4(1.0), mat3(1.0), mat3x2(1.0)), mat2(1.0), _GLF_struct_22(1.0, mat4(1.0), bvec3(true)), _GLF_struct_23(vec2(1.0), bvec3(true), uvec3(1u), mat2(1.0)), ivec2(1)), _GLF_struct_29(_GLF_struct_25(vec3(1.0), vec4(1.0), mat2(1.0), 1.0, ivec4(1), mat4x3(1.0), uvec2(1u)), _GLF_struct_26(bvec3(true), vec3(1.0), ivec2(1), vec2(1.0), mat4x2(1.0), mat4(1.0), mat2(1.0)), _GLF_struct_27(vec4(1.0), bvec2(true), bvec3(true), bvec3(true), vec3(1.0), bvec3(true)), mat4x2(1.0), _GLF_struct_28(mat4x3(1.0), mat3x4(1.0), mat2x4(1.0))), mat2(1.0), ivec4(1), ivec2(1), bvec2(true), bvec4(true));
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(vec3(1.0), _GLF_struct_1(_GLF_struct_0(ivec3(1), ivec3(1), uvec4(1u), true, uvec4(1u), mat2x4(1.0), vec4(1.0)), gl_WorkGroupID.x, mat2x3(1.0), 1u));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_2._f1.workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(uvec2(1u), bvec4(true), _GLF_struct_5(mat4x3(1.0), mat4(1.0), bvec2(true), vec2(1.0), _GLF_struct_3(bvec3(true), uvec4(1u), 1.0, mat4(1.0), 1, ivec4(1)), _GLF_struct_4(bvec3(true), vec4(1.0), uvec4(1u), bvec2(true), mat3(1.0), 1, mat3(1.0)), ivec3(1)), uvec2(1u), _GLF_struct_8(mat2(1.0), _GLF_struct_6(1, ivec3(1), uvec3(1u), bvec3(true)), mat4(1.0), 1, _GLF_struct_7(vec3(1.0), mat4x2(1.0), 1u, mat4(1.0), mat3(1.0))), workgroup_base + subgroup_base + _GLF_struct_replacement_11.subgroup_local_id, 1.0, vec4(1.0));
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(vec2(1.0), bvec2(true), _GLF_struct_17(_GLF_struct_12(mat4x3(1.0), mat2(1.0)), _GLF_struct_13(uvec2(1u), ivec3(1), mat4x2(1.0)), _GLF_struct_14(uvec3(1u), mat3x2(1.0)), bvec3(true), _GLF_struct_15(mat2x4(1.0), uvec3(1u), mat2x4(1.0), bvec2(true)), _GLF_struct_16(mat4x3(1.0), ivec2(1), ivec3(1), true)), _GLF_struct_18(true, mat3x2(1.0), uvec3(1u), mat2x4(1.0)), vec3(1.0), workgroup_base + subgroup_base + ((_GLF_struct_replacement_11.subgroup_local_id + 1) % subgroup_size));
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(0, ivec4(1));
 atomicStore(buf[_GLF_struct_replacement_19.next_virtual_gid], uint(1), 4, 64, 4);
 if((_GLF_struct_replacement_11.subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   _GLF_struct_replacement_10.read = atomicLoad(buf[_GLF_struct_replacement_9.virtual_gid], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   _GLF_struct_replacement_10.read = atomicLoad(buf[_GLF_struct_replacement_9.virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[_GLF_struct_replacement_9.virtual_gid], _GLF_struct_replacement_10.read, 4, 64, 4);
}
