#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))) || false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false, true)), bool(bvec3(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), false, false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.1), _GLF_FUZZED((9.7 / -68.00))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, (false) || false), false))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         break;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))) || false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(_GLF_IDENTITY(transpose(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), mat2(1.0) * (transpose(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-4154.4518), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(-4154.4518), float(mat2x4(_GLF_FUZZED(-4154.4518), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), _GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(7737.7793)), float(float(injectionSwitch.x)), bool(true))), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(67.91)), float(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0)))))), bool(true)), mix(float(_GLF_FUZZED(9.8)), float(mix(float(_GLF_FUZZED(67.91)), float(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0)))))), bool(true))), bool(true)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0))))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), 0.0)))), bool(true))), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, abs(1.0), length(vec2(0.0, 0.0)), 0.0, 0.0)))), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4154.4518)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0)))))))))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), tan(0.0), 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 0.0, 1.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)), 0.0 + (float(mat4x2(0.0, 0.0, 1.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))))), injectionSwitch.x)), transpose(_GLF_IDENTITY(transpose(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), mat2(1.0) * (transpose(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(_GLF_IDENTITY(0.0, (0.0) + 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0), 1.0, tan(0.0), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), transpose(_GLF_IDENTITY(transpose(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), mat2(1.0) * (transpose(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 1.0, 1.0, tan(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bool(bvec2(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.z = subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true)))))))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))))))), true)))) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))), bool(bool(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))))))))) && true)))))))) || false))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true)))))))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))))))), true)))) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))), bool(bool(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))))))))) && true)))))))) || false)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)), bvec3(bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)), bvec3(bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))))), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec4(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec4(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))))))))) || false) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true)))))))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && true))))))))))), true, true)))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), (bool(! (_GLF_DEAD(false)))) && true)), true, true)))))))))), _GLF_IDENTITY(true, (true) || false))))) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), ! (! (bool(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))) && true)), true, true))))))))), bool(bool(_GLF_IDENTITY(bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))), bool(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, true)))))))))))))))))))) && true)))))))) || false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true, false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))) && true)))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(cos(8.8)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), ! (! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), (false ? _GLF_FUZZED(uvec3(35136u, 89301u, 172785u)) : uvec3(uvec4(gl_NumWorkGroups, 0u))))))).x, (gl_NumWorkGroups.x) / 1u)) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x))) | (gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), false, true))))))) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.y = num_workgroup, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.y = _GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup))) ^ 0u);
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false), bvec3(bvec3(bvec3(true, true, false))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))), (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))) || false))), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))), (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))) || false))), true, false)))))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))), (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))) || false))), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))), (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))) || false))), true, false))))))))))))), true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(bvec3(true, true, false))))))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))), bool(bool(! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(bvec3(true, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(bvec3(true, true, false)))))) && true))), true)))))) && true, _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(bvec3(true, true, false))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, true, false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false)))))))))))))))), true))), (_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, true, false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false)))))))))))))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, true, false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false)))))))))))))))), true))))))) && true)))) && true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(bool(bvec3((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bool(false))), true, false)))), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), true))), false))), bvec3(bvec3(bvec3(true, true, false))))))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(bvec3(true, true, false))))))), true)))))) && true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(bool(bvec3((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(bvec3(true, true, false))))))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), true))))))))), true)))), ! (! (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))), true))))))))), true))))))))) && true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true), true)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.w = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.w = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y) / 1u);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec2(33.04, 6786.1523)) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.w * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-33.87) : injectionSwitch.y))), 0.0 + (_GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), mix(float(min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(float(_GLF_FUZZED(-83.11)), float(mat3x2(float(_GLF_FUZZED(-83.11)), 1.0, 1.0, 1.0, determinant(mat3(determinant(mat2(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sin(0.0), 0.0)), exp(0.0)))), _GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))))))))))))
  return;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)) ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec2((subgroup_size), 0u)), (uint(uvec2((subgroup_size), 0u))) | (uint(uvec2((subgroup_size), 0u)))))))), (true ? (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), 0u)), (uint(uvec2((subgroup_size), 0u))) | (uint(uvec2((subgroup_size), 0u)))))))) : _GLF_FUZZED(65577u))) | _GLF_IDENTITY(((subgroup_size)), 0u | (_GLF_IDENTITY(((subgroup_size)), (((subgroup_size))) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), (((subgroup_size))) | 0u)))))) | 0u) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) - 0u)))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))).x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))), true && (bool(bool(_GLF_IDENTITY(! (false), true && (! (false)))))))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) && true));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.z;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.z + _GLF_IDENTITY(1, (1) - (1 ^ 1)), ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.z + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1, 1)))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))));
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9786.8308), _GLF_FUZZED(-7.2)), bvec2(false, false))).y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2352.1360)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true && (false), ! (! (true && (false)))))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))))) && true), false, true, false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED((7.4 + 70.49)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), true && (bool(bool(! (false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         continue;
        }
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (injectionSwitch.x > injectionSwitch.y))))), false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_size.z % _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) || false), true)), ! (! (bool(bvec2(_GLF_IDENTITY(true, (true) || false), true)))))) ? 2 : _GLF_FUZZED(-93929)))) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 1.0)), mix(vec2(_GLF_FUZZED(71.87), _GLF_FUZZED(6.2)), vec2((vec2(mat2(injectionSwitch, 0.0, 1.0)))[0], (vec2(mat2(injectionSwitch, 0.0, 1.0)))[1]), bvec2(true, true)))).y))), ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))))), min(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (~ (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, 0 | (2)), 2, 2))))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) | (2)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << 0))))) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-10073))))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) && true))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (0 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, tan(0.0)))), injectionSwitch)).x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ivec3(-63680, 27192, -96208).r)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-106.806), clamp(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-106.806), mix(float(_GLF_FUZZED(2005.1402)), float(true ? injectionSwitch.x : _GLF_FUZZED(-106.806)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true ? injectionSwitch.x : _GLF_FUZZED(-106.806), true ? injectionSwitch.x : _GLF_FUZZED(-106.806))))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-106.806), clamp(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-106.806), mix(float(_GLF_FUZZED(2005.1402)), float(true ? injectionSwitch.x : _GLF_FUZZED(-106.806)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true ? injectionSwitch.x : _GLF_FUZZED(-106.806), true ? injectionSwitch.x : _GLF_FUZZED(-106.806))))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.0) : _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0)) << 0))), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.1) : 0.0)), injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) && true)); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(0 | (_injected_loop_counter ++), (0 | (_injected_loop_counter ++)) ^ 0)))
        {
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != 1, false, false)), true && (_GLF_IDENTITY(bool(bvec3(_injected_loop_counter != 1, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_injected_loop_counter != 1, false, false)))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))) || false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
            return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true)), ! (! (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, exp(0.0), sin(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), cos(0.0)))), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(abs(abs(1.0)), mix(float(abs(abs(1.0))), float(_GLF_FUZZED(7.8)), bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))), 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(exp(0.0), clamp(_GLF_IDENTITY(exp(0.0), 1.0 * (_GLF_IDENTITY(exp(0.0), mix(float(exp(0.0)), float(_GLF_FUZZED(-813.980)), bool(false))))), exp(0.0), _GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0)))))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, abs(1.0), 0.0, abs(abs(1.0)), 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, exp(0.0)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat3x4(injectionSwitch.x, 1.0, abs(1.0), 0.0, abs(abs(1.0)), 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, exp(0.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)))), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.9) : 0.0)), 1.0)))), vec4(0.0, 0.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)))), vec4(0.0, 0.0, 1.0, 0.0))))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   barrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
