#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id;
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.z = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.x = num_workgroup;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.w;
 GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.z = workgroup_base;
 uint subgroup_base = GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.z * subgroup_size;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.y = subgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.y + GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.y + ((GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 uint read = 0;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.x = read;
 GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.y = GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.x;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w % 2) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.y = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.y = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) * 1), 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], GLF_merged4_0_1_13_1_1_4_2_1_14_3_1_12num_workgroupreadworkgroup_baseworkgroup_id.y, 4, 64, 4);
}
