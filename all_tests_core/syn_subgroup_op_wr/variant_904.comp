#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u | 0u)) * subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))), 0u + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id))), clamp(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id)))))), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))))))), 0u, (0u ^ 0u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) / 1u)))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), 0u + ((subgroup_id))))))))), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), subgroup_id)), subgroup_id, subgroup_id))) - (0u | 0u))))), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))), _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id)))), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))))) - (0u ^ 0u)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), _GLF_IDENTITY(0u, 0u | (0u)), (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id)))), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) / 1u) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((subgroup_id) | (subgroup_id)))), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - (0u | 0u))))), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), min(_GLF_IDENTITY((subgroup_id), min(_GLF_IDENTITY((subgroup_id), clamp((subgroup_id), (subgroup_id), (subgroup_id))), (subgroup_id))), _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))))))) - (0u | 0u)) * subgroup_size) << 0u)))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(clamp(subgroup_id, subgroup_id, subgroup_id), min(clamp(subgroup_id, subgroup_id, subgroup_id), clamp(subgroup_id, subgroup_id, subgroup_id)))), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), clamp(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))), clamp(subgroup_id, subgroup_id, subgroup_id)), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), 0u, (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u), subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))))), subgroup_id * subgroup_size)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), 0u)), (0u ^ 0u), 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) - (0u | 0u)) * subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base))))) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / 1u), workgroup_base + subgroup_base + subgroup_local_id)), 0u | (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id) / 1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(packUnorm4x8(vec4(-678.785, -2.3, 800.047, -2527.6961))) : (workgroup_base + subgroup_base + subgroup_local_id) / 1u))), workgroup_base + subgroup_base + subgroup_local_id))))))) + 0u);
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), clamp((((subgroup_local_id + 1) % subgroup_size)), (((subgroup_local_id + 1) % subgroup_size)), (((subgroup_local_id + 1) % subgroup_size)))), max((((subgroup_local_id + 1) % subgroup_size)), (((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1)))))) % subgroup_size)))) | 0u);
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), int(ivec3(_GLF_IDENTITY(0, max(0, 0)), 1, 1))), _GLF_IDENTITY((_GLF_IDENTITY(0, max(0, 0))) - 0, int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, max(0, 0))) - 0, ~ (~ ((_GLF_IDENTITY(0, max(0, 0))) - 0))), 0, 0))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
        }
       else
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), max((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uvec3(subgroup_local_id % 2, 0u, 1u)), uint(uvec3(uint(uvec3(subgroup_local_id % 2, 0u, 1u)), 0u, 1u)))), subgroup_local_id % 2)), 0u | (subgroup_local_id % 2))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))) % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2)))))))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) + 0u)) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), max((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uvec3(subgroup_local_id % 2, 0u, 1u)), uint(uvec3(uint(uvec3(subgroup_local_id % 2, 0u, 1u)), 0u, 1u)))), subgroup_local_id % 2)), 0u | (subgroup_local_id % 2))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2)))))))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2))))))) + 0u)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), max((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uvec3(subgroup_local_id % 2, 0u, 1u)), uint(uvec3(uint(uvec3(subgroup_local_id % 2, 0u, 1u)), 0u, 1u)))), subgroup_local_id % 2)), 0u | (subgroup_local_id % 2))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2)), ~ (~ (_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id % 2))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) + 0u)) >> 0u, ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) + 0u)) >> 0u) >> 0u)))) == 0)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0)))) / 1.0) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), false || (! (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), ! (! ((! (injectionSwitch.x < injectionSwitch.y)))))) || false), true, false, false))))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                                {
                                 do
                                  {
                                   do
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                                      {
                                       do
                                        {
                                         do
                                          {
                                           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), clamp(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                                            {
                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) / 1)); _injected_loop_counter --)
                                                    {
                                                     do
                                                      {
                                                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                                        {
                                                         subgroupAll(false);
                                                        }
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(false));
                                                    }
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(5.2, -4.4)) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))))).x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     else
                                      {
                                      }
                                    }
                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))));
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch))) - sin(vec2(0.0, 0.0))).y)))));
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                                      {
                                       do
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             read = atomicLoad(buf[virtual_gid], 4, 64, 2);
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                                        }
                                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))));
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(6.8, 827.006)) : (injectionSwitch) * mat2(1.0)))).y))))
                          {
                          }
                         else
                          {
                           do
                            {
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_IDENTITY(false, (false) || false), false)))))))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                                                      {
                                                       do
                                                        {
                                                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                                                          {
                                                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))), bool(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))), true))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false))), false), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || (bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), false)), true)), true))))))))))))))) && true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true))))))))))), ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))) || false)))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, true && (true))), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))), true && ((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))))))))) && true)))))))), true, _GLF_IDENTITY(false, (false) && true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, false)), false)), false)))))), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || (bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), false)), true)), true))))))))))))))) && true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true))))))))))), ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))) || false)))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, true && (true))), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))), true && ((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))))))))) && true)))))))), true, _GLF_IDENTITY(false, (false) && true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, false)), false)), false)))))), true)))))), true)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))), bool(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))), true))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false))), false), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || (bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), false)), true)), true))))))))))))))) && true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true))))))))))), ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))) || false)))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, true && (true))), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))), true && ((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))))))))) && true)))))))), true, _GLF_IDENTITY(false, (false) && true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, false)), false)), false)))))), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || (bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), false)), true)), true))))))))))))))) && true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true))))))))))), ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))) || false)))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, true && (true))), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))), true && ((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))))))))) && true)))))))), true, _GLF_IDENTITY(false, (false) && true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, false)), false)), false)))))), true)))))), true)))))), (bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))), bool(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))), true))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false))), false), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || (bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), false)), true)), true))))))))))))))) && true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true))))))))))), ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))) || false)))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, true && (true))), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))), true && ((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))))))))) && true)))))))), true, _GLF_IDENTITY(false, (false) && true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, false)), false)), false)))))), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || (bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), false)), true)), true))))))))))))))) && true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) || _GLF_IDENTITY((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((true), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true))))))))))), ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, false || (false))), bvec2(bvec2(bvec2((true), false)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true, true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((true), false)), true)), true)))))))))))) || false)))), ((_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, true && (true))), false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))), true && ((bool(_GLF_IDENTITY(bvec2((true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2((true), false)), true)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))))))))), false)), true)), true))))))))))))))))) && true)))))))), true, _GLF_IDENTITY(false, (false) && true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, false)), false)), false)))))), true)))))), true))))))) && true))))
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3((0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 | (0))))), (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, 1))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0), (ivec3(_GLF_IDENTITY((0 | 0), (true ? (0 | 0) : _GLF_FUZZED(atomicOr(_injected_loop_counter, _injected_loop_counter)))), (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))))))) + _GLF_IDENTITY(ivec3(0, 0, 0), _GLF_IDENTITY((ivec3(0, 0, 0)), max((ivec3(0, 0, 0)), (ivec3(0, 0, 0)))) | _GLF_IDENTITY((ivec3(0, 0, 0)), ((ivec3(0, 0, 0))) >> (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(0), ivec3(0)))))), ((ivec3(1, 1, 1) << _GLF_IDENTITY(ivec3(7), ivec3(7))) >> _GLF_IDENTITY(ivec3(7), ivec3(7))) * (_GLF_IDENTITY(_GLF_IDENTITY(ivec3((0 | 0), (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0), min(ivec3((0 | 0), (1 ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.4), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-1.5)), float((injectionSwitch)[1]), bool(true)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-33.04)), bvec2(true, false))).x))), 0), _GLF_IDENTITY(ivec3((0 | 0), (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0), (false ? _GLF_FUZZED(ivec3(15026, 91768, -99943)) : ivec3((0 | 0), (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0))))), (ivec3(_GLF_IDENTITY((0 | 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 | 0), (true ? (0 | 0) : _GLF_FUZZED(_injected_loop_counter)))), (~ (_GLF_IDENTITY((0 | 0), (true ? (0 | 0) : _GLF_FUZZED(_injected_loop_counter))))) << 0))), (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0)) + ivec3(0, 0, 0)))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (1 ^ 1) ^ (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (1 ^ 1) ^ (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (1 ^ 1) ^ (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)), true, true), true))))); _injected_loop_counter ++)
                                                                {
                                                                 do
                                                                  {
                                                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       subgroupAll(false);
                                                                      }
                                                                    }
                                                                  }
                                                                 while(_GLF_WRAPPED_LOOP(false));
                                                                }
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                                }
                                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0)))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0))))))) && true));
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, injectionSwitch.x))), float(_GLF_FUZZED(-24.12)), bool(false))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, exp(0.0), 1.0)), clamp(float(vec3(1.0, exp(0.0), 1.0)), _GLF_IDENTITY(float(vec3(1.0, exp(0.0), 1.0)), float(mat2x3(float(vec3(1.0, exp(0.0), 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0))), float(vec3(1.0, _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 1.0))))), 0.0, 1.0, 0.0), transpose(transpose(mat4x2(injectionSwitch.y, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9596.4512), max(_GLF_IDENTITY(_GLF_FUZZED(-9596.4512), 0.0 + (_GLF_FUZZED(-9596.4512))), _GLF_IDENTITY(_GLF_FUZZED(-9596.4512), (true ? _GLF_FUZZED(-9596.4512) : _GLF_FUZZED(-5.3)))))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / 1.0)), float(_GLF_FUZZED(-622.837)), bool(false))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))))), bool(bvec3(! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9596.4512)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))), false, false)))))));
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(vec3(-7.2, 5542.9679, -161.905).t), _GLF_FUZZED(1927.7918)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (false ? _GLF_FUZZED(uintBitsToFloat(uvec2(80239u, 108163u))) : _GLF_IDENTITY(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(vec3(-7.2, 5542.9679, -161.905).t), _GLF_FUZZED(1927.7918)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mat2(1.0) * (mix(vec2(_GLF_FUZZED(vec3(-7.2, 5542.9679, -161.905).t), _GLF_FUZZED(1927.7918)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), mix(vec2(_GLF_FUZZED(-3.8), (mix(vec2(_GLF_FUZZED(vec3(-7.2, 5542.9679, -161.905).t), _GLF_FUZZED(1927.7918)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) ^ 0)]), vec2((mix(vec2(_GLF_FUZZED(vec3(-7.2, 5542.9679, -161.905).t), _GLF_FUZZED(1927.7918)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))))[0], _GLF_FUZZED(730.484)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))).y))));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) / 1)), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ 0)); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), 0u | (_GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) >> 0)))))) - 0u))) | 0u);
                                }
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), int(6)), (max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) << 0)), 0 ^ (int(6))), int(6))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 1.0, sqrt(1.0), 0.0)), min(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 1.0, sqrt(1.0), 0.0)), mat2(1.0) * (vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 1.0, sqrt(1.0), 0.0)))), vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 1.0, sqrt(1.0), 0.0))))).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.6) : injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) > (_GLF_IDENTITY(0, 0 | (0)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec2(int(7), 0))), (_GLF_IDENTITY(int(7), int(ivec2(int(_GLF_IDENTITY(7, int(ivec4(7, 0, 1, 0)))), 0)))) + _GLF_IDENTITY(0, clamp(0, 0, 0)))))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.8)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))))) < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     subgroupBarrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, min(2, 2))), int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, ~ (~ (read))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) ^ 0), _GLF_IDENTITY(4, ~ (~ (4)))), (0 ^ 0) + (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) | ((4)))))), (clamp(4, 4, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), clamp(_GLF_IDENTITY(~ (4), (~ (4)) - 0), ~ (4), ~ (4))))))) | 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-38603), clamp(_GLF_FUZZED(-38603), _GLF_FUZZED(-38603), _GLF_IDENTITY(_GLF_FUZZED(-38603), min(_GLF_FUZZED(-38603), _GLF_FUZZED(-38603))))) : clamp(4, 4, _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) + 0)))))))) / _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))) ? _GLF_FUZZED(bitfieldExtract(-96162, _injected_loop_counter, -55493)) : 1))))), 64, 4);
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
}
