#version 460
struct _GLF_struct_19 {
 vec4 _f0;
 vec2 _f1;
 float _f2;
 uvec2 _f3;
 bvec2 _f4;
 vec3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_18 {
 uvec4 _f0;
} ;

struct _GLF_struct_16 {
 vec3 _f0;
 mat2x3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_21 {
 uint read;
 _GLF_struct_17 _f0;
 uint _f1;
 ivec2 _f2;
 _GLF_struct_18 _f3;
 bvec2 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_15 {
 uint next_virtual_gid;
 float _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_14 {
 ivec3 _f0;
 uint virtual_gid;
 mat2x3 _f1;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
} ;

struct _GLF_struct_10 {
 int _f0;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
 vec3 _f1;
 bvec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_12 {
 bool _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 uint _f3;
 mat3x2 _f4;
 ivec3 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 vec4 _f1;
 ivec2 _f2;
 int _f3;
} ;

struct _GLF_struct_5 {
 bool _f0;
 uvec2 _f1;
 ivec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
 uint _f3;
 mat2 _f4;
 mat2x4 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 uvec4 _f1;
 uvec2 _f2;
 uvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 mat4 _f1;
 bvec4 _f2;
 uvec4 _f3;
 vec2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_1 {
 int _f0;
} ;

struct _GLF_struct_4 {
 uint _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_4 _f0;
 uint workgroup_base;
 _GLF_struct_7 _f1;
 mat4x3 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat3x4(1.0), gl_WorkGroupID.x);
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_4(1u, _GLF_struct_1(1), _GLF_struct_2(mat3x4(1.0), mat4(1.0), bvec4(true), uvec4(1u), vec2(1.0), ivec2(1)), _GLF_struct_3(ivec4(1), uvec4(1u), uvec2(1u), uvec2(1u), mat4x2(1.0))), workgroup_size * _GLF_struct_replacement_0.workgroup_id, _GLF_struct_7(_GLF_struct_5(true, uvec2(1u), ivec3(1), mat3(1.0)), mat2x4(1.0), mat2x3(1.0), 1u, mat2(1.0), mat2x4(1.0), _GLF_struct_6(vec3(1.0), vec4(1.0), ivec2(1), 1)), mat4x3(1.0), _GLF_struct_8(mat2x4(1.0)), _GLF_struct_12(true, _GLF_struct_9(mat2x3(1.0), vec3(1.0), bvec4(true), uvec2(1u)), _GLF_struct_10(1), 1u, mat3x2(1.0), ivec3(1), _GLF_struct_11(vec4(1.0))));
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(ivec3(1), _GLF_struct_replacement_13.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, mat2x3(1.0));
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_replacement_13.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 1.0, mat3x2(1.0));
 atomicStore(buf[_GLF_struct_replacement_15.next_virtual_gid], uint(1), 4, 64, 4);
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(atomicLoad(buf[_GLF_struct_replacement_14.virtual_gid], 4, 64, 0), _GLF_struct_17(_GLF_struct_16(vec3(1.0), mat2x3(1.0), vec3(1.0))), 1u, ivec2(1), _GLF_struct_18(uvec4(1u)), bvec2(true), _GLF_struct_20(_GLF_struct_19(vec4(1.0), vec2(1.0), 1.0, uvec2(1u), bvec2(true), vec3(1.0), mat3x4(1.0))));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[_GLF_struct_replacement_14.virtual_gid], _GLF_struct_replacement_21.read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(checker[_GLF_struct_replacement_14.virtual_gid], _GLF_struct_replacement_21.read, 4, 64, 4);
   subgroupAll(true);
  }
}
