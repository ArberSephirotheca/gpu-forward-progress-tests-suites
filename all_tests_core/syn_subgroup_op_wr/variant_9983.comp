#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7))))) >> _GLF_IDENTITY(int(7), int(7)))) | (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 7))), (true ? int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 7))) : _GLF_FUZZED(-31620))))) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))));
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)))))))), false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), true, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), true, true))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), true, true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), true, true))))))))), true)))))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))), min(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, 7))), int(ivec2(int(7), 0)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false) ? _GLF_FUZZED(_GLF_IDENTITY((vec2(-896.254, -143.234) * vec2(-4.3, -5.9)), _GLF_IDENTITY(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), clamp(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), _GLF_IDENTITY(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), max(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), _GLF_IDENTITY(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), max(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))))))), _GLF_IDENTITY(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), vec2(mat3x2(mat2(1.0) * ((vec2(-896.254, -143.234) * vec2(-4.3, -5.9))), 0.0, 0.0, 1.0, 0.0))))))) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) || false)))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0)))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec4(injectionSwitch.y, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - vec4(0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec4(injectionSwitch.y, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - vec4(0.0, 0.0, 0.0, 0.0)))) - 0.0))))));
                  }
                }
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) >> 0)), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) >> 0)))), (bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) >> 0))))) && true)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(0u, 0u | (0u)) | (workgroup_id)), workgroup_id, workgroup_id));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)) + subgroup_local_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), int(int(int(5)))), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), int(int(int(5)))))))))))))) >> _GLF_IDENTITY(int(5), int(5))), clamp(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), int(int(int(5)))), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(int(int(5))))), int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(int(5), int(int(int(5))))), 0, 1), (ivec3(~ (_GLF_IDENTITY(int(5), int(int(int(5))))), 0, 1)) - ivec3(0, 0, 0))))))))))))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), int(int(int(5)))), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), int(int(int(5)))))))))))))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), int(int(int(5)))), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), int(int(int(5)))))))))))))) >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read = 0;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-113.160))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))) || false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(80.27)), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(80.27)), bvec2(true, false)))) * mat2(1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, abs(0.0)))).y))))
      {
       for(int _injected_loop_counter = (1 & (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false)), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false)), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false)), true, true)))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec4(bvec3(! (! (false)), false, false), true))))))))), true), true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true)))))), bvec2(bvec3(bvec2(false, true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, (true) || false))))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), true))), true, false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false))))))))), bvec2(bvec3(bvec2(false, true), true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec4(bvec3(! (! (false)), false, false), true))))))))), true), true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true)))))), bvec2(bvec3(bvec2(false, true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, (true) || false))))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), true))), true, false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false))))))))), bvec2(bvec3(bvec2(false, true), true))))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (false)), false, false), bvec3(bvec4(bvec3(! (! (false)), false, false), true))))))))), true), true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true)))), bvec2(bvec2(bvec2(false, true)))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true)))))), bvec2(bvec3(bvec2(false, true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, (true) || false))))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))), false))), bvec2(bvec2(bvec2(false, true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))), false))), bvec2(bvec2(bvec2(false, true)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, (true) || false)))))), _GLF_IDENTITY(true, false || (true)))))), true))), true, false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec2(bvec2(false, true)))), true), false))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), false)))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false))))), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true), false))))), false))))))))), bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(true, true && (true)))))))))))))))) && true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((subgroup_local_id % _GLF_IDENTITY(2, (2) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) == 0)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[0], _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED(51.28), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[1]), bvec2(false, true))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[0], _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED(51.28), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[1]), bvec2(false, true))).x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[0], _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED(51.28), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[1]), bvec2(false, true))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[0], _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED(51.28), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))[1]), bvec2(false, true))).x > injectionSwitch.y)))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bool((_GLF_IDENTITY(false, false || (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(85.72), _GLF_IDENTITY(_GLF_FUZZED(-31.73), float(vec3(_GLF_FUZZED(-31.73), determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), abs(0.0), 0.0, 0.0, 1.0)), abs(0.0))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(608.934)), bool(false))))), (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(17.92)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-34.21) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY((true ? int(3) : _GLF_FUZZED(_injected_loop_counter)), 0 ^ (_GLF_IDENTITY((true ? int(3) : _GLF_FUZZED(_injected_loop_counter)), max((true ? int(3) : _GLF_FUZZED(_injected_loop_counter)), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))))))))), ((~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY((true ? int(3) : _GLF_FUZZED(_injected_loop_counter)), 0 ^ (_GLF_IDENTITY((true ? int(3) : _GLF_FUZZED(_injected_loop_counter)), max((true ? int(3) : _GLF_FUZZED(_injected_loop_counter)), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter)))))))))) >> 0))))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(abs((_injected_loop_counter >> _injected_loop_counter))) : _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(-81294))))))
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bool(! ((injectionSwitch.x < injectionSwitch.y))))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) && true))))) || false)))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-75.20)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false)))), false, false, true)))));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))) || (_GLF_IDENTITY(false, false || (false)))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(int(6), int(6), int(6))), int(6)))); _injected_loop_counter ++)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         subgroupAll(false);
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   _GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))])), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])), (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)) << (0u << _GLF_IDENTITY(uint(5u), uint(5u))))], max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ((buf[_GLF_IDENTITY(virtual_gid, 1u * (_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u)))]) | _GLF_IDENTITY((buf[virtual_gid]), 0u + (_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), (buf[virtual_gid])))))) * 1u)), buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) | (7u))), uint(7u))), clamp((virtual_gid) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), 0u | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u))), (virtual_gid) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), (((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))) ^ (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (virtual_gid) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), 0u + (_GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u))))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid]))), (max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), max(_GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid])))) - 0u), (buf[virtual_gid]))) | (buf[virtual_gid])), buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))) ^ 0u)])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), min(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), 0u | (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, 0u ^ (7u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])))), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ((buf[virtual_gid]) | (buf[virtual_gid])) - 0u)), (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), clamp(_GLF_IDENTITY((buf[virtual_gid]), max((buf[virtual_gid]), (buf[virtual_gid]))), (buf[virtual_gid]), (buf[virtual_gid]))) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))))]))) | (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))), max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, _GLF_IDENTITY(4, (4) | (4))), (max(4, _GLF_IDENTITY(4, (4) | (4)))) << 0)), 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), max((buf[virtual_gid]) | (buf[virtual_gid]), (buf[virtual_gid]) | (buf[virtual_gid])))), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), 0u ^ (uint(7u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2), 0u ^ (read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-5.6)), bool(false))))))) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uint(buf[virtual_gid])), (false ? _GLF_FUZZED(subgroup_size) : uint(uint(buf[virtual_gid])))))) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), uint(uint(_GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), 0u ^ (_GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ~ (~ ((buf[virtual_gid]) | (buf[virtual_gid])))))))))), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, clamp(_GLF_IDENTITY(7u, uint(uvec4(7u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u))), 7u, 7u))), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2)))) / 1u))), 0u ^ (_GLF_IDENTITY((~ (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])))), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ((buf[virtual_gid]) | (buf[virtual_gid])) - 0u)), (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), clamp(_GLF_IDENTITY((buf[virtual_gid]), max((buf[virtual_gid]), (buf[virtual_gid]))), (buf[virtual_gid]), (buf[virtual_gid]))) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))))]))) | (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))), max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, _GLF_IDENTITY(4, (4) | (4))), (max(4, _GLF_IDENTITY(4, (4) | (4)))) << 0)), 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), max((buf[virtual_gid]) | (buf[virtual_gid]), (buf[virtual_gid]) | (buf[virtual_gid])))), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), 0u ^ (uint(7u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2), 0u ^ (read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-5.6)), bool(false))))))) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uint(buf[virtual_gid])), (false ? _GLF_FUZZED(subgroup_size) : uint(uint(buf[virtual_gid])))))) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), uint(uint(_GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), 0u ^ (_GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ~ (~ ((buf[virtual_gid]) | (buf[virtual_gid])))))))))), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, clamp(_GLF_IDENTITY(7u, uint(uvec4(7u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u))), 7u, 7u))), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2)))) / 1u))), ((~ (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])))), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ((buf[virtual_gid]) | (buf[virtual_gid])) - 0u)), (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), clamp(_GLF_IDENTITY((buf[virtual_gid]), max((buf[virtual_gid]), (buf[virtual_gid]))), (buf[virtual_gid]), (buf[virtual_gid]))) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))))]))) | (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))), max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, _GLF_IDENTITY(4, (4) | (4))), (max(4, _GLF_IDENTITY(4, (4) | (4)))) << 0)), 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), max((buf[virtual_gid]) | (buf[virtual_gid]), (buf[virtual_gid]) | (buf[virtual_gid])))), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), 0u ^ (uint(7u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2), 0u ^ (read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-5.6)), bool(false))))))) * (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid]), (max(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uint(buf[virtual_gid])), (false ? _GLF_FUZZED(subgroup_size) : uint(uint(buf[virtual_gid])))))) | (buf[virtual_gid])), buf[virtual_gid])) >> 0u)), (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), uint(uint(_GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), 0u ^ (_GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ~ (~ ((buf[virtual_gid]) | (buf[virtual_gid])))))))))), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) << 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, clamp(_GLF_IDENTITY(7u, uint(uvec4(7u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u))), 7u, 7u))), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))), uint(7u))))]))) | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid])))))), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))), 64, 2)))) / 1u)))) ^ 0u))))) - 0u);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   subgroupAll(false);
   _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 ^ (4)), 64, _GLF_IDENTITY(2, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) ? 2 : _GLF_FUZZED(91187)))), _GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) ^ 0u)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u) | (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u))), 0u + (read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 ^ (4)), 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false))))) ? _GLF_IDENTITY(2, (2) - 0) : _GLF_FUZZED(91187)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u, (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u) ^ (0u | 0u)), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), _GLF_IDENTITY(((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u, min(_GLF_IDENTITY(((atomicLoad(buf[virtual_gid], 4, 64, 2))) / _GLF_IDENTITY(1u, (1u) / 1u), uint(_GLF_IDENTITY(uvec2(((atomicLoad(buf[virtual_gid], 4, 64, 2))) / _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, 0u | (1u))))))), 0u), (uvec2(((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) / 1u))) / 1u, 0u)) ^ uvec2(0u, 0u)))), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u))) / 1u) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u), max(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u)) ^ 0u))) / _GLF_IDENTITY(1u, (1u) << 0u)), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u), max(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u)) ^ 0u))) / _GLF_IDENTITY(1u, (1u) << 0u)))), _GLF_IDENTITY(clamp((_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u)), uint(uint(clamp((_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u), (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u) / 1u))))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((0 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(64, 64, 64)), (_GLF_IDENTITY(64, clamp(64, 64, 64))) >> 0), 4);
}
