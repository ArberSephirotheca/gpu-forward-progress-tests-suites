#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-8.2), _GLF_FUZZED(-922.896)), vec2(((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((9.5))), bvec2(true, false)))))))[0], _GLF_IDENTITY(((injectionSwitch))[1], min(((injectionSwitch))[1], ((injectionSwitch))[1]))), bvec2(true, true)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, 1.0, 1.0, log(1.0)))))))[1], 1.0 * ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(509.710), _GLF_FUZZED(-8.3)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, abs(0.0), 1.0, 0.0), (true ? mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(509.710), _GLF_FUZZED(-8.3)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, abs(0.0), 1.0, 0.0) : _GLF_FUZZED(mat2x3(584.591, 7912.6484, 4312.7127, 262.456, -47.22, -4174.7552)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -88.03))), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])) : _GLF_FUZZED(vec2(_GLF_IDENTITY(2.4, _GLF_IDENTITY(clamp(2.4, 2.4, 2.4), max(clamp(2.4, 2.4, 2.4), clamp(2.4, 2.4, 2.4)))), 600.435)))).y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))), bool(bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
                  return;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              break;
             continue;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), false, false)))))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.z = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), uint(_GLF_IDENTITY(uvec2(subgroup_local_id, (0u >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u)))))), uvec2(uvec4(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) / 1u))), (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u))) ^ 0u) >> _GLF_IDENTITY(uint(5u), uint(5u)))), 1u, 1u)))));
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((95276 & 0) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, int(int(7))))), ((95276 & 0) << _GLF_IDENTITY(int(7), int(7))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(true)))))), _GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(true)))))))), (_GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(true)), float(mat4x2(mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(true)), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, exp(0.0), 0.0, 1.0, 0.0))))))))), true && (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))))))))))), (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))))))))))), bool(bvec3(! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(21.51)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))))))))))), false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y) && true))))))))))
      continue;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(_GLF_IDENTITY(int(8), int(ivec3(int(8), 1, 0))), int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u)) | 0u) * workgroup_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(98112) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | (0 ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ _GLF_IDENTITY((~ (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(min(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), clamp(~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size)))), (min(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), clamp(~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size))))) * 1u)), ~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) / 1u)))))), (~ _GLF_IDENTITY(((~ (subgroup_id * subgroup_size))), max(((~ (subgroup_id * subgroup_size))), ((~ (subgroup_id * subgroup_size)))))) - 0u))))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y = subgroup_base, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y = subgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y = subgroup_base, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y = subgroup_base) ^ 0u)) - 0u)));
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.z;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    break;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter)))), int(5)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.w = virtual_gid;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          break;
         break;
        }
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y)))) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y))))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y)))))) / 1u)))), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y))))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y)))))) / 1u)))), ((workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) ^ 0u), ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y))))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y)))), uint(uvec4((~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.y)))), 1u, 1u, 1u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u))))) | 0u)) ^ 0u) ^ 0u) + ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid) >> uvec4(0u, 0u, 0u, 0u)).z + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED((-7505.4722 * -824.613))), bvec2(false, false))).y)) || false)) && true)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, tan(0.0), 1.0))).y))) && true)))
          break;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.x = next_virtual_gid;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint read = _GLF_IDENTITY(0, (0 | 0) ^ (0));
 do
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.x], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), max(uint(1), uint(1)))), ~ (~ ((_GLF_IDENTITY(uint(1), max(uint(1), uint(1))))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))), max(uint(1), uint(1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u + (uint(1))), _GLF_IDENTITY(max(uint(1), uint(1)), (max(uint(1), uint(1))) | (max(uint(1), uint(1))))))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))))), max(uint(1), _GLF_IDENTITY(uint(1), ~ (~ (uint(1))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_size) : uint(1))), max(uint(1), uint(1))))))), max(~ (_GLF_IDENTITY(uint(1), _GLF_IDENTITY(max(uint(1), uint(1)), (_GLF_IDENTITY(max(uint(1), _GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (~ (max(uint(1), uint(1)))))) * 1u))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(max(uint(1), uint(1)), (_GLF_IDENTITY(max(uint(1), uint(1)), (true ? max(uint(1), uint(1)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) - (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))) >> 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(max(uint(1), uint(1)), (_GLF_IDENTITY(max(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), ~ (~ (uint(1))))) * 1u), uint(1)), (true ? max(uint(1), uint(1)) : _GLF_FUZZED(workgroup_base)))) >> 0u)), (_GLF_IDENTITY(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(max(uint(1), uint(1)), (true ? max(uint(1), uint(1)) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(max(uint(1), uint(1)), (true ? max(uint(1), uint(1)) : _GLF_FUZZED(workgroup_base)))) >> 0u))) >> 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY(max(uint(1), uint(1)), (_GLF_IDENTITY(max(uint(1), uint(1)), _GLF_IDENTITY((true ? max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), uint(1)) : _GLF_FUZZED(workgroup_base)), (true ? (true ? max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), uint(1)) : _GLF_FUZZED(workgroup_base)) : _GLF_FUZZED(subgroup_id))))) >> 0u))))))))) / _GLF_IDENTITY(uint(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), injectionSwitch.y))))))), 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, false), true)))), _GLF_IDENTITY(false, (false) || false) || (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, false), true)))))), false || (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(3.7)), bool(false))) < injectionSwitch.y))), true, false), true))))))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))) ^ 0))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.z % 2) == 0, true && ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.z % 2) == 0)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(exp2(vec2(5.1, 983.066))))).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.1)), float(injectionSwitch.y), bool(true)))), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.1)), float(injectionSwitch.y), bool(true))))))), true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), true))))))), true)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), false), true))), false)))))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec2(1.0, 1.0))))) < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true)))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), false)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x < injectionSwitch.y)), true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
                    return;
                   return;
                  }
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   subgroupAll(false);
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), float(float(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(atan(3.6)) : 0.0))), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), float(float(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))))))), 0.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, cos(0.0))), mix(float(float(mat4x2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(float(float(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))))), (_GLF_IDENTITY(float(float(float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch.x, 1.0, 1.0, 0.0))), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), transpose(transpose(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))))))))), (float(float(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), min(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), mat2(mat2(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))))))))) * 1.0)) * cos(0.0))), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.7))), 1.0)), abs(0.0), 0.0, 1.0, 0.0, cos(0.0)))), float(_GLF_FUZZED(26.40)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))) > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     read = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.w], 4, 64, 2);
    }
  }
 else
  {
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-998.908) : 0.0))))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
              {
               read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid) / uvec4(1u, 1u, 1u, 1u)), GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid)).w], 4, 64, 2);
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -8.8)), _GLF_FUZZED(4.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.1)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.1)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.1)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.1)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 & -9173); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0]), float(_GLF_FUZZED(vec2(-7.3, -5102.4913).g)), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(-7.1)), mix(_GLF_IDENTITY(vec2((vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0]), float(_GLF_IDENTITY(_GLF_FUZZED(vec2(-7.3, -5102.4913).g), float(vec2(_GLF_FUZZED(vec2(-7.3, -5102.4913).g), exp(0.0))))), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(-7.1, log(1.0) + (_GLF_IDENTITY(-7.1, 1.0 * (-7.1)))))))[0], _GLF_FUZZED(1958.4543)), (vec2((vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0]), float(_GLF_IDENTITY(_GLF_FUZZED(vec2(-7.3, -5102.4913).g), float(vec2(_GLF_FUZZED(vec2(-7.3, -5102.4913).g), exp(0.0))))), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(-7.1, log(1.0) + (_GLF_IDENTITY(-7.1, 1.0 * (-7.1)))))))[0], _GLF_FUZZED(1958.4543))) * mat2(1.0)), vec2(_GLF_FUZZED(-31.49), (vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0]), float(_GLF_FUZZED(vec2(-7.3, -5102.4913).g)), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(-7.1)))[1]), bvec2(false, true))), vec2(_GLF_FUZZED(_GLF_IDENTITY(973.374, max(973.374, 973.374))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.1), _GLF_FUZZED(5999.6696)), bvec2(false, false))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y)), _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-51.43)), float(injectionSwitch.y), bool(true))), true)), ! (! (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y, true)))))), true && ((_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(vec2(-7.3, -5102.4913).g)), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(-7.1)), vec2(_GLF_FUZZED(973.374), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.1), _GLF_FUZZED(5999.6696)), bvec2(false, false))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(vec2(-7.3, -5102.4913).g)), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(-7.1)), vec2(_GLF_FUZZED(973.374), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.1), _GLF_FUZZED(5999.6696)), bvec2(false, false))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(vec2(-7.3, -5102.4913).g)), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(-7.1)), vec2(_GLF_FUZZED(973.374), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.1), _GLF_FUZZED(5999.6696)), bvec2(false, false))))[1]), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), true))).y)))), _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! _GLF_IDENTITY((! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), _GLF_IDENTITY(bool(bool((! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), ! (! (bool(bool((! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))))))))), ! (! (bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, int(int(0)))], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-7.3, _GLF_IDENTITY(-5102.4913, max(-5102.4913, -5102.4913))).g, (true ? vec2(-7.3, _GLF_IDENTITY(-5102.4913, max(-5102.4913, -5102.4913))).g : _GLF_FUZZED(length(vec4(30.10, 4.7, 4.6, -353.233))))))), bool(false)))) - 0.0), (injectionSwitch)[0])), _GLF_FUZZED(-7.1)), vec2(_GLF_FUZZED(973.374), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.1), _GLF_FUZZED(5999.6696)), bvec2(false, false))))[1]), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true))).y)), _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))) && true)) || false))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((((1 ^ 1) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(bitCount(68124)) : (1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(6517))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (0 | 0) ^ _GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED(-73101) : (_GLF_IDENTITY(2, (2) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), true, true), false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), true, true), false)))), false)))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)), ((true)) && true) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupBarrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(checker[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_11next_virtual_gidsubgroup_basesubgroup_local_idvirtual_gid.w], _GLF_IDENTITY(read, min(_GLF_IDENTITY(read, 1u * (read)), read)), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.0)), vec2(_GLF_FUZZED((false ? -342.115 : 85.48)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 ^ (1 << _GLF_IDENTITY(int(0), int(0))))) | 0)) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
}
