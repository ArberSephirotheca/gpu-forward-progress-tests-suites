#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY((7), (_GLF_IDENTITY((7), ((7)) * 1)) + int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)), (0 << _GLF_IDENTITY(int(7), int(7))) | (int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (0 << _GLF_IDENTITY(int(7), int(7))) | (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (0 << _GLF_IDENTITY(int(7), int(7))) | (int(7)))))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | 0)), min(int(_GLF_IDENTITY(7, (7) | 0)), int(_GLF_IDENTITY(7, (7) | 0)))), int(7))) | (int(7)), max((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | 0)), min(int(_GLF_IDENTITY(7, (7) | 0)), int(_GLF_IDENTITY(7, (7) | 0)))), int(7))) | (int(7)), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | 0)), min(int(_GLF_IDENTITY(7, (7) | 0)), int(_GLF_IDENTITY(7, (7) | 0)))), int(7))) | (int(7)), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | 0)), min(int(_GLF_IDENTITY(7, (7) | 0)), int(_GLF_IDENTITY(7, (7) | 0)))), int(7))) | (int(7))) >> 0)))))) >> 0)) / 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1))))) - (0 ^ 0))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, (_GLF_IDENTITY(1 | 1, max(1 | 1, _GLF_IDENTITY(1 | 1, min(1 | 1, _GLF_IDENTITY(1 | 1, (1 | 1) / 1))))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, (_GLF_IDENTITY(1 | 1, max(1 | 1, _GLF_IDENTITY(1 | 1, min(1 | 1, _GLF_IDENTITY(1 | 1, (1 | 1) / 1))))))))), (true ? _GLF_IDENTITY(1, int(ivec2(1, (_GLF_IDENTITY(1 | 1, max(1 | 1, _GLF_IDENTITY(1 | 1, min(1 | 1, _GLF_IDENTITY(1 | 1, (1 | 1) / 1))))))))) : _GLF_FUZZED(-723))))))))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1))))) - (0 ^ 0))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(ivec2(1, (_GLF_IDENTITY(1 | 1, max(1 | 1, _GLF_IDENTITY(_GLF_IDENTITY(1 | 1, min(1 | 1, _GLF_IDENTITY(1 | 1, (1 | 1) / 1))), max(_GLF_IDENTITY(1 | 1, min(1 | 1, _GLF_IDENTITY(1 | 1, (1 | 1) / 1))), _GLF_IDENTITY(1 | 1, min(1 | 1, _GLF_IDENTITY(1 | 1, (1 | 1) / 1)))))))))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true), bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(false, ! (! (false))))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(length(vec2(0.0, 0.0)))), _GLF_IDENTITY((injectionSwitch.y) / 1.0, max((injectionSwitch.y) / 1.0, (injectionSwitch.y) / 1.0))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), false, true, true)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | (_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) << 0u))) - 0u), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), uint(uvec4(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x) - 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x, (gl_NumWorkGroups.x) - 0u)) / (0u ^ 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u)), 0u ^ (_GLF_IDENTITY(min(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u)), (true ? min(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u)) : _GLF_FUZZED(subgroup_size))))))))) ^ 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, true)))))), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))))), (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, true))))) && true)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), (gl_WorkGroupSize) ^ uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch)))))) - tan(sqrt(vec2(0.0, 0.0)))).y)), true))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))) || false))), true && (bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))) || false))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ((false)) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (83355 & 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), (true && (injectionSwitch.x > injectionSwitch.y)) || false)))) || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || ((false) || false)), false || (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || ((false) || false)))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))) || false))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(~ (~ (subgroup_id)), (_GLF_IDENTITY(~ (~ (subgroup_id)), 0u | (~ (~ (subgroup_id))))) / 1u)))) * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, ! (! (true)))), false))), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, ! (! (true)))), false))))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_base)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))) % subgroup_size)) ^ 0u);
 uint read = _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | 0)));
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, _GLF_IDENTITY(1, ~ (~ (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))), 0 ^ (~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))), 0 ^ (~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4)))))))))))), ~ (~ (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))), 0 ^ (~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4)))))))))))))))) << (0 ^ 0)))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _GLF_IDENTITY(_injected_loop_counter --, (0 & 54079) | (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-124.572)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true)))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true))))) || false))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (_GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))))))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false))))), false, true, true)))))
      barrier();
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.2) : _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(determinant(mat3(0.1, -715.144, -1927.7034, -2.5, -3.0, -10.64, 1781.5954, 9.5, -5.0))) : 0.0))) * 1.0))), injectionSwitch.x))) | 0), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(1 * _GLF_IDENTITY((1), clamp((1), (1), _GLF_IDENTITY((1), max((1), (1))))), max(1 * (1), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) - 0)) | (1)) * (1)))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 + ((1))) | _GLF_IDENTITY((1), int(ivec3((1), 1, 0)))), min(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 + ((1))) | _GLF_IDENTITY((1), int(ivec3((1), 1, 0)))), _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 + ((1))) | _GLF_IDENTITY((1), int(ivec3((1), 1, 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | (1)), 0 ^ (1)))) ^ 0), (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec3(0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))) | (_GLF_IDENTITY(int(ivec3(0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))), 0)), 0 ^ (int(ivec3(0, ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | (5))) << 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))), 0)))))))), (ivec4(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (1), max(1 * (1), 1 * (1)))), max(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 + ((1))) | _GLF_IDENTITY((1), int(ivec3((1), 1, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 0 ^ (1)))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (1), max(1 * (1), 1 * (1)))), max(_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(0, 0 | (0)) + ((1))) | _GLF_IDENTITY((1), int(ivec3((1), 1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 0 ^ (1)))))) ^ _GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(49829) : _GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), min(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5))))) | 0) : _GLF_FUZZED((-63613 >> _injected_loop_counter))))))) >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec3(0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))) | (_GLF_IDENTITY(int(ivec3(0, ((_GLF_IDENTITY(1, 0 ^ (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))))) >> _GLF_IDENTITY(int(5), int(5))), 0)), 0 ^ (int(ivec3(0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))))))))) + ivec4(0, 0, 0, 0)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) << 0)], injectionSwitch[1]))) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch[0]), bool(true))))), injectionSwitch[1])), vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(976.916, -503.363)))), max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(976.916, -503.363)))), _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(976.916, -503.363)))))), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))))), 0.0, abs(0.0), 1.0, 1.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-0.4, -56.34, 4810.3369, -89.00)) : mat2(1.0)))), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(5681.7172), _GLF_FUZZED(90.21)), bvec2(false, false))) * (injectionSwitch)), injectionSwitch)).y))));
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))) && true))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)))))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))), true && (_GLF_WRAPPED_IF_TRUE(true))))
              {
               subgroupAll(false);
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | 0)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))))))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), min(_injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) | (_injected_loop_counter)) > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))))) || false))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 2);
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, true)))))
                  barrier();
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, (true) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, (true) && true)))))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))) || false)) || false)))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2424.1055, -2687.5999)))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (1 ^ ((0 | 0) << _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 0)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(degrees((vec2(0.2, -1254.8240) + vec2(8.0, 8825.8702)))) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(degrees((vec2(0.2, -1254.8240) + vec2(8.0, 8825.8702)))) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(degrees((vec2(0.2, -1254.8240) + vec2(8.0, 8825.8702)))) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(degrees((vec2(0.2, -1254.8240) + vec2(8.0, 8825.8702)))) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(degrees((vec2(0.2, -1254.8240) + vec2(8.0, 8825.8702)))) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(degrees((vec2(0.2, -1254.8240) + vec2(8.0, 8825.8702)))) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)))))).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * round(length(normalize(_GLF_IDENTITY(exp(0.0), min(_GLF_IDENTITY(exp(0.0), mix(float(exp(0.0)), float(_GLF_FUZZED(float(189690u))), _GLF_IDENTITY(bool(false), (bool(false)) || false))), _GLF_IDENTITY(exp(0.0), _GLF_IDENTITY(min(exp(0.0), exp(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(exp(0.0), exp(_GLF_IDENTITY(0.0, (0.0) / 1.0))) : _GLF_FUZZED(-28.93)))))))))), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y, injectionSwitch.y))) - 0.0, (false ? _GLF_FUZZED(_GLF_IDENTITY((-7.0), _GLF_IDENTITY(mix(float((-7.0)), float(_GLF_FUZZED(-6.0)), bool(false)), min(mix(float((-7.0)), float(_GLF_FUZZED(-6.0)), bool(false)), mix(float((-7.0)), float(_GLF_FUZZED(-6.0)), bool(false)))))) : (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(1029.1546)))))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                barrier();
               for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))), max(int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))), clamp(int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))), int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))), int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), int(2)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), false || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), false)))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, 1 * (1 & 1)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))) && true))))), false || ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))) && true))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))), 1.0), min(vec4(injectionSwitch.y, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))), 1.0), vec4(injectionSwitch.y, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))), 1.0)))), (float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))), 1.0), min(vec4(injectionSwitch.y, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), _GLF_IDENTITY(max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0))), min(max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0))), max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))))), 1.0), vec4(injectionSwitch.y, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))), 1.0))))) / 1.0))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, true, false, _GLF_IDENTITY(false, false || (false)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
            }
           else
            {
             do
              {
               subgroupAll(false);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.6) : injectionSwitch.x))) * 1.0) < injectionSwitch.y)))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), max((1 ^ 1), _GLF_IDENTITY((1 ^ 1), ~ (~ (_GLF_IDENTITY((1 ^ 1), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1 ^ 1))))))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tanh(0.0)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y, mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.y), bool(true))))), injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), clamp(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), clamp(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)))), _GLF_IDENTITY(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(29.45)), bool(false)))), 1.0, 1.0)), max(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0))))))), injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), clamp(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), clamp(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)))), _GLF_IDENTITY(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(29.45)), bool(false)))), 1.0, 1.0)), max(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0))))))), injectionSwitch.y)))), bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), clamp(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), clamp(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)))), _GLF_IDENTITY(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(29.45)), bool(false)))), 1.0, 1.0)), max(float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0)), float(mat3x2(1.0, sqrt(1.0), 1.0, exp(0.0), 1.0, 1.0))))))), injectionSwitch.y)))))))) && true))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0), float(vec3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0), 0.0, 1.0)))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, sqrt(0.0), 1.0, 1.0, length(0.0), 1.0, 0.0, 1.0)), (float(mat2x4(injectionSwitch.y, sqrt(0.0), 1.0, 1.0, length(0.0), 1.0, 0.0, 1.0))) * 1.0)))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-941.520) : _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-78.41))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(-8.7, (false ? _GLF_FUZZED(1287.4537) : _GLF_IDENTITY(-8.7, clamp(-8.7, -8.7, -8.7))))))))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 0.0)))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false))))))))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), injectionSwitch.y)))), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7114.6097))) > injectionSwitch.y))) && true)))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(int(false)) : _injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)) && true)); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
         read = atomicLoad(buf[virtual_gid], 4, 64, 2);
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), length(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), 1.0, 1.0, 0.0, 0.0), mat4x2(_GLF_IDENTITY(mat4(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0)), transpose(transpose(_GLF_IDENTITY(mat4(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0)), mat4(1.0) * (mat4(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0))))))))))).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false)), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false)), false))), false))))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bool(bvec2(! (bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false))), false, false))), true))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) / (((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))) >> _GLF_IDENTITY(int(6), int(6))) & 1))), _GLF_IDENTITY((int(5)), 0 ^ ((int(5)))) * 1), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) / (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1))), (int(5)) * 1))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), clamp(_GLF_IDENTITY((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), clamp((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), _GLF_IDENTITY((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), min((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))))))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))))))))), 0 | (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) / (((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))) >> _GLF_IDENTITY(int(6), int(6))) & 1))), _GLF_IDENTITY((int(5)), 0 ^ ((int(5)))) * 1), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) / (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1))), (int(5)) * 1))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), clamp(_GLF_IDENTITY((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), clamp((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), _GLF_IDENTITY((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), min((5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))))))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))), (5) / (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5843.5451), _GLF_FUZZED(521.995)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)))[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0), vec3(_GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), (true ? _GLF_IDENTITY(vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)), mat3(1.0) * (vec3(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, true, false)))))), 1.0, 0.0)))) : _GLF_FUZZED(vec3(398.778, 20.27, 43.96)))))), mat3(1.0) * (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(225.826))), _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0)))), (float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, tan(0.0), 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), min(float(_GLF_FUZZED(8.1)), float(_GLF_FUZZED(8.1)))), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-86.79)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec3(-1.9, 5.3, 3.3).t)), bool(false))), tan(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(8.1)), float(float(mat2(1.0, 1.0, tan(0.0), 1.0))), bool(true)))), 1.0, 0.0))))) / 1.0))), 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))))).y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y)) | _GLF_IDENTITY(1, (false ? _GLF_FUZZED(44186) : _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - vec2(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).y)) | 1))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.6)), vec2(_GLF_FUZZED(2.7), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)))) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)))) && true))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) && true)))) && true)))) || false))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, false || (false)))))) && true)) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) * 1.0) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(-8079.4941) : float(mat3(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))) / 1.0), injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(922.439) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(-8079.4941) : float(mat3(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))) / 1.0), injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7009.6393)), float(clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(-8079.4941) : float(mat3(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))) / 1.0), injectionSwitch.x, injectionSwitch.x)), bool(true)))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)) && true))) || false)) && true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), clamp(int(6), int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))) >> 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))) / 1), int(_GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_ONE(1.0, injectionSwitch.y)) * (6)), min(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, 1 * (6)) : _GLF_FUZZED(_injected_loop_counter))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (6)), _GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) * (6), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.0)), _GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), bool(true))), 1.0, tan(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0))), injectionSwitch.y, injectionSwitch.y), 1.0 * (clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.0)), _GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), bool(true))), 1.0, tan(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0))), injectionSwitch.y, injectionSwitch.y)))))) * (6)) / 1), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) * (6)), _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) * (6))), (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) * (6))), ~ (~ (((int(_GLF_ONE(1.0, injectionSwitch.y)) * (6))))))) | (((int(_GLF_ONE(1.0, injectionSwitch.y)) * (6))))) << 0) >> 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED((_GLF_IDENTITY(false ? _injected_loop_counter : _injected_loop_counter, min(false ? _injected_loop_counter : _injected_loop_counter, false ? _injected_loop_counter : _injected_loop_counter)))) : 1))) / 1)) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) / 1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) ^ 0))))), (int(1)) ^ 0)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - (0 & 64471)), (_injected_loop_counter --) ^ 0), _GLF_IDENTITY((_injected_loop_counter --), (true ? (_injected_loop_counter --) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)), (_GLF_FUZZED((_injected_loop_counter << _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)), (_GLF_FUZZED((_injected_loop_counter << _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter << _injected_loop_counter), min((_injected_loop_counter << _injected_loop_counter), (_injected_loop_counter << _injected_loop_counter)))), (_GLF_FUZZED((_injected_loop_counter << _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))))) | 0))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
              barrier();
             subgroupBarrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), false || (_injected_loop_counter > (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), max(clamp(int(6), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), clamp(int(6), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))))))))))))); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(28.91)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(28.91)), vec2((injectionSwitch)[0], _GLF_FUZZED(28.91)))), vec2(_GLF_FUZZED((3.9)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(8269.5022, -4360.5934))))) - vec2(0.0, 0.0)).y)) && true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(13.33, -2.3)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(_GLF_IDENTITY(13.33, max(13.33, 13.33)), -2.3)), min(_GLF_IDENTITY(_GLF_FUZZED(vec2(13.33, -2.3)), min(_GLF_IDENTITY(_GLF_FUZZED(vec2(13.33, -2.3)), mat2(1.0) * (_GLF_FUZZED(vec2(13.33, -2.3)))), _GLF_FUZZED(vec2(13.33, -2.3)))), _GLF_FUZZED(vec2(13.33, -2.3)))))).y), _GLF_IDENTITY(float(_GLF_FUZZED((9.5 / 0.5))), max(float(_GLF_FUZZED((9.5 / 0.5))), float(_GLF_FUZZED((9.5 / 0.5))))), bool(false))), 0.0 + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(13.33, -2.3)), max(true ? injectionSwitch : _GLF_FUZZED(vec2(13.33, -2.3)), true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(_GLF_IDENTITY(13.33, clamp(13.33, 13.33, 13.33)), -2.3), mix(vec2(_GLF_FUZZED(122.357), _GLF_FUZZED(-31.25)), vec2((vec2(_GLF_IDENTITY(13.33, clamp(13.33, 13.33, 13.33)), -2.3))[0], (vec2(_GLF_IDENTITY(13.33, clamp(13.33, 13.33, 13.33)), -2.3))[1]), bvec2(true, true)))))))).y))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) * mat3(1.0)))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-8.2)))) - 0.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, cos(0.0), 1.0))).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((! (false)), false || ((! (false))))), bool(bvec4(bool(_GLF_IDENTITY((! (false)), false || ((! (false))))), false, false, true)))))) && true))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false)))), bool(bvec3(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 + (int(2))), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9690.6359, -80.22)))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.6, -929.332)) : injectionSwitch)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(960.094))) < injectionSwitch.y))))
    {
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)) | 0u)], read, 4, 64, 4);
    }
   else
    {
    }
  }
}
