#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), true && ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       break;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))));
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bool(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))) || false))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ 0, 0 | ((_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ 0)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, (0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) ^ 0u))) ^ (gl_WorkGroupSize.x));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, false))))))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((true ? 55312 : ivec3(83471, -82550, -60323).r) & 0)); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))).x > injectionSwitch.y))))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = (0 & (11116 | ivec3(38951, 31269, -83866).g)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), _GLF_IDENTITY(bool(bool(bool(bvec4(false, true, false, false)))), false || (bool(bool(bool(bvec4(false, true, false, false))))))))), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) << 0))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), 0u | (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u + (workgroup_base), max(0u + (workgroup_base), _GLF_IDENTITY(0u + (workgroup_base), (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) - 0u)))) + (workgroup_base)) >> 0u)))))) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), 0u + ((subgroup_local_id + 1))) | (subgroup_local_id + 1))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint read = 0;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   else
    {
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, 1u * (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), clamp(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), next_virtual_gid, next_virtual_gid)))), (true ? next_virtual_gid : _GLF_FUZZED(workgroup_base)))], uint(1), 4, 64, 4);
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.7)))), float(_GLF_FUZZED(400.693)), bool(false))) > injectionSwitch.y))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))))))))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(1u ^ (1u | 0u), uint(uint(_GLF_IDENTITY(1u ^ (1u | 0u), ~ (~ (1u ^ (1u | 0u)))))))) ^ (subgroup_local_id)) % 2), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(1u ^ (1u | 0u), uint(uint(_GLF_IDENTITY(1u ^ (1u | 0u), ~ (~ (1u ^ (1u | 0u)))))))) ^ (subgroup_local_id)) % 2))) == 0)
  {
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(false, true, false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), true, false)), bool(bool(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-668.458, 367.223)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0)), (vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false)), (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false)) && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0)), _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))), min(_GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))), clamp((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))), (vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))), (vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))))), _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))), vec2(1.0, 1.0) * ((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, 1.0))))))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
    }
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-57.37) : injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(87643)))) | 0)); _injected_loop_counter ++)
              {
               return;
              }
            }
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     break;
                    }
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, int(ivec3(0, 0, 0))) : _GLF_FUZZED(floatBitsToInt(59.24))))); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec4(bool(bool(true)), true, false, false))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.3) : 0.0))) - sin(0.0))))))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0))), min(injectionSwitch, injectionSwitch)).y)), (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0), 1.0, 1.0, 0.0))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0))), min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0), 1.0, 1.0, 0.0))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0))), min(injectionSwitch, injectionSwitch)).y) / 1.0)))) && true)))))), ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0)), min(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0))))), min(injectionSwitch, injectionSwitch)).y)), (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(-0.4, 4.1, -37.58).b)), bool(false))), injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), sin(0.0), 1.0, 1.0, sqrt(cos(0.0)), 1.0))), min(injectionSwitch, injectionSwitch)).y))) && true))))))) && true)) || false))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y)))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) : _GLF_FUZZED(7.0)), max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 1458.7174))), vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-210.890)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))))), false || ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) : _GLF_FUZZED(7.0)), max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 1458.7174))), vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-210.890)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))))))))) || false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y)))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) : _GLF_FUZZED(7.0)), max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 1458.7174))), vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-210.890)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))))), false || ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) : _GLF_FUZZED(7.0)), max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 1458.7174))), vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-210.890)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))))))))) || false)), (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(_GLF_IDENTITY(vec2(0.0, 0.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(0.0, 0.0))))).x > injectionSwitch.y)))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) : _GLF_FUZZED(7.0)), _GLF_IDENTITY(max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))), 1.0 * (_GLF_IDENTITY(max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))), 1.0 * (max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(mat4((injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), abs(0.0), exp(log(1.0)), 0.0, sqrt(0.0), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)))) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(78.09)), bool(false)))), true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(-2.3)), float(_GLF_IDENTITY((injectionSwitch.x), float(vec3(_GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-8.2) : (injectionSwitch.x))), 0.0, 0.0)))), bool(true))) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))))))))))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-9254.5279))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 1458.7174))), vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-210.890)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))))), false || ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) : _GLF_FUZZED(7.0)), max((true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)), (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), true))) ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))) ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(7.0)))) / cos(log(1.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ 1458.7174))), vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-210.890)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))))))))) || false))) && true)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), true && (_GLF_IDENTITY(! (false), (! (false)) && true)))))))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))))))))) || false), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, cos(0.0), 1.0, 1.0, cos(0.0), 1.0)), (false ? _GLF_FUZZED(2.7) : float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, cos(0.0), 1.0, 1.0, cos(0.0), 1.0))))), _GLF_IDENTITY(0.0 + (injectionSwitch.y), mix(float(0.0 + (injectionSwitch.y)), float(_GLF_FUZZED(2.0)), bool(false))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))), false)))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), ! (! (bool(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false)), ! (! (bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false))))))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), max(dot(vec2(0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0) + (vec3(1.0, 1.0, 1.0)))))))), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0, exp(0.0), 1.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), (tan(0.0)) * 1.0), 0.0, 1.0)), 0.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), 0.0))), 1.0, 0.0, log(1.0), 0.0)))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)) || false))))) && true), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))) || false))))));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, clamp((injectionSwitch.x) + _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-789.591)), float(float(mat4x3(0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), bool(true)))), (injectionSwitch.x) + 0.0, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) / 1.0)) - log(1.0))))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(0.0, 1.0, exp(sin(0.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-886.465)), bool(false))) : _GLF_FUZZED(7.2))))), 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), mat3x4(mat4(mat3x4(0.0, 1.0, _GLF_IDENTITY(exp(sin(0.0)), (false ? _GLF_FUZZED(dot(vec4(5.2, 9.5, 30.17, 5.7), vec4(539.581, 85.26, 3.9, 7.9))) : exp(sin(0.0)))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), clamp(float(_GLF_IDENTITY(mat3x4(0.0, 1.0, exp(sin(0.0)), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), mat3x4(mat4(mat3x4(0.0, 1.0, exp(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), sin(0.0))), _GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(-2.1)), bool(false)))))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), float(_GLF_IDENTITY(mat3x4(0.0, 1.0, exp(sin(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(0.0, 0.0, abs(0.0), abs(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3x4(0.0, 0.0, abs(0.0), abs(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0)))), max(float(_GLF_IDENTITY(mat3x4(0.0, 0.0, abs(0.0), abs(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3x4(0.0, 0.0, abs(0.0), abs(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0)))), float(_GLF_IDENTITY(mat3x4(0.0, 0.0, abs(0.0), abs(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3x4(0.0, 0.0, abs(0.0), abs(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0))))))))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), mat3x4(mat4(mat3x4(0.0, 1.0, exp(sin(0.0)), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), float(_GLF_IDENTITY(mat3x4(0.0, 1.0, exp(sin(0.0)), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), mat3x4(mat4(mat3x4(0.0, 1.0, exp(sin(0.0)), 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, cos(0.0), 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))) + (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, clamp(_GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) + 0.0, (injectionSwitch.x) + 0.0, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x), min(_GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(45.97))))) + 0.0) / 1.0)) - log(1.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-85.18, 27.68)) : injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-85.18, 27.68)) : injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(vec2(-85.18, 27.68)) : injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(vec2(-85.18, 27.68)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(vec2(-85.18, 27.68)) : injectionSwitch)))).y, float(mat4x2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-85.18, min(-85.18, -85.18)), 27.68)) : injectionSwitch)).y, 1.0, 1.0, abs(1.0), abs(1.0), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-431.077)))), float(_GLF_FUZZED(-19.23)), bool(false))), 1.0)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec4(int(4), 1, 0, 0)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) ^ 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
              continue;
             barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     do
      {
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec4(1, 0, 0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))), false, true)))))))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-36042 & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9592.3454)), vec2(_GLF_FUZZED(-7452.9992), (injectionSwitch)[_GLF_IDENTITY(1, int(int(1)))]), bvec2(false, true)), mix(vec2((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9592.3454)), vec2(_GLF_FUZZED(-7452.9992), (injectionSwitch)[1]), bvec2(false, true)))[0], _GLF_FUZZED(2.5)), vec2(_GLF_FUZZED(-2.1), _GLF_IDENTITY((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9592.3454)), vec2(_GLF_FUZZED(-7452.9992), (injectionSwitch)[1]), bvec2(false, true)))[1], float(mat4x2(_GLF_IDENTITY((mix(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-46.21)), vec2(_GLF_FUZZED(5.8), ((injectionSwitch))[1]), bvec2(false, true)))[0], _GLF_FUZZED(-9592.3454)), vec2(_GLF_FUZZED(-7452.9992), (injectionSwitch)[1]), bvec2(false, true)))[1], ((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9592.3454)), vec2(_GLF_FUZZED(-7452.9992), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), bvec2(false, true)))[1]) * 1.0), 0.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 0.0)))), bvec2(false, true)))), injectionSwitch)).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(37.70) : injectionSwitch.x)))) > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-57.22)), float(injectionSwitch.y), bool(true)))))))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ((true) || false) || false)))) && true)));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))[0], injectionSwitch[_GLF_IDENTITY(1, 0 + (1))])).x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(unpackUnorm2x16(num_workgroup)) : _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2537.2814), _GLF_FUZZED((- -99.55))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2537.2814), _GLF_FUZZED((- -99.55))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) - vec2(0.0, 0.0))))))))).x > injectionSwitch.y) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(unpackUnorm2x16(num_workgroup)) : _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2537.2814), _GLF_FUZZED((- -99.55))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2537.2814), _GLF_FUZZED((- -99.55))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) - vec2(0.0, 0.0))))))))).x > injectionSwitch.y) && true)), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(unpackUnorm2x16(num_workgroup)) : _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2537.2814), _GLF_FUZZED((- -99.55))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2537.2814), _GLF_FUZZED((- -99.55))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) - vec2(0.0, 0.0))))))))).x > injectionSwitch.y) && true)))))) || false), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true)))))), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false)))))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.8)), bool(false))))), tan(0.0), 1.0), (mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, tan(0.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-26645)))], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(1.4)), bvec2(false, false))).y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))), 0.0, 1.0)))).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false), false)))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false), false))))))) && true))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, log(1.0), sqrt(1.0), 1.0, determinant(mat3(1.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))).x > injectionSwitch.y), false)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0) > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, 4)), 64, 2);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), false || ((true))) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   subgroupBarrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ((true) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) >> 0) : _GLF_IDENTITY(_GLF_FUZZED((10867 | 17616)), max(_GLF_FUZZED((10867 | 17616)), _GLF_FUZZED((10867 | 17616)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), max(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) >> 0)))), (false ? _GLF_FUZZED(-79522) : _GLF_IDENTITY(0, max(0, 0))))) >> (0 << _GLF_IDENTITY(int(1), int(1))))) >> 0) : _GLF_FUZZED((10867 | _GLF_IDENTITY(17616, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-87165) : 17616)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> _GLF_IDENTITY(0, (0) | (0))) : _GLF_FUZZED((10867 | 17616))), clamp(_GLF_IDENTITY((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((false ? 89377 : 86833)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((false ? 89377 : 86833)))), (_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((false ? _GLF_IDENTITY(89377, (_GLF_IDENTITY(89377, max(_GLF_IDENTITY(89377, ~ (~ (89377))), 89377))) ^ (0 << _GLF_IDENTITY(int(4), int(4)))) : 86833))))) + (0 << _GLF_IDENTITY(int(8), int(8))))))))), max((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((false ? 89377 : 86833)))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((false ? 89377 : 86833)))))), ((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((_GLF_IDENTITY(false ? _GLF_IDENTITY(89377, (89377) ^ 0) : 86833, int(ivec4(false ? _GLF_IDENTITY(89377, (89377) ^ 0) : 86833, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (-14066 & 0))))))))))) | ((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY((10867 | 17616), (true ? (10867 | 17616) : _GLF_FUZZED((false ? 89377 : 86833)))))))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED((10867 | 17616))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED((_GLF_IDENTITY(10867 | 17616, (_GLF_IDENTITY(10867 | 17616, (10867 | 17616) << 0)) >> 0)))), 0 + ((true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED((_GLF_IDENTITY(10867 | 17616, (_GLF_IDENTITY(10867 | 17616, (10867 | 17616) << 0)) >> 0)))))), (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-87144) : 0)), 0))))) >> 0) : _GLF_FUZZED((10867 | 17616))))), (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(49769))), max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(bitfieldExtract(81715, -16770, -6677)) : 0))) / 1), _GLF_IDENTITY(0, min(0, 0))))) >> 0) : _GLF_FUZZED((10867 | 17616))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, _GLF_IDENTITY(0, (0) | (0)), 0), clamp(_GLF_IDENTITY(clamp(0, 0, 0), ~ (~ (clamp(0, 0, 0)))), _GLF_IDENTITY(clamp(0, 0, 0), ~ (~ (clamp(0, 0, 0)))), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | 0))))) / 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), bool(bool(! (true))))))))))) ? _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), min((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), max((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))))), ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))))))))))))) >> 0, 0 + (_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), _GLF_IDENTITY(int(int(max(0, 0))), clamp(int(int(max(0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(int(max(0, 0))), clamp(_GLF_IDENTITY(int(int(max(0, 0))), clamp(int(int(max(0, 0))), int(int(max(0, 0))), int(int(max(0, 0))))), int(int(max(0, 0))), _GLF_IDENTITY(int(int(max(0, 0))), (int(int(max(0, 0)))) >> 0))), (int(int(max(0, 0)))) | (int(int(max(0, 0))))), int(int(max(0, 0)))))))))), min((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), max((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(_GLF_IDENTITY(max(0, 0), (max(0, 0)) - 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), (_GLF_IDENTITY(max(0, 0), ~ (~ (max(0, 0))))) ^ (0 & -98581)), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))))) >> 0))) : _GLF_FUZZED((10867 | 17616)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), _GLF_IDENTITY(min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))), (min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))) / 1)))), min((_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))), (false ? _GLF_FUZZED(bitCount(4259)) : _GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))), (_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))))) | (_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))) - 0)) << 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, _GLF_IDENTITY(0, (0) << ((0 & 19729) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))))) >> 0) : _GLF_FUZZED((10867 | 17616))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), min((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), _GLF_IDENTITY(min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))), clamp(min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(0, 0))), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), _GLF_IDENTITY(max((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0))))))))), (max((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))) >> 0)))) >> 0) : _GLF_FUZZED((10867 | 17616))), (~ (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), ! (_GLF_IDENTITY(! (true && (true)), ! (! (! (true && (true)))))))) ? _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), min((_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))), 0 + (_GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), max((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))))) >> 0) : _GLF_FUZZED((10867 | 17616)))) - 0)) | (~ (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, _GLF_IDENTITY(0, ~ (~ (0))))))))))), min((_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), (false ? _GLF_FUZZED(50378) : max(0, 0))), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(4), int(4))) | (0)), 0), _GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), int(_GLF_IDENTITY(ivec2(max(0, 0), 0), ~ (~ (ivec2(max(0, 0), 0)))))), int(_GLF_IDENTITY(int(max(0, 0)), (int(max(0, 0))) | (int(max(0, 0)))))))))), max((_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(max(0, 0), _GLF_IDENTITY(max(0, 0), int(int(max(0, 0)))))))))))) >> 0) : _GLF_FUZZED((10867 | 17616))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, (_GLF_IDENTITY(1 ^ (0 << _GLF_IDENTITY(int(8), int(8))), (1 ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), max((0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), 0 | ((0 << _GLF_IDENTITY(int(8), int(8))))))), (0 << _GLF_IDENTITY(int(8), int(8))), (0 << _GLF_IDENTITY(int(8), int(8)))))) ^ 0))))), max(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, (_GLF_IDENTITY(1 ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(8), int(8)))))), (1 ^ (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) | (8)))))) ^ 0))))), _GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))))))))) ^ (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, min(8, 8))))))), (1 ^ (0 << _GLF_IDENTITY(int(8), int(8)))) ^ 0))), ~ (~ (ivec3(_injected_loop_counter, 1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))))))))) ^ (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, min(8, 8))))))), (1 ^ (0 << _GLF_IDENTITY(int(8), int(8)))) ^ 0)))))))))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-94.44 / 99.88)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.2)), bvec2(true, false))).x > injectionSwitch.y))))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          break;
        }
      }
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
            return;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(ivec3(4, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), _GLF_IDENTITY(4, ~ (~ (4))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(ivec3(4, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), _GLF_IDENTITY(4, ~ (~ (4))))), (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(ivec3(4, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), _GLF_IDENTITY(4, ~ (~ (4)))))) - (0 & 7050)))), 64, 4);
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, (true) && true) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), mat2(1.0) * (injectionSwitch)).y : _GLF_FUZZED(287.237))), ! (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(287.237), float(mat2(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(287.237), min(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(287.237), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.4, 5930.5365)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))))).y))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.4, 5930.5365)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))))).y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.4, 5930.5365)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))))).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true)))) ? injectionSwitch.y : _GLF_FUZZED(287.237))), 0.0, 1.0, 1.0))))))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
}
