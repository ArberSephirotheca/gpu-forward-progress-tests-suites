#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_4_1_1_14readworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = subgroup_size;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, determinant(mat3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, abs(1.0), 1.0), (mat4x3(injectionSwitch.y, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, determinant(mat3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, abs(1.0), 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(5.0))), 0.0))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bvec2(! (! (_GLF_WRAPPED_IF_TRUE(true))), true)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-14127) : 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.5)), vec2(_GLF_FUZZED(-26.54), (injectionSwitch)[1]), bvec2(false, true)), (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.5)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-26.54), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(-26.54), (injectionSwitch)[1]), log(vec2(1.0, 1.0)) + (vec2(_GLF_FUZZED(-26.54), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-26.54), (injectionSwitch)[1]))), bvec2(false, true))) * mat2(1.0))).y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), max(vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))).x > injectionSwitch.y) || false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))))) && true); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))))
                return;
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5643.2959))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))) / 1.0)) - 0.0) > injectionSwitch.y), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) - length(0.0))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 0u, 0u)))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 do
  {
   GLF_merged2_0_1_4_1_1_14readworkgroup_base.y = workgroup_base;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-933.978))) > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))).y)))), false))))))));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) / 1u)) ^ 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) * 1u)) / (1u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, min(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) / 1u)) * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, min(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), uint(uvec2(_GLF_IDENTITY((0u), clamp((0u), (0u), (0u))), 0u))) ^ _GLF_IDENTITY(0u, (0u) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) >> _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) >> _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, (0u) | (0u))))) - 0u)) | (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) >> 0u))), subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x))) | 0u)));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base.y + subgroup_base + subgroup_local_id, ~ (~ (GLF_merged2_0_1_4_1_1_14readworkgroup_base.y + subgroup_base + subgroup_local_id)));
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base.y, (GLF_merged2_0_1_4_1_1_14readworkgroup_base.y) >> 0u) + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) + uvec2(0u, 0u)).x);
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false))) || (_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false))), true))), (_GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false))) && true)))
  return;
 uint read = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(-52475), int(_GLF_IDENTITY(int(_GLF_FUZZED(-52475)), min(int(_GLF_FUZZED(-52475)), int(_GLF_FUZZED(-52475))))))), ((true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(-52475), int(_GLF_IDENTITY(int(_GLF_FUZZED(-52475)), min(int(_GLF_FUZZED(-52475)), int(_GLF_FUZZED(-52475)))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | 0), 0)), 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475))))))), clamp(~ (_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-52475), (_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (~ (_GLF_FUZZED(-52475))))) | (_GLF_FUZZED(-52475))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475))))))), ~ (_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475))))))))))))), 0, 1), ~ (_GLF_IDENTITY(~ (ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (_GLF_IDENTITY(int(0), int(ivec4(int(0), 1, 1, (0 | 1)))))), int(0)))) : _GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)))))), (_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-52475), min(_GLF_FUZZED(-52475), _GLF_FUZZED(-52475))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)))))), clamp(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ _GLF_IDENTITY((_GLF_FUZZED(-52475)), (_GLF_IDENTITY((_GLF_FUZZED(-52475)), int(int(_GLF_IDENTITY((_GLF_FUZZED(-52475)), (false ? _GLF_FUZZED(66849) : (_GLF_FUZZED(-52475)))))))) - 0), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)))))), true ? _GLF_IDENTITY(0, max(0, 0)) : _GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_FUZZED(-52475)), 0 ^ ((_GLF_FUZZED(-52475)))), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)))))), true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-52475), clamp(_GLF_IDENTITY(_GLF_FUZZED(-52475), (_GLF_FUZZED(-52475)) + 0), _GLF_FUZZED(-52475), _GLF_FUZZED(-52475))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475))))))))) / 1))), 0, 1)), (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(~ (ivec3(_GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-52475), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-52475, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (-52475))), 1 * (_GLF_FUZZED(-52475))))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)))))))), 0, 1)), (false ? _GLF_FUZZED(ivec3(17525, 65027, 36249)) : ~ (ivec3(_GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ _GLF_IDENTITY((_GLF_FUZZED(-52475)), max((_GLF_FUZZED(-52475)), (_GLF_FUZZED(-52475)))), ~ (_GLF_FUZZED(-52475)), ~ _GLF_IDENTITY((_GLF_FUZZED(-52475)), max(_GLF_IDENTITY((_GLF_FUZZED(-52475)), 0 + ((_GLF_FUZZED(-52475)))), (_GLF_FUZZED(-52475)))))))), (_GLF_IDENTITY(_GLF_FUZZED(-52475), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-52475)), clamp(~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475)), ~ (_GLF_FUZZED(-52475))))))) - 0))), 0, 1)))) : _GLF_FUZZED(ivec3(-37597, 56646, 24710)))))), (ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(-52475), max(_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(-52475), _GLF_IDENTITY(max(true ? 0 : _GLF_FUZZED(-52475), true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(-52475), (_GLF_FUZZED(-52475)) | (_GLF_IDENTITY(_GLF_FUZZED(-52475), _GLF_IDENTITY((_GLF_FUZZED(-52475)) | (_GLF_FUZZED(-52475)), (_GLF_IDENTITY((_GLF_FUZZED(-52475)) | (_GLF_FUZZED(-52475)), clamp((_GLF_FUZZED(-52475)) | (_GLF_FUZZED(-52475)), (_GLF_FUZZED(-52475)) | (_GLF_FUZZED(-52475)), (_GLF_FUZZED(-52475)) | (_GLF_FUZZED(-52475))))) | ((_GLF_FUZZED(-52475)) | (_GLF_FUZZED(-52475)))))))), (max(_GLF_IDENTITY(true, (true) && true) ? 0 : _GLF_FUZZED(-52475), true ? 0 : _GLF_FUZZED(-52475))) | (_GLF_IDENTITY(max(true ? 0 : _GLF_FUZZED(-52475), true ? 0 : _GLF_FUZZED(-52475)), min(max(true ? 0 : _GLF_FUZZED(-52475), _GLF_IDENTITY(true, bool(bvec3(true, true, false))) ? 0 : _GLF_FUZZED(-52475)), max(true ? 0 : _GLF_FUZZED(-52475), true ? 0 : _GLF_FUZZED(-52475))))))), true ? 0 : _GLF_FUZZED(-52475))))), 0, 1)) | ivec3(0, 0, 0)))))));
 for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0)), vec2(_GLF_IDENTITY(vec4(vec2(mat3x2(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0)), 1.0, 0.0), min(vec4(vec2(mat3x2(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(vec2(mat3x2(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0)), 1.0, 0.0)))))).x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), false, false, false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = read, (GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = read) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = read, (GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = read) << 0u)) ^ ((0u ^ 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (! (false)))), ! (! ((_GLF_IDENTITY(! (false), true && (! (false)))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)))), (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)))), (! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))))) && true)) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))) && true)), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true, bool(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true, true && ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))))))), false, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), false, false))))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true, true && ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)))), _GLF_IDENTITY(false, (false) && true), true, true))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), false, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))))) && true)), false, false))))))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), false || _GLF_IDENTITY(((! (false))), false || (((! (false))))))), false || (! (_GLF_IDENTITY((! (false)), false || ((! (false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), false || _GLF_IDENTITY(((! (false))), false || (((! (false))))))), false || (! (_GLF_IDENTITY((! (false)), false || ((! (false))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), false || _GLF_IDENTITY(((! (false))), false || (((! (false))))))), false || (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))) && true)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), _GLF_IDENTITY(((! (false))) && true, ! (_GLF_IDENTITY(! (((! (false))) && true), true && (! (((! (false))) && true))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), true), false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))))))))) && true), false, false))))))), true), false))))))), true))))))
        {
         for(int _injected_loop_counter = (0 | _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - 0), max((0 ^ 0), (0 ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                        return;
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   return;
                  }
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter < 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2(_injected_loop_counter < 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, false)), (bool(bvec4(true, true, false, false))) && true)), bool(bvec4(true, false, false, true)))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))), (true && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min(_GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch.y) : _GLF_FUZZED(-7911.0555))))) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, false || (false)), false), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false, false))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, false || (false)), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, false))))), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))), true && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))))))) && true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, true && _GLF_IDENTITY(((subgroup_local_id % 2) == 0), bool(bvec3(_GLF_IDENTITY(((subgroup_local_id % 2) == 0), (((subgroup_local_id % 2) == 0)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), _GLF_IDENTITY(true, true && (true))), false)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false, false, true))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), bool(_GLF_IDENTITY(bvec2(! (false), _GLF_IDENTITY(true, false || (true))), bvec2(bvec3(bvec2(! (false), true), false))))))))) && true)) && true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bvec4(false, false, false, true)))))
        break;
       subgroupAll(false);
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) || false))))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))), 1 * (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0 | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), _injected_loop_counter)) != 1)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
    }
   GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, clamp(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y))], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), (~ (2)) | (~ (2))), (~ (2)) / 1))))), clamp(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), (~ (2)) | (~ (2))), (~ (2)) / 1))))), _GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), (~ (2)) | (~ (2))), (~ (2)) / 1))))), _GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), (~ (2)) | (~ (2))), (~ (2)) / 1))))))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, sqrt(log(1.0)), 1.0)), float(mat2x3(float(vec4(injectionSwitch.x, 1.0, sqrt(log(1.0)), 1.0)), 0.0, sin(0.0), abs(0.0), 1.0, 1.0)))) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), false || (_GLF_IDENTITY(false, ! (! (false))))), false || (false))))));
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             else
              {
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.6) : injectionSwitch.x)) > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) * 1)); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(_GLF_IDENTITY(7317.0990, (true ? 7317.0990 : _GLF_FUZZED(2459.5095))), 1418.5208), min(vec2(_GLF_IDENTITY(7317.0990, (true ? 7317.0990 : _GLF_FUZZED(2459.5095))), 1418.5208), vec2(_GLF_IDENTITY(7317.0990, (true ? 7317.0990 : _GLF_FUZZED(2459.5095))), 1418.5208)))) : injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, abs(1.0), 0.0, 1.0, 1.0, 1.0))))))).y), true, false))))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(7317.0990, (7317.0990) - 0.0), _GLF_IDENTITY(1418.5208, min(_GLF_IDENTITY(1418.5208, min(1418.5208, 1418.5208)), _GLF_IDENTITY(1418.5208, (1418.5208) + 0.0))))) : injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))) * mat2(1.0)) - vec2(0.0, 0.0))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(exp2(-41.61)) : 0.0))), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), true, false))))))), (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)), min(vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(vec2(-53.85, 542.371))))))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), true && ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)), min(vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true))), 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.6) : 1.0)), 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(3883.4393), _GLF_FUZZED(-602.321)), vec2((vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec2(mat4((injectionSwitch) * mat2(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(164.187, -916.472)))))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (vec3(0.0, sqrt(0.0), 1.0)) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(vec2(-53.85, 542.371))))))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))), true, false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 1.0))))) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0)) * mat2(1.0)), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 1.0))))) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0)) * mat2(1.0)), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 1.0))))) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0)) * mat2(1.0)), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 1.0))))) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0)) * mat2(1.0)), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 1.0))))) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0)) * mat2(1.0)), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), float(_GLF_FUZZED(142.213)), bool(false)))))), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(abs(0.0), 0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), max(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), _GLF_IDENTITY(mat2(mat3(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), transpose(transpose(mat2(injectionSwitch, 1.0, 1.0)))))), mat2(1.0) * (mat2(mat3(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), transpose(transpose(mat2(injectionSwitch, 1.0, 1.0))))))))), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), true, false))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, exp(0.0)))), 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6.7)), bool(false)))), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), false))), bvec3(bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), clamp((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))))) : _GLF_FUZZED(vec2(abs(376.324), 0.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0)) + vec2(0.0, 0.0))))).y), true, false))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))), (mat2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - sqrt(0.0)))) / mat2(1.0, 1.0, 1.0, 1.0))))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-46.39))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-35.15)), bvec2(false, false))), 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, sqrt(abs(1.0)), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.3)), bool(false))), 1.0, 1.0, 1.0, 0.0))), 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 1.0), (mat2(injectionSwitch, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) - sqrt(vec2(0.0, 0.0))))) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))))))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-961.814))), _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), true, false))))))), false))))))))))))) && true)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), false)), (bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), false))) && true))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
            {
             GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = atomicLoad(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], 4, 64, 2);
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(9051.7816)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)), (mix(float(_GLF_FUZZED(9051.7816)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))) - 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(-2603.1161))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? -784.122 : 1.2)), _GLF_FUZZED(589.200)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true))))
            break;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     subgroupBarrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 & (51576 & -74287)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     atomicStore(checker[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base, _GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base, ~ (~ (GLF_merged2_0_1_4_1_1_14readworkgroup_base))), GLF_merged2_0_1_4_1_1_14readworkgroup_base), uvec2(0u, 0u) + (clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base, _GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec4(uvec2(0u, 0u), 0u, 0u))) | (GLF_merged2_0_1_4_1_1_14readworkgroup_base)), GLF_merged2_0_1_4_1_1_14readworkgroup_base))))), _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), uvec2(0u, 0u) + (clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base)))))) >> uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), uvec2(0u, 0u) + (clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base)))))) >> uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((~ (~ (_GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), uvec2(0u, 0u) + (clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base)))))) >> uvec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))) / uvec2(1u, 1u))))).x, uint(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_14readworkgroup_base, _GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), uvec2(0u, _GLF_IDENTITY(0u, 1u * (0u))) + (clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base))))), (~ (~ (_GLF_IDENTITY(clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base), _GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u))) + (clamp(GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base, GLF_merged2_0_1_4_1_1_14readworkgroup_base)))))) >> uvec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))).x, 1u, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uint(3u)))), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), ~ (~ (_GLF_IDENTITY(uint(3u), (uint(3u)) / 1u))))) - 0u)))))), 4, _GLF_IDENTITY(64, (64) << (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, max(3, 3)))))), 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
