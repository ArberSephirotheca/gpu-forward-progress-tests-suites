#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false)))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)) | (min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, min(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)).x) ^ 0u), gl_NumWorkGroups.x))))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false))), false, false, false)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-67438) : int(1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(0 + (int(1)), (0 + (int(1))) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) | (int(1)), (_GLF_IDENTITY(0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-48597))), max(_GLF_IDENTITY(int(1), (int(1)) << _GLF_IDENTITY(0, (0) / 1)), int(1)))), 0 | _GLF_IDENTITY(_GLF_IDENTITY((0 | (int(1))), clamp((0 | (int(1))), (0 | (int(1))), (0 | (int(1))))), int(ivec2((_GLF_IDENTITY(0 | (int(1)), clamp(0 | (int(1)), 0 | (int(1)), 0 | (int(1))))), 0))))) << _GLF_IDENTITY(0, (0) | (0)))))), int(_GLF_IDENTITY(ivec4((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(0 + (int(1)), (0 + (int(1))) / 1)), _GLF_IDENTITY(0 | (int(1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) | (int(1)), 0 | (0 | (int(1))))) << 0, _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) | (int(1)), 0 | (0 | (int(1))))) << 0, 0)), ~ (~ (int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) | (int(1)), 0 | (0 | (int(1))))) << 0, 0)))))))))), 1, 0, 1), _GLF_IDENTITY((ivec4((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(0 + (int(1)), (_GLF_IDENTITY(0 + (int(1)), (0 + (int(1))) | 0)) / 1)), _GLF_IDENTITY(0 | (int(1)), (_GLF_IDENTITY(0 | (int(1)), 0 | (0 | (int(1))))) << 0)))), 1, 0, 1)) - ivec4(0, 0, 0, 0), ((ivec4((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), 1 * (int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(0 + (int(1)), (_GLF_IDENTITY(0 + (int(1)), (0 << _GLF_IDENTITY(int(3), int(3))) ^ (0 + (int(1))))) / 1)), _GLF_IDENTITY(0 | (int(1)), (_GLF_IDENTITY(0 | (int(1)), 0 | (0 | (_GLF_IDENTITY(int(1), ~ (~ (int(1)))))))) << 0)))), 1, 0, 1)) - ivec4(0, 0, 0, 0)) | ((ivec4((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(0 + (int(1)), (0 + (int(1))) / 1)), _GLF_IDENTITY(0 | (int(1)), (_GLF_IDENTITY(0 | (int(1)), 0 | (0 | (int(1))))) << 0)))), 1, 0, 1)) - ivec4(0, 0, 0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-9.6, -1617.0858, -1.6, 3.5)) : mat2(1.0)))))), injectionSwitch)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) / 1u) + subgroup_local_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-20.96), _GLF_FUZZED(-7076.8552)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-20.96), _GLF_FUZZED(-7076.8552)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), min((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-20.96), _GLF_FUZZED(-7076.8552)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-20.96), _GLF_FUZZED(-7076.8552)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))) - 0.0) / 1.0), max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-21.99)))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))) != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3((_GLF_DEAD(false)), false, false))), false)))), ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3((_GLF_DEAD(false)), false, false))), false)))), ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, tan(abs(vec2(0.0, 0.0))) + (injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) ^ 0) + 0, 1 * ((1) + 0)))) % subgroup_size);
 uint read = 0;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec2(49.07, 5.1).g)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || (false))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(1, (1) | (1)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), false, true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), (bool(bvec3(true, false, false))) && true))))))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(false, (false) && true))), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(false, (false) && true))), true)))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = (((1 ^ 1) | (0 ^ 0)) | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), true && _GLF_IDENTITY((_GLF_DEAD(false)), false || (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x4(vec2(0.0, 0.0), _GLF_IDENTITY(dot(vec4(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), ((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))) * _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat4x3(mat2(1.0))), (false ? _GLF_FUZZED(mat2(-64.70, 9.3, -941.390, 478.389)) : mat2(mat4x3(mat2(1.0)))))))).y, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0)).y)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & 72130), ((0 & 72130)) | 0)); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)), true)))))
                    barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) + 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) | (0)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-465.189)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)))) != 1); _injected_loop_counter ++)
      {
       read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, 1 * (64)), 2);
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 1) & 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(-96751, (-96751) << 0) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-6.8 - 3.3))), float(injectionSwitch.y), bool(true)))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-6.8 - 3.3))), float(injectionSwitch.y), bool(true)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-6.8 - 3.3))), float(injectionSwitch.y), bool(true))))) || false)) && true))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))), (bool(bvec2((_GLF_DEAD(false)), false))) || false)) || false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           subgroupAll(_GLF_IDENTITY(false, (false) || false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))) && true), true, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), true && (false))) && true), true, false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, true && (false))) && true, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, true && (false))) && true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false, false))) && true, ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (false))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool((_GLF_IDENTITY(false, true && (false))) && true))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool((_GLF_IDENTITY(false, true && (false))) && true))), true)))))), true, false, false))) && true) && true))) || false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (false)))));
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.7)), float(injectionSwitch.x), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(8.7, clamp(8.7, _GLF_IDENTITY(8.7, (true ? 8.7 : _GLF_FUZZED(379.477))), 8.7)))), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.7)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(8.7), float(mat2x4(_GLF_FUZZED(8.7), 1.0, 1.0, cos(0.0), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(sqrt(0.0), 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(sqrt(0.0), 0.0, 0.0))), 1.0, 1.0, 1.0)))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y))))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))))
                  {
                   do
                    {
                     do
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), ~ (~ ((1 & 1))))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))))))
                                  {
                                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = (82868 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) + 0)) / 1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(4, (0 << _GLF_IDENTITY(int(1), int(1))))))) / 1)), int(4)))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(6423.4152)), bool(false))))).x > injectionSwitch.y))))
                                        barrier();
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))))))))
                                        barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) || false)), bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) || false)), true, false))), ! (! (true)))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) && true, ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))) || false))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-4993 & 0)); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               barrier();
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))))), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false)))
                                      {
                                       do
                                        {
                                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                              barrier();
                                            }
                                           if(_GLF_DEAD(false))
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                           if(_GLF_DEAD(false))
                                            {
                                             do
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               barrier();
                                              }
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec3(false || (false), true, false))))))
                                            barrier();
                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                                            {
                                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                                              barrier();
                                             do
                                              {
                                               do
                                                {
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_DEAD(false))
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_DEAD(false))
                                                          barrier();
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                       barrier();
                                                      }
                                                     do
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                        {
                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                          {
                                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                            barrier();
                                                          }
                                                         else
                                                          {
                                                          }
                                                         if(_GLF_DEAD(false))
                                                          barrier();
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                   barrier();
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           barrier();
                                          }
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                 barrier();
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                               else
                                                {
                                                }
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                               do
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_DEAD(false))
                                                    barrier();
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                          }
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                 barrier();
                                                }
                                              }
                                             else
                                              {
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                          }
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             do
                                              {
                                               if(_GLF_DEAD(false))
                                                {
                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                                                  {
                                                   barrier();
                                                  }
                                                }
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                          }
                                         else
                                          {
                                          }
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, cos(0.0), 1.0, determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED((51.59 + -1.8))), float(0.0), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED((51.59 + -1.8))), float(0.0), bool(true)), max(mix(float(_GLF_FUZZED((51.59 + -1.8))), float(0.0), bool(true)), mix(float(_GLF_FUZZED((51.59 + -1.8))), float(0.0), bool(true))))) - 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                          {
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false))))))));
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       do
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                           barrier();
                                          }
                                        }
                                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))));
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
                            barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      {
                       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              barrier();
                            }
                          }
                        }
                       barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(744.531) : injectionSwitch.x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))) || false))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-5.1))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-5.1))), 0.0, 0.0, 1.0, 0.0, cos(0.0)))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-5.1))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
                    {
                     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (0 << _GLF_IDENTITY(int(6), int(6))) + (_injected_loop_counter ++)))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true && ((false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), false))))))), false || (false))))))
                        barrier();
                      }
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(4.5))))).y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true, true)))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           barrier();
                          }
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), true, false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid]))), (_GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(num_workgroup)))], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 0u)), (uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 0u))) ^ 0u))), 1u * (max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], 0u | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), buf[virtual_gid])))), buf[virtual_gid]))))), (_GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(num_workgroup)))], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 0u)), (uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 0u))) ^ 0u))), 1u * (max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], 0u | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), buf[virtual_gid])))), buf[virtual_gid]))))), (_GLF_IDENTITY(max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(num_workgroup)))], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 0u)), (uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 0u))) ^ 0u))), 1u * (max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], 0u | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), buf[virtual_gid])))), buf[virtual_gid])))))) | (_GLF_IDENTITY(max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(num_workgroup)))], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 0u)), (uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 0u))) ^ 0u))), 1u * (max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) ^ 0u)], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], 0u | (_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), buf[virtual_gid])))), buf[virtual_gid])))))))) - (0u & 42374u))) * 1u)), 4, 64, 2);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), false, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), false, true, true))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true && (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) && _GLF_IDENTITY(true, true && (true)))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (28848 & 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y)), 0.0, 1.0, 1.0))), 0.0, exp(0.0), 0.0, log(1.0), 0.0, 1.0, sqrt(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)), (float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y)), 0.0, 1.0, 1.0))), 0.0, exp(0.0), 0.0, log(1.0), 0.0, 1.0, sqrt(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0))) / abs(1.0))))), true, false)))))
            barrier();
           barrier();
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, int(ivec2(0, 0))) ^ 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (! (false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    barrier();
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) / 1)) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true))))))))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             barrier();
            }
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), _GLF_IDENTITY(int(ivec4(int(6), 1, _GLF_IDENTITY(0, clamp(0, 0, 0)), 1)), max(int(ivec4(_GLF_IDENTITY(int(6), 0 | (int(6))), 1, 0, 1)), int(ivec4(int(6), 1, 0, 1)))))) ^ 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), _GLF_IDENTITY(clamp(1, 1, 1), _GLF_IDENTITY(int(ivec2(clamp(1, 1, 1), 0)), (int(ivec2(clamp(1, 1, 1), 0))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1), clamp(clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), _GLF_IDENTITY(max(clamp(1, 1, 1), clamp(1, 1, 1)), ~ (~ (max(clamp(1, 1, 1), clamp(1, 1, 1)))))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, _GLF_IDENTITY(1, (1) | (1)))) - 0)))), 1, 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))))) : _GLF_FUZZED(-71234))), 1, 1))))) / 1)) | (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, _GLF_IDENTITY(1, max(1, 1))))) / 1))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1))) / 1), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))) / 1)) | (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)))), bool(bvec2(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1))) / 1), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))) / 1)) | (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)))), false)))), false)), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1) | ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))) | 0)), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))))) / 1)) | (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), max(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), 0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) * 1))))) / 1) | ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))) | 0)), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)) / 1), max(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), 0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)))))))))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1) | ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))) | 0)), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))))) / 1)) | (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), max(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), 0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) * 1))))) / 1) | ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))) | 0)), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)) / 1), max(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), 0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)))))))))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1) | ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))) | 0)), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))))) / 1)) | (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), max(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), 0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(96939))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1, ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) * 1))))) / 1) | ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1))) | 0)), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))), 1, 1))))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)) / 1), max(0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1), 0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1))) / 1)))))))))), false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (0 & _GLF_IDENTITY(-42170, (true ? _GLF_IDENTITY(-42170, (-42170) / 1) : _GLF_FUZZED(_injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), 0 ^ (int(6)))))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
                    {
                     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, 0.0, length(tan(vec2(0.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, 0.0, length(tan(vec2(0.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, 0.0, length(tan(vec2(0.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, 0.0, length(tan(vec2(0.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, 0.0, length(tan(vec2(0.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, 0.0, length(tan(vec2(0.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                      {
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(0))), ((0 >> _GLF_IDENTITY(int(0), int(0)))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             subgroupBarrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(false, false || (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, false)))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), true, false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))))), true, false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))))), true, false, true)))))) || false))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = ((0 ^ 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), 0 | (_GLF_IDENTITY(1, (1) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, false || ((true) && true))) && (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)) && true) && _GLF_IDENTITY((false), bool(bvec2((false), true))), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true) && (false), true, true), true))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (true) && true) && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(false, (false) && true)), true, true), _GLF_IDENTITY(true, (true) && true))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true) && (false), true, true), true))))))), false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true) && true, false || ((true) && true))), bool(bvec2(! (_GLF_IDENTITY((true) && true, false || (_GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true) && true, false || ((true) && true)))))))), true)))))) && (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true) && true, false || ((true) && true))), bool(bvec2(! (_GLF_IDENTITY((true) && true, false || ((true) && true))), true)))))) && (false), bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true) && true, false || ((true) && true))), bool(bvec2(! (_GLF_IDENTITY((true) && true, false || ((true) && true))), true)))))) && (false), false, false, true)))), ! (! (bool(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true) && true, false || ((true) && true))), bool(bvec2(! (_GLF_IDENTITY((true) && _GLF_IDENTITY(true, (true) || false), false || ((true) && true))), true)))))) && (false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), true)))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((true) && true, false || (_GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true) && true, ! (! ((true) && true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3((true) && true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))) && (false), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true) && (false), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) && (false), true, true), true))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true) && (false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true) && (false), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true) && true, false || ((true) && true)), ((true) && true) && true)) && (false), true, true), true))))))), _GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) + 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.3)), bool(false))))) > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, (7) + 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
              }
            }
          }
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))).y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))).y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))).y)), true, true))), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))).y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))).y)), true, true))), _GLF_IDENTITY(false, ! (! (false)))))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(125656u))), vec2(_GLF_FUZZED((-0.1 * -779.903)), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0)))), bvec2(false, true))).y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), bool(bool(false || ((injectionSwitch.x > injectionSwitch.y))))), true && (false || ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                    barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), ~ (~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
