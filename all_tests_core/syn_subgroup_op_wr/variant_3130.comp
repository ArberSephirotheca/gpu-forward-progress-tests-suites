#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))), _GLF_IDENTITY(int(1), (int(1)) ^ 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_injected_loop_counter < 1)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), min(0, 0)), _GLF_IDENTITY(0, min(0, 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(7)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (int(7)), int(_GLF_IDENTITY(ivec4(~ (int(7)), 0, 1, 0), (ivec4(~ (int(7)), 0, 1, 0)) | ivec4(0, 0, 0, 0))))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(~ (int(7)), int(_GLF_IDENTITY(ivec4(~ (int(7)), 0, 1, 0), (ivec4(~ (int(7)), 0, 1, 0)) | ivec4(0, 0, 0, 0))))), ((_GLF_IDENTITY(~ (int(7)), int(_GLF_IDENTITY(ivec4(~ (int(7)), 0, 1, 0), (ivec4(~ (int(7)), 0, 1, 0)) | ivec4(0, 0, 0, 0)))))) / 1))), ((_GLF_IDENTITY(~ (int(7)), int(ivec4(~ (int(7)), 0, 1, 0))))) << 0) >> (_GLF_IDENTITY(0, (0) << 0) | 0)), (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) | (~ (int(7))))) | (~ _GLF_IDENTITY(_GLF_IDENTITY((int(7)), ((_GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(int(int(7))), min(_GLF_IDENTITY(int(int(int(_GLF_IDENTITY(7, (7) / 1)))), (true ? _GLF_IDENTITY(int(int(int(7))), max(int(int(int(7))), int(int(int(7))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))), _GLF_IDENTITY(int(int(int(7))), 0 | (int(int(int(7))))))), (int(int(int(7)))) << 0)))) / 1), (true ? _GLF_IDENTITY((int(7)), ((_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(7), 0 ^ (int(7))))), (int(int(int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, (7) + _GLF_IDENTITY((0 & -12776), 1 * (_GLF_IDENTITY((0 & -12776), ((0 & -12776)) << 0)))), 7)))))) << 0)))) / 1) : _GLF_FUZZED(_injected_loop_counter))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           do
                                            {
                                             GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.x = subgroup_id;
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))));
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))));
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z = subgroup_size, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z = subgroup_size) + 0u);
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4)))) | ((1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))) ^ 1), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter > (_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(4, (4) >> 0)))), int(4))) >> _GLF_IDENTITY(int(4), int(4))), int(ivec4(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), 0, 1, 0))) ^ 1)), true && ((_injected_loop_counter > (_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(4, (4) >> 0)))), int(4))) >> _GLF_IDENTITY(int(4), int(4))), int(ivec4(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), 0, 1, 0))) ^ 1)))), ! (! (! (_injected_loop_counter > (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ 1)))))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 1), max(ivec2(_injected_loop_counter, 1), ivec2(_injected_loop_counter, 1))))) != 0, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 1), max(ivec2(_injected_loop_counter, 1), ivec2(_injected_loop_counter, 1))))) != 0, false || (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 1), max(ivec2(_injected_loop_counter, 1), ivec2(_injected_loop_counter, 1))))) != 0)), false, false, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 1), max(ivec2(_injected_loop_counter, 1), ivec2(_injected_loop_counter, 1))))) != 0, false || (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 1), max(ivec2(_injected_loop_counter, 1), ivec2(_injected_loop_counter, 1))))) != _GLF_IDENTITY(0, (0) | (0)))), false, false, true)))))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.z = workgroup_size;
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), vec3(vec3(vec3(injectionSwitch, 1.0)))))).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, max(0, 0)), (0 ^ _GLF_IDENTITY(0, max(0, 0))) ^ 0))); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))))))))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 ^ 0), ! (_GLF_IDENTITY(! (_injected_loop_counter > (0 ^ 0)), (! (_injected_loop_counter > (0 ^ 0))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))))).y))))), false || (_injected_loop_counter > (0 ^ 0)))); _injected_loop_counter --)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y = workgroup_id;
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.z * _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, min(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y) | 0u)) - 0u), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, ~ (~ (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y)))))))) - 0u, ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) | 0u) ^ ((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, min(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y) | 0u)) - 0u), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, ~ (~ (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y)))))))) - 0u))), uint(uvec4(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.z * _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, min(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y) | 0u)) - 0u), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, ~ (~ (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y)))))))) - 0u, ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) | 0u) ^ ((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, min(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y) | 0u)) - 0u), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y, ~ (~ (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y)))))))) - 0u))), 0u, (0u | 0u), (1u | 1u))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) - 0), int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) ^ 0), ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) / 1)) << 0))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(_GLF_IDENTITY(6, 1 * (6))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), (int(6)) ^ 0))), ((42415 & 0) | 0) | (_GLF_IDENTITY(int(6), (int(6)) | (int(6))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))))), (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, 0 + (6))))) ^ (0 ^ 0)))) | (int(6))))), (false ? _GLF_FUZZED(-9815) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), min(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))))), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-85363) : int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (6) << 0), 6)))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) - 0), int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) ^ 0), ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) / 1)) << 0))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(_GLF_IDENTITY(6, 1 * (6))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), (int(6)) ^ 0))), ((42415 & 0) | 0) | (_GLF_IDENTITY(int(6), (int(6)) | (int(6))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0), int(7))))))), (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, 0 + (6))))) ^ (0 ^ 0)))) | (int(6))))), (false ? _GLF_FUZZED(-9815) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), min(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))))), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-85363) : int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (6) << 0), 6))))))) * 1))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(vec3(mat2(1.0) * (injectionSwitch), 0.0)))))), max(injectionSwitch, injectionSwitch)), tan(0.0), 0.0, 1.0, 1.0))), 0.0, abs(1.0), 0.0, 0.0))).x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) | 0)); _injected_loop_counter --)
                {
                 do
                  {
                   GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.w = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), uint(2u)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))) | (workgroup_base)))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))), (uint(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base)))) | (uint(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))))))), (workgroup_base) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), uint(2u)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))) | (workgroup_base))), max(clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), uint(2u)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))) | (workgroup_base))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), _GLF_IDENTITY(uint(2u), 1u * (uint(2u)))))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))) | (workgroup_base))), (clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), uint(2u)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))) | (workgroup_base)))) + 0u))))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.w + GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.w + GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.w, max(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.w, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.w)) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, clamp(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) | (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size)), GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size)), (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), bool(bvec2(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), false))))) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x))) - 0u) * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), uint(_GLF_IDENTITY(uvec4(0u ^ (_GLF_IDENTITY(0u, 0u | (0u))), 0u, 1u, 0u), (uvec4(0u ^ (0u), 0u, 1u, 0u)) / uvec4(1u, 1u, 1u, 1u))))))).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u, uint(uvec2((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u, 1u))), ((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u) >> 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size), _GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) : (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size)), (false ? _GLF_FUZZED(bitfieldExtract(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, -23902, 788)) : (false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) : (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size))))) ^ uvec3(0u, 0u, 0u)).x * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u)))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base))))[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(2, (2) ^ 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3]), min(_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base))))[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3]), uvec4(0u, 0u, 0u, 0u) | (uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base))))[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3]))), _GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base))))[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3]), (_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base))))[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3]), (uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base))))[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(3, ~ (~ (3)))])) ^ uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u))))).z, _GLF_IDENTITY(max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3])).z, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3])).z), (max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3])).z, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3])).z)) | 0u))) * 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) | (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, uvec3(uvec3(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size))))))) | (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size)))), (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) - uvec3(0u, 0u, 0u)), (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u), max((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u), (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)))).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u, max((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u), max((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u), (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)))).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u), max((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u), (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)))).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u))) >> 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size), (false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) : (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size))) ^ uvec3(0u, 0u, 0u)).x * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), 0 ^ ((0)))) | ((0))) >> 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3])).z) * 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, max(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base)).z, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, 0u | (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z)), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, (true ? _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z : _GLF_FUZZED(67457u)))))) ^ 0u, ((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size), ~ (~ (_GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size), ((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size)) - uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)).x * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z) ^ 0u) >> 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size), (false ? _GLF_FUZZED(GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size) : (GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size))) ^ uvec3(0u, 0u, 0u)).x * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[_GLF_IDENTITY(0, (0) >> 0)], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base[3])).z) * 1u))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1)), (subgroup_local_id + 1) | 0u)) % _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(0u | (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z), max(0u | (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z), 0u | (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z)))))) ^ 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 0 | (2))))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), ~ (~ (~ (int(5)))))))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.x = _GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : next_virtual_gid))) * 1u);
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1))) : _GLF_FUZZED(-37597)))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1))) : _GLF_FUZZED(-37597))))), clamp(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1))) : _GLF_FUZZED(-37597))))), ((0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1))) : _GLF_FUZZED(-37597)))))) ^ 0), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1))) : _GLF_FUZZED(-37597))))), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1))) : _GLF_FUZZED(-37597)))))))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0))) * 1.0))) > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(39.72)), bool(false)))), float(_GLF_FUZZED(-46.33)), bool(false)))), vec2(_GLF_FUZZED(-38.06), _GLF_FUZZED(1.1)), bvec2(false, false))).y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 do
                                  {
                                   atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.x], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(0 | (64), (0 | (64)) << (-85989 & 0))), 4);
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0)));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((true ? 76685 : -71993) & 0)); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.y = read;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (-76617 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(subgroup_local_id + 1 < GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.z, (subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, (1u) | 0u))).z) || false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), clamp(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mix(vec2(_GLF_IDENTITY(((injectionSwitch) / vec2(1.0, 1.0))[0], (((injectionSwitch) / vec2(1.0, 1.0))[0]) + 0.0), _GLF_FUZZED(-7.6)), vec2(_GLF_FUZZED(-4272.7035), ((injectionSwitch) / vec2(1.0, 1.0))[1]), bvec2(false, true))), (injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0)))), (false ? _GLF_FUZZED(vec2(6.1, 880.275)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), injectionSwitch, injectionSwitch)).y))))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
                                        {
                                         do
                                          {
                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1))); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                {
                                                 do
                                                  {
                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < (1 & 1)); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = ((-5431 >> -24602) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                        {
                                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-915.244), _GLF_FUZZED(9.6)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(1376.7030, 8.4)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) + vec2(0.0, 0.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(vec2(1376.7030, 8.4), (false ? _GLF_FUZZED(vec2(-1968.7597, 18.68)) : vec2(1376.7030, 8.4)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) + vec2(0.0, 0.0))))))[1]), (vec2((injectionSwitch)[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((5.9 * vec4(-9.6, -71.84, 746.946, -353.204).br)))), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((5.9 * vec4(-9.6, -71.84, 746.946, -353.204).br)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((5.9 * vec4(-9.6, -71.84, 746.946, -353.204).br)))), mix(vec2(_GLF_FUZZED(-5292.4158), _GLF_FUZZED((-2456.3362 / 0.2))), vec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((5.9 * vec4(-9.6, -71.84, 746.946, -353.204).br)))))[0], (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((5.9 * vec4(-9.6, -71.84, _GLF_IDENTITY(746.946, max(746.946, 746.946)), -353.204).br)))))[1]), bvec2(true, true))))))[1])) * mat2(1.0)))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-915.244, (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(-915.244, max(_GLF_IDENTITY(-915.244, clamp(-915.244, -915.244, -915.244)), -915.244)) : _GLF_FUZZED(9426.4982)))), _GLF_FUZZED(9.6)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0)), min(_GLF_IDENTITY(float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0)), max(float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0)), float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1013.6420)), float(injectionSwitch.y), bool(true)))), 0.0, 1.0, 0.0, 0.0)))), float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0))))), (injectionSwitch)[1]), mix(vec2((vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0, length(0.0), 0.0, 1.0)), log(1.0), 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, tan(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, 0.0, 1.0, 1.0))), 0.0)), (_GLF_IDENTITY(float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0)), min(float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0)), float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0))))) - sqrt(0.0))), (injectionSwitch)[1]))[0], (vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat2x4((injectionSwitch)[0], 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0))), (injectionSwitch)[1]))[1]), vec2(_GLF_FUZZED(vec3(-27.89, -626.721, 9.6).g), _GLF_FUZZED(861.606)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0))) * mat2(1.0)))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y) && true)))))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             do
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                    {
                                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), 0 + ((2)))) : _GLF_FUZZED(-24646))))) ^ 0), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                                                      {
                                                                       do
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                            {
                                                                             do
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                  {
                                                                                   for(int _injected_loop_counter = (0 | (16054 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                                                                                    {
                                                                                     do
                                                                                      {
                                                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)) ^ 1) | 0)); _injected_loop_counter --)
                                                                                        {
                                                                                         atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.y, 4, 64, 4);
                                                                                        }
                                                                                      }
                                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                                    }
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                  }
                                                                                }
                                                                               else
                                                                                {
                                                                                }
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(false));
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                         else
                                                                          {
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(false));
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                             while(_GLF_WRAPPED_LOOP(false));
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(int(1)))), (~ (_GLF_IDENTITY(1, int(int(1))))) | 0))), _GLF_IDENTITY(1, int(int(1))))), 1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ _GLF_IDENTITY((_GLF_FUZZED(_injected_loop_counter)), clamp((_GLF_FUZZED(_injected_loop_counter)), (_GLF_FUZZED(_injected_loop_counter)), _GLF_IDENTITY((_GLF_FUZZED(_injected_loop_counter)), 0 | ((_GLF_FUZZED(_injected_loop_counter)))))))) : 1)))), clamp(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), 1)), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), 1)), _GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), clamp(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) ^ 0), 1)))), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), 1))))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)))) - 0))
                            {
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         do
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                            {
                                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), 0 | (_GLF_IDENTITY(int(7), max(int(7), int(7)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, 0 ^ (7))))) : _GLF_FUZZED(_injected_loop_counter)))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, 0 ^ (7))))) : _GLF_FUZZED(_injected_loop_counter)))))), max(int(7), int(7)))), 0 ^ (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))))) * 1)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, (7) ^ 0))))), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0)), ! (! (_injected_loop_counter > 0))), false, true)), (bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false, true))) && true))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), clamp(true ? 0 : _GLF_FUZZED(_injected_loop_counter), true ? 0 : _GLF_FUZZED(_injected_loop_counter), true ? 0 : _GLF_FUZZED(_injected_loop_counter))), true ? 0 : _GLF_FUZZED(_injected_loop_counter), true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))) | 0)); _injected_loop_counter --)
                                                {
                                                 do
                                                  {
                                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                    {
                                                     do
                                                      {
                                                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                        {
                                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             subgroupAll(false);
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(false));
                                                    }
                                                  }
                                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))), false))))));
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u)) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_14next_virtual_gidreadsubgroup_sizeworkgroup_base.y, 4, 64, 4);
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = (0 & 92705); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           do
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || false)))
                                                {
                                                 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                  {
                                                   for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), (int(3)) | (0 >> _GLF_IDENTITY(int(5), int(5)))))), max((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3) << 0, (_GLF_IDENTITY((3) << 0, (true ? (3) << 0 : _GLF_FUZZED(_injected_loop_counter)))) >> 0))), (int(3)) | (0 >> _GLF_IDENTITY(int(5), int(5)))))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), (int(3)) | (0 >> _GLF_IDENTITY(int(5), int(5)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                              {
                                                               do
                                                                {
                                                                 do
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     do
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                        {
                                                                        }
                                                                       else
                                                                        {
                                                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                {
                                                                                }
                                                                               else
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                  {
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                   do
                                                                                    {
                                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                      {
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                          {
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                                            {
                                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                              {
                                                                                              }
                                                                                             else
                                                                                              {
                                                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                                {
                                                                                                }
                                                                                               else
                                                                                                {
                                                                                                 do
                                                                                                  {
                                                                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                    {
                                                                                                     subgroupAll(true);
                                                                                                    }
                                                                                                   else
                                                                                                    {
                                                                                                    }
                                                                                                  }
                                                                                                 while(_GLF_WRAPPED_LOOP(false));
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bool(! (_GLF_WRAPPED_LOOP(false)))))), ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bool(! (_GLF_WRAPPED_LOOP(false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
                                                                                  }
                                                                                }
                                                                              }
                                                                             else
                                                                              {
                                                                              }
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                    }
                                                                  }
                                                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false)))))))))));
                                                                }
                                                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true))))));
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0)))))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y)), (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y))) || false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, false, true)))) || false))))))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))) || false))))))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false)))))));
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
