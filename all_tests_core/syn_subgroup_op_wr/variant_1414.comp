#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(46917u, 153948u, 131244u)) : _GLF_IDENTITY(uvec3(uvec3((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))), uvec3(uvec3(uvec3(uvec3((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))))))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)))), 0u | (subgroup_id)), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) * subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec4(subgroup_id, 0u, 1u, 1u)), (uint(uvec4(subgroup_id, 0u, 1u, 1u))) / 1u)))) * subgroup_size) | (subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u), 0u)));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_base, 1u), (uvec2(workgroup_base + subgroup_base, 1u)) | (uvec2(workgroup_base + subgroup_base, 1u)))), min(uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_base, 1u), (uvec2(workgroup_base + subgroup_base, 1u)) | (uvec2(workgroup_base + subgroup_base, 1u)))), uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_base, 1u), (uvec2(workgroup_base + subgroup_base, 1u)) | (uvec2(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u), 1u))))))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u))) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), (~ (4u)) | 0u))), (4u) | (4u)), uint(uvec3(4u, 0u, 1u)))))))))), (uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), (~ (4u)) | 0u))), (4u) | (4u)), uint(uvec3(4u, 0u, 1u))))))))))) | (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), (~ (4u)) | 0u))), (4u) | (4u)), uint(uvec3(4u, 0u, 1u)))))))))), ~ (~ (uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), (~ (4u)) | 0u))), (4u) | (4u)), uint(uvec3(4u, 0u, 1u)))))))))))))))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), max((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), uint(uvec4(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 0u, 0u, 0u)))))))))))), 1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), 1u, 1u, 1u)) - uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u), ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), max(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) : _GLF_FUZZED(subgroup_size))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) >> 0u), _GLF_IDENTITY(1u, (1u) * 1u))) - uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u)))))), max(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))))))))))))))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | 0u))))))) | (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))) >> 0u))))), 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), uint(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), 1u, 0u)))) | 0u)))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), 0u + ((subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), 0u | (clamp(subgroup_size, subgroup_size, subgroup_size))))))))))))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), min((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))))), 1u, 1u, 1u)) - uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u))))), _GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_size)))) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ _GLF_IDENTITY(0u, 0u + (0u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), _GLF_IDENTITY(uint(uvec3(4u, 0u, 1u)), uint(_GLF_IDENTITY(uint(uint(uvec3(4u, 0u, 1u))), 0u | (uint(uint(uvec3(4u, 0u, 1u))))))))))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), _GLF_IDENTITY(uint(uvec3(4u, 0u, 1u)), uint(_GLF_IDENTITY(uint(uint(uvec3(4u, 0u, 1u))), 0u | (uint(uint(uvec3(4u, 0u, 1u))))))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), _GLF_IDENTITY(uint(uvec3(4u, 0u, 1u)), uint(_GLF_IDENTITY(uint(uint(uvec3(4u, 0u, 1u))), 0u | (uint(uint(uvec3(4u, 0u, 1u))))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), _GLF_IDENTITY(uint(uvec3(4u, 0u, 1u)), uint(_GLF_IDENTITY(uint(uint(uvec3(4u, 0u, 1u))), 0u | (uint(uint(uvec3(4u, 0u, 1u))))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), _GLF_IDENTITY(uint(uvec3(4u, 0u, 1u)), uint(_GLF_IDENTITY(uint(uint(uvec3(4u, 0u, 1u))), 0u | (uint(uint(uvec3(4u, 0u, 1u)))))))))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), _GLF_IDENTITY(uint(uvec3(4u, 0u, 1u)), uint(_GLF_IDENTITY(uint(uint(uvec3(4u, 0u, 1u))), 0u | (uint(uint(uvec3(4u, 0u, 1u))))))))))))))) : _GLF_FUZZED(2434u)))))))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | (subgroup_size)) << 0u)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), max((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)), subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))) | (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) + 0u)))))))))))) - (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))))))))))), 1u, 1u, 1u)) - uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u))))), (false ? _GLF_FUZZED(workgroup_id) : workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, uint(uint(_GLF_IDENTITY(4u, max(4u, 4u)))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u), ~ (~ (_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), uint(uvec3(4u, 0u, 1u))))))))))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), clamp(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), max(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))))), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) / 1u))))))))) | (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u)))))), 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | (_GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ~ (~ ((subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))))))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, (0u ^ 0u) ^ (subgroup_size)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (~ (subgroup_size)))))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size)), subgroup_size))))))))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), max(_GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), clamp((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))), _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), ~ (~ (_GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), uint(uvec4((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), 1u, 1u, 0u)))))))))))))), 1u, 1u, 1u)) - uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u)))))))));
 uint read = _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0)))), 0 + (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) - 0)))))), 0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid))) | (next_virtual_gid)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))), (_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))), min((_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))), max((_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))) | (next_virtual_gid)))))))) / 1u))), _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))))], uint(1), 4, _GLF_IDENTITY(64, (64) ^ 0), 4);
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)) && true)))));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(9.9, 703.670), mix(vec2((vec2(9.9, 703.670))[0], _GLF_FUZZED((+ 5270.7993))), vec2(_GLF_FUZZED(-29.08), (vec2(9.9, 703.670))[1]), bvec2(false, true)))) : injectionSwitch, min(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(9.9, 703.670), mix(vec2((vec2(9.9, 703.670))[0], _GLF_FUZZED((+ 5270.7993))), vec2(_GLF_FUZZED(-29.08), (vec2(9.9, 703.670))[1]), bvec2(false, true)))) : injectionSwitch, false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(9.9, 703.670), mix(vec2((vec2(9.9, 703.670))[0], _GLF_FUZZED((+ 5270.7993))), vec2(_GLF_FUZZED(-29.08), (vec2(9.9, 703.670))[1]), bvec2(false, true)))) : injectionSwitch)))).x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)))) / 1) > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
              break;
             if(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id % 2)), subgroup_local_id % 2)), (_GLF_IDENTITY(subgroup_local_id % 2, max(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, uint(_GLF_IDENTITY(uvec2(subgroup_local_id % 2, 0u), clamp(uvec2(subgroup_local_id % 2, 0u), uvec2(subgroup_local_id % 2, 0u), uvec2(subgroup_local_id % 2, 0u)))))))) - 0u)), ((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id % 2)), subgroup_local_id % 2), (max(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id % 2)), subgroup_local_id % 2)) - 0u)))) / 1u) == 0)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   subgroupAll(false);
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY((false), ! (! ((false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))))))))) || false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, min(0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = ((0 ^ (1 & 1)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (55251 & 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637)))), max(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637)))), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637))))), float(_GLF_FUZZED(223.049)), bool(false))))))), mix(float(_GLF_FUZZED(3.8)), float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637)))), max(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637)))), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-6.2))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-7.5)) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-9499.3637))))), float(_GLF_FUZZED(223.049)), bool(false)))))))), bool(true)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
                        return;
                       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(3.6, 57.62).t)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), injectionSwitch.y))))))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                           else
                            {
                            }
                           break;
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                   read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) >> 0), _GLF_IDENTITY(2, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | 0)), min((_GLF_IDENTITY(2, (2) | 0)), (_GLF_IDENTITY(2, (2) | 0))))));
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     subgroupAll(false);
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               else
                {
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) << 0u);
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))))))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)))), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))))))), false || ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)))), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))))))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-37.74)), vec2(_GLF_FUZZED(-137.343), (injectionSwitch)[1]), bvec2(false, true))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) + 0), 4))))), int(4)), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), max(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), 1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))))), 1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), min((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), (1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4))))) ^ 0))), ((1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) + 0), 4))))), int(4)), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), max(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), 1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))))), 1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), min((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), (1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4))))) ^ 0)))) | ((1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) + 0), 4))))), int(4)), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), max(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))), 1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4)))))), 1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), min((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), (1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4))))) ^ 0))))), _GLF_IDENTITY(int(ivec3((1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), min((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4))))) ^ 0))), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (false ? _GLF_FUZZED(36475) : ~ (int(1)))))))), 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(ivec3((1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), int(ivec2((4), 0))))))) | (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(ivec2(4, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 4))))), int(4)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(53288))), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4)), min((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), clamp(max(4, 4), max(4, 4), max(4, 4))))))), int(4)), (1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(67243) : int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))), int(4))))) ^ 0))), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(0, max(0, 0)))))))); _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   subgroupBarrier();
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))));
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
}
