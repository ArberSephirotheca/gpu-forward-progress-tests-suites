#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_26 {
 ivec4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_24 {
 ivec2 _f0;
 ivec4 _f1;
 uint num_workgroup;
 ivec2 _f2;
 mat4x3 _f3;
 uvec4 _f4;
 ivec3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_25 {
 mat3x4 _f0;
 _GLF_struct_24 _f1;
} ;

struct _GLF_struct_27 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_21 {
 mat3 _f0;
 mat4x2 _f1;
 ivec2 _f2;
 mat3x4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_22 {
 mat4x2 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
 int _injected_loop_counter;
 bvec2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_20 {
 uint virtual_gid;
 vec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_19 {
 uint subgroup_base;
 mat2 _f0;
 bvec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_16 {
 float _f0;
 vec2 _f1;
 uvec4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_14 {
 bool _f0;
} ;

struct _GLF_struct_13 {
 mat3x4 _f0;
 int _f1;
 bvec2 _f2;
 ivec4 _f3;
 vec2 _f4;
 int _f5;
} ;

struct _GLF_struct_15 {
 uint workgroup_id;
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_11 {
 float _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 uint _f1;
 ivec2 _f2;
 mat4 _f3;
 bvec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
 uvec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 uint _f1;
 _GLF_struct_8 _f2;
 vec3 _f3;
 mat4 _f4;
 uvec4 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 mat3x4 _f1;
 vec2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat2 _f1;
 int _f2;
 uvec4 _f3;
 uint _f4;
 mat3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 mat4x2 _f1;
 uint _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 float _f5;
} ;

struct _GLF_struct_18 {
 _GLF_struct_7 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_15 _f3;
 vec2 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 mat4x2 _f1;
 vec3 _f2;
 uvec4 _f3;
 bvec4 _f4;
 float _f5;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 float _f1;
 _GLF_struct_1 _f2;
 uvec3 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
 _GLF_struct_3 _f1;
 vec2 _f2;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_25(mat3x4(1.0), _GLF_struct_24(ivec2(1), ivec4(1), gl_NumWorkGroups.x, ivec2(1), mat4x3(1.0), uvec4(1u), ivec3(1), uvec2(1u))), _GLF_struct_26(ivec4(1), mat4x3(1.0)));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat2x3(1.0), _GLF_struct_3(_GLF_struct_0(mat3x4(1.0), uvec3(1u)), 1.0, _GLF_struct_1(mat2(1.0)), uvec3(1u), _GLF_struct_2(vec4(1.0), mat4x2(1.0), vec3(1.0), uvec4(1u), bvec4(true), 1.0)), vec2(1.0), gl_WorkGroupSize.x);
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_7(uvec2(1u), mat4x2(1.0), 1u, _GLF_struct_5(ivec2(1), mat2(1.0), 1, uvec4(1u), 1u, mat3(1.0), uvec3(1u)), _GLF_struct_6(mat3x4(1.0), mat3x4(1.0), vec2(1.0), mat3x4(1.0)), 1.0), _GLF_struct_10(mat4(1.0), 1u, _GLF_struct_8(mat3x4(1.0), uvec3(1u), mat4x3(1.0)), vec3(1.0), mat4(1.0), uvec4(1u), _GLF_struct_9(mat3x2(1.0), 1u, ivec2(1), mat4(1.0), bvec4(true), 1u)), _GLF_struct_12(_GLF_struct_11(1.0), uvec3(1u)), _GLF_struct_15(gl_WorkGroupID.x, _GLF_struct_13(mat3x4(1.0), 1, bvec2(true), ivec4(1), vec2(1.0), 1), _GLF_struct_14(true)), vec2(1.0), _GLF_struct_17(_GLF_struct_16(1.0, vec2(1.0), uvec4(1u), vec4(1.0)), mat3x4(1.0)));
 uint workgroup_base = _GLF_struct_replacement_4.workgroup_size * _GLF_struct_replacement_18._f3.workgroup_id;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(subgroup_id * subgroup_size, mat2(1.0), bvec3(true), vec3(1.0));
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(workgroup_base + _GLF_struct_replacement_19.subgroup_base + subgroup_local_id, vec2(1.0), mat3x4(1.0));
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_19.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(_GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_struct_22(mat4x2(1.0), mat3x4(1.0), ivec3(1), _GLF_struct_21(mat3(1.0), mat4x2(1.0), ivec2(1), mat3x4(1.0), mat4(1.0))), 1, bvec2(true), mat3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_23._injected_loop_counter > 0); _GLF_struct_replacement_23._injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if((subgroup_local_id % 2) == 0)
          {
           subgroupAll(false);
           read = atomicLoad(buf[_GLF_struct_replacement_20.virtual_gid], 4, 64, 2);
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   subgroupAll(false);
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           read = atomicLoad(buf[_GLF_struct_replacement_20.virtual_gid], 4, 64, 2);
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(checker[_GLF_struct_replacement_20.virtual_gid], read, 4, 64, 4);
    }
  }
 else
  {
  }
}
