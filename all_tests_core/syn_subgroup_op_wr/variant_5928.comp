#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.xy = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.xy.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.xy.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.xy.y * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.w * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.z = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.z], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 0:
     case 19:
     switch(_GLF_SWITCH(0))
      {
       case 59:
       {
        bvec3(false, true, false);
        ;
        mat2x4(-37.98, 939.492, -428.850, 51.31, -7.9, 1106.0131, -7293.2528, -905.245);
       }
       case 31:
       {
       }
       case 0:
       case 99:
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       case 7:
       case 49:
       case 1:
       case 44:
       subgroupAll(true);
       break;
       case 69:
       while((ivec4(45391, 88378, -25812, -5778) == ivec4(-83122, -19039, 19094, -86218)))
        {
         switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
          {
           case 0:
           uint _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[13];
           {
            mat4x3 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[78];
            reflect(vec4(4.4, 44.22, -74.65, -3.9), vec4(6.7, 361.074, -9.4, 347.267));
            for(            subgroup_size;
 true; true)
             {
             }
            while(false)
             {
              mix(GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.xy.x, GLF_merged3_0_2_52_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizenext_virtual_gidsubgroup_id.xy.x, true);
              mat3x4 _GLF_SWITCH_0_4v[71];
              mat3x4(-442.207, -95.58, -9.0, -69.95, -14.06, -8643.7257, 2.3, -1.5, -211.682, 65.29, -1285.1662, 40.11);
              false;
              (mat2(-7176.7802, 4.3, 37.06, 4871.9341) * (mat2(-1.8, -5713.9704, -9.5, 93.74) * mat2(4630.7635, 0.7, -278.421, -3243.0666)));
              float _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v[46];
              vec2 _GLF_SWITCH_0_8v[81], _GLF_SWITCH_0_9v;
             }
            while(true)
             {
              uvec4 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
              uint _GLF_SWITCH_0_12v[25], _GLF_SWITCH_0_13v[18];
              ((ivec3(8361, 21830, 70712) * ivec3(-2384, -95348, -47280)) % ivec3(33792, -40268, -31189));
              mat2x3 _GLF_SWITCH_0_14v;
              ;
              mat2 _GLF_SWITCH_0_15v[68], _GLF_SWITCH_0_16v;
              ;
             }
            (+ ivec2(57480, -40255));
            mat2x4 _GLF_SWITCH_0_17v;
           }
           for(           ivec4(-95591, 55850, 93114, -53064);
 (read == 193602u); (mat2(73.17, -7775.7716, 70.65, 47.86) == (+ mat2(1.2, -6.7, -382.221, 18.66))))
            {
            }
           break;
           case 49:
           mat4 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v;
           default:
           1;
          }
        }
       case 32:
       mat2 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v[14];
       default:
       1;
      }
     break;
     case 97:
     mat2x4(7772.7240, 527.460, 90.05, -382.733, 4.6, -0.7, -78.97, 5.4)[1];
     default:
     1;
    }
  }
}
