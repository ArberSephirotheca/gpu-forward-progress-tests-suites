#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(99.51, 7.5)) : injectionSwitch)).y), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(99.51, 7.5)) : injectionSwitch)).y), float(mat3x2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(99.51, 7.5)) : injectionSwitch)).y), 0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0))) : _GLF_FUZZED(50.68))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) >> 0)))), ((_GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) >> 0))))) * 1) >> 0))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), min(vec3(injectionSwitch.x, 1.0, 0.0), vec3(injectionSwitch.x, 1.0, 0.0))))))) > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0)))))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0)))))))).y, mix(float(_GLF_FUZZED(-56.23)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0)))))))).y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), max(max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))), max(injectionSwitch.y, injectionSwitch.y))))))))))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups)))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))))), true, true, true))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), true)), false, false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true)), false, false, true)), ! (! (bool(bvec4(bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))), true)), false, false, true)))))))))))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
  return;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), 0u ^ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), _GLF_IDENTITY(clamp(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(181144u)))) << 0u)) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size)), (_GLF_IDENTITY(clamp(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(181144u)))) << 0u)) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size)), (clamp(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(181144u)))) << 0u)) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size))) | (clamp(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(181144u)))) << 0u)) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size))))) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_size) : subgroup_base)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) : _GLF_FUZZED(workgroup_base)))) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))) + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), 1u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u) & (101600u - 124950u)), 0u + ((_GLF_IDENTITY(0u, (0u) << 0u) & (101600u - 124950u)))), 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), 1u, (0u & (101600u - 124950u)), 1u), ~ (~ (uvec4(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), 1u, (0u & (101600u - 124950u)), 1u)))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), 1u, (0u & (101600u - 124950u)), 1u), ~ (~ (uvec4(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), 1u, (0u & (101600u - 124950u)), 1u))))) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - (uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u)) << _GLF_IDENTITY(uvec4(1u), uvec4(1u)))))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)) % subgroup_size), clamp(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)) % subgroup_size), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0u) % subgroup_size)) | (((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)) % subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id))) | (subgroup_local_id)) + 1) - 0u)) % subgroup_size)));
 uint read = 0;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) * 1), (true ? _GLF_IDENTITY((1), ((1)) * 1) : _GLF_FUZZED(55521)))) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ 0), 1)))), _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) | ((1))), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))), max((_GLF_IDENTITY(1, _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) | ((1))), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) | ((1))), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) | ((1))), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0))))) - 0))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))), 0 | (_GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), _GLF_IDENTITY(max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))), (max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1)))) | (max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0)), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, _GLF_IDENTITY(((1) | 0) | 0, (((1) | 0) | 0) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, (_GLF_IDENTITY((1) | 0, (true ? (1) | 0 : _GLF_FUZZED(-49619)))) | ((1) | 0))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), 1))), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? _GLF_IDENTITY(max((1), _GLF_IDENTITY((1), ((1)) * 1)), (_GLF_IDENTITY(max((1), _GLF_IDENTITY((1), ((1)) * 1)), min(max((1), _GLF_IDENTITY((1), ((1)) * 1)), max((1), _GLF_IDENTITY((1), ((1)) * 1))))) << 0) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max(_GLF_IDENTITY((1), ((1)) << 0), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) / 1)) / 1)))))), (1)), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0)), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), int(int((1)))))), (1)), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), max((1), (1))) | 0)) * _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1, max((_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), 0, 0)))) * 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(_GLF_IDENTITY(max((1), (1)), (true ? max((1), _GLF_IDENTITY((1), ((1)) * 1)) : _GLF_FUZZED(-70155))), max((1), (1))))) | 0)), ((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(max((1), (1)), max(max(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY(_GLF_IDENTITY((1), int(int((1)))), min(_GLF_IDENTITY((1), int(int((1)))), _GLF_IDENTITY((1), int(int((1)))))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0))), max((1), (1))))) | 0))) - 0) * 1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0))))))) : _GLF_FUZZED(subgroup_id))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | (64))) | (64)), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) << 0), 4))) + 0));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), true, false))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y, false, false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y, false, false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), _GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y)) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + _GLF_IDENTITY(4.3, 0.0 + (4.3)))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) >> 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x))), max(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), 0))), (1) | (1))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) >> 0) : _GLF_FUZZED(_injected_loop_counter)))))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_IDENTITY(_GLF_FUZZED((-905.714 - 1.0)), max(_GLF_FUZZED((-905.714 - 1.0)), _GLF_FUZZED((-905.714 - 1.0))))), bvec2(true, false))).x))) - 0.0))) > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y)) && true, ! (! (((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.0 + 4.3)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], max((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0])) : _GLF_FUZZED(5245.5586))), _GLF_FUZZED((-905.714 - 1.0))), bvec2(true, false))).x > injectionSwitch.y)) && true))))))), true), true, false))))))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7)))))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), _GLF_IDENTITY(true, (true) || false)), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), _GLF_IDENTITY(true, (true) || false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY((subgroup_local_id % 2), 1u * ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) << 0u) % 2))) == 0)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(false);
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, 4)), 64, 2);
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         else
          {
           subgroupAll(false);
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY((_GLF_IDENTITY(4, 0 | (4))), ~ (~ ((_GLF_IDENTITY(4, 0 | (4)))))) + 0))), 64, 2);
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true, true, true))))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false)))) || false))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             continue;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bool(! (_GLF_IDENTITY(false, true && (false))))))))));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), min((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), float(vec3((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), 1.0, abs(1.0)))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0)))), float(vec3(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? injectionSwitch : mix(injectionSwitch, vec2(-24.85, -9.4), 7282.1533))) : injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0)))), 1.0, 0.0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   subgroupBarrier();
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, int(ivec4(64, (0 & -69085), 1, 0)))))), 4);
  }
}
