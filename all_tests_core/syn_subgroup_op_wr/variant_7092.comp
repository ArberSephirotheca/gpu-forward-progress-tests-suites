#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))) || false)))
  barrier();
 uvec4 GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, determinant(mat3(1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0)))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, determinant(mat3(1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0)))) > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(166092u))), float(injectionSwitch.x), bool(true)))), float(_GLF_FUZZED(188.204)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), min(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))))), injectionSwitch.y, injectionSwitch.y))))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-34.65)), bool(false))), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-487.343), _GLF_FUZZED(1834.8508)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))
      barrier();
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread;
 GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz = GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.w = subgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           barrier();
           do
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))) && true)))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))) && true))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))) && true))), ! (! ((! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))) && true))))))))))))))))), false, true), false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(ivec3(5674, 66252, -32811).s) : _GLF_IDENTITY(5, (5) ^ 0)))), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x = GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.w;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0), clamp(((0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0), int(ivec2(((0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0), 0))), ((0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z = subgroup_size;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))) && true))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(698.088, 476.691)))).y))));
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))) && true)))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (subgroup_local_id) - 0u);
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), _GLF_FUZZED(-9.5)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0])), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))))), true))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), true, true))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), sqrt(sin(0.0)), length(vec2(0.0, 0.0))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)) || false)) || false))))
        {
         barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), (! ((! (_GLF_DEAD(false))))) || false))))), true && (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -459)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, false)))), ((! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), false, false))))) || false)))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bvec3(false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true))))), _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true)))))) && true, ! (_GLF_IDENTITY(! ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true)))))) && true), bool(_GLF_IDENTITY(bool(! ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true)))))) && true)), bool(bool(bool(! ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true)))))) && true)))))))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x < injectionSwitch.y))), false || (! (((injectionSwitch.x < injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))).y)), true, true, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1695.4020), _GLF_FUZZED(-30.71)), bvec2(false, false))).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.y = num_workgroup;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true, ! (! ((false) && _GLF_IDENTITY(true, true && (true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && ((! (_GLF_IDENTITY(false, ! (! (false)))))))))), (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), ~ (~ (~ (gl_WorkGroupID)))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false)), false, false, true))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false)), false, false, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) << 0u))) * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))), true, true, true))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (false ? _GLF_FUZZED(53106) : (1))))) / 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) ^ 0)))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(1.0) * (injectionSwitch))))) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base))), (~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)))) ^ uvec4(0u, 0u, 0u, 0u)))).x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x)) * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, _GLF_IDENTITY(min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x), uint(_GLF_IDENTITY(uvec4(min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x), 1u, 0u, (1u ^ 0u)), (uvec4(min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x), 1u, 0u, (1u ^ 0u))) << uvec4(0u, 0u, 0u, 0u))))) * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u)).z)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, max(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x)), min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x)) * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, uint(uvec3(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, (1u ^ 0u), 1u))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x)) * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, ~ (~ (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base))))), (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) * 1u))).z))))) + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y));
 uint next_virtual_gid = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (true ? 0u : _GLF_FUZZED(num_workgroup))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)).z, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)).z, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)).z, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base), min(~ (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base), _GLF_IDENTITY(~ (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base), uvec4(0u, 0u, 0u, 0u) + (~ (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base))))))))).z)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)).z, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)).z, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base)).z) ^ 0u) : _GLF_FUZZED(virtual_gid))))))), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, 0u | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z)), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z, 0u | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z)))) + ((GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1) % GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.x = next_virtual_gid;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-8.7)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), exp(0.0), 0.0, 1.0)))) - 0.0))).y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)))))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id, ~ (~ (GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id))).xyz.x], uint(1), 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) | (64)))))), _GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), max(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) / 1), _GLF_FUZZED(42766))), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)), int(int((_GLF_FUZZED(42766))))) << _GLF_IDENTITY(0, max(0, 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), max(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) / 1), _GLF_FUZZED(42766))), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)), int(int((_GLF_FUZZED(42766))))) << _GLF_IDENTITY(0, max(0, 0)))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), max(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) / 1), _GLF_FUZZED(42766))), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)), int(int((_GLF_FUZZED(42766))))) << _GLF_IDENTITY(0, max(0, 0)))))) : _GLF_FUZZED(-44905)))) >> 0) - 0) : 4), min((false ? _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0, ~ (~ ((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0))), (_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0, (_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0)), max((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, (_GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, min((_GLF_FUZZED(42766)) << 0, (_GLF_FUZZED(42766)) << 0))) | 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(_GLF_IDENTITY(42766, (42766) - 0))) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0, max((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) | (_GLF_FUZZED(42766))), _GLF_IDENTITY(_GLF_FUZZED(42766), 0 | (_GLF_FUZZED(42766))), _GLF_FUZZED(42766))), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, max(_GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, 0 | ((_GLF_FUZZED(42766)) << 0)), (_GLF_FUZZED(42766)) << 0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, 0 ^ ((_GLF_FUZZED(42766)) << 0)))))))) - 0, (_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, max((_GLF_FUZZED(42766)) << 0, _GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, min((_GLF_FUZZED(42766)) << 0, (_GLF_FUZZED(42766)) << 0))))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0), 1 * (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, ~ (~ (42766)))), _GLF_IDENTITY((_GLF_FUZZED(42766)), (_GLF_IDENTITY((_GLF_FUZZED(42766)), max((_GLF_FUZZED(42766)), (_GLF_FUZZED(42766))))) | ((_GLF_FUZZED(42766)))) << 0)))))))), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) - 0))))) : 4), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_FUZZED(42766), _GLF_FUZZED(42766), _GLF_FUZZED(42766))))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_IDENTITY(_GLF_FUZZED(42766), max(_GLF_FUZZED(42766), _GLF_FUZZED(42766)))) << 0))), (_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))) | 0)) - 0) : 4), min((false ? _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(42766))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), _GLF_IDENTITY((_GLF_FUZZED(42766)) << 0, (false ? _GLF_FUZZED(72576) : (_GLF_FUZZED(42766)) << 0))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(_GLF_IDENTITY(42766, (false ? _GLF_FUZZED(57881) : 42766))))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))), max((_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(_GLF_IDENTITY(42766, (false ? _GLF_FUZZED(57881) : 42766))))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))), (_GLF_IDENTITY(_GLF_FUZZED(42766), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(_GLF_IDENTITY(42766, (false ? _GLF_FUZZED(57881) : 42766))))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))))) | 0)) - 0) : 4), (false ? _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(42766, min(42766, 42766))), clamp(_GLF_IDENTITY(_GLF_FUZZED(42766), min(_GLF_FUZZED(42766), _GLF_FUZZED(_GLF_IDENTITY(42766, _GLF_IDENTITY(clamp(42766, 42766, 42766), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(clamp(42766, 42766, 42766), (clamp(42766, 42766, 42766)) / 1), 0)), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(clamp(42766, 42766, 42766), (clamp(42766, 42766, 42766)) / 1), 0)), clamp(int(ivec2(_GLF_IDENTITY(clamp(42766, 42766, 42766), (clamp(42766, 42766, 42766)) / 1), 0)), int(ivec2(_GLF_IDENTITY(clamp(42766, 42766, 42766), (clamp(42766, 42766, 42766)) / 1), 0)), int(ivec2(_GLF_IDENTITY(clamp(42766, 42766, 42766), (clamp(42766, 42766, 42766)) / 1), 0))))) * 1)))))), _GLF_FUZZED(42766), _GLF_IDENTITY(_GLF_FUZZED(42766), (_GLF_FUZZED(42766)) << 0)))) - 0) : 4)))))));
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), buf[virtual_gid])), 1u))), 4, _GLF_IDENTITY(64, (64) | (64)), _GLF_IDENTITY(0, (0) - 0));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z = read, (GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z = read) | 0u);
 if(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y, 0u ^ (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y)) + 1 < GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   atomicStore(checker[virtual_gid], GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z, 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(390.981) : injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(390.981) : injectionSwitch.y)))))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(390.981) : injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       subgroupAll(false);
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), float(_GLF_FUZZED((+ 7546.3361))), bool(false)))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)))) | 0))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z, (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z, min(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z, (GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z) >> 0u), _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z, max(GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z, GLF_merged2_0_3_64_3_1_11GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_id.xyz.z))))) / 1u), 4, 64, _GLF_IDENTITY(4, (4) | (4)));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(-4.8, 3366.4589, 2.9, 67.14).y)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)), (bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))) || false)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) && true)) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)), (bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))) || false)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) && true)) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)), (bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))) || false)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) && true)) && true), true), true, false))))))), true)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))) || false)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupAll(true);
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, true && (false)), true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}
