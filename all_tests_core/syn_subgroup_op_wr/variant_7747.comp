#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 uint read;
 ivec2 _f0;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 uint subgroup_base;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 bvec4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 bvec3 _f1;
 mat4x2 _f2;
 float _f3;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 _GLF_struct_3 _f1;
 mat4x3 _f2;
 uint workgroup_base;
 ivec3 _f3;
 mat4x2 _f4;
 vec4 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 vec2 _f1;
 vec3 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 bool _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 _GLF_struct_0 _f1;
 ivec2 _f2;
 mat4 _f3;
 mat4x3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_2 {
 uint workgroup_size;
 mat4x3 _f0;
 _GLF_struct_1 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(gl_WorkGroupSize.x, mat4x3(1.0), _GLF_struct_1(ivec3(1), _GLF_struct_0(mat2(1.0), true, bvec4(true)), ivec2(1), _GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED((mat3x4(7.9, 5154.0993, 7.0, 68.57, -0.4, -9.4, 37.60, -1.3, 4.3, 1.1, -2661.0474, 9.9) * mat4x3(-9778.0749, -3.2, 36.75, 8206.3005, 80.54, 0.1, 4.9, 434.228, -4696.3059, -9.2, -4314.4787, 119.475))) : _GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(-4.1, -73.07, -503.215, -9705.5247, -4213.7078, -4.8, 352.355, -0.7, -7.9, -8.8, 3907.5516, 81.17, 8.3, -5.6, 34.68, 3.3)))))), mat4x3(1.0), mat4x2(1.0)));
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(ivec4(1), vec2(1.0), vec3(1.0), _GLF_struct_5(bvec2(true), _GLF_struct_3(mat2(1.0), bvec3(true), mat4x2(1.0), 1.0), mat4x3(1.0), _GLF_struct_replacement_2.workgroup_size * workgroup_id, ivec3(1), mat4x2(1.0), vec4(1.0), _GLF_struct_4(bvec3(true), bvec4(true), ivec2(1))));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(mat4x2(1.0), subgroup_id * subgroup_size);
 uint virtual_gid = _GLF_struct_replacement_6._f3.workgroup_base + _GLF_struct_replacement_7.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_6._f3.workgroup_base + _GLF_struct_replacement_7.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(0, ivec2(1));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     _GLF_struct_replacement_8.read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   else
    {
    }
  }
 else
  {
   subgroupAll(false);
   _GLF_IDENTITY(_GLF_struct_replacement_8.read = atomicLoad(buf[virtual_gid], 4, 64, 2), 0u ^ (_GLF_struct_replacement_8.read = atomicLoad(buf[virtual_gid], 4, 64, 2)));
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_8.read, 4, 64, 4);
}
