#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true)) || false))))
    barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w = subgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), min(0 ^ (0), 0 ^ (0)))))))); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z = subgroup_local_id;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
      barrier();
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u)).x;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))) || false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) + vec2(0.0, 0.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) + vec2(0.0, 0.0)).y)) && true))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), false)))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.9)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.9)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.9)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), false, false))), true))))))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) && true)))))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), ((workgroup_size)) >> (0u ^ 0u)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))))) | 0u) + 0u)) + 0u)) / 1u)) / 1u)) >> 0u) * workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) | ((workgroup_size)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, uint(uvec2(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u))))), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) + 0u, ((_GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))) >> 0u))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) - 0u)) * 1u))) / _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))) >> 0u) * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) << _GLF_IDENTITY((0u | 0u), (true ? (0u | 0u) : _GLF_FUZZED(subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) + 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) + 0u), 0u, (174539u & 0u))))) / 1u)) >> 0u) * workgroup_id, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(119189u) : workgroup_size)), workgroup_size, workgroup_size)), _GLF_IDENTITY((workgroup_size) >> 0u, ~ (~ (_GLF_IDENTITY((workgroup_size) >> 0u, ((workgroup_size) >> 0u) | ((workgroup_size) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) >> 0u)) | _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(num_workgroup)))))), 0u + (_GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(num_workgroup)))))), min((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(num_workgroup)))))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 1u * (num_workgroup))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) >> 0u, ((workgroup_size) >> 0u) ^ (0u | 0u))), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u))))) / 1u))) + _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))))), 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) >> 0u, ((workgroup_size) >> 0u) ^ (0u | 0u))), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u))))) / 1u))) + _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))))))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, 1u, 0u)), 0u ^ (_GLF_IDENTITY(uint(uvec4(1u, 1u, 1u, 0u)), max(uint(uvec4(1u, 1u, 1u, 0u)), uint(uvec4(1u, 1u, 1u, 0u))))))))) >> 0u) * workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) >> 0u, ((workgroup_size) >> 0u) * _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), min((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))))), workgroup_size)), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) + 0u)) / _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), min(_GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), 1u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), min((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))))), workgroup_size)), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) + 0u)) / _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), min(_GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), 1u))), 1u, 1u)), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), min((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)) + (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))))), workgroup_size)), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) + 0u)) / _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), min(_GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), 1u))), 1u, 1u))) << 0u))) >> 0u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (true ? (workgroup_size) : _GLF_FUZZED(subgroup_local_id))) >> 0u)) + 0u)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (true ? (workgroup_size) : _GLF_FUZZED(subgroup_local_id))) >> 0u)) + 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (true ? (workgroup_size) : _GLF_FUZZED(subgroup_local_id))) >> 0u)) + 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), (workgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (true ? (workgroup_size) : _GLF_FUZZED(subgroup_local_id))) >> 0u)) + 0u)) / 1u)))) >> 0u)))) * workgroup_id));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), true, true, true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) && true) || (true)), true, true))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y))))))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-6.3))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6263.9000))), injectionSwitch.y))))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))), uint(uvec3(min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))), 1u, 1u))))) | 0u) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u))), uint(uvec2(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (_GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id))))))), ~ (~ ((~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)))))))))))), uint(uvec3(_GLF_IDENTITY(min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))), min(_GLF_IDENTITY(min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))), uint(uvec4(min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))), 0u, 1u, 0u))), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))))), 1u, 1u))))) | 0u) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u))), 1u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (true), (_GLF_IDENTITY(false, (false) && true) || (true)) && true)) ? _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), (subgroup_id)))))))), 0u | (_GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))), ((_GLF_IDENTITY((subgroup_id), max((subgroup_id), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) * 1u))))) / 1u)))))))) | 0u) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u))), (_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))))) | 0u), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))))) | 0u), max(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))))) | 0u), _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))))) | 0u))), _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))))))))) | _GLF_IDENTITY(0u, 0u + (0u))))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) | (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))), uint(3u)))))) << 0u)))) >> 0u))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((4u), 0u + ((4u)))), 4u)), min(_GLF_IDENTITY(_GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((4u), 0u + ((4u)))), 4u)), uint(uvec2(_GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((4u), 0u + ((4u)))), 4u)), 1u))), _GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-7.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) * _GLF_IDENTITY((4u), 0u + ((4u)))), 4u))))), uint(_GLF_IDENTITY(4u, 0u + (4u)))), (1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, _GLF_IDENTITY(max(4u, 4u), ~ (~ (max(4u, 4u)))))))))) / 1u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(4u), ~ (~ (uint(4u))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(4u, max(4u, 4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY(max(4u, 4u), 0u + (_GLF_IDENTITY(max(4u, 4u), (false ? _GLF_FUZZED(subgroup_id) : max(4u, 4u))))))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, 0u | (4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u)))))))) - 0u) / 1u), uint(4u))) | 0u)))) * 1u, clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(4u, max(4u, 4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY(max(4u, 4u), 0u + (_GLF_IDENTITY(max(4u, 4u), (false ? _GLF_FUZZED(subgroup_id) : max(4u, 4u))))))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, 0u | (4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u)))))))) - 0u) / 1u), uint(4u))) | 0u)))) * 1u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(4u, max(4u, 4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY(max(4u, 4u), 0u + (_GLF_IDENTITY(max(4u, 4u), (false ? _GLF_FUZZED(subgroup_id) : max(4u, 4u))))))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, 0u | (4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u)))))))) - 0u) / 1u), uint(4u))) | 0u)))) * 1u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(4u, max(4u, 4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY(max(4u, 4u), 0u + (_GLF_IDENTITY(max(4u, 4u), (false ? _GLF_FUZZED(subgroup_id) : max(4u, 4u))))))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, _GLF_IDENTITY(4u, 0u | (4u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))) / 1u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, max(4u, 4u))), ~ (~ (uint(_GLF_IDENTITY(4u, max(4u, 4u)))))))) - 0u) / 1u), uint(4u))) | 0u)))) * 1u)))) << 0u)) ^ 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))), uint(4u)))) * GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (subgroup_base) | (subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (subgroup_base) | (subgroup_base))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, clamp(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), ~ (_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)), max(~ ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)), ~ ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))))), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)) / uvec4(1u, 1u, 1u, 1u)))))))).z;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.6), _GLF_FUZZED(-3.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat4x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), bvec2(true, true))))).x, (false ? _GLF_FUZZED(normalize(68.30)) : injectionSwitch.x)) > injectionSwitch.y)), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, (true) || false)), bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false || (injectionSwitch.x > injectionSwitch.y)))), true, true), false))), true))), true)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), (_injected_loop_counter ++) >> 0)) - 0))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) / (1 | 1)) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, _GLF_IDENTITY(0u, 1u * (0u)), 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w))) - 0u), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1)) | 0u) % GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w)))), (_GLF_IDENTITY((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, (false ? _GLF_FUZZED(uvec4(155527u, 20273u, 13077u, 94230u)) : GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)), uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w)), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1)) | 0u) % GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w)))), ((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))), 0u)), 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), uvec4(0u, 0u, 0u, 0u) ^ ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z, uint(_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u), max(_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u), (uvec4(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u)) / uvec4(1u, 1u, 1u, 1u)), uvec4(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u))))) + 1), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1)) | 0u) % GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w))))) / 1u)) | _GLF_IDENTITY(((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w)), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1)) | 0u) % GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w))))), min(((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w)), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1)) | 0u) % GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w))))), ((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), max((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size), (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))) | ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size, uvec4(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size)).w)), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z + 1)) | 0u) % GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.w))))))));
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.x = _GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))), (~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))) << 0u)));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), false)))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, false || (true))) && (false))) || _GLF_IDENTITY(false, false || (false))))) || false)), _GLF_IDENTITY((false), bool(bvec2((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))), true))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) && true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(1.0)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)).y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(1.0)).y))))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0, 0.0, 1.0)))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 else
  {
  }
 uint read = 0;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.y = _GLF_IDENTITY(read, _GLF_IDENTITY(uint(uint(read)), min(uint(uint(read)), _GLF_IDENTITY(uint(uint(read)), (false ? _GLF_FUZZED(subgroup_base) : uint(uint(read)))))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.x], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), 0 | ((1) | (1)))), (false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), _GLF_IDENTITY(0 | ((1)), 0 + (0 | ((1)))))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | 0) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), ((1)) | (_GLF_IDENTITY((1), ((1)) ^ 0))) | 0, ((1) | 0) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, min(0, 0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY((false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, (1) | 0)), ((false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, (1) | 0))) | ((false ? _GLF_FUZZED(findLSB(subgroup_local_id)) : _GLF_IDENTITY(1, (1) | 0)))))))))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), (true ? 4 : _GLF_FUZZED(26219))), (_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(26219, max(26219, 26219)))))) * 1));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || false)) || false), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, (true) || false) ? injectionSwitch.x : _GLF_FUZZED(90.11))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(15.25) : injectionSwitch.x), max((false ? _GLF_FUZZED(15.25) : injectionSwitch.x), (false ? _GLF_FUZZED(15.25) : injectionSwitch.x)))), injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), int(4)))) - 0, min(((_GLF_IDENTITY(int(4), int(4)))) - 0, _GLF_IDENTITY(((_GLF_IDENTITY(int(4), int(4)))) - 0, (((_GLF_IDENTITY(int(4), int(4)))) - 0) | (((_GLF_IDENTITY(int(4), int(4)))) - 0)))))) >> 0)) / 1) - 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-87063)))))), int(4)))), (false ? _GLF_FUZZED(ivec4(9593, -90459, -64039, 23782)[2]) : (_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) - 0)) >> 0)) / 1) - 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-87063)))))), int(4))), int(ivec3(_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) - 0)) >> 0)) / 1) - 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-87063)))))), int(4))), (0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) - 0)) >> 0)) / 1) - 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-87063)))))), int(4)))) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) > (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(4))) >> (0 << _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.z % 2) == 0)
          {
           subgroupAll(false);
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! (! (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.y = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, ~ (~ (64))), 2);
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
            barrier();
           for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), false || (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))) || false))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
                    {
                     subgroupAll(false);
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.y = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, 4)), 64, 2);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2))), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2))), ! (! (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter --)
    {
     do
      {
       subgroupBarrier();
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))), (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))), (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), false, false), bvec3(bvec4(bvec3((false), false, false), true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), false, false), bvec3(bvec4(bvec3((false), false, false), true)))), (bool(_GLF_IDENTITY(bvec3((false), false, false), bvec3(bvec4(bvec3((false), false, false), true))))) || false)))), true, false, false)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))), (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))) && true))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_13next_virtual_gidreadsubgroup_local_idsubgroup_size.y, 4, 64, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(85052))));
  }
}
