#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-71445)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, exp(0.0) * (injectionSwitch.y)))) && true)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) && true)), true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))) && true), false)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * (int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(max(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), min(max(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), max(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (10706 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -82.49)) : injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-405.481) : injectionSwitch.y), min((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) ? _GLF_FUZZED(-405.481) : injectionSwitch.y), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)))), false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) || false), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) || false), false, false, false))), true && (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) || false), false, false, false))), ! (! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) || false), false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))) ? _GLF_FUZZED(-405.481) : injectionSwitch.y))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
          {
          }
         else
          {
           return;
          }
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, _GLF_IDENTITY(tan(0.0), clamp(_GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0), tan(0.0)))), (_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, tan(0.0)), mix(vec3((vec3(injectionSwitch.x, 0.0, tan(0.0)))[0], _GLF_FUZZED(-0.4), (vec3(injectionSwitch.x, 0.0, tan(0.0)))[2]), vec3(_GLF_FUZZED(vec2(-295.251, 3658.1474).x), (vec3(injectionSwitch.x, 0.0, tan(0.0)))[1], _GLF_FUZZED(6.3)), bvec3(false, true, false)))) * vec3(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))), 1.0 * (float(vec3(injectionSwitch.x, 0.0, tan(0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, _GLF_IDENTITY(tan(0.0), float(vec3(tan(0.0), 0.0, 0.0))))), 1.0 * (float(vec3(injectionSwitch.x, 0.0, _GLF_IDENTITY(tan(0.0), min(_GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0)))))))))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, tan(0.0))), 1.0 * (float(vec3(injectionSwitch.x, 0.0, tan(0.0)))))) > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(false || (! (true)), (false || (! (true))) && true))), true && ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(false || (! (true)), (false || (! (true))) && true))))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(false || (! (true)), (false || (! (true))) && true))), true && ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(false || (! (true)), (false || (! (true))) && true))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(false || (! (true)), (false || (! (true))) && true))), true && ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(false || (! (true)), (false || (! (true))) && true)))))) && true)))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))) ^ 0u)) + 0u) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))) && true))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, log(1.0), 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, sin(0.0)))) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false, true))))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), (! (_GLF_IDENTITY(true, bool(bool(true))))) && true))) && true))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), (! (_GLF_IDENTITY(true, bool(bool(true))))) && true))) && true))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), (! (_GLF_IDENTITY(true, bool(bool(true))))) && true))) && true))), false, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), (! (_GLF_IDENTITY(true, bool(bool(true))))) && true))) && true))), false, false)))), false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), true, true)))))), (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, ((injectionSwitch.x) - 0.0) / 1.0)) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), true), bvec2(bvec2(bvec2((_GLF_DEAD(false)), true))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (false))) && true)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (false))), false, true, false))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x, mix(float(_GLF_FUZZED(6.4)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x))), bool(true))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x > injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-565.722), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], _GLF_FUZZED(-4.5)), bvec2(true, false))).x > injectionSwitch.y)))) && true), _GLF_IDENTITY(false, true && (false)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.4), _GLF_FUZZED(-683.940)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)), true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec3((false), false, true))))))), _GLF_IDENTITY(false || (false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), true)))))), bool(bvec3(false || (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y)))))), (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y)))))), bool(bvec2(! ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(tan(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y)))))), true)))) || false))) || false)), true))))) && true))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))), false)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false))))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), (false ? _GLF_FUZZED(bitfieldExtract(-95385, _GLF_IDENTITY(-20458, (true ? -20458 : _GLF_FUZZED(32280))), -3655)) : _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(44520) : int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) - (0 | 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        break;
       break;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(~ (~ (workgroup_base + subgroup_base)), clamp(~ (~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_size)))) << 0u), workgroup_base))) - 0u) + subgroup_base)), ~ (~ (workgroup_base + subgroup_base)), ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), ~ (~ (~ (workgroup_base + subgroup_base)))))))) + ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size);
 uint read = 0;
 do
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED((_GLF_IDENTITY(read - _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) + 0u), (read - _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) + 0u)) | (read - _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) + 0u))))) : uint(1))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), true && (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), false || ((_GLF_WRAPPED_IF_TRUE(true))))) && true))), ((_GLF_WRAPPED_IF_TRUE(true))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)));
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & 35911) | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(false);
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, false, true, false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), (2) >> 0), (2) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), clamp(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))))) | (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))))) | (_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uvec3(buf[virtual_gid], 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (uint(uvec3(buf[virtual_gid], 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), 4, 64, _GLF_IDENTITY(2, (2) / 1)), clamp(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))) ^ 0u), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))))), uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))) | (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) / 1, clamp(_GLF_IDENTITY((2) / 1, max((2) / 1, (2) / 1)), _GLF_IDENTITY((2) / 1, ((2) / 1) | 0), (2) / 1))))))) | _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], 4, 64, _GLF_IDENTITY(2, (2) / 1)), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), 0u ^ (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)], 4, 64, _GLF_IDENTITY(2, (2) / 1)), (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))) | (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)))))), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), min(_GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), (_GLF_IDENTITY(2, (2) / 1)) - 0)))), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))))), ((_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, (2) - 0), 2))) / 1)) / 1)), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), 0u ^ (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), _GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))), ~ (~ ((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)))))) | (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)))))), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)))))) >> 0u), _GLF_IDENTITY(0u ^ ((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))) | (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1))))) | (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), clamp(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2), max((2), (2))) / 1)), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) | (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0)))), _GLF_IDENTITY((2) / 1, min(_GLF_IDENTITY((2) / 1, (_GLF_IDENTITY((2) / 1, ((2) / 1) >> 0)) >> 0), _GLF_IDENTITY((2) / 1, int(int((2) / 1))))))), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : 0u ^ ((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / 1)), (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), (2) / 1))) | (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), (false ? _GLF_FUZZED(-45536) : _GLF_IDENTITY(2, (2) / 1)))))))))) | (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(64, 64)), _GLF_IDENTITY(2, (2) / 1)), clamp(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2), max((2), (2))) / 1)), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) | (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0)))), _GLF_IDENTITY((2) / 1, min(_GLF_IDENTITY(_GLF_IDENTITY((2) / 1, (_GLF_IDENTITY((2) / 1, ((2) / 1) >> 0)) >> 0), (true ? _GLF_IDENTITY((2) / 1, (_GLF_IDENTITY((2) / 1, ((_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) | 0)))) >> 0)) / 1) >> 0)) >> 0) : _GLF_FUZZED((85019)))), _GLF_IDENTITY((2) / 1, int(int((2) / 1))))))), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(2, (2) ^ 0), 1, 0, 0)), max(int(ivec4(_GLF_IDENTITY(2, (2) ^ 0), 1, 0, 0)), int(ivec4(_GLF_IDENTITY(2, (2) ^ 0), 1, 0, 0))))), _GLF_IDENTITY(2, min(2, 2)), 2))) / 1))))))))), 1u, 1u, 0u))));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(741.065), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(69.84)), bvec2(true, false))), injectionSwitch)) : _GLF_FUZZED(vec2(7777.0845, -3332.9563)))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true), true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y)))), false, true)))))) || false, false || (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true), true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y)))), false, true)))))) || false, bool(bool((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true), true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y)))), false, true)))))) || false)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-182.051, -467.255)))).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, 1.0, exp(0.0), abs(0.0), 1.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-91.74) : 0.0)), 0.0, log(1.0))))))), 0.0, log(1.0), length(vec2(0.0, 0.0))), transpose(transpose(mat4x3(0.0, 1.0, exp(0.0), abs(0.0), 1.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, log(1.0), length(vec2(0.0, 0.0)))))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), 0 ^ (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, 1.0, exp(0.0), abs(0.0), 1.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, log(1.0), length(vec2(0.0, 0.0))), transpose(transpose(mat4x3(0.0, 1.0, exp(0.0), abs(0.0), 1.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, log(1.0), length(vec2(0.0, 0.0)))))))), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), (_GLF_IDENTITY(! (false), (! (false)) || false)) || false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))))))));
      }
    }
   else
    {
    }
   read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) | 0u)) << 0u)], 0u ^ (buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), min(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)))))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uint(virtual_gid)), uint(uvec3(uint(uint(virtual_gid)), 0u, 0u)))), virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)))))) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u))))), (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 0u, 0u)), (uint(uvec3(0u, 0u, 0u))) | 0u))), (uint(0u)) << _GLF_IDENTITY(0u, min(0u, 0u))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(workgroup_size))), 0u))), min(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u)) | (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid)))))) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), min(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, (false ? _GLF_FUZZED(153284u) : (_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (0u | 0u) ^ (~ (virtual_gid)))))) << 0u)) : _GLF_FUZZED((_GLF_IDENTITY(~ subgroup_id, (~ subgroup_id) / 1u))))))) | (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ _GLF_IDENTITY((virtual_gid), 0u + (_GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid))))))))) << 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 1u, (184137u & 0u), 1u))), virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ (~ (virtual_gid)), (~ (~ (virtual_gid))) | (~ (~ (virtual_gid)))))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u), 0u, 0u)))) | (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, 1u, 1u), clamp(uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, 1u, 1u), uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, 1u, 1u), uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, 1u, 1u)))))) | (0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) / 1u)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ _GLF_IDENTITY((virtual_gid), uint(uint((virtual_gid))))))) << 0u, 1u, 1u), clamp(uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << 0u, 1u, 1u), uvec3((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, 0u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) | 0u)))) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)), 1u, 1u), uvec3((_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) << _GLF_IDENTITY(0u, ~ (~ (0u))), 1u, 1u)))))) | (0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) / 1u)))))))))))))))) / 1u)))])), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (0 >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-55462) : 64)))), _GLF_IDENTITY(~ (~ (64)), _GLF_IDENTITY((~ (~ (64))) | 0, int(_GLF_IDENTITY(int((~ (~ (64))) | 0), (int((~ (~ (64))) | 0)) - 0))))), 2);
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)))), int(_GLF_IDENTITY(int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), clamp(int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)))))))))))))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)))), int(_GLF_IDENTITY(int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), clamp(int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)))))))))))))), (true ? (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)))), int(_GLF_IDENTITY(int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), clamp(int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0))))), int(int(int(max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) | 0)))))))))))))) : _GLF_FUZZED(-58505)))) >> 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false))), true && ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)))))))))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))) || false))))))))))))))) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), false || (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))))))))))) || false))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))), _GLF_IDENTITY(bool(bool((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))), ! (! (bool(bool((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))))))) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))), false || (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))))))) || false))))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), bool(bvec4(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), false, false, false)))) || false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, true))), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, true))), true, true, false))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))))) || false), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << (0 | 0)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << (0 | 0)))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), false || (_GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), ! (! ((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec4(bool(bvec2(true, true)), true, true, true)))) && (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bvec3((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true, false)))), ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)) && true))))) && true))))))))), true, true, false)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false))), true && ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)))))))))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))) || false))))))))))))))) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), false || (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))))))))))) || false))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))), _GLF_IDENTITY(bool(bool((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))), ! (! (bool(bool((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))))))) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))), false || (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))))))) || false))))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), bool(bvec4(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), false, false, false)))) || false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, true))), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, true))), true, true, false))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))))) || false), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << (0 | 0)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << (0 | 0)))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), false || (_GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), ! (! ((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec4(bool(bvec2(true, true)), true, true, true)))) && (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bvec3((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true, false)))), ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)) && true))))) && true))))))))), true, true, false))))))), ! (! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false))), true && ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)))))))))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bool((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))) || false))))))))))))))) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), false || (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))))))))))) || false))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))), _GLF_IDENTITY(bool(bool((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))), ! (! (bool(bool((! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))))))))))) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))), false || (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, true, true)), false, true, true)))) && true))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), false), true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))))))) || false))))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), bool(bvec4(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))), false, false, false)))) || false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, true))), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, true))), true, true, false))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))))) || false), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << (0 | 0)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << (0 | 0)))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), false || (_GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)), ! (! ((_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)))), ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec4(bool(bvec2(true, true)), true, true, true)))) && (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bvec3((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true, false)))), ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)) && true))))) && true))))))))), true, true, false))))))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            continue;
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(vec2(vec4(injectionSwitch, 1.0, 0.0)), 0.0, 1.0)))).x > injectionSwitch.y)) && true))))))), bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 0, 1, 1)), 0 ^ (int(ivec4(_injected_loop_counter, 0, 1, 1))))) < 1, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))))) < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) - 0)) && true)) || false)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0), (mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0))), injectionSwitch.y))) - 0.0)) + 0.0)))))
      {
      }
     else
      {
       subgroupBarrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, min(4, 4)))));
}
