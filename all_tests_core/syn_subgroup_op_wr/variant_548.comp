#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 vec4 _f0;
 bvec2 _f1;
 ivec2 _f2;
 bvec4 _f3;
 mat3x2 _f4;
 ivec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat3x2 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 uint workgroup_base;
 uvec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))))) > injectionSwitch.y)))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y)))))))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))) || false)))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) << 0)) | (int(3))))), int(3))) & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (false ? _GLF_FUZZED(inversesqrt(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))))) : vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ((injectionSwitch.x > injectionSwitch.y) && true) && true))) && true))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, true)))) || false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))))))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false)), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false))) || false)))), true)), ! (! (bool(bvec2(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false)), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false))) || false)))), true))))), (bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))) || false))))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 1.0)), (float(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 1.0))) * 1.0)) > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true)) && true), ! (! (! (_GLF_WRAPPED_LOOP(false)))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))) && true)))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false))))))))))))))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(2608) : int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * vec2(1.0, 1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(float(22443u))), bvec2(false, false))), injectionSwitch)), (injectionSwitch) * mat2(1.0)).x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(float(22443u))), bvec2(false, false))), injectionSwitch)), (injectionSwitch) * mat2(1.0)).x)) > injectionSwitch.y) && true), false, false, true)))))));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(58044), (_GLF_FUZZED(58044)) / 1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-94.45)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-94.45)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.1, 2.9)))).y), false))), false, _GLF_IDENTITY(true, bool(bvec3(true, false, false))))), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.1, 2.9)))).y), false))), false, _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) * (_GLF_IDENTITY((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))), ~ (~ ((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(3u), max(uvec3(3u), uvec3(3u))), _GLF_IDENTITY(uvec3(3u), (uvec3(3u)) / uvec3(1u, 1u, 1u))))))) ^ uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupSize) * (_GLF_IDENTITY((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))), ~ (~ ((_GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u)), min(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u)), (true ? uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u)) : _GLF_FUZZED(uvec3(156308u, 148408u, 30984u)))))))))) ^ uvec3(1u, 1u, 1u))))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, length(0.0), tan(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)))))))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))), true, true, true)))))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false, false))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0))).x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0))).x < injectionSwitch.y))))))))) || false))), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)))), false)), bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)))), false)), bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)))), false))))))))))), false || (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-57.69), max(_GLF_FUZZED(-57.69), _GLF_FUZZED(-57.69))) : injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-57.69), max(_GLF_FUZZED(-57.69), _GLF_FUZZED(-57.69))), max(_GLF_IDENTITY(_GLF_FUZZED(-57.69), max(_GLF_FUZZED(-57.69), _GLF_FUZZED(-57.69))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-57.69), max(_GLF_FUZZED(-57.69), _GLF_FUZZED(-57.69))), abs(1.0) * (_GLF_IDENTITY(_GLF_FUZZED(-57.69), max(_GLF_FUZZED(-57.69), _GLF_FUZZED(-57.69))))))) : injectionSwitch.y))))) || false), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(bvec2(true)), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0) : _GLF_FUZZED(mix(3.3, -187.607, -3638.0655))))), min(1.0, 1.0))), _GLF_struct_1(vec4(1.0), bvec2(_GLF_IDENTITY(true, (true) || false)), ivec2(1), bvec4(true), mat3x2(1.0), ivec2(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0)))), mat4x3(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))))))), _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uint(workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), (~ (workgroup_id)) << 0u)))))), uvec3(1u));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_struct_replacement_3.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_3.workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))), 0u | (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))), ((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))) + 0u) / 1u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) >> 0u)) | (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u))))))))) | ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))), 0u | (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))), ((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))) + 0u) / 1u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) >> 0u)) | (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u))))))))) | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))), 0u | (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))), ((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))) + 0u) / 1u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) >> 0u)) | (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u))))))))) | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))), 0u | (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))), ((uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))))) + 0u) / 1u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) >> 0u)) | (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size)))))), (uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ~ ((subgroup_local_id + 1) % subgroup_size))))))) / 1u))))))))) | ((subgroup_local_id + 1) % subgroup_size))))) ^ 0u)), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) >> 0u)) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), 1u * (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | 0), (true ? _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ~ (~ ((1))))) << 0) : _GLF_FUZZED(-67134))) >> _GLF_IDENTITY(0, (0) - 0))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), 1u * (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, 0 ^ (1))))), _GLF_IDENTITY((_GLF_IDENTITY((1), ~ (~ ((1))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((1), ~ (~ ((1)))))), (false ? _GLF_FUZZED(-36867) : ~ ((_GLF_IDENTITY((1), ~ (~ ((1)))))))))) << 0) : _GLF_FUZZED(_GLF_IDENTITY(-67134, (true ? -67134 : _GLF_FUZZED(41642)))))) >> _GLF_IDENTITY(0, (0) - 0)))))) * 1u) >> 0u)) % subgroup_size), (true ? ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) >> 0u)) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), 1u * (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | 0), (true ? _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ~ (~ ((1))))) << 0) : _GLF_FUZZED(-67134))) >> _GLF_IDENTITY(0, (0) - 0))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), 1u * (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, 0 ^ (1))))), _GLF_IDENTITY((_GLF_IDENTITY((1), ~ (~ ((1))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((1), ~ (~ ((1)))))), (false ? _GLF_FUZZED(-36867) : ~ ((_GLF_IDENTITY((1), ~ (~ ((1)))))))))) << 0) : _GLF_FUZZED(_GLF_IDENTITY(-67134, (true ? -67134 : _GLF_FUZZED(41642)))))) >> _GLF_IDENTITY(0, (0) - 0)))))) * 1u) >> 0u)) % subgroup_size) : _GLF_FUZZED(num_workgroup))), ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, ((subgroup_size) * 1u) | 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, ((subgroup_size) * 1u) - 0u)), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))) << (0u & 101208u), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u) : _GLF_FUZZED(bitfieldReverse(virtual_gid)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << _GLF_IDENTITY((0u & 101208u), ((0u & 101208u)) / 1u), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(16666u, 158202u, 14111u)) : _GLF_IDENTITY(uvec3(0u, 1u, 1u), (true ? uvec3(0u, 1u, 1u) : _GLF_FUZZED(uvec3(29569u, 143811u, 60377u)))))))) & 101208u) : _GLF_FUZZED(bitfieldReverse(virtual_gid)))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & _GLF_IDENTITY(101208u, ~ (~ (_GLF_IDENTITY(101208u, min(101208u, 101208u)))))), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u) : _GLF_FUZZED(bitfieldReverse(virtual_gid)))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u) : _GLF_FUZZED(bitfieldReverse(virtual_gid)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u) : _GLF_FUZZED(bitfieldReverse(virtual_gid)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << _GLF_IDENTITY((0u & 101208u), ((0u & 101208u)) | ((0u & 101208u))), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u) : _GLF_FUZZED(bitfieldReverse(virtual_gid))))))) - 0u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) * 1u)) << (0u & 101208u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << (0u & 101208u))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0)))), uint(uvec2((subgroup_local_id + 1), 1u))) | (subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) * 1u))));
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, 0 ^ (1))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED(-41110) : _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4))))), int(ivec3(false ? _GLF_FUZZED(-41110) : 4, 0, 0))))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << 0u), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), clamp(uvec2(subgroup_local_id + 1, 1u), uvec2(subgroup_local_id + 1, 1u), _GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), ~ (~ (uvec2(subgroup_local_id + 1, 1u))))))) - uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (0u & 178462u)), ~ (~ (_GLF_IDENTITY(0u, (0u) ^ (0u & 178462u))))), 0u))) | uvec2(0u, _GLF_IDENTITY(0u, 0u + (0u)))), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u), _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))), (subgroup_local_id + 1) << 0u), _GLF_IDENTITY(1u, (1u) / 1u)), (uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), 1u)) - (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(5u), uvec2(5u))))) / uvec2(1u, 1u)))), 0u + (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + 1, 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, _GLF_IDENTITY(0u, (0u) * 1u))) + uvec2(0u, 0u)))) | uvec2(0u, 0u)), clamp(_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), _GLF_IDENTITY((uvec2(subgroup_local_id + 1, 1u)) + uvec2(0u, 0u), ((uvec2(subgroup_local_id + 1, 1u)) + uvec2(0u, 0u)) / uvec2(1u, 1u))), (uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) / 1u), 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)))) | uvec2(_GLF_IDENTITY(0u, (0u) ^ (0u ^ 0u)), 0u)), _GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u)))))), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u)) + uvec2(0u, 0u), ((uvec2(0u, 0u)) + uvec2(0u, 0u)) ^ uvec2(0u, 0u))))) | _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) >> (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))))), _GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + 1, 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)))), min((_GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec3(35487, -24063, 84834).z))), 1u), (uvec2(subgroup_local_id + 1, 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)))), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + 1, 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)))))) | uvec2(0u, 0u)))), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u)))))), uvec2(_GLF_IDENTITY(uvec2((~ _GLF_IDENTITY((_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))))), uvec2(1u, 1u) * ((_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))))))))), (uvec2((~ _GLF_IDENTITY((_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))))), clamp((_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))))), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))))), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 1u), (uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), 1u)) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u)))))))))) | uvec2(0u, 0u)))))) / uvec2(1u, 1u)))))) < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || (false)), true, true, true))), (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0))) > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(-3087.2230, 4946.8062, -3.7).z)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true, false)))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, true, true)))))))))))))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))) && true)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY((! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))) && true, ((! (_injected_loop_counter != ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(-7837)))), _GLF_IDENTITY(int(7), 0 ^ (int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -2169)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(true ? _GLF_IDENTITY(64, int(ivec3(64, 1, 0))) : _GLF_FUZZED(-3623), (true ? _GLF_IDENTITY(64, int(ivec3(64, 1, 0))) : _GLF_FUZZED(-3623)) << 0)))) + 0), 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))), injectionSwitch.y))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y)))) && true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(90418) : _GLF_IDENTITY(int(1), (int(1)) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true), true, false)))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true), true, false))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), false, false))), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, _GLF_IDENTITY(true, false || (true)) && (true))), true, _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(true, false, true, true)), true, true), bvec3(bvec4(bvec3(bool(bvec4(true, false, true, true)), true, true), true))))))), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true, false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        barrier();
       subgroupAll(false);
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), (bool(false)) || false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), bool(bvec3(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true, true))), false, false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y)))), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.3)), float(1.0), bool(true))), 0.0, 1.0, 1.0)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y)))), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.3)), float(1.0), bool(true))), 0.0, 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y)))), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.3)), float(1.0), bool(true))), 0.0, 1.0, 1.0)))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y))), float(mat4x3((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y))), float(float((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6983.6165) : injectionSwitch.y))))))))), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y)), 0.0, 0.0, sqrt(1.0), log(1.0), tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.3)), float(1.0), bool(true))), 0.0, 1.0, 1.0)))))))))))) || false)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-61507) : _GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))), ((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-61507) : _GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))), ((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-61507) : _GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))), ((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-61507) : _GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))), ((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-61507) : _GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))), ((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-61507) : _GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))), ((false ? _GLF_FUZZED(35571) : _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, min(read, read)), uint(_GLF_IDENTITY(uvec4(read, 1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u), max(_GLF_IDENTITY(uvec4(read, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) | ((1u))) >> 0u), 1u), (uvec4(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u) ^ uvec4(0u, 0u, 0u, 0u)) | (uvec4(read, 1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u))), uvec4(read, 1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u))))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, min(4, 4)))), (_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, min(4, 4))))) | (_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, min(4, 4))))))) << 0));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(true);
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat2(injectionSwitch, 0.0, 0.0))))).y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
}
