#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1))))), exp(0.0), cos(0.0), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))) + 0.0)), 0.0, 0.0, determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), sqrt(0.0))), max(float(mat4(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1))))), exp(0.0), cos(0.0), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))) + 0.0)), 0.0, 0.0, determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), sqrt(0.0))), float(mat4(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1))))), exp(0.0), cos(0.0), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))) + 0.0)), 0.0, 0.0, determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), sqrt(0.0)))))), 0.0, 1.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0)))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1))))), exp(0.0), cos(_GLF_IDENTITY(0.0, (0.0) - sqrt(0.0))), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(log(1.0), (false ? _GLF_FUZZED(-3333.4637) : log(1.0))), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))) + 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) - 0.0)))) + 0.0)) : _GLF_FUZZED(length(-60.77)))), 0.0, 0.0, determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), sqrt(0.0))), max(float(mat4(_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1)))), min((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1)))), (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1))))))), exp(0.0), cos(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))) + 0.0)), 0.0, 0.0, determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), sqrt(0.0))), float(mat4(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.1))))), exp(0.0), cos(0.0), 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(1.0, 0.0), vec2(log(1.0), _GLF_ONE(1.0, injectionSwitch.y)))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(sqrt(0.0), min(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), 0.0 + (sqrt(0.0))))))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), (dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))) + 0.0)), 0.0, 0.0, determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), sqrt(0.0)))))), 0.0, 1.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0)))).y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-909.436) : injectionSwitch.x)) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y = subgroup_id;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false))))))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y = _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.x = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), (true ? int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.x = GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.x;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true)))), true)))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), clamp(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))))) | 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))))) & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0 ^ (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), (! (_GLF_IDENTITY(! (false), (! (false)) || false))) && true)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.3))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && true))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && true))), false, true))), true))), (! (injectionSwitch.x > injectionSwitch.y)) && true)), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && true))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && true))), false, true))), true))), (! (injectionSwitch.x > injectionSwitch.y)) && true))))))))))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z = workgroup_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z, _GLF_IDENTITY(uint(uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z)), clamp(uint(uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z)), uint(_GLF_IDENTITY(uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z), max(_GLF_IDENTITY(uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z), max(uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z), uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z))), uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z)))), uint(uint(GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.z)))));
 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))) || false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z + GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, (true ? GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base), (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid) : _GLF_FUZZED(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base)))))) >> uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, (true ? GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base), (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid) : _GLF_FUZZED(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base)))))) >> uvec4(0u, 0u, 0u, 0u)))).y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z + GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, (true ? GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base), (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid) : _GLF_FUZZED(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base)))))) >> uvec4(0u, 0u, 0u, 0u)).y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z + GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y) >> 0u), (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w, (GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w) << 0u)) | (GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w)) + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z + _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base[3])).y) / 1u)) >> 0u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), ! (! ((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))))));
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.z = virtual_gid;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.w = GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.z;
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y, max(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y)) * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z) | 0u) + ((GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 | (0)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(clamp(-15033, _injected_loop_counter, -65891))))), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0))), min(((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0))), ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))) && _GLF_IDENTITY(true, false || (true))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) | 0), clamp(4, 4, 4)), 64, 4);
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ ((0)))) << 0)); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) >> 0), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
          }
        }
      }
    }
  }
 uint read = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.w], 4, 64, 0);
 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.x = read;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.y = GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.x;
 do
  {
   if(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1, 1u * (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1, min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1, min(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1, GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1)), GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_base.y + 1)))) < _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z) >> 0u))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), mix(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), float(_GLF_FUZZED(-7.1)), bool(false)))) * round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.0)), bool(false))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))), 0.0, 0.0)))))))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, min(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid)), (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid) << _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid) : _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u)), ((uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u, 0u))))), (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, (true ? GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid : _GLF_FUZZED(uvec4(163760u, 44851u, 80855u, 190286u)))), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid), (uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid)))) - uvec4(0u, 0u, 0u, 0u))))).w], GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.y, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) / 1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), max(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, _GLF_IDENTITY(((4) / 1), min(((4) / 1), _GLF_IDENTITY(((4) / 1), max(((4) / 1), ((4) / 1))))) ^ 0), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1))))), (ivec2(0, 0) << _GLF_IDENTITY(ivec2(1), ivec2(1))) + (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), max(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, _GLF_IDENTITY(((4) / 1), min(((4) / 1), _GLF_IDENTITY(((4) / 1), max(((4) / 1), ((4) / 1))))) ^ 0), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1))))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), max(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, _GLF_IDENTITY(((4) / 1), min(((4) / 1), _GLF_IDENTITY(((4) / 1), max(((4) / 1), ((4) / 1))))) ^ 0), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1)))))))))))), min(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) * 1), (4))) / 1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) | (1)), ((4) / 1) ^ 0), 1), max(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, _GLF_IDENTITY(((4) / 1), min(((4) / 1), _GLF_IDENTITY(((4) / 1), max(((4) / 1), ((4) / 1))))) ^ 0), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1)))))))), _GLF_IDENTITY(4, _GLF_IDENTITY((4) / 1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1))))), ((4) / 1) ^ 0), 1), max(ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY((4) / 1, _GLF_IDENTITY(((4) / 1), min(((4) / 1), _GLF_IDENTITY(((4) / 1), max(((4) / 1), ((4) / 1))))) ^ 0), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY((4) / 1, ((4) / 1) ^ 0), 1)))))))))), _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(min(64, _GLF_IDENTITY(64, (64) / 1)), (min(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) >> 0)) / 1))) | (min(64, _GLF_IDENTITY(64, (64) / 1)))))) - (0 >> _GLF_IDENTITY(int(5), int(5)))), 4);
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), false))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), false))))))))))), true, true, false)))) || false)))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                                barrier();
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, false || (true)), true))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     do
      {
       subgroupAll(false);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))));
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 1.0, 1.0)))).y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1.2)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(sqrt(-87.51)) : _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), ((_GLF_IDENTITY(true, (true) || false))) || false), ! (! (! (_GLF_IDENTITY(true, (true) || false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))), false, true, true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))), false, true, true))))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))) || false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) || false)), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, (true) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (! (_GLF_IDENTITY(true, (true) || false)))), bool(bvec4((! (! (_GLF_IDENTITY(true, (true) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), (! (_GLF_IDENTITY((! (! (_GLF_IDENTITY(true, (true) || false)))), bool(bvec4((! (! (_GLF_IDENTITY(true, (true) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))) || false)))), false, true, true))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)))))), ! (! (! (false)))))), (false) && true))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec3(int(2), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), 0)))))); _injected_loop_counter --)
                  {
                   atomicStore(checker[GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.w], GLF_merged3_0_1_13_1_1_4_2_1_12num_workgroupreadworkgroup_id.y, 4, 64, 4);
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(4865.5991)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), bool(true)))) / sqrt(1.0))) - 0.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), ~ (~ (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) + 0)) | (6)))))))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), ~ (~ (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) + 0)) | (6)))))))) >> _GLF_IDENTITY(int(6), int(6))), min(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), ~ (~ (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) + 0)) | (6)))))))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), ~ (~ (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) + 0)) | (6)))))))) >> _GLF_IDENTITY(int(6), int(6)))))) | (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), ~ (~ (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) + 0)) | (6)))))))) >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, true, false, _GLF_IDENTITY(true, ! (! (true))))), true, false)), (bool(bvec3(bool(bvec4(false, true, false, true)), true, false))) || false)))))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / vec2(1.0, 1.0)).y))));
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), (_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
            barrier();
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(true);
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))), bvec2(bvec4(bvec2(false, true), false, true))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), false || (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && true)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), false || (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && true))), (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), false || (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && true)))) || false))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-288.937) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, (true) || false)), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(true, false), false))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(true, false), false))))))), true))))))))) && true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
