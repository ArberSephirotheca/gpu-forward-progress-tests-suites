#version 460
struct _GLF_struct_21 {
 mat3x2 _f0;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
 uint read;
} ;

struct _GLF_struct_19 {
 mat3x2 _f0;
 uint next_virtual_gid;
 int _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_16 {
 bvec4 _f0;
 uvec2 _f1;
 float _f2;
 bool _f3;
 float _f4;
 bool _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_15 {
 vec3 _f0;
 vec3 _f1;
 uvec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 mat3x4 _f1;
 ivec2 _f2;
 _GLF_struct_16 _f3;
} ;

struct _GLF_struct_13 {
 float _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
} ;

struct _GLF_struct_18 {
 uint subgroup_size;
 _GLF_struct_14 _f0;
 bvec4 _f1;
 ivec4 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_10 {
 uvec3 _f0;
 int _f1;
 bool _f2;
 mat2 _f3;
 vec3 _f4;
 bvec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_9 {
 uint num_workgroup;
 int _f0;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
 uvec3 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 bool _f1;
 int _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_8 {
 uint _f0;
 uint workgroup_size;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 mat3x4 _f1;
 mat4 _f2;
 uint _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_3 {
 bool _f0;
 mat4x3 _f1;
 vec2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 bool _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
} ;

struct _GLF_struct_0 {
 int _f0;
 uvec2 _f1;
 bool _f2;
 bool _f3;
 mat2x4 _f4;
 bvec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_2 {
 uint subgroup_id;
 uvec2 _f0;
 _GLF_struct_0 _f1;
 float _f2;
 mat2 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 _GLF_struct_6 _f1;
 mat3x4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_2(gl_SubgroupID, uvec2(1u), _GLF_struct_0(1, uvec2(1u), true, true, mat2x4(1.0), bvec2(true), ivec3(1)), 1.0, mat2(1.0), _GLF_struct_1(mat2(1.0))), _GLF_struct_6(_GLF_struct_3(true, mat4x3(1.0), vec2(1.0), bvec3(true)), true, _GLF_struct_4(bvec2(true), mat3x4(1.0), mat4(1.0), 1u, bvec3(true)), _GLF_struct_5(ivec4(1)), vec4(1.0)), mat3x4(1.0));
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(gl_SubgroupSize, _GLF_struct_14(_GLF_struct_13(1.0)), bvec4(true), ivec4(1), _GLF_struct_17(_GLF_struct_15(vec3(1.0), vec3(1.0), uvec3(1u), uvec4(1u)), mat3x4(1.0), ivec2(1), _GLF_struct_16(bvec4(true), uvec2(1u), 1.0, true, 1.0, true, ivec2(1))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_11(uvec4(1u), uvec3(1u), _GLF_struct_9(gl_NumWorkGroups.x, 1), _GLF_struct_10(uvec3(1u), 1, true, mat2(1.0), vec3(1.0), bvec4(true), true)), true, 1, mat2x3(1.0));
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(1u, gl_WorkGroupSize.x);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_8.workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_struct_replacement_7._f0.subgroup_id * _GLF_struct_replacement_18.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_19(mat3x2(1.0), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_18.subgroup_size), 1));
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_21(mat3x2(1.0)), 0);
 atomicStore(buf[_GLF_struct_replacement_20._f0.next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   _GLF_struct_replacement_22.read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   _GLF_struct_replacement_22.read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_22.read, 4, 64, 4);
}
