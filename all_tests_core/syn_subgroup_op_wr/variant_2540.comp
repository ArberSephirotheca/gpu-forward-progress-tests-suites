#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 uint num_workgroup;
 int _f0;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 mat4 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 bool _f1;
 bvec2 _f2;
 int _f3;
 mat4x3 _f4;
 uvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 vec3 _f1;
 bool _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat4x3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 mat2x3 _f1;
 mat2 _f2;
 mat2x3 _f3;
 int _f4;
 _GLF_struct_5 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (_GLF_IDENTITY(false, (false) || false))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      continue;
     if(_GLF_DEAD(false))
      return;
     break;
    }
   GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) || false)))))), bool(bvec4(_GLF_DEAD(false), false, false, false))))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0))))), bool(bool(! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0))))), true && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0))))))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-9.6)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0))))), bool(bool(! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)) - 0.0))), true && (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) - 0.0)) - 0.0))))))))))))))) || false)))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(_GLF_struct_0(mat3(1.0), vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(6195.3693)), float(1.0), bool(true)), min(mix(float(_GLF_FUZZED(6195.3693)), float(1.0), _GLF_IDENTITY(bool(true), false || (bool(true)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(6195.3693)), float(1.0), bool(true)), (true ? _GLF_IDENTITY(mix(float(_GLF_FUZZED(6195.3693)), float(1.0), bool(true)), (false ? _GLF_FUZZED(6.2) : mix(float(_GLF_FUZZED(6195.3693)), float(1.0), bool(true)))) : _GLF_FUZZED(8.9))))))), true, uvec4(1u)), vec4(1.0), _GLF_struct_1(bvec4(true)), _GLF_struct_2(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) | 0, ((_GLF_IDENTITY(1, (1) / 1)) | 0) - 0))), true, bvec2(true), 1, mat4x3(1.0), uvec4(1u), mat3x2(1.0)), mat4x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-144.569) : 1.0))), ivec4(1)), mat2x3(1.0), mat2(1.0), mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-26.51) : 1.0))), 1, _GLF_struct_5(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))), bvec2(bvec2(bvec2(true)))))))))), mat4(1.0), _GLF_struct_4(gl_NumWorkGroups.x, 1)));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(8u), uint(8u)), ~ (~ (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (uint(8u)) + 0u), uint(8u))))), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (uint(8u)) ^ 0u), uint(8u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(uvec3(uint(8u), 1u, (1u & 1u)))), uint(8u))))), _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))));
 do
  {
   GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = _GLF_IDENTITY(workgroup_size, 0u + (workgroup_size));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0)))) ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), (2) - 0)), (int(2)) - (0 >> _GLF_IDENTITY(int(4), int(4)))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  return;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.6)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))), bool(true))) > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(false, ! (! (false))) || (bool(bvec3(_GLF_DEAD(false), true, true)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (true ? max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) : _GLF_FUZZED(vec2(6801.0522, 7.7))))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_IDENTITY(true, (true) || false), true, false))), (! (bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true, false)))) && true))))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) || false))))
  return;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, (true ? GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id : _GLF_FUZZED(uvec2(125411u, 52164u)))).y, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y) + 0u) * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y) + (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), max(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u)))))) | (_GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))), _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(uint(0u), min(uint(0u), _GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)), (_GLF_IDENTITY((uint(0u)), ((uint(0u))) << (0u ^ 0u))) / 1u) << 0u))))))))))) * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))), true), bvec2(bvec3(bvec2(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))), true), false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false))), (_GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false)))) || false)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false))))), (_GLF_IDENTITY(bool(! (_GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false))))), bool(bool(bool(! (_GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false))))))))) || false))), false, true))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(179.337, 8.8)) : injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-20.55, 628.933)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, _GLF_IDENTITY((74863u & 0u) | (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (false ? _GLF_FUZZED(workgroup_size) : GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, _GLF_IDENTITY(clamp(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((vec3(6.0, 1.8, 49.18) , GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id)) : clamp(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id)))).x) + 0u), (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x) + 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x) + 0u), (1u & 1u) * (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) | (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), (160659u & 0u) | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))))) + 0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) | (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), (160659u & 0u) | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))))) + 0u, (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) | (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), (160659u & 0u) | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))))) + 0u) | (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) | (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), (160659u & 0u) | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))))) + 0u)))))))))))), ~ (~ (_GLF_IDENTITY((74863u & 0u), (true ? (_GLF_IDENTITY(74863u, (74863u) | (74863u)) & 0u) : _GLF_FUZZED(subgroup_local_id))) | (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))))) + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x, (_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)) * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x) + _GLF_IDENTITY(0u, (0u) | (0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4x3(160.408, 224.263, -4.4, -7979.8428, -7.3, -168.786, -2047.8041, -7.8, -372.434, 9.2, -8.8, 8.0)) : mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4x3(160.408, 224.263, -4.4, -7979.8428, -7.3, -168.786, -2047.8041, -7.8, -372.434, 9.2, -8.8, 8.0)) : mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0)))), min(float(_GLF_IDENTITY(mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4x3(160.408, 224.263, -4.4, -7979.8428, -7.3, -168.786, -2047.8041, -7.8, -372.434, 9.2, -8.8, 8.0)) : mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4x3(160.408, 224.263, -4.4, -7979.8428, -7.3, -168.786, -2047.8041, -7.8, -372.434, 9.2, -8.8, 8.0)) : mat4x3((_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0))))))) - 0.0)) - _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(-7948.9559)), float(tan(0.0)), bool(_GLF_IDENTITY(true, ! (! (true)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true)))), min(_GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), abs(1.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(cos(0.0), log(1.0), 0.0, 0.0), vec4(0.0, 1.0, exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec4(cos(0.0), log(1.0), 0.0, 0.0), vec4(0.0, 1.0, exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, sin(0.0), 1.0, exp(0.0), abs(1.0)))), mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true)))), 0.0 + _GLF_IDENTITY((max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true))))), clamp((max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true))))), (max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true))))), (max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true)))))))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(143.011)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 & 1), ((1 & 1)) >> 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((1 & 1), ((1 & 1)) >> 0), 0 | (_GLF_IDENTITY((1 & 1), ((1 & 1)) >> 0)))))), false || (_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, max(1 & 1, _GLF_IDENTITY(1 & 1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1 & 1, 1 * (1 & 1))))))), ((1 & 1)) >> 0)))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
            return;
          }
        }
       return;
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true)) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6)))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), bool(bvec2(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), false))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false)), (bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))) || false))) || false));
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9743.9268) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, abs(0.0)))))))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9743.9268) : injectionSwitch.y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)) && true))))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(-96130) : _injected_loop_counter ++)))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat4x3(injectionSwitch.x, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat4x3(-4615.2529, -7193.2127, 41.59, -664.962, 52.34, _GLF_IDENTITY(-6.8, float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0))), -9.6, -2.6, 4.9, 5706.9124, -7.3, _GLF_IDENTITY(-9004.7289, (false ? _GLF_IDENTITY(_GLF_FUZZED(863.830), mix(float(_GLF_FUZZED(863.830)), float(_GLF_FUZZED(33.74)), bool(false))) : -9004.7289)))))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat4x3(injectionSwitch.x, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat4x3(-4615.2529, -7193.2127, _GLF_IDENTITY(41.59, length(0.0) + (_GLF_IDENTITY(41.59, min(41.59, 41.59)))), -664.962, 52.34, _GLF_IDENTITY(-6.8, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]), mix(vec3(_GLF_FUZZED(-364.100), _GLF_FUZZED((+ 8.4)), (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[2]), vec3((_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[0], (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[1], _GLF_FUZZED(-3.0)), bvec3(true, true, false))) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]), mix(vec3(_GLF_FUZZED(-364.100), _GLF_FUZZED((+ 8.4)), (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[2]), vec3((_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[0], (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[1], _GLF_FUZZED(-3.0)), bvec3(true, true, false))) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0)), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]), mix(vec3(_GLF_FUZZED(-364.100), _GLF_FUZZED((+ 8.4)), (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[2]), vec3((_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[0], (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[1], _GLF_FUZZED(-3.0)), bvec3(true, true, false))) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0)), min(float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]), mix(vec3(_GLF_FUZZED(-364.100), _GLF_FUZZED((+ 8.4)), (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[2]), vec3((_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[0], (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[1], _GLF_FUZZED(-3.0)), bvec3(true, true, false))) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0)), float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]), mix(vec3(_GLF_FUZZED(-364.100), _GLF_FUZZED((+ 8.4)), (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[2]), vec3((_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[0], (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[1], _GLF_FUZZED(-3.0)), bvec3(true, true, false))) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0)))), float(mat4x3(_GLF_IDENTITY(-6.8, (_GLF_IDENTITY(-6.8, min(-6.8, -6.8))) - 0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]), mix(vec3(_GLF_FUZZED(-364.100), _GLF_FUZZED((+ 8.4)), (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[2]), vec3((_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[0], (_GLF_FUZZED(mat4x3(-8.7, -65.96, 93.88, -5.2, -819.697, -8.6, -80.78, -6.0, 5.7, -3486.6595, -7.5, -17.53)[0]))[1], _GLF_FUZZED(-3.0)), bvec3(true, true, false))) : vec3(0.0, 0.0, 0.0))))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0))))), -9.6, -2.6, 4.9, 5706.9124, -7.3, _GLF_IDENTITY(-9004.7289, (false ? _GLF_IDENTITY(_GLF_FUZZED(863.830), mix(float(_GLF_FUZZED(863.830)), float(_GLF_FUZZED(33.74)), bool(false))) : -9004.7289)))))))) > injectionSwitch.y))) && true), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false))))));
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(vec2(0.0, 0.0))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)) || false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4.0))))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), (mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
  return;
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x);
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, false), true)))))))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) && true, ((_GLF_WRAPPED_LOOP(false)) && true) && true)));
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), true, false, false))) || false)))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true, ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true) && true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true, ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true) && true))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true, ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true) && true))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true, ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true) && true))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true, ((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))) && true) && true)))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))) && true), _GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))) && true)))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-260.590)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))) || false)) && true))), bool(bvec3(! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true))))), (injectionSwitch.x > injectionSwitch.y))))))), false, true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (true ? _GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)) * mat4(1.0)) : _GLF_FUZZED(mat4(mat3x2(598.769, 208.191, 906.278, -92.67, -73.14, 6.1))))))), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (true ? _GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)) * mat4(1.0)) : _GLF_FUZZED(mat4(mat3x2(598.769, 208.191, 906.278, -92.67, -73.14, 6.1))))))), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec3(! (injectionSwitch.x < injectionSwitch.y), false, false))))))) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true), true, true, true)))), true))))) || false)) && true))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 0.0))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))))
    return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(subgroup_local_id + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x)
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) / 1))
      {
       if(_GLF_DEAD(false))
        break;
       subgroupAll(false);
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), false, false, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))), false)), bvec2(bvec2(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false)))), false)))))))))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), int(2))), max(_GLF_IDENTITY((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) + 0), 2))))), min((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) + 0), 2))))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) + 0), 2))))), (false ? _GLF_FUZZED(5713) : (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) + 0), 2))))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-21405))))), max((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), clamp(int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(1), int(1)))), 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, _GLF_IDENTITY(0, (0) * 1), 0))), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) / 1) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0)))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2)), ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), _GLF_IDENTITY(clamp(int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0)))), 1 * (clamp(int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) / 1)))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), (ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, cos(0.0), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch.y, cos(0.0), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 0.0))))))) / 1.0))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)) ^ ivec4(0, 0, 0, 0)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) ^ 0)))))), ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 0, 0)), 0 ^ (int(ivec3(2, 0, 0))))))), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 0, 0)), 0 ^ (int(ivec3(2, 0, 0))))))), int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 0, 0)), 0 ^ (int(ivec3(2, 0, 0))))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 0, 0)), 0 ^ (int(ivec3(2, 0, 0))))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 0, 0)), 0 ^ (int(ivec3(2, 0, 0)))))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 0, 0)), 0 ^ (int(ivec3(2, 0, 0)))))))))))) >> _GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)), ~ (~ (_injected_loop_counter --))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               else
                {
                }
              }
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (bool(bvec3(false, true, false)))))) || false)))
            return;
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))))) || false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y) || false)))))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read, (read) - 0u)), min(~ (read), ~ (read))))), 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), _GLF_IDENTITY(int(7), (int(7)) + 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), _GLF_IDENTITY(int(7), (int(7)) + 0))) | 0)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | 0)), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)), clamp(min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))) ^ 0)), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), max(int(7), int(7)))) << 0), _GLF_IDENTITY((int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))))))), ((int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1)))))))))))) | 0))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1)))), (_GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))) << ivec2(0, 0))))))))))), (true ? (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) ^ (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))))), (int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(_GLF_IDENTITY(ivec2(int(7), 1), min(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), clamp(ivec2(int(7), 1), ivec2(int(7), 1), ivec2(int(7), 1))))), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))))))))) : _GLF_FUZZED(-41018))), (_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), clamp((int(7)), (int(7)), (int(7)))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))))))))), ((_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1))))))), (false ? _GLF_FUZZED(35858) : int(_GLF_IDENTITY(ivec2(int(7), 1), max(ivec2(int(7), 1), _GLF_IDENTITY(ivec2(int(7), 1), ~ (~ (ivec2(int(7), 1)))))))))))))) / 1)))), int(7)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(-74364))), 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(4)))) ^ 0)) * 1))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)), 0 ^ (min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 ^ (0)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | 0)) | (0), (false ? _GLF_FUZZED(ivec4(50656, 27583, 30857, 27931)[0]) : (_GLF_IDENTITY(0, (0) | 0)) | (0)))), 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(ivec4(int(7), 0, 0, 0)), max(_GLF_IDENTITY(int(ivec4(int(7), 0, 0, 0)), (true ? int(ivec4(int(7), 0, 0, 0)) : _GLF_FUZZED(-59099))), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0)))), ~ (~ ((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), 0, 0))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0))))) | (0 & -90332), min(((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0))))) | (0 & -90332), ((_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0))))) | (0 & -90332)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), _GLF_IDENTITY(0, (0) ^ 0), 0, 0)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, int(ivec4(7, 0, 1, 1)))))), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)), clamp(min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(_GLF_IDENTITY(7, (7) | (7))), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, int(int(7))), 7, 7))), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(ivec4(int(7), 0, _GLF_IDENTITY(0, (0) << 0), 0)), (int(ivec4(int(7), 0, _GLF_IDENTITY(0, (0) << 0), 0))) | (int(ivec4(int(7), 0, _GLF_IDENTITY(0, (0) << 0), 0)))))))) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0)))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | 0)) / 1), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(ivec4(int(7), 0, 0, 0)), 0 | (int(ivec4(int(7), 0, 0, 0)))))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)), min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), clamp((_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))), (_GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 0)))))) - (0 >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(7)))) : _GLF_FUZZED(-66092))))))) << 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x)), min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y)))) || false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))));
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec2((! (_GLF_IDENTITY(true, ! (! (true))))), false)))), bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec4(! (injectionSwitch.x < injectionSwitch.y), false, false, false))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false))))), true, true))), true))));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), false)))))))
            return;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0)))).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, true && (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), vec2(_GLF_FUZZED(-565.148), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && (! (_GLF_IDENTITY(false, bool(bool(false)))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
}
