#version 460
struct _GLF_struct_5 {
 mat3x2 _f0;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 mat4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 uvec3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 mat4x3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_6 {
 int _f0;
 vec3 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 uint subgroup_base;
 uvec3 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 ivec3 _f1;
 bvec2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 _GLF_struct_6 _f1;
 mat3x2 _f2;
 uvec2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_2(uvec2(1u), _GLF_struct_0(ivec2(1), ivec3(1), bvec2(true), mat4x2(1.0)), _GLF_struct_1(vec4(1.0), subgroup_id * subgroup_size, uvec3(1u))), _GLF_struct_6(1, vec3(1.0), _GLF_struct_3(uvec2(1u), uvec3(1u), bvec4(true), uvec3(1u), mat4x3(1.0), mat2x3(1.0)), _GLF_struct_4(uvec3(1u), mat4(1.0), mat3x4(1.0)), _GLF_struct_5(mat3x2(1.0))), mat3x2(1.0), uvec2(1u));
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_7._f0._f2.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_7._f0._f2.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
