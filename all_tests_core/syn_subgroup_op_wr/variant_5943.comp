#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, true && (false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.4) : _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, determinant(mat2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 0.0))))) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), false, false, true)))), false || (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), false, false, true))))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), false, false, true)))), false || (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), false, false, true))))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))))) && true))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), ! (! (! (false))))))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true)) ? _GLF_FUZZED(_GLF_IDENTITY(5.6, _GLF_IDENTITY((5.6), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (5.6) : _GLF_FUZZED(32.67))) + 0.0)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED(-691.434)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       else
        {
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(_GLF_IDENTITY(2, 0 | (2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (int(_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, 1 * ((0) / 1)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1, 1), ivec4(0, 0, 0, 0) | (ivec4((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1, 1)))))) != (_GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _GLF_IDENTITY(_injected_loop_counter --, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (_injected_loop_counter --)))
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))))))))))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)), mix(float(_GLF_FUZZED((true ? 7.5 : -9225.5621))), float(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))), bool(true)))) > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || false)))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true, true)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, 0u | (workgroup_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -54094)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(false, false || (false)), false))))
        return;
      }
     else
      {
      }
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
  return;
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), bool(bvec4(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), true, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), bool(bvec4(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), true, true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u)) >> _GLF_IDENTITY(0u, 0u ^ (0u))) + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | 0u) + 1) % subgroup_size);
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9446.4430)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), uint(uvec3(next_virtual_gid, (1u ^ 0u), 0u)))], uint(_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(44489) : 1))), 4, 64, 4);
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if((subgroup_local_id % 2) == 0)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
     switch(_GLF_SWITCH(0))
      {
       case 59:
       bool _GLF_SWITCH_0_0v[44], _GLF_SWITCH_0_1v;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))))) && true)), ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))) && true, true && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))) && true))))) && true)) || false)), ! (! ((! (false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) && true))))
          break;
         return;
        }
       case 82:
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), true, true)))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)), (false ? _GLF_FUZZED(80465) : int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), clamp((0.0), (0.0), (0.0))) - 0.0), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), injectionSwitch)).y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(453.634)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) + 0) > 0) || false)) || false)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                                break;
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6600.6136)), _GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), bool(bool(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true)), (bool(bvec3(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))) && true)), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool((bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))) || false)))))))))))))));
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(float(_GLF_FUZZED(-7.3)), float(injectionSwitch.x), bool(true))) < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), vec2(_GLF_FUZZED(_GLF_IDENTITY(2450.2213, (2450.2213) - 0.0)), _GLF_FUZZED(-13.83)), bvec2(false, false))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(8574.8677)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(731.267), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8433.2370)), bvec2(true, false))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y))), ! (! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          break;
                         do
                          {
                           return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              continue;
                             break;
                            }
                           return;
                          }
                        }
                       return;
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (false ? _GLF_FUZZED(-1968.2843) : min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-49.96))), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) && true)) && true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (false ? _GLF_FUZZED(-1968.2843) : min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-49.96))), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) && true)) && true))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (false ? _GLF_FUZZED(-1968.2843) : min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-49.96))), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true)))), true && (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)) && true)) && true)))) || false))));
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter))), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), true && (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), min(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter))), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                      continue;
                     continue;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           ;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            break;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9.2)), bvec2(true, false))))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false)))) * mat2(1.0))), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false)))) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false)))) * mat2(1.0)))) / vec2(1.0, 1.0)), min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false)))) * mat2(1.0))), min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.85), _GLF_FUZZED(-75.42)), bvec2(false, false)))) * mat2(1.0)))))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
              }
             return;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       case 0:
       if(_GLF_DEAD(false))
        continue;
       case 9:
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + 0)), int(7)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + 0)), int(7)), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + 0)), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY((7) + 0, (true ? (7) + 0 : _GLF_FUZZED(37497))))), int(7)), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + 0)), int(7))) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0)))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? _GLF_IDENTITY(int(5), (int(5)) / 1) : _GLF_FUZZED(13457)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), vec3(mat4x3(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0)), (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0))) / vec2(1.0, 1.0))), 0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), vec3(injectionSwitch, 0.0)))), (true ? vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), vec3(mat4x3(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0)), (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0))) / vec2(1.0, 1.0))), 0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), vec3(injectionSwitch, 0.0)))) : _GLF_FUZZED(injectionSwitch)))).y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       case 85:
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         subgroupAll(_GLF_IDENTITY(false, false || (false)));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true))))))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(214.810)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-868.157, mix(float(_GLF_FUZZED(-5909.3628)), float(-868.157), bool(true)))), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) / 1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / exp(determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(exp(0.0), max(_GLF_IDENTITY(exp(0.0), 1.0 * (exp(0.0))), exp(0.0))), 1.0, 0.0)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(214.810)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-868.157, mix(float(_GLF_FUZZED(-5909.3628)), float(-868.157), bool(true)))), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false, true)))))).x, mix(float(_GLF_FUZZED(vec3(41.16, -2737.9982, -852.669).x)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(214.810), (_GLF_FUZZED(214.810)) - 0.0)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-868.157, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-5909.3628), (_GLF_FUZZED(-5909.3628)) - 0.0)), float(-868.157), _GLF_IDENTITY(bool(true), (bool(true)) || false)))), (injectionSwitch)[1]), bvec2(false, true))).x), bool(true))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) - 0.0), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) - 0.0), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0)))) * sqrt(1.0))))))))
        {
         for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
           return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-2440) : 1), int(ivec3((false ? _GLF_FUZZED(-2440) : 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))))) * 1)), (false ? _GLF_FUZZED(-28377) : int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) - 0)) | (_GLF_IDENTITY((1), _GLF_IDENTITY(int(int(_GLF_IDENTITY((1), ((1)) | ((1))))), max(_GLF_IDENTITY(int(int(_GLF_IDENTITY((1), ((1)) | ((1))))), (int(int(_GLF_IDENTITY((1), ((1)) | ((1)))))) ^ 0), int(int(_GLF_IDENTITY((1), ((1)) | ((1)))))))))) * 1)))), int(ivec2(int(1), 0))))) ^ _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(24268, (24268) | (_GLF_IDENTITY(24268, clamp(24268, 24268, 24268))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! _GLF_IDENTITY((false), ((false)) && true))))))))
            continue;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & (_GLF_IDENTITY(119518u, min(119518u, 119518u)) | 77513u)));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       break;
       case 54:
       mat4 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v;
       default:
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) + int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-7.5))), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(34.77, _GLF_IDENTITY(-977.063, mix(float(_GLF_FUZZED(6.9)), float(-977.063), bool(true))), 0.6, -1.3, 4.1, 345.585, -5.5, _GLF_IDENTITY(-891.689, min(-891.689, -891.689)), -8.8, -7.0, -48.95, -0.7)) : mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY(1, max(1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           1;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec4(! (false), _GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(bool(bool(true && (true))), true && (bool(bool(true && (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), (bool(bvec4(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(ldexp(710.808, 88427)))))), true, false))) && true)), true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, injectionSwitch.x)) < injectionSwitch.y)))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), (bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))) || false)))))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true)))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))), false)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_IDENTITY(false, (false) || false))))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))), bool(bvec2(! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), false || (false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))), true))))), true))))), false, false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, false, false))))), true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
              break;
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2((_GLF_IDENTITY((injectionSwitch), vec2(mat4(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), 0.0, abs(0.0), tan(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0))))[0], _GLF_FUZZED(1837.2015)), vec2(_GLF_FUZZED(-7.1), (_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), vec2(0.0, 0.0) + (mat2(1.0) * ((injectionSwitch))))))[1]), bvec2(false, true)), vec2(1.0, 1.0) * (_GLF_IDENTITY(mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(1837.2015)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-7.1, float(mat2x4(-7.1, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0)))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7840.4580, 3.3))))))[1], (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7840.4580, 3.3))))))[1], clamp(((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7840.4580, 3.3))))))[1], ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7840.4580, 3.3))))))[1], ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7840.4580, 3.3))))))[1]))) / 1.0)), bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true))))), clamp(mix(vec2(((injectionSwitch))[_GLF_IDENTITY(0, (0) - 0)], _GLF_FUZZED(1837.2015)), vec2(_GLF_FUZZED(-7.1), ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), mix(vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(54854)))], _GLF_FUZZED(1837.2015)), vec2(_GLF_FUZZED(-7.1), ((injectionSwitch))[1]), bvec2(false, true)), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(1837.2015)), vec2(_GLF_FUZZED(-7.1), ((injectionSwitch))[1]), bvec2(false, true))))))) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4(mat2(1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat4(mat2(1.0)) : _GLF_FUZZED(mat4(-2894.1642, 6.7, -7.5, -463.207, 2.2, 1.7, -4296.7168, 909.966, -8.3, -9.2, -1.3, 1891.8197, 5.8, 291.515, -7391.7356, 96.78))))))))), ((injectionSwitch) * mat2(1.0)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(301.618, -0.8)))), injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, abs(1.0))), (float(mat2(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, abs(1.0)))) - 0.0)), round(length(normalize(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0, 1.0), vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))) || false)))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (-54566 & _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-84569) : 0))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_injected_loop_counter > (_GLF_IDENTITY(-54566 & 0, clamp(_GLF_IDENTITY(-54566 & 0, (-54566 & 0) | (-54566 & 0)), -54566 & 0, -54566 & 0)))), false || (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(36662) : _injected_loop_counter))))) > (_GLF_IDENTITY(-54566 & 0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(-54566 & 0, (-54566 & 0) | (-54566 & 0)), -54566 & 0, -54566 & 0), (clamp(_GLF_IDENTITY(-54566 & 0, (-54566 & 0) | (-54566 & 0)), -54566 & 0, -54566 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) << 0))))) | _GLF_IDENTITY((0 ^ (0 | 0)), ((0 ^ (0 | 0))) | (_GLF_IDENTITY((0 ^ (0 | 0)), clamp((0 ^ (0 | 0)), _GLF_IDENTITY((0 ^ (0 | 0)), (true ? (0 ^ (0 | 0)) : _GLF_FUZZED(84135))), (0 ^ (0 | 0))))))))))))), ! (! ((_GLF_IDENTITY(! (_injected_loop_counter > (_GLF_IDENTITY(-54566 & 0, clamp(_GLF_IDENTITY(-54566 & 0, (-54566 & 0) | (-54566 & 0)), -54566 & 0, -54566 & 0)))), false || (! (_injected_loop_counter > (_GLF_IDENTITY(-54566 & 0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(-54566 & 0, (-54566 & 0) | (-54566 & 0)), _GLF_IDENTITY(-54566 & 0, clamp(-54566 & 0, -54566 & 0, -54566 & 0)), -54566 & 0), (clamp(_GLF_IDENTITY(-54566 & 0, (-54566 & 0) | (-54566 & 0)), -54566 & 0, -54566 & 0)) | (0 ^ (0 | 0)))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > (-54566 & 0), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (-54566 & 0), bool(bvec2(_injected_loop_counter > (-54566 & 0), false))), false || (_GLF_IDENTITY(_injected_loop_counter > (-54566 & 0), bool(bvec2(_injected_loop_counter > (-54566 & 0), false))))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (-54566 & 0), ! (! (_injected_loop_counter > (-54566 & 0)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))))) > (-54566 & 0), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > (-54566 & 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter > (-54566 & 0)), bool(bvec2(bool(_injected_loop_counter > (-54566 & 0)), false)))), true && (bool(_GLF_IDENTITY(bool(_injected_loop_counter > (-54566 & 0)), bool(bvec2(bool(_injected_loop_counter > (-54566 & 0)), false))))))), false))))))), true, false, false))))) && true))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(false, (false) && true)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               return;
              }
             return;
            }
           for(int _injected_loop_counter = (-17130 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false, true && (false)) || (! (_GLF_IDENTITY(true, ! (! (true))))))))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, ! (! (true))))))))))), (bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(! (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(! (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))))))) && true)))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
                return;
               return;
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false))))))), false))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), true, true))), false, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), true, true))), false, true)), true)))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(186309u)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9006.4716)), bvec2(true, false))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(186309u)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9006.4716)), bvec2(true, false))).x > injectionSwitch.y)) || false))))
              return;
             return;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(6097.6890, max(6097.6890, _GLF_IDENTITY(6097.6890, min(6097.6890, _GLF_IDENTITY(6097.6890, (6097.6890) / 1.0))))))), bool(false))))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)) * (injectionSwitch)))), mix(vec2(_GLF_FUZZED(-8.1), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)) * (injectionSwitch)))))[1]), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)) * (injectionSwitch)))))[0], _GLF_FUZZED(7969.2833)), _GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))), true, true))))))).x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(6097.6890)), bool(false)))))))) * 1.0) > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(vec4(injectionSwitch[0], 0.0, sin(0.0), 1.0))), injectionSwitch[1])).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(vec4(injectionSwitch[0], 0.0, sin(0.0), 1.0))), injectionSwitch[1])).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80))))))) * mat2(1.0), min((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80))))))) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80))))))) * mat2(1.0)))).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)))))), ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80))))))) * mat2(1.0), min((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80))))))) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-89.75, -635.757, -8.5, 62.99, -8140.0632, 5705.0303, 7014.5010, -6.1, -7.8, 8.0, 645.346, 3.5, -263.080, 85.89, -787.114, 7207.7071)) : mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))), _GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), mix(float(float(_GLF_FUZZED(2.5))), float(_GLF_FUZZED(64.75)), bool(false)))) - abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), bool(false)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat4(-813.175, -3984.6428, -8.9, 662.721, -4.8, 0.1, 14.42, -9.9, -1412.7934, -30.30, -8.8, 7.4, 291.849, -580.942, -3870.5747, 88.80))))))) * mat2(1.0)))).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))))))) && true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ((false)) && true)), false || ((! (false)))), ! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u + (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | 0u)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))) || false)))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
}
