#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 uvec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_18 {
 uint num_workgroup;
 float _f0;
 vec2 _f1;
 mat4x2 _f2;
 uvec3 _f3;
 uint _f4;
 bvec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_17 {
 mat4x2 _f0;
 mat4 _f1;
 mat3 _f2;
 vec4 _f3;
 vec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_16 {
 mat2 _f0;
 vec3 _f1;
 mat3 _f2;
 vec3 _f3;
 mat4 _f4;
 mat2x3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 mat3 _f1;
 _GLF_struct_17 _f2;
 vec3 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 mat2 _f1;
 ivec3 _f2;
 vec3 _f3;
 _GLF_struct_20 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_13 {
 mat4x2 _f0;
 vec2 _f1;
 mat4x2 _f2;
 mat4x3 _f3;
 bvec2 _f4;
 mat3x2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
 int _f1;
 ivec4 _f2;
 bvec2 _f3;
 ivec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 mat3x2 _f1;
 vec2 _f2;
 mat3x4 _f3;
 ivec4 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_15 {
 uint subgroup_size;
 _GLF_struct_14 _f0;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 mat4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 bvec3 _f1;
 mat3 _f2;
 mat2x3 _f3;
 uvec3 _f4;
 vec3 _f5;
 int _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 uvec2 _f1;
 vec2 _f2;
 int _f3;
 ivec2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 uvec3 _f1;
 float _f2;
 int _f3;
 bvec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat2x3 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 uvec3 _f1;
 uint workgroup_id;
 _GLF_struct_2 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))) || ((injectionSwitch.x > injectionSwitch.y))), true, true))), false)))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     return;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (0) | 0), 1, 1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), false, false))) && true))))
              return;
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(gl_SubgroupSize, _GLF_struct_14(_GLF_struct_11(mat3x2(1.0), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))).y)) ? _GLF_FUZZED(determinant(mat2(-7.1, 8.0, 666.038, 1.8))) : 1.0)), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, ! (! ((_GLF_IDENTITY(true, (true) || false)) && true)))), (injectionSwitch.x < injectionSwitch.y))))).y)) ? _GLF_FUZZED(determinant(mat2(-7.1, 8.0, 666.038, 1.8))) : 1.0)), min(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), mat2(1.0) * (vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))), mix(vec2(_GLF_FUZZED(43.57), _GLF_FUZZED(57.79)), vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), mat2(1.0) * (vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))))[0], (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), mat2(1.0) * (vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)) ? _GLF_FUZZED(determinant(mat2(-7.1, 8.0, 666.038, 1.8))) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))).y)) ? _GLF_FUZZED(determinant(mat2(-7.1, _GLF_IDENTITY(8.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 8.0 : _GLF_FUZZED(3.2))), 666.038, 1.8))) : 1.0)), max(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.5, (-9.5) * 1.0)), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))).y)) ? _GLF_FUZZED(determinant(mat2(-7.1, 8.0, 666.038, 1.8))) : 1.0)), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4726.2470)), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))))))))))).y)) ? _GLF_FUZZED(determinant(mat2(-7.1, 8.0, 666.038, 1.8))) : 1.0))))))))), vec2(1.0), mat3x4(1.0), ivec4(1), _GLF_IDENTITY(mat4(1.0), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.9) : injectionSwitch.y)))) ? _GLF_FUZZED(mat4(533.319)) : mat4(1.0)))), _GLF_struct_12(_GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), vec3(1.0))), 1, ivec4(1), bvec2(true), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), max(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1))))), clamp(1, 1, 1))), vec4(1.0)), _GLF_struct_13(mat4x2(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0), mat4(1.0) * (mat2x4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))), vec2(mat2(_GLF_IDENTITY(vec2(1.0), (vec2(1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), sqrt(0.0), 0.0))), mat4x2(1.0), mat4x3(1.0), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) && true) || false)), (bool(_GLF_IDENTITY(true, (true) || false))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(! (true)), bool(bvec4(bool(! (true)), true, false, true)))))))) || false)) && true), (true) || false))))))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (true) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(! (true)), bool(bvec4(bool(! (true)), true, false, true)))))))) || false)) && true), (true) || false)))))))))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (true) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (bool(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) || false))) && true)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true) && true, false || _GLF_IDENTITY(((_GLF_IDENTITY(true, true && (true))) && true), (_GLF_IDENTITY(((_GLF_IDENTITY(true, true && (true))) && true), true && (_GLF_IDENTITY(((_GLF_IDENTITY(true, true && (true))) && true), bool(bvec4(((_GLF_IDENTITY(true, true && (true))) && true), true, false, true)))))) || false)))))), (true) || false)), (bool(_GLF_IDENTITY(true, (true) || false))) && true))) || false)) && true))), mat3x2(1.0), mat2x3(1.0)), uvec3(1u)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))), true && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
      }
     else
      {
       return;
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), true, false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_19(_GLF_struct_16(mat2(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))) * 1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))), clamp(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(cos(0.0), min(_GLF_IDENTITY(cos(0.0), (cos(0.0)) - 0.0), _GLF_IDENTITY(cos(0.0), (cos(0.0)) + 0.0))))), clamp(float(_GLF_IDENTITY(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)), (true ? mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)) : _GLF_FUZZED(mat3(-26.09, 9.7, 9.0, 33.27, 2862.3046, 2.4, 6.9, 4.3, -88.75))))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))), _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-541.385)), bool(false))), 1.0, 0.0, 0.0, 0.0, cos(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x) + (cos(0.0)))), transpose(transpose(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x) + (cos(0.0)))))))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))), (_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))))) / 1.0))))), mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0, 0.0, 0.0, cos(0.0))), clamp(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))))))), bool(true)))), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, sqrt(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-100.357)), float(1.0), bool(true))), 0.0, 1.0, 0.0)))), vec3(1.0), mat3(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-20.68)))), vec3(1.0), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0))), min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), mat2x3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))), ivec3(1)), mat3(1.0), _GLF_struct_17(mat4x2(1.0), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(8.0) : 1.0), (_GLF_IDENTITY((false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, (1.0) * 1.0)), 1.0 * ((false ? _GLF_FUZZED(8.0) : 1.0)))) / 1.0))), mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(1.0), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) | 0u))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (true ? _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), min(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))) : _GLF_FUZZED(vec3(_GLF_IDENTITY(3278.4010, _GLF_IDENTITY(float(mat3x4(3278.4010, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 0.0 + (float(mat3x4(3278.4010, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), 9.4, -7.3)))), _GLF_struct_18(gl_NumWorkGroups.x, 1.0, vec2(1.0), mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8.5) : _GLF_IDENTITY(1.0, min(1.0, 1.0))))), _GLF_IDENTITY(uvec3(1u), min(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u)), uvec3(1u))), 1u, bvec4(true), _GLF_IDENTITY(uvec4(1u), _GLF_IDENTITY((uvec4(1u)), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(1u), max(_GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) - uvec4(0u, 0u, 0u, 0u))))), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY((uvec4(1u)), min((uvec4(1u)), (uvec4(1u))))))) | ((_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(1u)))))) - uvec4(0u, 0u, 0u, 0u)))), mat2(1.0), ivec3(1), vec3(1.0), _GLF_struct_20(uvec2(1u), 1u), vec2(1.0));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))), false || (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(vec3(1.0), uvec3(1u), gl_WorkGroupID.x, _GLF_struct_2(_GLF_struct_0(vec4(1.0), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(_GLF_IDENTITY(7u, (7u) >> 0u)))) | (_GLF_IDENTITY(uvec3(1u), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), max((_GLF_IDENTITY(0u, (0u) | (0u))) | (0u), _GLF_IDENTITY((0u) | (0u), _GLF_IDENTITY((_GLF_IDENTITY((0u) | (0u), ~ (~ ((0u) | (0u))))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(149117u))), 0u)), (_GLF_IDENTITY((_GLF_IDENTITY((0u) | (0u), ~ (~ ((0u) | (0u))))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(149117u))), 0u)), ((_GLF_IDENTITY((0u) | (0u), ~ (~ ((0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(149117u))), 0u))) / 1u)) - 0u))))), 0u) | (uvec3(1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (uvec3(1u)), _GLF_IDENTITY(max(uvec3(0u, 0u, 0u) | (uvec3(1u)), uvec3(0u, 0u, 0u) | (uvec3(1u))), (max(uvec3(0u, 0u, 0u) | (uvec3(1u)), uvec3(0u, 0u, 0u) | (uvec3(1u)))) | (max(uvec3(0u, 0u, 0u) | (uvec3(1u)), uvec3(0u, 0u, 0u) | (uvec3(1u)))))))), max((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (uvec3(1u)), max(uvec3(0u, 0u, 0u) | _GLF_IDENTITY((uvec3(1u)), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) | ((uvec3(1u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(1u), (true ? _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u))) : _GLF_FUZZED(uvec3(192158u, 152408u, 43907u))))))))), (uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (0u) << 0u), 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (uvec3(1u)), max(uvec3(0u, 0u, 0u) | (uvec3(1u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)) | (uvec3(1u)))))))), uvec3(1u, 1u, 1u) * ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | (uvec3(1u)))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) * uvec3(1u, 1u, 1u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | (uvec3(1u)))), (false ? _GLF_FUZZED(uvec3(82709u, _GLF_IDENTITY(90115u, max(90115u, 90115u)), 22246u)) : (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | (uvec3(1u)))))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) | (uvec3(1u))))))), 1.0, 1, bvec3(true), mat4(1.0)), mat2x3(1.0), _GLF_struct_1(ivec3(1), uvec2(1u), vec2(1.0), 1, ivec2(1), _GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(939.694)), bool(false)))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 0.0, 0.0))), (transpose(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / mat4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_struct_6(_GLF_struct_3(mat3(1.0)), _GLF_struct_4(vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (_GLF_IDENTITY(true && (true), bool(bvec2(true && (true), false)))) && _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec4(bvec3(true), true))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)), true))), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(true, (true) && true) && (true && (true))))), bvec3(bvec4(bvec3(true), true))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)), true))), false))))))), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0)), mat3(_GLF_IDENTITY(mat4x3(mat3(1.0)), mat3(1.0) * (mat4x3(mat3(1.0)))))), mat2x3(1.0), uvec3(1u), vec3(1.0), 1), _GLF_struct_5(mat4x3(1.0), ivec3(1))), _GLF_struct_9(_GLF_struct_7(mat2x3(1.0), mat4x2(1.0), bvec2(true), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))) + 0.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), uvec3(1u)), _GLF_struct_8(bvec4(true), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), float(_GLF_IDENTITY(mat3x4(float(1.0), abs(exp(0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(-2.4, -2126.8961, -820.678, _GLF_IDENTITY(-68.38, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))), mix(float(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))))))) - vec2(0.0, 0.0)).x)), min(_GLF_IDENTITY(vec3(0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), mat2(1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0))))), min(mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))))))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))))))))) - vec2(0.0, 0.0)).x)), (_GLF_IDENTITY(vec3(0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-447.653))), injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))))))) - vec2(0.0, 0.0)).x)), (vec3(0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))))))) - vec2(0.0, 0.0)).x))) / vec3(1.0, 1.0, 1.0))) * vec3(1.0, 1.0, 1.0)), vec3(0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))))))) - vec2(0.0, 0.0)).x)))))), float(_GLF_FUZZED(949.086)), bool(false)))) * (-68.38)), -6.2, 0.1, -1980.2852, -785.161, -44.46, -933.045, 504.944, -96.73)) : mat3x4(float(1.0), abs(_GLF_IDENTITY(exp(0.0), (exp(0.0)) - 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0))))), float(_GLF_FUZZED(-7.5)), bool(false))), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(-29.15)), max(_GLF_IDENTITY(float(_GLF_FUZZED(-29.15)), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(-29.15)), (float(_GLF_FUZZED(-29.15))) - 0.0) : _GLF_FUZZED(2.8))), float(_GLF_FUZZED(-29.15)))), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)), (false ? _GLF_FUZZED(5299.9715) : mix(_GLF_IDENTITY(float(_GLF_FUZZED(-29.15)), max(_GLF_IDENTITY(float(_GLF_FUZZED(-29.15)), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(-29.15)), (float(_GLF_FUZZED(-29.15))) - 0.0) : _GLF_FUZZED(2.8))), float(_GLF_FUZZED(-29.15)))), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)))))))), mat3(mat3x4(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))))))))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, false))), (injectionSwitch.x < injectionSwitch.y)) && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))) && true)) && true), (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))) && (false)))) || false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y))))))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
      continue;
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_id, clamp(_GLF_struct_replacement_10.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_id, 0u | (_GLF_struct_replacement_10.workgroup_id)), _GLF_struct_replacement_10.workgroup_id)), _GLF_IDENTITY(uint(uvec3(_GLF_struct_replacement_10.workgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(_GLF_struct_replacement_10.workgroup_id, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(-607.876, -772.229)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_struct_replacement_10.workgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), 0u ^ (uint(uvec3(_GLF_struct_replacement_10.workgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), true && (! ((injectionSwitch.x < injectionSwitch.y))))))) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_15.subgroup_size, clamp(subgroup_id * _GLF_struct_replacement_15.subgroup_size, _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_15.subgroup_size, (subgroup_id * _GLF_struct_replacement_15.subgroup_size) + 0u), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED((++ workgroup_base))))) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED((++ workgroup_base))))) / 1u, ((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED((++ workgroup_base))))) / 1u) >> 0u)) - 0u)) * _GLF_struct_replacement_15.subgroup_size));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_15.subgroup_size), (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_struct_replacement_15.subgroup_size), min(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_struct_replacement_15.subgroup_size), 0u | (((subgroup_local_id + 1) % _GLF_struct_replacement_15.subgroup_size))), ((subgroup_local_id + 1) % _GLF_struct_replacement_15.subgroup_size)))) - 0u);
 if(_GLF_DEAD(false))
  return;
 uint read = 0;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, clamp(64, 64, 64))) ^ 0), 4);
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))) + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
        continue;
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (true ? ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(-65750))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(727.860)), float(0.0), bool(true))), injectionSwitch.x)), (_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(727.860, max(_GLF_IDENTITY(727.860, (727.860) * 1.0), 727.860)))), float(0.0), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-242.031) : injectionSwitch.x))))) || false)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) + 0)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     break;
                    }
                   return;
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             subgroupAll(false);
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 _GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(_GLF_IDENTITY(int(64), (true ? _GLF_IDENTITY(int(64), max(int(64), int(64))) : _GLF_FUZZED(_injected_loop_counter)))))) ^ 0), 2), (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, min(64, 64)) : _GLF_FUZZED(-1183))), 2)) ^ 0u), (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(64, 0, 0))), int(_GLF_IDENTITY(int(64), (true ? _GLF_IDENTITY(int(64), max(int(64), int(64))) : _GLF_FUZZED(_injected_loop_counter)))))) ^ 0), 2), (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, min(64, 64)) : _GLF_FUZZED(-1183))), 2)) ^ 0u)) / 1u);
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        return;
                      }
                     else
                      {
                      }
                     break;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             subgroupAll(false);
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
            continue;
          }
         else
          {
          }
         read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | (64)), 2);
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(read, (false ? _GLF_FUZZED(subgroup_base) : read)), 1u)), 0u ^ (_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) | (_GLF_IDENTITY(uint(uvec2(read, 1u)), (uint(uvec2(read, 1u))) * 1u)))))), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
}
