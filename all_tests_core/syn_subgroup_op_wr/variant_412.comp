#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id;
 uvec2 GLF_merged2_0_1_4_1_1_11readsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_4_1_1_11readsubgroup_id.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id.z = workgroup_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id.z;
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_4_1_1_11readsubgroup_id.y * subgroup_size + GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y = virtual_gid;
  }
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_4_1_1_11readsubgroup_id.y * subgroup_size + ((GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x + 1) % subgroup_size);
 GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id.x = next_virtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           atomicStore(buf[GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id.x], uint(1), 4, 64, 4);
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read = atomicLoad(buf[GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id.y = read;
    }
  }
 GLF_merged2_0_1_4_1_1_11readsubgroup_id.x = GLF_merged3_0_1_16_1_1_4_2_1_12next_virtual_gidreadworkgroup_id.y;
 do
  {
   if(GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x + 1 < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       atomicStore(checker[GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y], GLF_merged2_0_1_4_1_1_11readsubgroup_id.x, 4, 64, 4);
      }
     else
      {
      }
     subgroupAll(false);
    }
   else
    {
     do
      {
       atomicStore(checker[GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y], GLF_merged2_0_1_4_1_1_11readsubgroup_id.x, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     subgroupAll(true);
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
