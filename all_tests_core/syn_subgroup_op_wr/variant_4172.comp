#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 vec3 _f0;
 mat3x4 _f1;
 uint _f2;
 uvec4 _f3;
 mat4x2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_0 {
 bool _f0;
 ivec3 _f1;
 float _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 int _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_3 {
 uint subgroup_base;
 mat4x3 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 _GLF_struct_2 _f3;
 mat3x4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)) || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))), ! (! (bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))))))))))))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)) || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))), ! (! (bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))))))))))))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) && true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(175435u)))).x, (false ? _GLF_FUZZED(9567.5681) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(175435u)))).x, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(175435u)))).x, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(175435u)))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (true))) && (true)) ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(175435u)))).x)))) > injectionSwitch.y)), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.y = _GLF_IDENTITY(num_workgroup, (num_workgroup) / 1u);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), min((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), min((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y)), true, false, true)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))).y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))).y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), false || (false || (injectionSwitch.x < injectionSwitch.y)))))) && true)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), false, true))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(dot(vec4(99.14, -6.7, 8.9, -4857.3926), vec4(9.8, 28.43, 65.80, 286.511))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), mat2(1.0) * ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))) - vec2(0.0, 0.0)), min((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)).y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), false, true)))))) && true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))) > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), true, true)))), true)))))), bool(_GLF_IDENTITY(bool((injectionSwitch.x < injectionSwitch.y)), true && (bool((injectionSwitch.x < injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackSnorm2x16(29367u)))).y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             return;
             if(_GLF_DEAD(false))
              break;
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0 | 0))), (true ? (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-34487) : 0)), 0, 0))) : _GLF_FUZZED(-75161)))) >> 0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0 | 0))), (true ? (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-34487) : 0)), 0, 0))) : _GLF_FUZZED(-75161)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0 | 0))), (true ? (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-34487) : 0)), 0, 0))) : _GLF_FUZZED(-75161)))) >> 0), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0 | 0))), (true ? (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-34487) : 0)), 0, 0))) : _GLF_FUZZED(-75161)))) >> 0)) / 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0 | 0))), (true ? (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-34487) : 0)), 0, 0))) : _GLF_FUZZED(-75161)))) >> 0)))) * 1), (_GLF_IDENTITY(0, clamp(0, 0, 0))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               for(int _injected_loop_counter = ((int(159141u) & 0) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   return;
                  }
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)) * mat2(1.0), _GLF_IDENTITY(min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)), max(min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)) * mat2(1.0), _GLF_IDENTITY(min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)), max(min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))).y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), 0, 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) >> (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)), max((gl_WorkGroupID) >> (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)), (gl_WorkGroupID) >> (uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, 1u, 0u)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (1u)), 1u, 1u) ^ uvec3(1u, 1u, 1u))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(true, true, true, false))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec4(true, true, true, false))), bool(_GLF_IDENTITY(bool((bool(bvec4(true, true, true, false)))), true && (bool((bool(bvec4(true, true, true, false)))))))), ! (! (! _GLF_IDENTITY((bool(bvec4(true, true, true, false))), bool(_GLF_IDENTITY(bool((bool(bvec4(true, true, true, false)))), true && (bool((bool(bvec4(true, true, true, false)))))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), vec2(0.0, 0.0) + ((injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(4.6, -6070.0502)) : (injectionSwitch), min(false ? _GLF_FUZZED(vec2(4.6, -6070.0502)) : (injectionSwitch), false ? _GLF_FUZZED(vec2(4.6, -6070.0502)) : (injectionSwitch))))) / vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(vec4(1.0, 1.0, 1.0, 1.0)), 1.0 * (float(vec4(1.0, 1.0, 1.0, 1.0))))) * 1.0)))).x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(36363) : _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ (0 ^ 1))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             do
              {
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true, true, _GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(tan(0.0), 0.0 + (tan(0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x3(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(injectionSwitch))), tan(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))).y))));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), injectionSwitch)).y)))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         return;
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(503.074)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))).x > injectionSwitch.y))) || false))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 & -60609); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (80172 & 0)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(71.04)), bool(false)))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(0.0), sqrt(0.0), 1.0, _GLF_IDENTITY(sqrt(0.0), mix(float(_GLF_FUZZED(5.5)), float(sqrt(0.0)), bool(true))), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), (mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(0.0), sqrt(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-4444.8933), (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.2)), bool(false)))), sqrt(0.0), 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), (mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(0.0), sqrt(0.0), 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[1]), (vec2(_GLF_FUZZED(-4444.8933), (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.2)), bool(false)))), sqrt(0.0), 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), (mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(0.0), sqrt(0.0), 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[1])) / vec2(1.0, 1.0)), vec2((vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(0.0), sqrt(0.0), 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), (mat3x4(injectionSwitch, 1.0, abs(log(1.0)), 0.0, sin(0.0), sqrt(0.0), 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[0], _GLF_FUZZED(77.48)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY((! (! (false))), ((! (! (false)))) || false) && _GLF_IDENTITY(true, bool(bool(true)))))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec3((! (_GLF_DEAD(false))), false, false)))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))))) || false))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.w = workgroup_base;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(subgroup_id * subgroup_size, mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (! (bool(bvec4(false, false, false, true)))))) ? _GLF_FUZZED(-5.8) : 1.0))), mat2x4(1.0), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), (uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))))) | (uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))))), _GLF_struct_2(_GLF_IDENTITY(mat4(1.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4(1.0))), 1, _GLF_struct_0(true, ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec3(33985, -24957, -77252)[0]) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1)))) >> 0)))), 1.0, mat3x4(1.0)), _GLF_struct_1(vec3(1.0), mat3x4(1.0), 1u, uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), 0u | (max(1u, 1u))))), mat4x2(1.0), vec2(1.0))), mat3x4(1.0));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base))).w + _GLF_struct_replacement_3.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.w + _GLF_struct_replacement_3.subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = next_virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), _GLF_IDENTITY(1u, ~ (~ (1u))) * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))) ^ 0u)))), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = next_virtual_gid), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = next_virtual_gid)), (~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = next_virtual_gid))) << 0u)), (true ? (_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = next_virtual_gid)), (~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x = next_virtual_gid))) << 0u)) : _GLF_FUZZED(uaddCarry(workgroup_size, subgroup_local_id, workgroup_size)))))) - 0u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u))));
 uint read = _GLF_IDENTITY(0, ~ (~ (0)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false)), false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(575.269))))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))))))))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false, true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false, false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false, true, false)))))))))))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 & -64252); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = read;
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x) | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, clamp(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, clamp(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x)))), 0u | (~ ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, clamp(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x))))))))), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, max(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, clamp(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base)).x, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, uint(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, 1u, 0u, 1u))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base, min(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base)).x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x)), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x)), max(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, max(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x))) << 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.x))], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
      }
     else
      {
       _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(min(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) - 0))), 4), 1 * (min(4, 4))))) | _GLF_IDENTITY((4), 0 | (_GLF_IDENTITY((4), min((4), _GLF_IDENTITY((4), ((4)) ^ 0)))))), 64, 2), uint(uint(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), clamp(min(_GLF_IDENTITY(4, (4) | (4)), 4), min(4, 4), min(_GLF_IDENTITY(4, (4) ^ 0), 4))))) | (4)), _GLF_IDENTITY(64, (64) | (64)), 2)))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-27450)))) : 4))) / 1), 64, 2), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, 2)), (~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY((uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)), uvec2(uvec4((uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) | 0u), 1u))) << uvec2(0u, 0u))) | uvec2(0u, 0u)), uvec2(0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u | (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), max(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2))))), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u)), clamp(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) << _GLF_IDENTITY(0, (0) * 1)), _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(64, (64) << 0))), 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u))), 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, _GLF_IDENTITY(0u, min(0u, 0u))))) ^ uvec2(0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) - 0u), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, 64)), 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u))) ^ uvec2(0u, 0u))) | uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), min(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)))) >> uvec2(0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) + 0u))) >> uvec2(0u, 0u))))) << uvec2(0u, 0u))) - uvec2(0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u))), uvec2(uvec2(~ (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u)))))), (false ? _GLF_FUZZED((workgroup_size % uvec2(193014u, 94154u))) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u))), uvec2(uvec2(~ (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u))), uvec2(uvec2(~ (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), max(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), _GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) >> uvec2(0u, 0u))))) << uvec2(0u, 0u))))))) >> uvec2(0u, 0u))))))))) | uvec2(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) - 0u), 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) | 0), 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u))), uvec2(1u, 1u) * ((_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) | 0), 64, 2), 0u), (_GLF_IDENTITY(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u), (uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u)) << uvec2(0u, 0u))) | uvec2(0u, 0u))))) ^ _GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))))))))), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, ~ (~ ((64) / 1)))), 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) - 0u, (_GLF_IDENTITY((virtual_gid) - 0u, clamp((virtual_gid) - 0u, (virtual_gid) - 0u, (virtual_gid) - 0u))) / 1u))], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | _GLF_IDENTITY((_GLF_IDENTITY(4, 0 ^ (4))), ((_GLF_IDENTITY(4, 0 ^ (4)))) | ((_GLF_IDENTITY(4, 0 ^ (4)))))), 64, 2))))) - 0u), (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec4(virtual_gid, 1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)), uint(uvec2(uint(uvec4(virtual_gid, 1u, _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)), ~ (~ ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u))))), _GLF_IDENTITY(0u, ~ (~ (0u))))), 0u))))], 4, 64, 2)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) << 0u), (_GLF_IDENTITY((buf[virtual_gid]), ((buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))])) << 0u)) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))) >> 0u)))), 4, 64, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))), (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << 0u), _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) << 0u), (_GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(((buf[virtual_gid])), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((buf[virtual_gid])) : _GLF_FUZZED(num_workgroup))) << 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)))), 4, 64, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))))) >> 0u)), _GLF_IDENTITY(((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], 4, 64, 2))) | 0u, (false ? _GLF_FUZZED(workgroup_id) : ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) - 0), 2))) | _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))))))) - 0u, 0u | ((~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u))), 0u + (~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u)))))) / 1u)), 4, 64, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2)), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2)), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2)), ~ (_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2))), ~ (_GLF_IDENTITY(~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2)))), (~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2))))) ^ 0u)))))) | 0u)) | 0u)) | 0u)) - 0u)))) - 0u)))) | _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), ~ (~ (0u))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     subgroupAll(false);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, true)), false || (bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, true)))), false, true))))), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (false), false, true)), (bool(bvec3(! (false), false, true))) && true), false || (bool(bvec3(! (false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true))), true)))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))), false, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))), false, false), false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (false), false || (! (false))))), false || (! ((! (false))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), true && ((! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), true && ((! (false))))), (! (_GLF_IDENTITY((! (false)), true && _GLF_IDENTITY(((! (false))), bool(bvec4(_GLF_IDENTITY(((! (false))), bool(bool(_GLF_IDENTITY(((! (false))), (((! (false)))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) && true))))))))), _GLF_IDENTITY(false, ! (! (false))), false, true)))))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec3(_GLF_IDENTITY(int(4), int(ivec2(int(4), 1))), 1, 1))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x, (false ? _GLF_FUZZED(distance(-9671.6089, -7.0)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(float((38602 == 56890)))))), (_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(inverse(mat2(7019.4144, 5.7, 0.3, -144.200))))), (true ? mat2(1.0) : _GLF_FUZZED(mat2(8.0, 3.6, 823.933, -47.49)))))))) - vec2(0.0, 0.0))).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7508.4356)), bool(false)))) + 0.0)))), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (true ? ((injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(64.68, 0.0)))) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec4((injectionSwitch) * mat2(1.0), 0.0, 1.0))), 1.0, 1.0, tan(length(vec2(0.0, 0.0))), 1.0), (mat2x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec4((injectionSwitch) * mat2(1.0), 0.0, 1.0))), 1.0, 1.0, tan(length(vec2(0.0, 0.0))), 1.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (true ? ((injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(-5962.7745, 7.0)))) - vec2(0.0, 0.0))).x)))) > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (4)), 64, 2);
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), true && (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.5)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(-56.08))) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) || false))))) || false)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) && true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))) && true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 subgroupBarrier();
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter), ((false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) | ((false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))), _GLF_IDENTITY(max((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), _GLF_IDENTITY((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), clamp(_GLF_IDENTITY((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), 0 | ((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))), (0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), (0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))))), (true ? max((0 | 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), _GLF_IDENTITY((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), 0 | ((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))), 0 | ((0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))), (0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), (0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))))) : _GLF_FUZZED(24372)))))) >> 0) != (1 | (1 | 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_14next_virtual_gidnum_workgroupreadworkgroup_base.z, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
