#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 int _f0;
 mat2x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_12 {
 mat4x3 _f0;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 mat3x4 _f5;
 float _f6;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
 mat4x3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_9 {
 ivec2 _f0;
} ;

struct _GLF_struct_11 {
 float _f0;
 vec2 _f1;
 int _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_15 {
 float _f0;
 mat2x3 _f1;
 uint subgroup_id;
 _GLF_struct_11 _f2;
 mat4x2 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 mat2x3 _f1;
 uint _f2;
 mat2x3 _f3;
 mat4x2 _f4;
 mat3 _f5;
 int _f6;
} ;

struct _GLF_struct_7 {
 bool _f0;
 bool _f1;
 bvec2 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_3 {
 float _f0;
} ;

struct _GLF_struct_2 {
 uint _f0;
 ivec2 _f1;
 uvec2 _f2;
 int _f3;
 vec3 _f4;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat3x4 _f1;
 mat4x2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 uint subgroup_local_id;
 bvec3 _f1;
 bvec3 _f2;
 _GLF_struct_7 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_63_3_1_13GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenum_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
        barrier();
       return;
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uvec4 GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_size;
 GLF_merged2_0_3_63_3_1_13GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_size;
 GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz = GLF_merged2_0_3_63_3_1_13GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenum_workgroup.xyz;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(1.0), 0.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y) - 0.0)))))));
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 2.9)))), injectionSwitch)).x > injectionSwitch.y))) || _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), false))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false))), true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false))), true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), false))), true)))))))))))))) || false))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))))).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), sqrt(vec2(0.0, 0.0)) + (mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y)))))) && true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(1.0, mat2x3(1.0), gl_SubgroupID, _GLF_struct_11(1.0, vec2(1.0), 1, _GLF_struct_9(ivec2(1)), _GLF_struct_10(mat2(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) + sin(0.0))), mat3x4(1.0))), mat4x2(1.0), _GLF_struct_14(bvec4(true), mat3x4(1.0), ivec3(1), _GLF_struct_12(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.8))))), _GLF_struct_13(1, mat2x4(1.0), ivec4(1)), mat3x4(1.0), 1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, cos(0.0), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch, cos(0.0), 0.0)))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, cos(0.0), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch, cos(0.0), 0.0)))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, cos(0.0), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch, cos(0.0), 0.0)))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, cos(0.0), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch, cos(0.0), 0.0))))))).x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))))) && (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))))) || false))))))))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) / 1)) >> 0) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(false), false, false), false))))));
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) << 0), int(_GLF_IDENTITY(int(_injected_loop_counter), min(int(_injected_loop_counter), int(_injected_loop_counter)))))) | 0) != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, 0 + (1)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0))))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))));
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_4(mat4x3(1.0), _GLF_struct_0(mat4x2(1.0)), _GLF_struct_1(mat3x2(1.0), mat3x4(1.0), mat4x2(1.0), ivec4(1)), _GLF_struct_2(1u, _GLF_IDENTITY(ivec2(1), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1), (true ? ivec2(1) : _GLF_FUZZED(ivec2(34973, 71747)))))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), uint(uint(max(1u, 1u)))))), 1, _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, 0.0 + (1.0))), clamp(vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0 + (float(_GLF_IDENTITY(1.0, min(1.0, 1.0)))))))))), _GLF_IDENTITY(vec3(1.0), vec3(mat4(vec3(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.5) : 0.0)), 0.0)), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0))), vec3(1.0)))), _GLF_struct_3(1.0)), gl_SubgroupInvocationID, bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (true))), bvec3(true), _GLF_struct_7(_GLF_IDENTITY(true, _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false) && true), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), bvec2(true), _GLF_struct_5(mat3x4(1.0), mat2x3(1.0), 1u, mat2x3(1.0), mat4x2(1.0), mat3(1.0), 1), _GLF_struct_6(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(5.7)), float(1.0), bool(true)), (false ? _GLF_FUZZED(-8.5) : mix(float(_GLF_FUZZED(5.7)), float(1.0), bool(true)))))), mat2x3(1.0))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)))))))) || false))) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) + 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_63_3_1_13GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenum_workgroup.w = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.z = workgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
      barrier();
     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(181971u, min(_GLF_IDENTITY(181971u, (181971u) >> 0u), 181971u))) & 0)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --))) << 0)) ^ 0))
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(665.873, -0.7)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz, (GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).z * workgroup_id;
 GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y + _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id * subgroup_size, (_GLF_struct_replacement_15.subgroup_id * subgroup_size) ^ 0u), (uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)) ^ 1u) | (GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y + _GLF_struct_replacement_15.subgroup_id * subgroup_size)) + _GLF_struct_replacement_8.subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y + _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) + 0u), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))) * subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y + _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_struct_replacement_15.subgroup_id, 0u, (1u & 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), _GLF_IDENTITY((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), uvec2(_GLF_IDENTITY(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), min(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), uvec2(uvec2(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u)))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u), uvec3(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_struct_replacement_15.subgroup_id, 0u, (1u & 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), _GLF_IDENTITY((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), uvec2(_GLF_IDENTITY(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), min(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), uvec2(uvec2(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u)))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))))), ((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, _GLF_IDENTITY(85032u, (85032u) ^ 0u))))))) / 1u)), 1u, 0u))))) | ((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, (false ? _GLF_FUZZED(uint(false)) : _GLF_struct_replacement_15.subgroup_id)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))))) * subgroup_size), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y + _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_struct_replacement_15.subgroup_id, 0u, (1u & 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), _GLF_IDENTITY((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), uvec2(_GLF_IDENTITY(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), min(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), uvec2(uvec2(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u)))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u), uvec3(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_struct_replacement_15.subgroup_id, 0u, (1u & 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), _GLF_IDENTITY((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), uvec2(_GLF_IDENTITY(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), min(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), uvec2(uvec2(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u)))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))))), ((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, _GLF_IDENTITY(85032u, (85032u) ^ 0u))))))) / 1u)), 1u, 0u))))) | ((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, (false ? _GLF_FUZZED(uint(false)) : _GLF_struct_replacement_15.subgroup_id)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))))) * subgroup_size), ((false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.y + _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_struct_replacement_15.subgroup_id, 0u, (1u & 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), _GLF_IDENTITY((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), uvec2(_GLF_IDENTITY(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), min(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), uvec2(uvec2(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u)))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u), uvec3(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_struct_replacement_15.subgroup_id, 0u, (1u & 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), _GLF_IDENTITY((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), uvec2(_GLF_IDENTITY(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), min(uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u), uvec4((true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))), 1u, 1u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), uvec2(uvec2(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u)))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))))), ((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, _GLF_IDENTITY(85032u, (85032u) ^ 0u))))))) / 1u)), 1u, 0u))))) | ((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_id, (false ? _GLF_FUZZED(uint(false)) : _GLF_struct_replacement_15.subgroup_id)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u))))), (uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_15.subgroup_id, 1u), (true ? uvec2(_GLF_struct_replacement_15.subgroup_id, 1u) : _GLF_FUZZED(uvec2(52097u, 85032u)))))) / 1u)), 1u, 0u))))))) * subgroup_size)) << (0u ^ 0u))) ^ 0u)) + ((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size);
 GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (injectionSwitch.y), 1.0 * (1.0 * (injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0 * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-33.75)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))) * (injectionSwitch.y)))), float(mat4x3((_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0 * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-33.75)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))) * (injectionSwitch.y)))), _GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 1.0, exp(0.0), 1.0))) + 0.0))))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / exp(0.0)), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.8)), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.9) : 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0) + (0.0)))), injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))) && true)))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.9)), bool(false))))), 1.0))), mix(float(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.9)), bool(false))))), 1.0)))), float(_GLF_FUZZED(-844.017)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 0.0, length(0.0), 0.0)), max(float(mat3(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 0.0, length(0.0), 0.0)), float(mat3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, length(0.0), 0.0)))))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   return;
  }
 atomicStore(buf[GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.w], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(1, min(1, 1)), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(0, 0 ^ (0))))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 ^ (_GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), max(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) / ivec2(1, 1)), (ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) | (ivec2(0, 0) | (ivec2(0, 0) | ivec2(0, 0)))), ivec2(0, _GLF_IDENTITY(0, int(int(0)))) ^ (ivec2(1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, 0), (false ? _GLF_FUZZED((ivec2(-68782, -46627) % ivec2(36994, -85623))) : ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, 0))))))) - 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), (false ? _GLF_FUZZED(33074) : _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0))))))))))) | 0) >> _GLF_IDENTITY(int(0), int(0)))))))) | 0)), min(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(1, min(1, 1)), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(0, 0 ^ (0))))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 ^ (_GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), max(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) / ivec2(1, 1)), (ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) | (ivec2(0, 0) | (ivec2(0, 0) | ivec2(0, 0)))), ivec2(0, _GLF_IDENTITY(0, int(int(0)))) ^ (ivec2(1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, 0), (false ? _GLF_FUZZED((ivec2(-68782, -46627) % ivec2(36994, -85623))) : ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, 0))))))) - 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), (false ? _GLF_FUZZED(33074) : _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0))))))))))) | 0) >> _GLF_IDENTITY(int(0), int(0)))))))) | 0)), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(1, min(1, 1)), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(0, 0 ^ (0))))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 ^ (_GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), max(ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) / ivec2(1, 1)), (ivec2(1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) | (ivec2(0, 0) | (ivec2(0, 0) | ivec2(0, 0)))), ivec2(0, _GLF_IDENTITY(0, int(int(0)))) ^ (ivec2(1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, 0), (false ? _GLF_FUZZED((ivec2(-68782, -46627) % ivec2(36994, -85623))) : ivec2((_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1, 0))))))) - 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), (false ? _GLF_FUZZED(33074) : _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-61871) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(22615) : _GLF_IDENTITY(int(0), int(0))))) * 1)) - 0))))))))))) | 0) >> _GLF_IDENTITY(int(0), int(0)))))))) | 0))))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) | (4)), 4)), _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(4, ~ (~ (4))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     return;
    }
   else
    {
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) + 0)), int(3))) + 0))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.x = read;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(true)), ! (! (false || (_GLF_WRAPPED_IF_TRUE(true)))))), (! (_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(true)), ! (! (false || (_GLF_WRAPPED_IF_TRUE(true))))))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))) ^ _GLF_IDENTITY((int(6)), ((int(6))) | ((int(6))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))) ^ (int(6))))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))) ^ (int(6)))))) | 0)) | ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0))))) ^ (int(6))))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))
        return;
       barrier();
      }
     return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))))) || false)))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_struct_replacement_8.subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (1 | 1), false || (_injected_loop_counter != (1 | 1))), true && (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (0 << _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1))), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)) >> _GLF_IDENTITY(0, (0) - 0))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | _GLF_IDENTITY(1, max(1, 1))), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)) >> 0)), 0)), (false ? _GLF_FUZZED(-99806) : _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)), (((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1))) / 1) >> 0)), 0)), (int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)), (((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1))) / 1) >> 0)), 0))) / 1), 0 + (int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), ((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, 1, 0, 0)), 0 ^ (int(ivec4((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, 1, 0, 0)))))) / 1)) | 1)) >> 0)), 0))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, ((_GLF_IDENTITY(1, ~ (~ (1)))) | 0) / 1)) | 1), _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)) >> 0, (((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, max((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0))) | 1)) >> 0) >> 0)))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)) >> 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)) >> 0)) | 0))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0), (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) : _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) | 1))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | _GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0), 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0))) | 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0)))))), ((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))) | 0, ((_GLF_IDENTITY(1, ~ (~ (1)))) | 0) / 1)) | 1), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), ((1)) / (1 | 1))))) | 0) | 1)) >> 0, (((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1)) >> 0) >> 0)))), min(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))))) | 0) | 1)) >> 0))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, min(1, 1)))), ~ (~ (1)))) | 0) | 1, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) : _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), ~ (~ (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) : _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter))))))) | 1))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0) | 1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0), 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0))) | 1))) - int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)) - 0.0))))))) >> 0))))))) >> 0))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true, false))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             atomicStore(checker[virtual_gid], _GLF_IDENTITY(GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid, (GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid) | (GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid)).xyz.x, 4, 64, _GLF_IDENTITY(4, (4) | 0));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))), false, false, true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), bool(bvec4(bool(bvec4(_GLF_DEAD(false), true, true, true)), true, true, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, abs(0.0))), (_GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, abs(0.0))), (vec2(mat2(injectionSwitch, 0.0, abs(0.0)))) / vec2(1.0, 1.0))) + sin(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))
            return;
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       atomicStore(checker[virtual_gid], GLF_merged2_0_3_63_3_1_16GLF_merged3_0_1_4_1_1_14_2_1_14readworkgroup_baseworkgroup_sizenext_virtual_gid.xyz.x, 4, 64, 4);
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), _GLF_IDENTITY(false, (false) || false), true, false)))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     subgroupAll(true);
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), ! (! (false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), ! (! (false)))))))), false, false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false)), true)))), false || (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), true))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false)), true)))), false || (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(false, false, false)), true), bvec2(bvec2(bvec2(bool(bvec3(false, false, false)), true))))))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, (false) || false))), false)), true)))), false || (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), true)))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false)), true)))), false || (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), true)))))), false)))))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true, false)))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bvec3(bvec3(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bvec3(bvec3(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3(! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))))))))), false, false))))))))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, sqrt(1.0), sqrt(1.0), 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(85.88))))) : _GLF_FUZZED(-78.78))), 1.0, 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0), mat4x3(mat4x3(mat4x3(injectionSwitch, sqrt(1.0), sqrt(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, cos(0.0), 0.0, 1.0)), clamp(float(vec4(1.0, cos(0.0), 0.0, 1.0)), float(vec4(1.0, cos(0.0), 0.0, 1.0)), float(vec4(1.0, cos(0.0), 0.0, 1.0))))), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)))))).y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
  barrier();
}
