#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec4(bool(bvec3(false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, true, true))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))), _GLF_IDENTITY(bool(bool(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(bool(bool(! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), bool(bool(bool(bool(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, true, false)))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))))
        barrier();
      }
     for(int _injected_loop_counter = ((-87759) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-19503))), max(int(5), int(5)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, 0))) ^ 1, min(0 ^ 1, _GLF_IDENTITY(0 ^ 1, int(ivec3(0 ^ 1, 1, 1))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) || false)), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))) || false)) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | 0u, max((workgroup_size) | 0u, (workgroup_size) | 0u))) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u))) - 0u)) * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - _GLF_IDENTITY((0u | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))), 1u))), (true ? _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 1u))) : _GLF_FUZZED(workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), min((0u | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))), 1u))), (true ? _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 1u))) : _GLF_FUZZED(workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), _GLF_IDENTITY((0u | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))), 1u))), (true ? _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 1u))) : _GLF_FUZZED(workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), max((0u | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))), 1u))), (true ? _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 1u))) : _GLF_FUZZED(workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), (0u | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))), 1u))), (true ? _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 1u))) : _GLF_FUZZED(workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(828.643)), float(injectionSwitch.y), bool(true))))) * (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), ~ (_GLF_IDENTITY(~ ((subgroup_base)), min(~ ((subgroup_base)), ~ ((subgroup_base)))))) / 1u, (_GLF_IDENTITY((subgroup_base), ~ (_GLF_IDENTITY(~ ((subgroup_base)), min(~ ((subgroup_base)), ~ ((subgroup_base)))))) / 1u) | _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ~ (_GLF_IDENTITY(~ ((subgroup_base)), min(~ ((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(uvec3(subgroup_base, 0u, 0u)), clamp(uint(uvec3(subgroup_base, 0u, 0u)), uint(uvec3(subgroup_base, 0u, 0u)), uint(uvec3(subgroup_base, 0u, 0u))))))), ~ ((subgroup_base)))))) / 1u), ((_GLF_IDENTITY((subgroup_base), ~ (_GLF_IDENTITY(~ ((subgroup_base)), min(~ ((subgroup_base)), ~ ((subgroup_base)))))) / 1u)) << 0u)))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) + (uint(1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(_GLF_IDENTITY(1u, max(1u, 1u))))), (~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, ~ (~ (1u))))))) - 0u)))) + _GLF_IDENTITY((uint(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(1.8))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, _GLF_IDENTITY((true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))), min((true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))), _GLF_IDENTITY((true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))), ((true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) - 0u)))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))))))))), ~ (~ ((uint(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(subgroup_id))))))))), min(_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) << (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), _GLF_IDENTITY(uint(1u), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) + (_GLF_IDENTITY(uint(1u), 0u | (uint(1u)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, max(1u, 1u))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, ~ (~ (1u))))))) - 0u, ((~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, ~ (~ (1u))))))) - 0u) ^ 0u))))) + _GLF_IDENTITY((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base) / 1u, clamp((subgroup_base) / 1u, (subgroup_base) / 1u, (subgroup_base) / 1u)), (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, (subgroup_id) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))))))))), ~ (~ ((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(subgroup_id))))))))), 0u | ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) + (uint(1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, max(1u, 1u))))), (~ (_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, ~ (~ (1u)))), 0u + (uint(_GLF_IDENTITY(1u, ~ (~ (1u))))))))) - 0u)))) + _GLF_IDENTITY((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))))))))))), ((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id))))))))))))) >> 0u)), min(~ (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))))))))))), ((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id))))))))))))) >> 0u)), ~ (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))))))))))), ((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), 0u + (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id))))))))))))) >> 0u)))))))), ~ (~ ((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(subgroup_id))))))))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) + (uint(1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, max(1u, 1u))))), (~ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, ~ (~ (1u))))))) - 0u)))) + _GLF_IDENTITY((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))) * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))))))))), ~ (~ ((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-46.41) : injectionSwitch.y)))) * (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) / 1u, (true ? (subgroup_base) / 1u : _GLF_FUZZED(subgroup_id))))))))))))) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) && true), false || (_GLF_IDENTITY(bool(false), (bool(false)) && true)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (injectionSwitch)).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (injectionSwitch)).x > injectionSwitch.y))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) << 0)), ((subgroup_local_id % _GLF_IDENTITY(2, (2) << 0))) ^ 0u) == 0)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))))))).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2708.1955), _GLF_FUZZED(_GLF_IDENTITY(vec4(-213.402, -36.06, -8.9, -479.681), min(vec4(-213.402, -36.06, -8.9, -479.681), _GLF_IDENTITY(vec4(_GLF_IDENTITY(-213.402, max(_GLF_IDENTITY(-213.402, (-213.402) * 1.0), -213.402)), -36.06, -8.9, -479.681), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-213.402, _GLF_IDENTITY(-36.06, float(vec2(-36.06, log(1.0)))), -8.9, -479.681))))).b)), bvec2(false, false))))))).x) * round(length(normalize(vec3(1.0, 1.0, 1.0))))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, int(ivec2(1, 1))), 0, 1, 0)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))))))), int(1))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? _GLF_IDENTITY((1) << 0, (false ? _GLF_FUZZED((_injected_loop_counter >> -67645)) : _GLF_IDENTITY((1) << 0, max((1) << 0, (1) << 0)))) : _GLF_FUZZED((_injected_loop_counter --)))))), int(1))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), int(int(int(1)))))), int(_GLF_IDENTITY(1, (1) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), int(_GLF_IDENTITY(ivec2((0 >> _GLF_IDENTITY(int(8), int(8))), 1), max(ivec2((0 >> _GLF_IDENTITY(int(8), int(8))), 1), ivec2((0 >> _GLF_IDENTITY(int(8), int(8))), 1))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))))) | 0))), ~ (_GLF_IDENTITY(~ ((~ (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), clamp(1 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) << 0), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) << 0, ~ (~ ((1) << 0))), (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 0)))) ^ 0), _GLF_IDENTITY(1, int(ivec2(1, 0)))))) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0)))), (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, (1) >> 0)))))) * 1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, _GLF_IDENTITY((true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY((1) << 0, ((1) << 0) >> (0 ^ 0)) : _GLF_FUZZED((_injected_loop_counter --))), ((true ? _GLF_IDENTITY((1) << 0, ((1) << 0) >> (0 ^ 0)) : _GLF_FUZZED((_injected_loop_counter --)))) | 0), ((true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))) - 0)) * 1)))), int(1))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0, ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0) << (28989 & int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)), ~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))))) | 0), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) * 1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(7271) : _injected_loop_counter --)))))))), int(1)))) | _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(0, min(0, 0)))))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, (1) >> 0)))))) * 1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, _GLF_IDENTITY((true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY((1) << 0, ((1) << 0) >> (0 ^ 0)) : _GLF_FUZZED((_injected_loop_counter --))), ((true ? _GLF_IDENTITY((1) << 0, ((1) << 0) >> (0 ^ 0)) : _GLF_FUZZED((_injected_loop_counter --)))) | 0), ((true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))) - 0)) * 1)))), int(1))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0, ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0) << (28989 & int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)), ~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))))) | 0), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) * 1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(7271) : _injected_loop_counter --)))))))), int(1)))) | _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(0, min(0, 0)))))))))), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, (1) >> 0)))))) * 1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, _GLF_IDENTITY((true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY((1) << 0, ((1) << 0) >> (0 ^ 0)) : _GLF_FUZZED((_injected_loop_counter --))), ((true ? _GLF_IDENTITY((1) << 0, ((1) << 0) >> (0 ^ 0)) : _GLF_FUZZED((_injected_loop_counter --)))) | 0), ((true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))) - 0)) * 1)))), int(1))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0, ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))) | 0) << (28989 & int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)), ~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1)))))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))))) | 0), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) * 1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_injected_loop_counter --)))))), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (true ? (1) << 0 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(7271) : _injected_loop_counter --)))))))), int(1)))) | _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(0, min(0, 0))))))))))))))))) - 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(5), ~ (~ (int(5)))))), int(_GLF_IDENTITY(5, (5) >> 0)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(1, min(1, 1)) * (int(5))), _GLF_IDENTITY((int(5)), max((int(5)), (int(5)))) * 1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
             while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, false)), true && (bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, false))))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), ! (! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             subgroupAll(false);
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(702.581)), vec2(_GLF_FUZZED(-588.993), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))), (bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))) && true))))
            {
            }
           else
            {
             _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, 2) : _GLF_FUZZED(subgroup_base))), _GLF_IDENTITY(0u ^ (read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) << _GLF_IDENTITY(0u, (0u) - 0u)), min(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, 2))), (atomicLoad(buf[virtual_gid], 4, 64, 2)) - 0u), atomicLoad(buf[virtual_gid], 4, 64, 2)))), _GLF_IDENTITY((0u ^ (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) ^ 0u, ((0u ^ (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) ^ 0u) * 1u)));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(14.88)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(14.88)), float(injectionSwitch.x), bool(true)), min(mix(float(_GLF_FUZZED(14.88)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(14.88)), float(injectionSwitch.x), bool(true)))), mix(float(_GLF_FUZZED(14.88)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           subgroupAll(false);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bool((false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             read = atomicLoad(buf[virtual_gid], 4, 64, 2);
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))) && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false)), (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), 0 ^ (~ (6))))), (6) / 1) : _GLF_FUZZED(_injected_loop_counter))), (0 >> _GLF_IDENTITY(int(5), int(5)))), min(ivec2(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, (6) / 1) : _GLF_FUZZED(_injected_loop_counter))), (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec2(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, (6) / 1) : _GLF_FUZZED(_injected_loop_counter))), (0 >> _GLF_IDENTITY(int(5), int(5)))))))))))))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(77.52) : _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), 1.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(77.52) : _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), 1.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(77.52) : _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), 1.0)))) - vec2(0.0, 0.0)))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, (0) / 1))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, (0) / 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, (0) / 1)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.9)), bool(false))) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(41.73), _GLF_IDENTITY((injectionSwitch)[1], float(mat4x3((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0)))), vec2((injectionSwitch)[0], _GLF_FUZZED(0.0)), bvec2(true, false))).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
}
