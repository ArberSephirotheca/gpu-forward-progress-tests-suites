#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat3x2 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_7 {
 bool _f0;
 float _f1;
 bvec4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
 mat4x2 _f1;
 int _f2;
 vec3 _f3;
 uvec4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 bool _f1;
 uvec3 _f2;
 mat4x3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 bvec4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_0 {
 uint num_workgroup;
 mat3x2 _f0;
 mat4 _f1;
 bool _f2;
 bvec3 _f3;
 ivec3 _f4;
 mat2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_9 {
 float _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_4 _f2;
 uvec4 _f3;
 _GLF_struct_6 _f4;
 mat4x2 _f5;
 _GLF_struct_8 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.y = subgroup_local_id;
  }
 else
  {
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(1.0, _GLF_struct_1(_GLF_struct_0(gl_NumWorkGroups.x, mat3x2(1.0), mat4(1.0), true, bvec3(true), ivec3(1), mat2(1.0), vec3(1.0))), _GLF_struct_4(mat3x2(1.0), _GLF_struct_2(vec4(1.0), bvec4(true), ivec2(1)), _GLF_struct_3(ivec3(1), true, uvec3(1u), mat4x3(1.0), uvec4(1u))), uvec4(1u), _GLF_struct_6(_GLF_struct_5(mat3(1.0), mat4x2(1.0), 1, vec3(1.0), uvec4(1u), vec2(1.0))), mat4x2(1.0), _GLF_struct_8(_GLF_struct_7(true, 1.0, bvec4(true), uvec4(1u))));
 GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.x = _GLF_struct_replacement_9._f1._f0.num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.y;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat3x2(1.0), workgroup_base + subgroup_id * subgroup_size + ((GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.y + 1) % subgroup_size));
 atomicStore(buf[_GLF_struct_replacement_10.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.y + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
