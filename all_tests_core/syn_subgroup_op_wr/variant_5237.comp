#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 bvec2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_24 {
 vec3 _f0;
 mat4x2 _f1;
 uvec3 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_23 {
 float _f0;
 mat3x4 _f1;
 ivec4 _f2;
 mat3x4 _f3;
 vec3 _f4;
 uvec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_26 {
 _GLF_struct_23 _f0;
 _GLF_struct_24 _f1;
 ivec3 _f2;
 _GLF_struct_25 _f3;
 mat2x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_21 {
 uint _f0;
 mat3x4 _f1;
 bool _f2;
 ivec3 _f3;
 int _f4;
 vec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
} ;

struct _GLF_struct_19 {
 bool _f0;
 uvec4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_20 {
 bvec4 _f0;
 _GLF_struct_19 _f1;
} ;

struct _GLF_struct_17 {
 int _f0;
 ivec2 _f1;
 ivec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 bool _f1;
 mat4x2 _f2;
 ivec2 _f3;
 mat3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_18 {
 mat4 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_14 {
 float _f0;
 uint _f1;
 float _f2;
 mat4x3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_13 {
 mat3 _f0;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 mat4x2 _f1;
 ivec2 _f2;
 mat2x3 _f3;
 uvec4 _f4;
 vec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 ivec3 _f3;
 _GLF_struct_14 _f4;
 mat3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_10 {
 bool _f0;
 bool _f1;
 uvec3 _f2;
 vec4 _f3;
 uvec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_11 {
 uint virtual_gid;
 ivec3 _f0;
 _GLF_struct_10 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_27 {
 _GLF_struct_11 _f0;
 int _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_18 _f3;
 _GLF_struct_20 _f4;
 _GLF_struct_22 _f5;
 _GLF_struct_26 _f6;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 vec3 _f1;
 float _f2;
 mat3 _f3;
 int _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 bool _f1;
 mat4 _f2;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 ivec4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_2 {
 int _f0;
 bvec2 _f1;
 uvec2 _f2;
 uvec4 _f3;
 mat4 _f4;
 uint _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 _GLF_struct_1 _f1;
 uvec3 _f2;
 _GLF_struct_4 _f3;
 uint workgroup_size;
 mat3 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_0 {
 bool _f0;
 vec2 _f1;
 uint read;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(bvec4(true), _GLF_struct_1(mat4x2(1.0), ivec2(1)), uvec3(1u), _GLF_struct_4(_GLF_struct_2(1, bvec2(true), uvec2(1u), uvec4(1u), mat4(1.0), 1u, mat4x3(1.0)), _GLF_struct_3(uvec2(1u), ivec4(1), ivec3(1))), gl_WorkGroupSize.x, mat3(1.0), _GLF_struct_8(ivec2(1), _GLF_struct_5(mat4(1.0), true, mat4(1.0)), _GLF_struct_6(mat4(1.0)), _GLF_struct_7(uvec4(1u), vec3(1.0), 1.0, mat3(1.0), 1, uvec3(1u)), ivec4(1)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_9.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_11(workgroup_base + subgroup_base + subgroup_local_id, ivec3(1), _GLF_struct_10(true, true, uvec3(1u), vec4(1.0), uvec3(1u), mat2x3(1.0)), mat2(1.0)), 1, _GLF_struct_15(uvec2(1u), _GLF_struct_12(vec2(1.0), mat4x2(1.0), ivec2(1), mat2x3(1.0), uvec4(1u), vec4(1.0), 1u), _GLF_struct_13(mat3(1.0)), ivec3(1), _GLF_struct_14(1.0, 1u, 1.0, mat4x3(1.0), uvec3(1u)), mat3(1.0), mat3(1.0)), _GLF_struct_18(mat4(1.0), _GLF_struct_16(mat3(1.0), true, mat4x2(1.0), ivec2(1), mat3(1.0), mat4x2(1.0)), _GLF_struct_17(1, ivec2(1), ivec3(1), mat3(1.0))), _GLF_struct_20(bvec4(true), _GLF_struct_19(true, uvec4(1u), mat2(1.0))), _GLF_struct_22(_GLF_struct_21(1u, mat3x4(1.0), true, ivec3(1), 1, vec3(1.0), ivec2(1))), _GLF_struct_26(_GLF_struct_23(1.0, mat3x4(1.0), ivec4(1), mat3x4(1.0), vec3(1.0), uvec3(1u), mat2x3(1.0)), _GLF_struct_24(vec3(1.0), mat4x2(1.0), uvec3(1u), uvec4(1u), mat2x3(1.0), vec2(1.0)), ivec3(1), _GLF_struct_25(bvec2(true), uvec4(1u)), mat2x3(1.0), mat3x4(1.0)));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(true, vec2(1.0), 0);
 do
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             do
              {
               subgroupAll(false);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_struct_replacement_0.read = atomicLoad(buf[_GLF_struct_replacement_27._f0.virtual_gid], 4, 64, 2);
      }
     else
      {
      }
    }
   else
    {
     subgroupAll(false);
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         _GLF_struct_replacement_0.read = atomicLoad(buf[_GLF_struct_replacement_27._f0.virtual_gid], 4, 64, 2);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   subgroupBarrier();
  }
 else
  {
  }
 atomicStore(checker[_GLF_struct_replacement_27._f0.virtual_gid], _GLF_struct_replacement_0.read, 4, 64, 4);
}
