#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 bvec3 _f0;
 uint _f1;
 vec3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 bvec3 _f1;
 mat2 _f2;
 uint workgroup_id;
} ;

struct _GLF_struct_14 {
 bvec2 _f0;
 ivec4 _f1;
 uvec4 _f2;
 float _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 vec2 _f1;
 vec2 _f2;
 bvec2 _f3;
 uvec2 _f4;
 bool _f5;
 vec2 _f6;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
 ivec3 _f4;
 _GLF_struct_16 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 bool _f1;
 mat4 _f2;
 mat2x3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 bvec3 _f1;
 mat4 _f2;
 uvec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 mat4x3 _f2;
 bool _f3;
 _GLF_struct_10 _f4;
 ivec3 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_18 {
 _GLF_struct_12 _f0;
 _GLF_struct_17 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_5 {
 float _f0;
 vec2 _f1;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 uvec3 _f1;
 mat3x2 _f2;
 vec3 _f3;
 mat2x3 _f4;
 mat4x3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_3 {
 int _f0;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 bvec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 vec4 _f1;
 _GLF_struct_3 _f2;
 uint subgroup_local_id;
 bvec3 _f3;
 _GLF_struct_4 _f4;
 mat4x2 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 mat3x4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_7 {
 mat2 _f0;
 mat2 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_6 _f3;
 uvec3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.y = subgroup_id;
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(mat2(1.0), mat2(1.0), _GLF_struct_1(_GLF_struct_0(ivec4(1), mat3x4(1.0), ivec2(1))), _GLF_struct_6(_GLF_struct_2(bvec3(true), bvec3(true), bvec3(true)), vec4(1.0), _GLF_struct_3(1), gl_SubgroupInvocationID, bvec3(true), _GLF_struct_4(ivec2(1), uvec3(1u), mat3x2(1.0), vec3(1.0), mat2x3(1.0), mat4x3(1.0), bvec3(true)), mat4x2(1.0), _GLF_struct_5(1.0, vec2(1.0))), uvec3(1u));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_12(_GLF_struct_8(bvec4(true)), _GLF_struct_9(uvec4(1u)), mat4x3(1.0), true, _GLF_struct_10(vec3(1.0), bvec3(true), mat4(1.0), uvec3(1u), true), ivec3(1), _GLF_struct_11(mat3x2(1.0), true, mat4(1.0), mat2x3(1.0), mat4(1.0))), _GLF_struct_17(ivec3(1), _GLF_struct_13(vec2(1.0), vec2(1.0), vec2(1.0), bvec2(true), uvec2(1u), true, vec2(1.0)), _GLF_struct_14(bvec2(true), ivec4(1), uvec4(1u), 1.0, mat2x3(1.0)), _GLF_struct_15(mat4x2(1.0), bvec3(true), mat2(1.0), gl_WorkGroupID.x), ivec3(1), _GLF_struct_16(bvec3(true), 1u, vec3(1.0), uvec2(1u)), ivec2(1)), bvec4(true));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (1 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (1 ^ 1))); _injected_loop_counter --)
                    {
                     do
                      {
                       do
                        {
                         GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.z = _GLF_struct_replacement_18._f1._f3.workgroup_id;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.z;
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.y * subgroup_size + _GLF_struct_replacement_7._f3.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.y * subgroup_size + ((_GLF_struct_replacement_7._f3.subgroup_local_id + 1) % subgroup_size);
 do
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.x = read;
 if(_GLF_struct_replacement_7._f3.subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
              {
               atomicStore(checker[virtual_gid], GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.x, 4, 64, 4);
              }
            }
          }
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(false);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               atomicStore(checker[virtual_gid], GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.x, 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupAll(true);
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
}
