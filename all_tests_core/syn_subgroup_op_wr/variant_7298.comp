#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-69380) : _GLF_IDENTITY(int(4), (int(4)) >> 0))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id;
 uvec3 GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz = GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (true)))), (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.w = _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-8.6))), bool(false))) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false, true, true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, true)))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, true)))))), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))), true, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false))))) && true)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.y = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.w;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), true, true)))), false || (bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), true, true))))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (! (false))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true)))), false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(true, (true) && true)))))))
          barrier();
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false)))))) || false))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(5), int(5)))), max(int(int(_GLF_IDENTITY(int(5), int(5)))), int(int(_GLF_IDENTITY(int(5), int(5)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) << 0), 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
          barrier();
         continue;
        }
      }
    }
   GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.z = _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bvec4(false || (true), false, true, true)), (bool(bvec4(false || (true), false, true, true))) || false)))) && _GLF_IDENTITY(true, true && (true)), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) && _GLF_IDENTITY(true, true && (true)), ! (! ((_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bvec2(_GLF_IDENTITY(true, true && (true)), false))))))))) ? subgroup_local_id : _GLF_FUZZED(118395u), 1u * (true ? subgroup_local_id : _GLF_FUZZED(118395u)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), true))))
      break;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.x = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) * 1)), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)) && true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z = workgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z = workgroup_size) * 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 & -66763); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / (0 ^ 1)) < (1 ^ 0)); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       break;
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), 0u ^ (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.y = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z * GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.y, max(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z * GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.y, GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z * GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.y));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, sqrt(0.0)), min(vec4(injectionSwitch, _GLF_IDENTITY(0.0, sqrt(0.0) + (0.0)), sqrt(0.0)), vec4(injectionSwitch, 0.0, sqrt(0.0))))))[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, sqrt(0.0)), min(vec4(injectionSwitch, _GLF_IDENTITY(0.0, sqrt(0.0) + (0.0)), sqrt(0.0)), vec4(injectionSwitch, 0.0, sqrt(0.0))))))[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat2x3(_GLF_IDENTITY(mat3(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat2x3(_GLF_IDENTITY(mat3(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0))))))))) + vec2(0.0, 0.0))).y), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))), false || (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))) || false), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (bool((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-71925))), vec2(_GLF_FUZZED(-4.6), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), true))))))))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), true))))))))))))), false)), (bool(bvec2(! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))), true))))))))))))), false))) || false)))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(uvec4(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, 0u))).y * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(uvec4(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, 0u))).y * subgroup_size, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, (GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz) | uvec3(0u, 0u, 0u)), 0u))).y * subgroup_size, 0u, 1u, 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, (GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz) ^ uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)), uvec3(uvec4(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, 0u))).y * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(uvec4(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, 0u))).y * subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(uvec4(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, 0u))).y * subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(uvec4(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz, 0u))).y * subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)))))) + GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.z;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.x = virtual_gid;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(false))) && true))), true && (bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(false))) && true)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
    return;
   return;
  }
 for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(63072), 0 | (_GLF_FUZZED(63072))) : 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), bool(bvec2(false, false)))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.y * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, 1u * _GLF_IDENTITY((subgroup_size), 0u ^ ((subgroup_size)))))) + ((GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.z + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) / 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ (~ (_GLF_IDENTITY(1, (1) / 1))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, int(ivec2(4, 0))), 4)), 64, 4);
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (! (false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(_GLF_IDENTITY(buf[GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.x], (buf[GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.x]) | (buf[_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, clamp(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size) >> _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) ^ uvec3(0u, 0u, 0u))), min(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size) >> _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size) >> _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) ^ uvec3(0u, 0u, 0u))), uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size) >> _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(79.71)), bvec2(true, false))))).x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) ^ uvec3(0u, 0u, 0u))), 0u))))), GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size)).x])), 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))
    return;
   if(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.z, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.z, (GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idsubgroup_id.xyz.z) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) >> (_GLF_IDENTITY((0u & 7203u), ((0u & 7203u)) >> 0u) | 0u)) + 1 < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), min(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))))), ((~ (_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959)))))) | 0))) | (_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))))))), int(_GLF_IDENTITY(8, 0 ^ (8)))))), (_GLF_IDENTITY(_GLF_IDENTITY(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))) ? int(8) : _GLF_FUZZED(21959))), _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), int(ivec2(int(8), 1)))))))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0)))))))), ~ (~ (((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8))))))), clamp(_GLF_IDENTITY(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))) ? int(8) : _GLF_FUZZED(21959))), _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), int(ivec2(int(8), 1)))))))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0)))))))), ~ (~ (((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8))))))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))) ? int(8) : _GLF_FUZZED(21959))), _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), int(ivec2(int(8), 1)))))))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0)))))))), ~ (~ (((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8))))))), _GLF_IDENTITY(_GLF_IDENTITY(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))) ? int(8) : _GLF_FUZZED(21959))), _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), int(ivec2(int(8), 1)))))))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0)))))))), ~ (~ (((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8))))))), (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))) ? int(8) : _GLF_FUZZED(21959))), _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), int(ivec2(int(8), 1)))))))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0)))))))), ~ (~ (((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(21959))), int(8)))))))) >> 0)))) >> 0) | ((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(8, (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, 31050)) : 8)), (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (_GLF_IDENTITY(8, (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, 31050)) : 8))))) | (8))) : _GLF_FUZZED(21959))), _GLF_IDENTITY(int(8), (int(8)) << 0)))))); _injected_loop_counter --)
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) || false)) && true, ((_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) || false)) && true) || false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5956.9850), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2x4(mat3x4(_GLF_IDENTITY(mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))), float(mat3(float(_GLF_IDENTITY(mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2x4(mat3x4(_GLF_IDENTITY(mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))) + (_GLF_FUZZED(-5956.9850))) : injectionSwitch.y)))), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5956.9850) : injectionSwitch.y)), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5956.9850) : injectionSwitch.y)))))))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5956.9850) : injectionSwitch.y)), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5956.9850) : injectionSwitch.y))))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false)))) || _GLF_IDENTITY(false, ! (! (false))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         atomicStore(checker[GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.x], read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), clamp((0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) | ((0 << _GLF_IDENTITY(int(6), int(6)))))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & _GLF_IDENTITY(-4329, (_GLF_IDENTITY(-4329, (-4329) + 0)) * 1)), ! (! (_injected_loop_counter > (_GLF_IDENTITY(0, (0) ^ 0) & -4329))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > _GLF_IDENTITY((0 & -4329), max((0 & -4329), _GLF_IDENTITY((0 & -4329), (_GLF_IDENTITY((0 & -4329), max((0 & -4329), _GLF_IDENTITY((0 & -4329), 0 | ((0 & -4329)))))) >> 0))), _GLF_IDENTITY(! (! (_injected_loop_counter > (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(31915) : 0)) & -4329))), bool(bvec4(! (! (_injected_loop_counter > (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(31915) : 0)) & -4329))), false, true, false))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 & -4329), _GLF_IDENTITY((_injected_loop_counter > (0 & -4329)), ((_injected_loop_counter > (0 & -4329))) || false) && true), ! (! (_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))) & -4329), 0 ^ ((_GLF_IDENTITY(0, (0) / int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y))) & -4329))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -4329), ! (! (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))) > (0 & -4329)))))))))))) && true); _injected_loop_counter --)
      {
       subgroupAll(false);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) - _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(-7262.8666)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true, true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), false, true, false))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0))) || false)) && true)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 | 1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size, (GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size) / uvec3(1u, 1u, 1u)).x], read, 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))
        barrier();
       barrier();
      }
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))), true, true)), bool(bvec3(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))), true, true)), true, true)))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) << 0)))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}
