#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup;
 uvec4 GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec4 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))) : _GLF_FUZZED(15387)))), 0 | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))) : _GLF_FUZZED(15387)))))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4))), ! (! (_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.3)), bool(false))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, sqrt(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2818.7656)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0)))))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, log(1.0), 1.0, 1.0))) > injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), ((~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_4_1_1_13readsubgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_4_1_1_13readsubgroup_base;
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.z = subgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.y = GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.z;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), false || (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w = subgroup_local_id;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.z = GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.z;
 _GLF_IDENTITY(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true)), (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.y = GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.w;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.y = workgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.w = workgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.w = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.w = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.w;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.y * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.w;
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.z = workgroup_base;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
    }
   GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.z;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.y = subgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.y = GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.y;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, sqrt(0.0), 0.0, 1.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(sqrt(1.0), float(mat2(sqrt(1.0), 0.0, 1.0, 1.0))), 1.0, 1.0))) > injectionSwitch.y))));
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))
  {
   GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.y = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id)))).y;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.w = virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.w;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true)))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy) >> uvec2(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)).y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.y), uint(uint(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z, (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z) ^ 0u), GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z)), (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z) | 0u) + GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.y)))))) + ((_GLF_IDENTITY(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, (GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw) >> uvec2(0u, 0u)).x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y);
 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.z = next_virtual_gid;
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.x = GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.z;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_baseworkgroup_baseworkgroup_id.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.x = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.x), (true ? ~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id)).x), (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w, (GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w) - 0u)) | (GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.w))) : (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_id.x))) : _GLF_FUZZED(22887u)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-90.72), _GLF_FUZZED(_GLF_IDENTITY(4.8, max(_GLF_IDENTITY(4.8, 0.0 + (4.8)), 4.8)))), vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), _GLF_IDENTITY(true, ! (! (true)))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && ((true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5382.4961)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.x = read;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
  barrier();
 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.x = GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_17readsubgroup_basesubgroup_idsubgroup_local_id.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true), false, false)), (bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true), false, false))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), (clamp(0.0, 0.0, 0.0)) / 1.0))))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), vec2(mat2x4(min(injectionSwitch, injectionSwitch), sqrt(0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), min(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-6.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), (vec2(_GLF_FUZZED(-6.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])))) / vec2(1.0, 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(8.2)), bvec2(true, false))), vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), vec2(1.0, 1.0) * (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))))))))).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.x = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.x;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (~ (~ 68153)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), clamp(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), clamp(mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-2.4)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)) : _GLF_FUZZED(13.26))))), float(_GLF_FUZZED(1235.3867)), bool(false)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-2.4), (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)) - log(1.0))))), float(_GLF_FUZZED(1235.3867)), bool(false)), float(mat2x4(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(_GLF_IDENTITY(1235.3867, clamp(1235.3867, 1235.3867, _GLF_IDENTITY(1235.3867, float(mat2(1235.3867, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))))))), bool(false)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), clamp(false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), _GLF_IDENTITY(false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-2.4), cos(0.0) * (_GLF_FUZZED(-2.4)))))), float(_GLF_FUZZED(1235.3867)), bool(false)), _GLF_IDENTITY(float(mat2x3(false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), 0.0, 0.0, 0.0, 0.0, 1.0)), (float(mat2x3(false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), 0.0, 0.0, 0.0, 0.0, 1.0))) / 1.0)), false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)))))), mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-2.4), (_GLF_FUZZED(-2.4)) / 1.0)))), float(_GLF_FUZZED(1235.3867)), bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), clamp(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_IDENTITY(_GLF_FUZZED(1235.3867), (true ? _GLF_FUZZED(1235.3867) : _GLF_FUZZED(5.7)))), bool(false)), clamp(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))) / vec2(1.0, 1.0)).y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), float(mat2x4(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)))), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-2.4), (true ? _GLF_FUZZED(-2.4) : _GLF_FUZZED(1946.1099)))))), mix(float(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-2.4), (true ? _GLF_FUZZED(-2.4) : _GLF_FUZZED(1946.1099))))))), float(_GLF_FUZZED(57.68)), bool(false))), float(_GLF_FUZZED(1235.3867)), bool(false)), (false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true))))) ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(-2.4, 1.0 * (-2.4)))))), float(_GLF_FUZZED(1235.3867)), bool(false)))), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), clamp(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), clamp(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(_GLF_IDENTITY(1235.3867, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(66.37) : 1235.3867), float(mat2x4((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(66.37) : 1235.3867), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))), bool(false)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(_GLF_IDENTITY(1235.3867, (1235.3867) / 1.0))), bool(false)), float(mat2x4(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0, 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_FUZZED(1235.3867)), bool(false)), (false ? _GLF_FUZZED(-2.9) : mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) ? injectionSwitch.y : _GLF_FUZZED(-2.4)), (false ? _GLF_FUZZED(-35.90) : (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) ? injectionSwitch.y : _GLF_FUZZED(-2.4)))))), float(_GLF_FUZZED(1235.3867)), bool(false)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.4)))), float(_GLF_IDENTITY(_GLF_FUZZED(1235.3867), (_GLF_FUZZED(1235.3867)) * 1.0)), bool(false))))) - 0.0)) * 1.0)), injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if((GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x % 2) == _GLF_IDENTITY(0, 0 + (0)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))
                barrier();
               barrier();
              }
            }
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), true && (_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ((! (_GLF_WRAPPED_LOOP(false)))) || false))))))));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, false))))))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), false)))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mix(vec2((min(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(0, (0) * 1)], (min(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(7032.9722), _GLF_FUZZED(1.7)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))), (true ? vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch)))).y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 1 * (6))))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                    {
                     for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-16468 & (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7)))))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (false))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 + (1))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)), mix(vec2(_GLF_IDENTITY((vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)))[0], max((vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)))[0], (vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)))[0])), (vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)))[1]), vec2(_GLF_FUZZED((+ -2.2)), _GLF_FUZZED(-1.8)), bvec2(false, false))), max(vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)), vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(3.3)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1)))); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.x = atomicLoad(_GLF_IDENTITY(buf[GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y], clamp(buf[GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y], buf[GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y], buf[GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y])), 4, 64, 2);
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))));
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), ((0 >> _GLF_IDENTITY(int(6), int(6)))) ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 subgroupAll(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.x = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, clamp(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, _GLF_IDENTITY(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, (GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid) << uvec4(0u, 0u, 0u, 0u)).zw, GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw)).y], (buf[_GLF_IDENTITY(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, clamp(GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw)).y]) << 0u), 4, 64, 2);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     subgroupBarrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, true))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-817.925)))))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), false || (_GLF_IDENTITY(! (_injected_loop_counter > 0), false || (! (_injected_loop_counter > 0)))))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   atomicStore(checker[GLF_merged2_0_2_55_2_2_53GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y], GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_4_1_1_13readsubgroup_basenext_virtual_gidnum_workgroup.xy.x, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
}
