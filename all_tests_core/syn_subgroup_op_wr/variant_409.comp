#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_17 {
 mat2x3 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
 uvec2 _f1;
 mat2 _f2;
 uint _f3;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 float _f3;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
 bvec2 _f1;
 vec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 uvec2 _f1;
 bool _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_15 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 mat3x4 _f2;
 uvec2 _f3;
 _GLF_struct_13 _f4;
 ivec2 _f5;
 uint workgroup_id;
 _GLF_struct_14 _f6;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 bvec4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 uvec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_6 {
 int _f0;
 bool _f1;
 bvec3 _f2;
 mat2x4 _f3;
 bool _f4;
 vec3 _f5;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 vec3 _f1;
 _GLF_struct_6 _f2;
 uint _f3;
 bvec3 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 mat2x3 _f1;
 bool _f2;
 mat3x2 _f3;
 bvec2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 vec4 _f1;
 bool _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 uvec3 _f1;
 mat2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_1 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_15 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-488.742)), vec2(_GLF_FUZZED(-22.28), (injectionSwitch)[1]), bvec2(false, true))).y)), _GLF_IDENTITY(false, bool(bool(false))) || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0)), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0)), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0))))))), bool(bool((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0)), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0))))))))))), ! (! (! (_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0)), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0))))))), bool(bool((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0)), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))), mat3x2(mat3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))))) - 0.0))))))))))))))))) || (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))) || false), false, false))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false || (_GLF_IDENTITY(false, ! (! (false))))), ! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)))
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, (true ? _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x : _GLF_FUZZED(-3.4))))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1626.8885)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1626.8885)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1626.8885)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1626.8885)), bool(false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1013.8225, 4548.2309)) : injectionSwitch)).x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -53452)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)), ! _GLF_IDENTITY((! (bool(bvec2(false, false)))), bool(bool((! (bool(bvec2(false, false)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * cos(vec2(0.0, 0.0))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  barrier();
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_1(_GLF_struct_0(mat3x2(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), min(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_IDENTITY(1.0, (1.0) / 1.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-83.99)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-83.99)), mix(float(_GLF_FUZZED(726.365)), float(float(_GLF_FUZZED(-83.99))), bool(true))), float(_GLF_FUZZED(-83.99)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), min(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) | (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))) + uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))))), mat2(1.0), mat3(1.0)), mat2x4(1.0)), _GLF_struct_5(mat2(1.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0)), true, _GLF_struct_2(mat2(1.0), mat3x4(1.0), mat4x3(1.0)), _GLF_struct_3(bvec3(true), mat2x3(_GLF_IDENTITY(1.0, float(vec4(1.0, abs(1.0), 0.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))), ((true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) || false), mat3x2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), _GLF_IDENTITY(bvec2(true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), bvec2(bvec3(bvec2(true), false)))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), bvec2(bvec3(bvec2(true), false))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), bvec2(bvec3(bvec2(true), false))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), bvec2(bvec3(bvec2(true), false))))))), true, false)))))))), false))), true))), ivec2(1)), _GLF_struct_4(mat2x3(1.0)), mat3(1.0)), _GLF_struct_8(vec4(1.0), vec3(1.0), _GLF_struct_6(1, true, bvec3(true), mat2x4(1.0), true, vec3(1.0)), 1u, bvec3(true), _GLF_struct_7(mat4(1.0), mat2x4(1.0), bvec3(true), uvec2(1u), bvec3(true))), _GLF_struct_10(_GLF_struct_9(vec4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false)))), bvec4(true), mat3x2(1.0)), _GLF_struct_15(_GLF_struct_11(mat3x4(1.0), uvec2(1u), true, mat4x3(1.0)), _GLF_struct_12(bvec2(true), bvec2(true), vec4(1.0), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-75.93), max(true ? 1.0 : _GLF_FUZZED(-75.93), _GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-75.93))))), 1.0), (_GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-75.93), max(true ? 1.0 : _GLF_FUZZED(-75.93), _GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-75.93))))), 1.0), float(mat3x2(clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-75.93), max(true ? 1.0 : _GLF_FUZZED(-75.93), _GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-75.93))))), 1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0)))) + 0.0), mix(float(_GLF_FUZZED(40.29)), float(clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-75.93), max(true ? 1.0 : _GLF_FUZZED(-75.93), _GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-75.93))), mix(float(_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-75.93), max(true ? 1.0 : _GLF_FUZZED(-75.93), _GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-75.93)))), float(_GLF_FUZZED(58.13)), bool(false))))), 1.0)), bool(true)))))), mat3x4(1.0), uvec2(_GLF_IDENTITY(1u, (1u) | 0u)), _GLF_struct_13(bvec2(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), bool(bvec2((! (true)), true)))) || false))), ivec3(_GLF_IDENTITY(1, 0 + (1))), mat3x4(1.0), 1.0), ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))), (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))) * uvec3(1u, 1u, 1u))), (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))), (uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))) * uvec3(1u, 1u, 1u)))) << uvec3(0u, 0u, 0u))).x, _GLF_struct_14(mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), float(mat2x3(_GLF_FUZZED(-9037.2914), 0.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(9.8)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))))), _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 1.0)), max(float(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), float(mat2x3(_GLF_FUZZED(_GLF_IDENTITY(-9037.2914, max(_GLF_IDENTITY(-9037.2914, (-9037.2914) * 1.0), -9037.2914))), 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(79.65)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bool(true), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(bool(true), true, true))), false)))))))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0))), 1.0)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), float(mat2x3(_GLF_FUZZED(-9037.2914), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 1.0))))), 1.0)), clamp(float(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), float(mat2x3(_GLF_FUZZED(_GLF_IDENTITY(-9037.2914, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0)), (mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(84.22) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0)), (mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? float(_GLF_IDENTITY(mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0)), (mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(235.267))))), mix(float(_GLF_FUZZED(-509.626)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0)), (mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(84.22) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0)), (mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? float(_GLF_IDENTITY(mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0)), (mat3x4(-9037.2914, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, exp(0.0), 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(1.0, 0.0))), sqrt(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(235.267)))))), bool(true))))), 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))), 1.0)), float(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), float(mat2x3(_GLF_FUZZED(-9037.2914), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))), 1.0)), float(vec2(_GLF_IDENTITY(_GLF_FUZZED(-9037.2914), float(mat2x3(_GLF_FUZZED(-9037.2914), 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))), 1.0)))))))), float(1.0), bool(true)))), _GLF_IDENTITY(uvec2(1u), uvec2(uvec4(uvec2(1u), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))), mat2(1.0), _GLF_IDENTITY(1u, 0u | (1u)))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) * vec2(1.0, 1.0)).y)) || ((! (false))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(! (false), (! (false)) || false))))))), true))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, max(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, clamp(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id))))), (uint(_GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, max(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, clamp(workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id, workgroup_size * _GLF_struct_replacement_16._f4.workgroup_id)))))) | 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), (mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), _GLF_IDENTITY((mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0), mat2(0.0, 0.0, 0.0, 0.0) + ((mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))) + 0.0)))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(! (! (injectionSwitch.x > injectionSwitch.y))), (bool(! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))), ! (! (bool(_GLF_IDENTITY(bool(! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(! (! (injectionSwitch.x > injectionSwitch.y))), (bool(! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1], min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]))), vec2(_GLF_FUZZED(-877.595), _GLF_FUZZED((-7.6 + -8.2))), bvec2(false, false))).x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), (mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), _GLF_IDENTITY((mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0), mat2(0.0, 0.0, 0.0, 0.0) + ((mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))) + 0.0))), ! (! (true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0), (mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), _GLF_IDENTITY((mat2(injectionSwitch.y, 1.0, 1.0, 1.0)) - mat2(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + ((_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(mat3x4(-993.026, 2.3, 6.1, -2513.2004, -4.5, 86.25, -9.8, 2.7, 4.1, -2503.7030, 8.4, 5.6))) : mat2(injectionSwitch.y, 1.0, 1.0, 1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))) + 0.0))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))).x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))).x > injectionSwitch.y)) || false) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
      }
     barrier();
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(mat2x3(1.0), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), min(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u))) % subgroup_size, 0u + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u) % subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u)))), 0u, 0u)), 0u ^ (uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u)))), 0u, 0u)))), min(uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED((22559 / -13153)) : 1))) % subgroup_size), 0u, 0u)), uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 0), (false ? _GLF_FUZZED(ivec3(-31892, 98985, -62901)) : ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 0)))))) % subgroup_size), 0u, 0u))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_17.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_17.next_virtual_gid, _GLF_IDENTITY((_GLF_struct_replacement_17.next_virtual_gid) * 1u, ((_GLF_struct_replacement_17.next_virtual_gid) * 1u) * 1u))) - 0u)], uint(1), _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, (4) - 0)))), _GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), _GLF_IDENTITY(min(64, 64), (false ? _GLF_FUZZED(7383) : min(64, 64))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), _GLF_IDENTITY(min(64, 64), (false ? _GLF_FUZZED(7383) : min(64, 64))))), 1 * (_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), _GLF_IDENTITY(min(64, 64), (false ? _GLF_FUZZED(7383) : min(_GLF_IDENTITY(64, int(ivec2(64, 0))), 64))))))) : _GLF_FUZZED(68144)))))), 4);
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (buf[virtual_gid])), _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), min(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(4, min(4, 4)))), 64, 0);
 if(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)) < subgroup_size)
  {
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((+ -1.2))), float(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))); _injected_loop_counter --)
    {
     do
      {
       atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) / _GLF_IDENTITY(1u, 0u | (1u)))], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) - 0), max(4, 4)), 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(findLSB(virtual_gid)) : _injected_loop_counter --)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9704.5909), _GLF_FUZZED(920.359)), vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) + 0.0)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (bool(bool(_GLF_IDENTITY(false, (false) || false)))) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(42.64), _GLF_FUZZED(151.531)), bvec2(false, false))).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-921.055, 0.1)))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, false)))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, false)))))), false || (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || ((false))))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 1) | 0)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, 0u | (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED((true ? subgroup_size : read))))))), _GLF_IDENTITY(((_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ((39274u - 47827u) & 0u) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u)))), (_GLF_IDENTITY(((_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ((39274u - 47827u) & 0u) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u)))), (((_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ((39274u - 47827u) & 0u) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u))))) | (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(((_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ((39274u - 47827u) & 0u) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u)))), (((_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ((39274u - 47827u) & 0u) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u))))) | (((_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ((39274u - 47827u) & 0u) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) << 0u))))))))) << _GLF_IDENTITY(0u, (0u) | (0u)))) + 0u)], _GLF_IDENTITY(read, (read) - 0u), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x > injectionSwitch.y), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x > injectionSwitch.y), true), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x > injectionSwitch.y), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x > injectionSwitch.y), true), false))))))))))
    barrier();
   subgroupAll(true);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y, (false ? _GLF_FUZZED(713.160) : injectionSwitch.y))))))
    barrier();
  }
}
